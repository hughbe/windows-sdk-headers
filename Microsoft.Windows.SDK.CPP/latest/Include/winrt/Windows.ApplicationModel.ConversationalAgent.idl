//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Windows.Media.Audio.idl";

// Forward Declare
namespace Windows
{
    namespace Foundation
    {
        interface IClosable;

        typedef struct TimeSpan TimeSpan;

        apicontract UniversalApiContract;
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Audio
        {
            runtimeclass AudioDeviceInputNode;

            runtimeclass AudioGraph;
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        namespace ConversationalAgent
        {
            typedef enum ConversationalAgentSessionUpdateResponse ConversationalAgentSessionUpdateResponse;

            typedef enum ConversationalAgentState ConversationalAgentState;

            typedef enum ConversationalAgentSystemStateChangeType ConversationalAgentSystemStateChangeType;

            interface IConversationalAgentSession;

            interface IConversationalAgentSessionInterruptedEventArgs;

            interface IConversationalAgentSessionStatics;

            interface IConversationalAgentSignal;

            interface IConversationalAgentSignalDetectedEventArgs;

            interface IConversationalAgentSystemStateChangedEventArgs;

            runtimeclass ConversationalAgentSession;

            runtimeclass ConversationalAgentSessionInterruptedEventArgs;

            runtimeclass ConversationalAgentSignal;

            runtimeclass ConversationalAgentSignalDetectedEventArgs;

            runtimeclass ConversationalAgentSystemStateChangedEventArgs;
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace ApplicationModel
    {
        namespace ConversationalAgent
        {
            declare
            {
                interface Windows.Foundation.IAsyncOperation<Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession*>;

                interface Windows.Foundation.IAsyncOperation<Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse>;

                interface Windows.Foundation.TypedEventHandler<Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession*, Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionInterruptedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession*, Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSignalDetectedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession*, Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSystemStateChangedEventArgs*>;
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace ApplicationModel
    {
        namespace ConversationalAgent
        {
            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            enum ConversationalAgentSessionUpdateResponse
            {
                Success = 0,
                Failed  = 1
            };

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            enum ConversationalAgentState
            {
                Inactive             = 0,
                Detecting            = 1,
                Listening            = 2,
                Working              = 3,
                Speaking             = 4,
                ListeningAndSpeaking = 5
            };

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            enum ConversationalAgentSystemStateChangeType
            {
                UserAuthentication          = 0,
                ScreenAvailability          = 1,
                IndicatorLightAvailability  = 2,
                VoiceActivationAvailability = 3
            };

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [exclusiveto(Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession)]
            [uuid(DAAAE09A-B7BA-57E5-AD13-DF520F9B6FA7)]
            interface IConversationalAgentSession : IInspectable
            {
                [eventadd] HRESULT SessionInterrupted([in] Windows.Foundation.TypedEventHandler<Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession*, Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionInterruptedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT SessionInterrupted([in] EventRegistrationToken token);
                [eventadd] HRESULT SignalDetected([in] Windows.Foundation.TypedEventHandler<Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession*, Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSignalDetectedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT SignalDetected([in] EventRegistrationToken token);
                [eventadd] HRESULT SystemStateChanged([in] Windows.Foundation.TypedEventHandler<Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession*, Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSystemStateChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT SystemStateChanged([in] EventRegistrationToken token);
                [propget] HRESULT AgentState([out] [retval] Windows.ApplicationModel.ConversationalAgent.ConversationalAgentState* value);
                [propget] HRESULT Signal([out] [retval] Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSignal** value);
                [propget] HRESULT IsIndicatorLightAvailable([out] [retval] boolean* value);
                [propget] HRESULT IsScreenAvailable([out] [retval] boolean* value);
                [propget] HRESULT IsUserAuthenticated([out] [retval] boolean* value);
                [propget] HRESULT IsVoiceActivationAvailable([out] [retval] boolean* value);
                [propget] HRESULT IsInterruptible([out] [retval] boolean* value);
                [propget] HRESULT IsInterrupted([out] [retval] boolean* value);
                HRESULT RequestInterruptibleAsync([in] boolean interruptible, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse>** operation);
                HRESULT RequestInterruptible([in] boolean interruptible, [out] [retval] Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse* result);
                HRESULT RequestAgentStateChangeAsync([in] Windows.ApplicationModel.ConversationalAgent.ConversationalAgentState state, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse>** operation);
                HRESULT RequestAgentStateChange([in] Windows.ApplicationModel.ConversationalAgent.ConversationalAgentState state, [out] [retval] Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse* result);
                HRESULT RequestForegroundActivationAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse>** operation);
                HRESULT RequestForegroundActivation([out] [retval] Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse* result);
                HRESULT GetAudioClientAsync([out] [retval] Windows.Foundation.IAsyncOperation<IInspectable*>** operation);
                HRESULT GetAudioClient([out] [retval] IInspectable** result);
                HRESULT CreateAudioDeviceInputNodeAsync([in] Windows.Media.Audio.AudioGraph* graph, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Audio.AudioDeviceInputNode*>** operation);
                HRESULT CreateAudioDeviceInputNode([in] Windows.Media.Audio.AudioGraph* graph, [out] [retval] Windows.Media.Audio.AudioDeviceInputNode** result);
                HRESULT GetAudioCaptureDeviceIdAsync([out] [retval] Windows.Foundation.IAsyncOperation<HSTRING>** operation);
                HRESULT GetAudioCaptureDeviceId([out] [retval] HSTRING* result);
                HRESULT GetAudioRenderDeviceIdAsync([out] [retval] Windows.Foundation.IAsyncOperation<HSTRING>** operation);
                HRESULT GetAudioRenderDeviceId([out] [retval] HSTRING* result);
                HRESULT GetSignalModelIdAsync([out] [retval] Windows.Foundation.IAsyncOperation<UINT32>** operation);
                HRESULT GetSignalModelId([out] [retval] UINT32* result);
                HRESULT SetSignalModelIdAsync([in] UINT32 signalModelId, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                HRESULT SetSignalModelId([in] UINT32 signalModelId, [out] [retval] boolean* result);
                HRESULT GetSupportedSignalModelIdsAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<UINT32>*>** operation);
                HRESULT GetSupportedSignalModelIds([out] [retval] Windows.Foundation.Collections.IVectorView<UINT32>** result);
            }

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [exclusiveto(Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionInterruptedEventArgs)]
            [uuid(9766591F-F63D-5D3E-9BF2-BD0760552686)]
            interface IConversationalAgentSessionInterruptedEventArgs : IInspectable
            {
            }

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [exclusiveto(Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession)]
            [uuid(A005166E-E954-576E-BE04-11B8ED10F37B)]
            interface IConversationalAgentSessionStatics : IInspectable
            {
                HRESULT GetCurrentSessionAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession*>** operation);
                HRESULT GetCurrentSessionSync([out] [retval] Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession** result);
            }

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [exclusiveto(Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSignal)]
            [uuid(20ED25F7-B120-51F2-8603-265D6A47F232)]
            interface IConversationalAgentSignal : IInspectable
            {
                [propget] HRESULT IsSignalVerificationRequired([out] [retval] boolean* value);
                [propput] HRESULT IsSignalVerificationRequired([in] boolean value);
                [propget] HRESULT SignalId([out] [retval] HSTRING* value);
                [propput] HRESULT SignalId([in] HSTRING value);
                [propget] HRESULT SignalName([out] [retval] HSTRING* value);
                [propput] HRESULT SignalName([in] HSTRING value);
                [propget] HRESULT SignalContext([out] [retval] IInspectable** value);
                [propput] HRESULT SignalContext([in] IInspectable* value);
                [propget] HRESULT SignalStart([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT SignalStart([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT SignalEnd([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT SignalEnd([in] Windows.Foundation.TimeSpan value);
            }

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [exclusiveto(Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSignalDetectedEventArgs)]
            [uuid(4D57EB8F-F88A-599B-91D3-D604876708BC)]
            interface IConversationalAgentSignalDetectedEventArgs : IInspectable
            {
            }

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [exclusiveto(Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSystemStateChangedEventArgs)]
            [uuid(1C2C6E3E-2785-59A7-8E71-38ADEEF79928)]
            interface IConversationalAgentSystemStateChangedEventArgs : IInspectable
            {
                [propget] HRESULT SystemStateChangeType([out] [retval] Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSystemStateChangeType* value);
            }

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [marshaling_behavior(agile)]
            [static(Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSessionStatics, Windows.Foundation.UniversalApiContract, 8.0)]
            [threading(both)]
            runtimeclass ConversationalAgentSession
            {
                [default] interface Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSession;
                interface Windows.Foundation.IClosable;
            }

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [marshaling_behavior(agile)]
            runtimeclass ConversationalAgentSessionInterruptedEventArgs
            {
                [default] interface Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSessionInterruptedEventArgs;
            }

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [marshaling_behavior(agile)]
            runtimeclass ConversationalAgentSignal
            {
                [default] interface Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSignal;
            }

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [marshaling_behavior(agile)]
            runtimeclass ConversationalAgentSignalDetectedEventArgs
            {
                [default] interface Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSignalDetectedEventArgs;
            }

            [contract(Windows.Foundation.UniversalApiContract, 8.0)]
            [marshaling_behavior(agile)]
            runtimeclass ConversationalAgentSystemStateChangedEventArgs
            {
                [default] interface Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSystemStateChangedEventArgs;
            }
        }
    }
}
