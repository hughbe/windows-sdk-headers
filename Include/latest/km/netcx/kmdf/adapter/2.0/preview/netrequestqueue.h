// Copyright (C) Microsoft Corporation. All rights reserved.

//
// NOTE: This header is generated by stubwork.  Please make any 
//       modifications to the corresponding template files 
//       (.x or .y) and use stubwork to regenerate the header
//

#ifndef _NETREQUESTQUEUEPREVIEW_2_0_H_
#define _NETREQUESTQUEUEPREVIEW_2_0_H_

#ifndef WDF_EXTERN_C
  #ifdef __cplusplus
    #define WDF_EXTERN_C       extern "C"
    #define WDF_EXTERN_C_START extern "C" {
    #define WDF_EXTERN_C_END   }
  #else
    #define WDF_EXTERN_C
    #define WDF_EXTERN_C_START
    #define WDF_EXTERN_C_END
  #endif
#endif

WDF_EXTERN_C_START


typedef enum _NET_REQUEST_QUEUE_TYPE {
    NetRequestQueueTypeInvalid = 0,
    NetRequestQueueDefaultSequential,
    NetRequestQueueDefaultParallel,
} NET_REQUEST_QUEUE_TYPE;



#define HANDLER_TAG 'rldH'


DECLARE_HANDLE(NETREQUESTQUEUE);


typedef
_Function_class_(EVT_NET_REQUEST_DEFAULT_SET_DATA)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
void
NTAPI
EVT_NET_REQUEST_DEFAULT_SET_DATA(
    _In_
    NETREQUESTQUEUE RequestQueue,
    _In_
    NETREQUEST Request,
    _In_
    NDIS_OID Oid,
    _In_reads_bytes_(InputBufferLength)
    void * InputBuffer,
    _In_
    UINT InputBufferLength
);

typedef EVT_NET_REQUEST_DEFAULT_SET_DATA *PFN_NET_REQUEST_DEFAULT_SET_DATA;

typedef
_Function_class_(EVT_NET_REQUEST_SET_DATA)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
void
NTAPI
EVT_NET_REQUEST_SET_DATA(
    _In_
    NETREQUESTQUEUE RequestQueue,
    _In_
    NETREQUEST Request,
    _In_reads_bytes_(InputBufferLength)
    void * InputBuffer,
    _In_
    UINT InputBufferLength
);

typedef EVT_NET_REQUEST_SET_DATA *PFN_NET_REQUEST_SET_DATA;

typedef
_Function_class_(EVT_NET_REQUEST_DEFAULT_QUERY_DATA)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
void
NTAPI
EVT_NET_REQUEST_DEFAULT_QUERY_DATA(
    _In_
    NETREQUESTQUEUE RequestQueue,
    _In_
    NETREQUEST Request,
    _In_
    NDIS_OID Oid,
    _Out_writes_bytes_(OutputBufferLength)
    void * OutputBuffer,
    _In_
    UINT OutputBufferLength
);

typedef EVT_NET_REQUEST_DEFAULT_QUERY_DATA *PFN_NET_REQUEST_DEFAULT_QUERY_DATA;

typedef
_Function_class_(EVT_NET_REQUEST_QUERY_DATA)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
void
NTAPI
EVT_NET_REQUEST_QUERY_DATA(
    _In_
    NETREQUESTQUEUE RequestQueue,
    _In_
    NETREQUEST Request,
    _Out_writes_bytes_(OutputBufferLength)
    void * OutputBuffer,
    _In_
    UINT OutputBufferLength
);

typedef EVT_NET_REQUEST_QUERY_DATA *PFN_NET_REQUEST_QUERY_DATA;

typedef
_Function_class_(EVT_NET_REQUEST_DEFAULT_METHOD)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
void
NTAPI
EVT_NET_REQUEST_DEFAULT_METHOD(
    _In_
    NETREQUESTQUEUE RequestQueue,
    _In_
    NETREQUEST Request,
    _In_
    NDIS_OID Oid,
    _Pre_writable_byte_size_(OutputBufferLength)
    _Pre_readable_byte_size_(InputBufferLength)
    _Post_readable_byte_size_(OutputBufferLength)
    void * InputOutputBuffer,
    _In_
    UINT InputBufferLength,
    _In_
    UINT OutputBufferLength
);

typedef EVT_NET_REQUEST_DEFAULT_METHOD *PFN_NET_REQUEST_DEFAULT_METHOD;

typedef
_Function_class_(EVT_NET_REQUEST_METHOD)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
void
NTAPI
EVT_NET_REQUEST_METHOD(
    _In_
    NETREQUESTQUEUE RequestQueue,
    _In_
    NETREQUEST Request,
    _Pre_writable_byte_size_(OutputBufferLength)
    _Pre_readable_byte_size_(InputBufferLength)
    _Post_readable_byte_size_(OutputBufferLength)
    void * InputOutputBuffer,
    _In_
    UINT InputBufferLength,
    _In_
    UINT OutputBufferLength
);

typedef EVT_NET_REQUEST_METHOD *PFN_NET_REQUEST_METHOD;

typedef
_Function_class_(EVT_NET_REQUEST_DEFAULT)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
void
NTAPI
EVT_NET_REQUEST_DEFAULT(
    _In_
    NETREQUESTQUEUE RequestQueue,
    _In_
    NETREQUEST Request,
    _In_
    NDIS_REQUEST_TYPE RequestType,
    _In_
    NDIS_OID Oid,
    _Pre_writable_byte_size_(OutputBufferLength)
    _Pre_readable_byte_size_(InputBufferLength)
    _Post_readable_byte_size_(OutputBufferLength)
    void * InputOutputBuffer,
    _In_
    UINT InputBufferLength,
    _In_
    UINT OutputBufferLength
);

typedef EVT_NET_REQUEST_DEFAULT *PFN_NET_REQUEST_DEFAULT;

struct _NET_REQUEST_QUEUE_SET_DATA_HANDLER;
typedef struct _NET_REQUEST_QUEUE_SET_DATA_HANDLER NET_REQUEST_QUEUE_SET_DATA_HANDLER;

typedef struct _NET_REQUEST_QUEUE_SET_DATA_HANDLER {
    //
    // Pointer to the Next Handler
    //
    NET_REQUEST_QUEUE_SET_DATA_HANDLER * Next;

    //
    // The WDFMEMORY object backing this memory
    //
    WDFMEMORY                           Memory;

    //
    // The Request Identifier
    //
    NDIS_OID                            Oid;

    //
    // Pointer to the set handler callback
    //
    PFN_NET_REQUEST_SET_DATA            EvtRequestSetData;

    //
    // Minimum input length needed by the client for this request.
    //
    UINT                                MinimumInputLength;

    //
    // Minimum output length needed by the client for this request.
    //
    UINT                                MinimumOutputLength;
} NET_REQUEST_QUEUE_SET_DATA_HANDLER;

inline
void
NET_REQUEST_QUEUE_SET_DATA_HANDLER_INIT(
    _Out_ NET_REQUEST_QUEUE_SET_DATA_HANDLER *  SetDataHandler,
    _In_  NDIS_OID                             Oid,
    _In_  PFN_NET_REQUEST_SET_DATA             EvtRequestSetData,
    _In_  UINT                                 MinimumInputLength
)
/*++
Routine Description:

    This initializer is called by the clients to initalize a
    NET_REQUEST_QUEUE_SET_DATA_HANDLER structure.

Arguments:

    SetDataHandler - Pointer to a caller initialized NET_REQUEST_QUEUE_SET_DATA_HANDLER structure

    Oid - The NDIS_OID identifier for the request.

    EvtRequestSetData - Pointer to the custom Set Request Handler

    MinimumInputLength - The needed minimum input length for the request.

--*/
{
    RtlZeroMemory(SetDataHandler, sizeof(*SetDataHandler));
    SetDataHandler->Oid = Oid;
    SetDataHandler->EvtRequestSetData = EvtRequestSetData;
    SetDataHandler->MinimumInputLength = MinimumInputLength;
}

struct _NET_REQUEST_QUEUE_QUERY_DATA_HANDLER;
typedef struct _NET_REQUEST_QUEUE_QUERY_DATA_HANDLER NET_REQUEST_QUEUE_QUERY_DATA_HANDLER;

typedef struct _NET_REQUEST_QUEUE_QUERY_DATA_HANDLER {
    //
    // Pointer to the Next Custom Handler
    //
    NET_REQUEST_QUEUE_QUERY_DATA_HANDLER * Next;

    //
    // The WDFMEMORY object backing this memory
    //
    WDFMEMORY                           Memory;

    //
    // The Request Identifier
    //
    NDIS_OID                              Oid;

    //
    // Pointer to the custom query handler callback
    //
    PFN_NET_REQUEST_QUERY_DATA            EvtRequestQueryData;

    //
    // Minimum input length needed by the client for this request.
    //
    UINT                                  MinimumInputLength;

    //
    // Minimum output length needed by the client for this request.
    //
    UINT                                  MinimumOutputLength;
} NET_REQUEST_QUEUE_QUERY_DATA_HANDLER;

inline
void
NET_REQUEST_QUEUE_QUERY_DATA_HANDLER_INIT(
    _Out_ NET_REQUEST_QUEUE_QUERY_DATA_HANDLER * QueryDataHandler,
    _In_  NDIS_OID                              Oid,
    _In_  PFN_NET_REQUEST_QUERY_DATA            EvtRequestQueryData,
    _In_  UINT                                  MinimumOutputLength
)
/*++
Routine Description:

    This initializer is called by the clients to initalize a
    NET_REQUEST_QUEUE_QUERY_DATA_HANDLER structure.

Arguments:

    SetDataHandler - Pointer to a caller initialized NET_REQUEST_QUEUE_QUERY_DATA_HANDLER structure

    Oid - The NDIS_OID identifier for the request.

    EvtRequestQueryData - Pointer to the custom Query Request Handler

    MinimumOuputLength - The needed minimum output length for the request.

--*/
{
    RtlZeroMemory(QueryDataHandler, sizeof(*QueryDataHandler));
    QueryDataHandler->Oid = Oid;
    QueryDataHandler->EvtRequestQueryData = EvtRequestQueryData;
    QueryDataHandler->MinimumOutputLength = MinimumOutputLength;
}

struct _NET_REQUEST_QUEUE_METHOD_HANDLER;
typedef struct _NET_REQUEST_QUEUE_METHOD_HANDLER NET_REQUEST_QUEUE_METHOD_HANDLER;

typedef struct _NET_REQUEST_QUEUE_METHOD_HANDLER {
    //
    // Pointer to the Next Custom Handler
    //
    NET_REQUEST_QUEUE_METHOD_HANDLER * Next;

    //
    // The WDFMEMORY object backing this memory
    //
    WDFMEMORY                         Memory;

    //
    // The Request Identifier
    //
    NDIS_OID                          Oid;

    //
    // Pointer to the custom method handler callback
    //
    PFN_NET_REQUEST_METHOD            EvtRequestMethod;

    //
    // Minimum input length needed by the client for this request.
    //
    UINT                              MinimumInputLength;

    //
    // Minimum output length needed by the client for this request.
    //
    UINT                              MinimumOutputLength;
} NET_REQUEST_QUEUE_METHOD_HANDLER;

inline
void
NET_REQUEST_QUEUE_METHOD_HANDLER_INIT(
    _Out_ NET_REQUEST_QUEUE_METHOD_HANDLER * MethodHandler,
    _In_  NDIS_OID                          Oid,
    _In_  PFN_NET_REQUEST_METHOD            EvtRequestMethod,
    _In_  UINT                              MinimumInputLength,
    _In_  UINT                              MinimumOutputLength
)
/*++
Routine Description:

    This initializer is called by the clients to initalize a
    NET_REQUEST_QUEUE_METHOD_HANDLER structure.

Arguments:

    MethodHandler - Pointer to a caller initialized NET_REQUEST_QUEUE_METHOD_HANDLER structure

    Oid - The NDIS_OID identifier for the request.

    EvtRequestMethod - Pointer to the custom Query Request Handler

    MinimumInputLength - The needed minimum input length for the request.

    MinimumOutputLength - The needed minimum output length for the request.

--*/
{
    RtlZeroMemory(MethodHandler, sizeof(*MethodHandler));
    MethodHandler->Oid = Oid;
    MethodHandler->EvtRequestMethod = EvtRequestMethod;
    MethodHandler->MinimumInputLength = MinimumInputLength;
    MethodHandler->MinimumOutputLength = MinimumOutputLength;
}

#pragma warning(push)
#pragma warning(disable:4201) // nonstandard extension used: nameless struct/union
#pragma warning(disable:4214) // nonstandard extension used: bit field types other than int

typedef union _NET_REQUEST_QUEUE_ADD_HANDLER_ERROR {
    struct {
        //
        // This bit indicates that an allocation error occured at the time of
        // allocating memory for the custom handler.
        //
        UCHAR AllocationFailed : 1;

        //
        // This bit indicates that the client tried to register for a custom
        // handler but provided a NULL callback routine.
        //
        UCHAR CallbackNull : 1;

        //
        // This bit indicates that the client tried to register for a custom
        // handler but didn't provide a Net adapter object.
        //
        UCHAR AdapterNull : 1;
    }
    DUMMYSTRUCTNAME;

    UCHAR AsUchar;
} NET_REQUEST_QUEUE_ADD_HANDLER_ERROR;

#pragma warning(pop)

typedef struct _NET_REQUEST_QUEUE_CONFIG {
    //
    // Size of structure.
    //
    ULONG                                   Size;

    //
    // The Handler to the NETADAPTER for which this queue is being
    // created
    //
    NETADAPTER                              Adapter;

    //
    // The Type of the Queue
    //
    NET_REQUEST_QUEUE_TYPE                  Type;

    //
    // Handler for Set Oids
    //
    PFN_NET_REQUEST_DEFAULT_SET_DATA        EvtRequestDefaultSetData;

    //
    // Handler for Query Oids
    //
    PFN_NET_REQUEST_DEFAULT_QUERY_DATA      EvtRequestDefaultQueryData;

    //
    // Handler for Method Oids
    //
    PFN_NET_REQUEST_DEFAULT_METHOD          EvtRequestDefaultMethod;

    //
    // Default Handler for Oids.
    //
    PFN_NET_REQUEST_DEFAULT                 EvtRequestDefault;

    //
    // A bit field tracking any errors encountered during Add custom handler
    // operations
    //
    NET_REQUEST_QUEUE_ADD_HANDLER_ERROR     AddHandlerError;

    //
    // This structure has a list of Set/Query/Method custom handlers.
    // Rather than storing a Size field in each entry of the list, the
    // size is stored in this structure.
    //

    //
    // Size of NET_REQUEST_QUEUE_SET_DATA_HANDLER.
    //
    ULONG                                   SizeOfSetDataHandler;

    //
    // Size of NET_REQUEST_QUEUE_QUERY_DATA_HANDLER.
    //
    ULONG                                   SizeOfQueryDataHandler;

    //
    // Size of NET_REQUEST_QUEUE_METHOD_HANDLER.
    //
    ULONG                                   SizeOfMethodHandler;

    //
    // Pointer to the first element of the Custom Set Handler list.
    //
    NET_REQUEST_QUEUE_SET_DATA_HANDLER *    SetDataHandlers;

    //
    // Pointer to the first element of the Custom Query Handler list.
    //
    NET_REQUEST_QUEUE_QUERY_DATA_HANDLER *  QueryDataHandlers;

    //
    // Pointer to the first element of the Custom Method Handler list.
    //
    NET_REQUEST_QUEUE_METHOD_HANDLER *      MethodHandlers;

} NET_REQUEST_QUEUE_CONFIG;

inline
void
NET_REQUEST_QUEUE_CONFIG_INIT(
    _Out_ NET_REQUEST_QUEUE_CONFIG * NetRequestQueueConfig,
    _In_  NETADAPTER Adapter,
    _In_  NET_REQUEST_QUEUE_TYPE QueueType
)
/*++
Routine Description:

    This initializer initializes the caller allocated NET_REQUEST_QUEUE_CONFIG structure.

Arguments:

    NetRequestQueueConfig - The pointer to the NET_REQUEST_QUEUE_CONFIG struct that
        needs to be initialized

    QueueType - The Request Queue type

--*/
{
    RtlZeroMemory(NetRequestQueueConfig, sizeof(NET_REQUEST_QUEUE_CONFIG));
    NetRequestQueueConfig->Size = sizeof(NET_REQUEST_QUEUE_CONFIG);
    NetRequestQueueConfig->Adapter = Adapter;
    NetRequestQueueConfig->Type = QueueType;

    NetRequestQueueConfig->SizeOfSetDataHandler = sizeof(NET_REQUEST_QUEUE_SET_DATA_HANDLER);
    NetRequestQueueConfig->SizeOfQueryDataHandler = sizeof(NET_REQUEST_QUEUE_QUERY_DATA_HANDLER);
    NetRequestQueueConfig->SizeOfMethodHandler = sizeof(NET_REQUEST_QUEUE_METHOD_HANDLER);
}

inline
void
NET_REQUEST_QUEUE_CONFIG_INIT_DEFAULT_SEQUENTIAL(
    _Out_ NET_REQUEST_QUEUE_CONFIG * NetRequestQueueConfig,
    _In_  NETADAPTER Adapter
)
/*++
Routine Description:

    This initializer initializes the caller allocated NET_REQUEST_QUEUE_CONFIG structure
    to create a Default Request queue.

Arguments:

    NetRequestQueueConfig - The pointer to the NET_REQUEST_QUEUE_CONFIG struct that
        needs to be initialized

--*/
{
    NET_REQUEST_QUEUE_CONFIG_INIT(NetRequestQueueConfig,
                                  Adapter,
                                  NetRequestQueueDefaultSequential);
}

inline
void
NET_REQUEST_QUEUE_CONFIG_INIT_DEFAULT_PARALLEL(
    _Out_ NET_REQUEST_QUEUE_CONFIG * NetRequestQueueConfig,
    _In_  NETADAPTER Adapter
)
/*++
Routine Description:

    This initializer initializes the caller allocated NET_REQUEST_QUEUE_CONFIG structure
    to create a direct default request queue.

Arguments:

    NetRequestQueueConfig - The pointer to the NET_REQUEST_QUEUE_CONFIG struct that
        needs to be initialized

--*/
{
    NET_REQUEST_QUEUE_CONFIG_INIT(NetRequestQueueConfig,
                                  Adapter,
                                  NetRequestQueueDefaultParallel);
}

inline
void
NET_REQUEST_QUEUE_CONFIG_ADD_INITIALIZED_SET_DATA_HANDLER(
    _In_ NET_REQUEST_QUEUE_CONFIG *             NetRequestQueueConfig,
    _In_ NET_REQUEST_QUEUE_SET_DATA_HANDLER *   SetDataHandler
)
/*++
Routine Description:
    This initializer adds a caller provided custom request handler to the Queue
    config.

Arguments:
    NetRequestQueueConfig - The pointer to the NET_REQUEST_QUEUE_CONFIG structure
        to which the custom handler is being added.

    SetDataHandler - The pointer to the caller allocated and initialized
        custom handler structured.

Remarks:

    This routine allocates memory, an operation that can fail. However to keep
    client interface simple this routine doesnt return an error. Instead a bit
    is set to track the error and thereby the subsequent call to NetRequestQueueCreate
    fails.
--*/
{
    NET_REQUEST_QUEUE_SET_DATA_HANDLER * handler;
    NTSTATUS status;
    WDF_OBJECT_ATTRIBUTES attribs;
    WDFMEMORY memory;

    if (SetDataHandler->EvtRequestSetData == NULL) {
        NetRequestQueueConfig->AddHandlerError.CallbackNull = 1;
        return;
    }

    if (NetRequestQueueConfig->Adapter == NULL) {
        NetRequestQueueConfig->AddHandlerError.AdapterNull = 1;
        return;
    }

    WDF_OBJECT_ATTRIBUTES_INIT(&attribs);
    attribs.ParentObject = NetRequestQueueConfig->Adapter;
    status = WdfMemoryCreate(&attribs,
                             NonPagedPoolNx,
                             HANDLER_TAG,
                             sizeof(*handler),
                             &memory,
                             (void **)&handler);

    if (!NT_SUCCESS(status)) {
        handler = NULL;
        NetRequestQueueConfig->AddHandlerError.AllocationFailed = 1;
        return;
    }

    RtlCopyMemory(handler, SetDataHandler, sizeof(*handler));

    handler->Next = NetRequestQueueConfig->SetDataHandlers;
    handler->Memory = memory;
    NetRequestQueueConfig->SetDataHandlers = handler;
}

inline
void
NET_REQUEST_QUEUE_CONFIG_ADD_SET_DATA_HANDLER(
    _In_ NET_REQUEST_QUEUE_CONFIG * NetRequestQueueConfig,
    _In_ NDIS_OID                  Oid,
    _In_ PFN_NET_REQUEST_SET_DATA  EvtRequestSetData,
    _In_ UINT                      MinimumInputLength
)
/*++
Routine Description:
    This initializer adds a caller provided custom request callback to the Queue
    config.

Arguments:
    NetRequestQueueConfig - The pointer to the NET_REQUEST_QUEUE_CONFIG structure
        to which the custom handler is being added.

    Oid - The NDIS_OID Identifier for which this handler is meant for.

    EvtRequestSetData - The Custom callback for the request

    MinimumInputLength - The needed minimum input length for the request.

Remarks:
    This routine allocates memory, an operation that can fail. However to keep
    client interface simple this routine doesnt return an error. Instead a bit
    is set to track the error and thereby the subsequent call to NetRequestQueueCreate
    fails.
--*/
{
    NET_REQUEST_QUEUE_SET_DATA_HANDLER  setDataHandler;
    NET_REQUEST_QUEUE_SET_DATA_HANDLER_INIT(&setDataHandler,
                                            Oid,
                                            EvtRequestSetData,
                                            MinimumInputLength);

    NET_REQUEST_QUEUE_CONFIG_ADD_INITIALIZED_SET_DATA_HANDLER(
        NetRequestQueueConfig, &setDataHandler);
}

inline
void
NET_REQUEST_QUEUE_CONFIG_ADD_INITIALIZED_QUERY_DATA_HANDLER(
    _In_ NET_REQUEST_QUEUE_CONFIG *             NetRequestQueueConfig,
    _In_ NET_REQUEST_QUEUE_QUERY_DATA_HANDLER * QueryDataHandler
)
/*++
Routine Description:
    This initializer adds a caller provided custom request handler to the Queue
    config.

Arguments:
    NetRequestQueueConfig - The pointer to the NET_REQUEST_QUEUE_CONFIG structure
        to which the custom handler is being added.

    QueryDataHandler - The pointer to the caller allocated and initialized
        custom handler structured.

Remarks:

    This routine allocates memory, an operation that can fail. However to keep
    client interface simple this routine doesnt return an error. Instead a bit
    is set to track the error and thereby the subsequent call to NetRequestQueueCreate
    fails.
--*/
{
    NET_REQUEST_QUEUE_QUERY_DATA_HANDLER * handler;
    NTSTATUS status;
    WDF_OBJECT_ATTRIBUTES attribs;
    WDFMEMORY memory;

    if (QueryDataHandler->EvtRequestQueryData == NULL) {
        NetRequestQueueConfig->AddHandlerError.CallbackNull = 1;
        return;
    }

    if (NetRequestQueueConfig->Adapter == NULL) {
        NetRequestQueueConfig->AddHandlerError.AdapterNull = 1;
        return;
    }

    WDF_OBJECT_ATTRIBUTES_INIT(&attribs);
    attribs.ParentObject = NetRequestQueueConfig->Adapter;
    status = WdfMemoryCreate(&attribs,
                             NonPagedPoolNx,
                             HANDLER_TAG,
                             sizeof(*handler),
                             &memory,
                             (void **)&handler);

    if (!NT_SUCCESS(status)) {
        handler = NULL;
        NetRequestQueueConfig->AddHandlerError.AllocationFailed = 1;
        return;
    }

    RtlCopyMemory(handler, QueryDataHandler, sizeof(*handler));

    handler->Next = NetRequestQueueConfig->QueryDataHandlers;
    handler->Memory = memory;
    NetRequestQueueConfig->QueryDataHandlers = handler;
}

inline
void
NET_REQUEST_QUEUE_CONFIG_ADD_QUERY_DATA_HANDLER(
    _In_ NET_REQUEST_QUEUE_CONFIG * NetRequestQueueConfig,
    _In_ NDIS_OID                   Oid,
    _In_ PFN_NET_REQUEST_QUERY_DATA EvtRequestQueryData,
    _In_ UINT                       MinimumOutputLength
)
/*++
Routine Description:
    This initializer adds a caller provided custom request callback to the Queue
    config.

Arguments:
    NetRequestQueueConfig - The pointer to the NET_REQUEST_QUEUE_CONFIG structure
        to which the custom handler is being added.

    Oid - The NDIS_OID Identifier for which this handler is meant for.

    EvtRequestQueryData - The Custom callback for the request

    MinimumOutputLength - The needed minimum output length for the request.

Remarks:
    This routine allocates memory, an operation that can fail. However to keep
    client interface simple this routine doesnt return an error. Instead a bit
    is set to track the error and thereby the subsequent call to NetRequestQueueCreate
    fails.
--*/
{
    NET_REQUEST_QUEUE_QUERY_DATA_HANDLER  queryDataHandler;
    NET_REQUEST_QUEUE_QUERY_DATA_HANDLER_INIT(&queryDataHandler,
                                              Oid,
                                              EvtRequestQueryData,
                                              MinimumOutputLength);
    NET_REQUEST_QUEUE_CONFIG_ADD_INITIALIZED_QUERY_DATA_HANDLER(
        NetRequestQueueConfig, &queryDataHandler);
}


inline
void
NET_REQUEST_QUEUE_CONFIG_ADD_INITIALIZED_METHOD_HANDLER(
    _In_ NET_REQUEST_QUEUE_CONFIG *        NetRequestQueueConfig,
    _In_ NET_REQUEST_QUEUE_METHOD_HANDLER * MethodHandler
)
/*++
Routine Description:
    This initializer adds a caller provided custom request handler to the Queue
    config.

Arguments:
    NetRequestQueueConfig - The pointer to the NET_REQUEST_QUEUE_CONFIG structure
        to which the custom handler is being added.

    MethodHandler - The pointer to the caller allocated and initialized
        custom handler structured.

Remarks:
    This routine allocates memory, an operation that can fail. However to keep
    client interface simple this routine doesnt return an error. Instead a bit
    is set to track the error and thereby the subsequent call to NetRequestQueueCreate
    fails.
--*/
{
    NET_REQUEST_QUEUE_METHOD_HANDLER * handler;
    NTSTATUS status;
    WDF_OBJECT_ATTRIBUTES attribs;
    WDFMEMORY memory;

    if (MethodHandler->EvtRequestMethod == NULL) {
        NetRequestQueueConfig->AddHandlerError.CallbackNull = 1;
        return;
    }

    if (NetRequestQueueConfig->Adapter == NULL) {
        NetRequestQueueConfig->AddHandlerError.AdapterNull = 1;
        return;
    }

    WDF_OBJECT_ATTRIBUTES_INIT(&attribs);
    attribs.ParentObject = NetRequestQueueConfig->Adapter;
    status = WdfMemoryCreate(&attribs,
                             NonPagedPoolNx,
                             HANDLER_TAG,
                             sizeof(*handler),
                             &memory,
                             (void **)&handler);

    if (!NT_SUCCESS(status)) {
        handler = NULL;
        NetRequestQueueConfig->AddHandlerError.AllocationFailed = 1;
        return;
    }

    RtlCopyMemory(handler, MethodHandler, sizeof(*handler));

    handler->Next = NetRequestQueueConfig->MethodHandlers;
    handler->Memory = memory;
    NetRequestQueueConfig->MethodHandlers = handler;
}

inline
void
NET_REQUEST_QUEUE_CONFIG_ADD_METHOD_HANDLER(
    _In_ NET_REQUEST_QUEUE_CONFIG * NetRequestQueueConfig,
    _In_ NDIS_OID                  Oid,
    _In_ PFN_NET_REQUEST_METHOD    EvtRequestMethod,
    _In_ UINT                      MinimumInputLength,
    _In_ UINT                      MinimumOutputLength
)
/*++
Routine Description:
    This initializer adds a caller provided custom request callback to the Queue
    config.

Arguments:
    NetRequestQueueConfig - The pointer to the NET_REQUEST_QUEUE_CONFIG structure
        to which the custom handler is being added.

    Oid - The NDIS_OID Identifier for which this handler is meant for.

    EvtRequestMethod - The Custom callback for the request

    MinimumInputLength - The needed minimum input length for the request.

    MinimumOutputLength - The needed minimum output length for the request.

Remarks:
    This routine allocates memory, an operation that can fail. However to keep
    client interface simple this routine doesnt return an error. Instead a bit
    is set to track the error and thereby the subsequent call to NetRequestQueueCreate
    fails.
--*/
{
    NET_REQUEST_QUEUE_METHOD_HANDLER  methodHandler;
    NET_REQUEST_QUEUE_METHOD_HANDLER_INIT(&methodHandler,
                                          Oid,
                                          EvtRequestMethod,
                                          MinimumInputLength,
                                          MinimumOutputLength);
    NET_REQUEST_QUEUE_CONFIG_ADD_INITIALIZED_METHOD_HANDLER(
        NetRequestQueueConfig, &methodHandler);
}


//
// NET Function: NetRequestQueueCreate
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_NETREQUESTQUEUECREATE)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NET_REQUEST_QUEUE_CONFIG* NetRequestQueueConfig,
    _In_opt_
    WDF_OBJECT_ATTRIBUTES* QueueAttributes,
    _Out_opt_
    NETREQUESTQUEUE* RequestQueue
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
NetRequestQueueCreate(
    _In_
    NET_REQUEST_QUEUE_CONFIG* NetRequestQueueConfig,
    _In_opt_
    WDF_OBJECT_ATTRIBUTES* QueueAttributes,
    _Out_opt_
    NETREQUESTQUEUE* RequestQueue
    )
{
    return ((PFN_NETREQUESTQUEUECREATE) NetFunctions[NetRequestQueueCreateTableIndex])(NetDriverGlobals, NetRequestQueueConfig, QueueAttributes, RequestQueue);
}

//
// NET Function: NetRequestQueueGetAdapter
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
NETADAPTER
(NTAPI *PFN_NETREQUESTQUEUEGETADAPTER)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETREQUESTQUEUE RequestQueue
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
FORCEINLINE
NETADAPTER
NetRequestQueueGetAdapter(
    _In_
    NETREQUESTQUEUE RequestQueue
    )
{
    return ((PFN_NETREQUESTQUEUEGETADAPTER) NetFunctions[NetRequestQueueGetAdapterTableIndex])(NetDriverGlobals, RequestQueue);
}




WDF_EXTERN_C_END

#endif // _NETREQUESTQUEUEPREVIEW_2_0_H_

