// Copyright (C) Microsoft Corporation. All rights reserved.

//
// NOTE: This header is generated by stubwork.  Please make any 
//       modifications to the corresponding template files 
//       (.x or .y) and use stubwork to regenerate the header
//

#ifndef _NETADAPTERPREVIEW_2_0_H_
#define _NETADAPTERPREVIEW_2_0_H_

#ifndef WDF_EXTERN_C
  #ifdef __cplusplus
    #define WDF_EXTERN_C       extern "C"
    #define WDF_EXTERN_C_START extern "C" {
    #define WDF_EXTERN_C_END   }
  #else
    #define WDF_EXTERN_C
    #define WDF_EXTERN_C_START
    #define WDF_EXTERN_C_END
  #endif
#endif

WDF_EXTERN_C_START


typedef enum _NET_PACKET_FILTER_FLAGS {
    NetPacketFilterFlagDirected = NDIS_PACKET_TYPE_DIRECTED,
    NetPacketFilterFlagMulticast = NDIS_PACKET_TYPE_MULTICAST,
    NetPacketFilterFlagAllMulticast = NDIS_PACKET_TYPE_ALL_MULTICAST,
    NetPacketFilterFlagBroadcast = NDIS_PACKET_TYPE_BROADCAST,
    NetPacketFilterFlagPromiscuous = NDIS_PACKET_TYPE_PROMISCUOUS,
} NET_PACKET_FILTER_FLAGS;




DEFINE_ENUM_FLAG_OPERATORS(NET_PACKET_FILTER_FLAGS);

typedef
_Function_class_(EVT_NET_ADAPTER_SET_PACKET_FILTER)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
void
NTAPI
EVT_NET_ADAPTER_SET_PACKET_FILTER(
    _In_
    NETADAPTER Adapter,
    _In_
    NET_PACKET_FILTER_FLAGS PacketFilter
);

typedef EVT_NET_ADAPTER_SET_PACKET_FILTER *PFN_NET_ADAPTER_SET_PACKET_FILTER;

typedef struct _NET_ADAPTER_PACKET_FILTER_CAPABILITIES
{
    ULONG Size;
    NET_PACKET_FILTER_FLAGS SupportedPacketFilters;
    PFN_NET_ADAPTER_SET_PACKET_FILTER EvtSetPacketFilter;
} NET_ADAPTER_PACKET_FILTER_CAPABILITIES;

inline
void
NET_ADAPTER_PACKET_FILTER_CAPABILITIES_INIT(
    _Out_ NET_ADAPTER_PACKET_FILTER_CAPABILITIES * PacketFilter,
    _In_  NET_PACKET_FILTER_FLAGS Filters,
    _In_  PFN_NET_ADAPTER_SET_PACKET_FILTER EvtSetPacketFilter
)
{
    RtlZeroMemory(PacketFilter, sizeof(NET_ADAPTER_PACKET_FILTER_CAPABILITIES));
    PacketFilter->Size = sizeof(NET_ADAPTER_PACKET_FILTER_CAPABILITIES);
    PacketFilter->SupportedPacketFilters = Filters;
    PacketFilter->EvtSetPacketFilter = EvtSetPacketFilter;
}

typedef
_Function_class_(EVT_NET_ADAPTER_SET_MULTICAST_LIST)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
void
NTAPI
EVT_NET_ADAPTER_SET_MULTICAST_LIST(
    _In_
    NETADAPTER Adapter,
    _In_
    ULONG MulticastAddressCount,
    _In_
    NET_ADAPTER_LINK_LAYER_ADDRESS * MulticastAddressList
);

typedef EVT_NET_ADAPTER_SET_MULTICAST_LIST *PFN_NET_ADAPTER_SET_MULTICAST_LIST;

typedef struct _NET_ADAPTER_MULTICAST_CAPABILITIES
{
    ULONG Size;
    ULONG MaxMulticastAddresses;
    PFN_NET_ADAPTER_SET_MULTICAST_LIST EvtSetMulticastList;
} NET_ADAPTER_MULTICAST_CAPABILITIES;

inline
void
NET_ADAPTER_MULTICAST_CAPABILITIES_INIT(
    _Out_ NET_ADAPTER_MULTICAST_CAPABILITIES * MulticastList,
    _In_  ULONG MaxMulticastAddresses,
    _In_  PFN_NET_ADAPTER_SET_MULTICAST_LIST EvtSetMulticastList
)
{
    RtlZeroMemory(MulticastList, sizeof(NET_ADAPTER_MULTICAST_CAPABILITIES));
    MulticastList->Size = sizeof(NET_ADAPTER_MULTICAST_CAPABILITIES);
    MulticastList->MaxMulticastAddresses = MaxMulticastAddresses;
    MulticastList->EvtSetMulticastList = EvtSetMulticastList;
}


//
// NET Function: NetAdapterSetPacketFilterCapabilities
//
typedef
_IRQL_requires_(PASSIVE_LEVEL)
WDFAPI
void
(NTAPI *PFN_NETADAPTERSETPACKETFILTERCAPABILITIES)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETADAPTER Adapter,
    _In_
    CONST NET_ADAPTER_PACKET_FILTER_CAPABILITIES* PacketFilter
    );

_IRQL_requires_(PASSIVE_LEVEL)
FORCEINLINE
void
NetAdapterSetPacketFilterCapabilities(
    _In_
    NETADAPTER Adapter,
    _In_
    CONST NET_ADAPTER_PACKET_FILTER_CAPABILITIES* PacketFilter
    )
{
    ((PFN_NETADAPTERSETPACKETFILTERCAPABILITIES) NetFunctions[NetAdapterSetPacketFilterCapabilitiesTableIndex])(NetDriverGlobals, Adapter, PacketFilter);
}

//
// NET Function: NetAdapterSetMulticastCapabilities
//
typedef
_IRQL_requires_(PASSIVE_LEVEL)
WDFAPI
void
(NTAPI *PFN_NETADAPTERSETMULTICASTCAPABILITIES)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETADAPTER Adapter,
    _In_
    CONST NET_ADAPTER_MULTICAST_CAPABILITIES* MulticastList
    );

_IRQL_requires_(PASSIVE_LEVEL)
FORCEINLINE
void
NetAdapterSetMulticastCapabilities(
    _In_
    NETADAPTER Adapter,
    _In_
    CONST NET_ADAPTER_MULTICAST_CAPABILITIES* MulticastList
    )
{
    ((PFN_NETADAPTERSETMULTICASTCAPABILITIES) NetFunctions[NetAdapterSetMulticastCapabilitiesTableIndex])(NetDriverGlobals, Adapter, MulticastList);
}



WDF_EXTERN_C_END

#endif // _NETADAPTERPREVIEW_2_0_H_

