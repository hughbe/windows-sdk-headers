//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0008
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Data.Xml.Dom.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Edata2Exml2Edom_h__)")
cpp_quote("#include <Windows.Data.Xml.Dom.h>")
cpp_quote("#endif // !defined(__windows2Edata2Exml2Edom_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Data
    {
        namespace Xml
        {
            namespace Dom
            {
                runtimeclass XmlDocument;
            }
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct DateTime DateTime;

        typedef struct TimeSpan TimeSpan;

        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Notifications
        {
            typedef enum NotificationSetting NotificationSetting;

            typedef enum ToastDismissalReason ToastDismissalReason;

            typedef enum BadgeTemplateType BadgeTemplateType;

            typedef enum TileTemplateType TileTemplateType;

            typedef enum ToastTemplateType ToastTemplateType;

            typedef enum PeriodicUpdateRecurrence PeriodicUpdateRecurrence;

            interface IToastDismissedEventArgs;

            interface IToastFailedEventArgs;

            interface ITileUpdateManagerStatics;

            interface ITileUpdater;

            interface IBadgeUpdateManagerStatics;

            interface IBadgeUpdater;

            interface IToastNotificationManagerStatics;

            interface IToastNotifier;

            interface ITileNotificationFactory;

            interface ITileNotification;

            interface IBadgeNotificationFactory;

            interface IBadgeNotification;

            interface IToastNotificationFactory;

            interface IToastNotification;

            interface IScheduledToastNotificationFactory;

            interface IScheduledToastNotification;

            interface IScheduledTileNotificationFactory;

            interface IScheduledTileNotification;

            runtimeclass TileUpdater;

            runtimeclass TileNotification;

            runtimeclass ScheduledTileNotification;

            runtimeclass BadgeUpdater;

            runtimeclass BadgeNotification;

            runtimeclass ToastNotifier;

            runtimeclass ToastNotification;

            runtimeclass ScheduledToastNotification;

            runtimeclass ToastDismissedEventArgs;

            runtimeclass ToastFailedEventArgs;

            runtimeclass TileUpdateManager;

            runtimeclass BadgeUpdateManager;

            runtimeclass ToastNotificationManager;
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace UI
    {
        namespace Notifications
        {
            declare
            {
                interface Windows.Foundation.Collections.IIterable<Windows.UI.Notifications.ScheduledTileNotification*>;

                interface Windows.Foundation.Collections.IIterable<Windows.UI.Notifications.ScheduledToastNotification*>;

                interface Windows.Foundation.Collections.IIterator<Windows.UI.Notifications.ScheduledTileNotification*>;

                interface Windows.Foundation.Collections.IIterator<Windows.UI.Notifications.ScheduledToastNotification*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.UI.Notifications.ScheduledTileNotification*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.UI.Notifications.ScheduledToastNotification*>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.Notifications.ToastNotification*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.Notifications.ToastNotification*, Windows.UI.Notifications.ToastDismissedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.Notifications.ToastNotification*, Windows.UI.Notifications.ToastFailedEventArgs*>;
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace UI
    {
        namespace Notifications
        {
            [version(0x06020000)]
            enum NotificationSetting
            {
                Enabled                = 0,
                DisabledForApplication = 1,
                DisabledForUser        = 2,
                DisabledByGroupPolicy  = 3,
                DisabledByManifest     = 4
            };

            [version(0x06020000)]
            enum ToastDismissalReason
            {
                UserCanceled      = 0,
                ApplicationHidden = 1,
                TimedOut          = 2
            };

            [version(0x06020000)]
            enum BadgeTemplateType
            {
                BadgeGlyph  = 0,
                BadgeNumber = 1
            };

            [version(0x06020000)]
            enum TileTemplateType
            {
                TileSquareImage               = 0,
                TileSquareBlock               = 1,
                TileSquareText01              = 2,
                TileSquareText02              = 3,
                TileSquareText03              = 4,
                TileSquareText04              = 5,
                TileSquarePeekImageAndText01  = 6,
                TileSquarePeekImageAndText02  = 7,
                TileSquarePeekImageAndText03  = 8,
                TileSquarePeekImageAndText04  = 9,
                TileWideImage                 = 10,
                TileWideImageCollection       = 11,
                TileWideImageAndText01        = 12,
                TileWideImageAndText02        = 13,
                TileWideBlockAndText01        = 14,
                TileWideBlockAndText02        = 15,
                TileWidePeekImageCollection01 = 16,
                TileWidePeekImageCollection02 = 17,
                TileWidePeekImageCollection03 = 18,
                TileWidePeekImageCollection04 = 19,
                TileWidePeekImageCollection05 = 20,
                TileWidePeekImageCollection06 = 21,
                TileWidePeekImageAndText01    = 22,
                TileWidePeekImageAndText02    = 23,
                TileWidePeekImage01           = 24,
                TileWidePeekImage02           = 25,
                TileWidePeekImage03           = 26,
                TileWidePeekImage04           = 27,
                TileWidePeekImage05           = 28,
                TileWidePeekImage06           = 29,
                TileWideSmallImageAndText01   = 30,
                TileWideSmallImageAndText02   = 31,
                TileWideSmallImageAndText03   = 32,
                TileWideSmallImageAndText04   = 33,
                TileWideSmallImageAndText05   = 34,
                TileWideText01                = 35,
                TileWideText02                = 36,
                TileWideText03                = 37,
                TileWideText04                = 38,
                TileWideText05                = 39,
                TileWideText06                = 40,
                TileWideText07                = 41,
                TileWideText08                = 42,
                TileWideText09                = 43,
                TileWideText10                = 44,
                TileWideText11                = 45
            };

            [version(0x06020000)]
            enum ToastTemplateType
            {
                ToastImageAndText01 = 0,
                ToastImageAndText02 = 1,
                ToastImageAndText03 = 2,
                ToastImageAndText04 = 3,
                ToastText01         = 4,
                ToastText02         = 5,
                ToastText03         = 6,
                ToastText04         = 7
            };

            [version(0x06020000)]
            enum PeriodicUpdateRecurrence
            {
                HalfHour    = 0,
                Hour        = 1,
                SixHours    = 2,
                TwelveHours = 3,
                Daily       = 4
            };

            [uuid(3F89D935-D9CB-4538-A0F0-FFE7659938F8)]
            [version(0x06020000)]
            [exclusiveto(Windows.UI.Notifications.ToastDismissedEventArgs)]
            interface IToastDismissedEventArgs : IInspectable
            {
                [propget] HRESULT Reason([out] [retval] Windows.UI.Notifications.ToastDismissalReason* value);
            }

            [uuid(35176862-CFD4-44F8-AD64-F500FD896C3B)]
            [version(0x06020000)]
            [exclusiveto(Windows.UI.Notifications.ToastFailedEventArgs)]
            interface IToastFailedEventArgs : IInspectable
            {
                [propget] HRESULT ErrorCode([out] [retval] HRESULT* value);
            }

            [uuid(DA159E5D-3EA9-4986-8D84-B09D5E12276D)]
            [version(0x06020000)]
            [exclusiveto(Windows.UI.Notifications.TileUpdateManager)]
            interface ITileUpdateManagerStatics : IInspectable
            {
                [overload("CreateTileUpdaterForApplication")] HRESULT CreateTileUpdaterForApplication([out] [retval] Windows.UI.Notifications.TileUpdater** updater);
                [overload("CreateTileUpdaterForApplication")] HRESULT CreateTileUpdaterForApplicationWithId([in] HSTRING applicationId, [out] [retval] Windows.UI.Notifications.TileUpdater** updater);
                HRESULT CreateTileUpdaterForSecondaryTile([in] HSTRING tileId, [out] [retval] Windows.UI.Notifications.TileUpdater** updater);
                HRESULT GetTemplateContent([in] Windows.UI.Notifications.TileTemplateType type, [out] [retval] Windows.Data.Xml.Dom.XmlDocument** content);
            }

            [uuid(0942A48B-1D91-44EC-9243-C1E821C29A20)]
            [version(0x06020000)]
            [exclusiveto(Windows.UI.Notifications.TileUpdater)]
            interface ITileUpdater : IInspectable
            {
                HRESULT Update([in] Windows.UI.Notifications.TileNotification* notification);
                HRESULT Clear();
                HRESULT EnableNotificationQueue([in] boolean enable);
                [propget] HRESULT Setting([out] [retval] Windows.UI.Notifications.NotificationSetting* value);
                HRESULT AddToSchedule([in] Windows.UI.Notifications.ScheduledTileNotification* scheduledTile);
                HRESULT RemoveFromSchedule([in] Windows.UI.Notifications.ScheduledTileNotification* scheduledTile);
                HRESULT GetScheduledTileNotifications([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.UI.Notifications.ScheduledTileNotification*>** scheduledTiles);
                [overload("StartPeriodicUpdate")] HRESULT StartPeriodicUpdate([in] Windows.Foundation.Uri* tileContent, [in] Windows.UI.Notifications.PeriodicUpdateRecurrence requestedInterval);
                [overload("StartPeriodicUpdate")] HRESULT StartPeriodicUpdateAtTime([in] Windows.Foundation.Uri* tileContent, [in] Windows.Foundation.DateTime startTime, [in] Windows.UI.Notifications.PeriodicUpdateRecurrence requestedInterval);
                HRESULT StopPeriodicUpdate();
                [overload("StartPeriodicUpdateBatch")] HRESULT StartPeriodicUpdateBatch([in] Windows.Foundation.Collections.IIterable<Windows.Foundation.Uri*>* tileContents, [in] Windows.UI.Notifications.PeriodicUpdateRecurrence requestedInterval);
                [overload("StartPeriodicUpdateBatch")] HRESULT StartPeriodicUpdateBatchAtTime([in] Windows.Foundation.Collections.IIterable<Windows.Foundation.Uri*>* tileContents, [in] Windows.Foundation.DateTime startTime, [in] Windows.UI.Notifications.PeriodicUpdateRecurrence requestedInterval);
            }

            [uuid(33400FAA-6DD5-4105-AEBC-9B50FCA492DA)]
            [exclusiveto(Windows.UI.Notifications.BadgeUpdateManager)]
            [version(0x06020000)]
            interface IBadgeUpdateManagerStatics : IInspectable
            {
                [overload("CreateBadgeUpdaterForApplication")] HRESULT CreateBadgeUpdaterForApplication([out] [retval] Windows.UI.Notifications.BadgeUpdater** updater);
                [overload("CreateBadgeUpdaterForApplication")] HRESULT CreateBadgeUpdaterForApplicationWithId([in] HSTRING applicationId, [out] [retval] Windows.UI.Notifications.BadgeUpdater** updater);
                HRESULT CreateBadgeUpdaterForSecondaryTile([in] HSTRING tileId, [out] [retval] Windows.UI.Notifications.BadgeUpdater** updater);
                HRESULT GetTemplateContent([in] Windows.UI.Notifications.BadgeTemplateType type, [out] [retval] Windows.Data.Xml.Dom.XmlDocument** content);
            }

            [uuid(B5FA1FD4-7562-4F6C-BFA3-1B6ED2E57F2F)]
            [version(0x06020000)]
            [exclusiveto(Windows.UI.Notifications.BadgeUpdater)]
            interface IBadgeUpdater : IInspectable
            {
                HRESULT Update([in] Windows.UI.Notifications.BadgeNotification* notification);
                HRESULT Clear();
                [overload("StartPeriodicUpdate")] HRESULT StartPeriodicUpdate([in] Windows.Foundation.Uri* badgeContent, [in] Windows.UI.Notifications.PeriodicUpdateRecurrence requestedInterval);
                [overload("StartPeriodicUpdate")] HRESULT StartPeriodicUpdateAtTime([in] Windows.Foundation.Uri* badgeContent, [in] Windows.Foundation.DateTime startTime, [in] Windows.UI.Notifications.PeriodicUpdateRecurrence requestedInterval);
                HRESULT StopPeriodicUpdate();
            }

            [uuid(50AC103F-D235-4598-BBEF-98FE4D1A3AD4)]
            [version(0x06020000)]
            [exclusiveto(Windows.UI.Notifications.ToastNotificationManager)]
            interface IToastNotificationManagerStatics : IInspectable
            {
                [overload("CreateToastNotifier")] HRESULT CreateToastNotifier([out] [retval] Windows.UI.Notifications.ToastNotifier** notifier);
                [overload("CreateToastNotifier")] HRESULT CreateToastNotifierWithId([in] HSTRING applicationId, [out] [retval] Windows.UI.Notifications.ToastNotifier** notifier);
                HRESULT GetTemplateContent([in] Windows.UI.Notifications.ToastTemplateType type, [out] [retval] Windows.Data.Xml.Dom.XmlDocument** content);
            }

            [uuid(75927B93-03F3-41EC-91D3-6E5BAC1B38E7)]
            [exclusiveto(Windows.UI.Notifications.ToastNotifier)]
            [version(0x06020000)]
            interface IToastNotifier : IInspectable
            {
                HRESULT Show([in] Windows.UI.Notifications.ToastNotification* notification);
                HRESULT Hide([in] Windows.UI.Notifications.ToastNotification* notification);
                [propget] HRESULT Setting([out] [retval] Windows.UI.Notifications.NotificationSetting* value);
                HRESULT AddToSchedule([in] Windows.UI.Notifications.ScheduledToastNotification* scheduledToast);
                HRESULT RemoveFromSchedule([in] Windows.UI.Notifications.ScheduledToastNotification* scheduledToast);
                HRESULT GetScheduledToastNotifications([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.UI.Notifications.ScheduledToastNotification*>** scheduledToasts);
            }

            [uuid(C6ABDD6E-4928-46C8-BDBF-81A047DEA0D4)]
            [exclusiveto(Windows.UI.Notifications.TileNotification)]
            [version(0x06020000)]
            interface ITileNotificationFactory : IInspectable
            {
                HRESULT CreateTileNotification([in] Windows.Data.Xml.Dom.XmlDocument* content, [out] [retval] Windows.UI.Notifications.TileNotification** notification);
            }

            [uuid(EBAEC8FA-50EC-4C18-B4D0-3AF02E5540AB)]
            [version(0x06020000)]
            [exclusiveto(Windows.UI.Notifications.TileNotification)]
            interface ITileNotification : IInspectable
            {
                [propget] HRESULT Content([out] [retval] Windows.Data.Xml.Dom.XmlDocument** value);
                [propput] HRESULT ExpirationTime([in] Windows.Foundation.IReference<Windows.Foundation.DateTime>* value);
                [propget] HRESULT ExpirationTime([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                [propput] HRESULT Tag([in] HSTRING value);
                [propget] HRESULT Tag([out] [retval] HSTRING* value);
            }

            [uuid(EDF255CE-0618-4D59-948A-5A61040C52F9)]
            [version(0x06020000)]
            [exclusiveto(Windows.UI.Notifications.BadgeNotification)]
            interface IBadgeNotificationFactory : IInspectable
            {
                HRESULT CreateBadgeNotification([in] Windows.Data.Xml.Dom.XmlDocument* content, [out] [retval] Windows.UI.Notifications.BadgeNotification** notification);
            }

            [uuid(075CB4CA-D08A-4E2F-9233-7E289C1F7722)]
            [version(0x06020000)]
            [exclusiveto(Windows.UI.Notifications.BadgeNotification)]
            interface IBadgeNotification : IInspectable
            {
                [propget] HRESULT Content([out] [retval] Windows.Data.Xml.Dom.XmlDocument** value);
                [propput] HRESULT ExpirationTime([in] Windows.Foundation.IReference<Windows.Foundation.DateTime>* value);
                [propget] HRESULT ExpirationTime([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
            }

            [uuid(04124B20-82C6-4229-B109-FD9ED4662B53)]
            [exclusiveto(Windows.UI.Notifications.ToastNotification)]
            [version(0x06020000)]
            interface IToastNotificationFactory : IInspectable
            {
                HRESULT CreateToastNotification([in] Windows.Data.Xml.Dom.XmlDocument* content, [out] [retval] Windows.UI.Notifications.ToastNotification** notification);
            }

            [uuid(997E2675-059E-4E60-8B06-1760917C8B80)]
            [version(0x06020000)]
            [exclusiveto(Windows.UI.Notifications.ToastNotification)]
            interface IToastNotification : IInspectable
            {
                [propget] HRESULT Content([out] [retval] Windows.Data.Xml.Dom.XmlDocument** value);
                [propput] HRESULT ExpirationTime([in] Windows.Foundation.IReference<Windows.Foundation.DateTime>* value);
                [propget] HRESULT ExpirationTime([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                [eventadd] HRESULT Dismissed([in] Windows.Foundation.TypedEventHandler<Windows.UI.Notifications.ToastNotification*, Windows.UI.Notifications.ToastDismissedEventArgs*>* handler, [out] [retval] EventRegistrationToken* cookie);
                [eventremove] HRESULT Dismissed([in] EventRegistrationToken cookie);
                [eventadd] HRESULT Activated([in] Windows.Foundation.TypedEventHandler<Windows.UI.Notifications.ToastNotification*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
                [eventremove] HRESULT Activated([in] EventRegistrationToken cookie);
                [eventadd] HRESULT Failed([in] Windows.Foundation.TypedEventHandler<Windows.UI.Notifications.ToastNotification*, Windows.UI.Notifications.ToastFailedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Failed([in] EventRegistrationToken token);
            }

            [uuid(E7BED191-0BB9-4189-8394-31761B476FD7)]
            [exclusiveto(Windows.UI.Notifications.ScheduledToastNotification)]
            [version(0x06020000)]
            interface IScheduledToastNotificationFactory : IInspectable
            {
                [overload("CreateScheduledToastNotification")] HRESULT CreateScheduledToastNotification([in] Windows.Data.Xml.Dom.XmlDocument* content, [in] Windows.Foundation.DateTime deliveryTime, [out] [retval] Windows.UI.Notifications.ScheduledToastNotification** notification);
                [overload("CreateScheduledToastNotification")] HRESULT CreateScheduledToastNotificationRecurring([in] Windows.Data.Xml.Dom.XmlDocument* content, [in] Windows.Foundation.DateTime deliveryTime, [in] Windows.Foundation.TimeSpan snoozeInterval, [in] UINT32 maximumSnoozeCount, [out] [retval] Windows.UI.Notifications.ScheduledToastNotification** notification);
            }

            [uuid(79F577F8-0DE7-48CD-9740-9B370490C838)]
            [exclusiveto(Windows.UI.Notifications.ScheduledToastNotification)]
            [version(0x06020000)]
            interface IScheduledToastNotification : IInspectable
            {
                [propget] HRESULT Content([out] [retval] Windows.Data.Xml.Dom.XmlDocument** value);
                [propget] HRESULT DeliveryTime([out] [retval] Windows.Foundation.DateTime* value);
                [propget] HRESULT SnoozeInterval([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                [propget] HRESULT MaximumSnoozeCount([out] [retval] UINT32* value);
                [propput] HRESULT Id([in] HSTRING value);
                [propget] HRESULT Id([out] [retval] HSTRING* value);
            }

            [uuid(3383138A-98C0-4C3B-BBD6-4A633C7CFC29)]
            [exclusiveto(Windows.UI.Notifications.ScheduledTileNotification)]
            [version(0x06020000)]
            interface IScheduledTileNotificationFactory : IInspectable
            {
                HRESULT CreateScheduledTileNotification([in] Windows.Data.Xml.Dom.XmlDocument* content, [in] Windows.Foundation.DateTime deliveryTime, [out] [retval] Windows.UI.Notifications.ScheduledTileNotification** notification);
            }

            [uuid(0ABCA6D5-99DC-4C78-A11C-C9E7F86D7EF7)]
            [version(0x06020000)]
            [exclusiveto(Windows.UI.Notifications.ScheduledTileNotification)]
            interface IScheduledTileNotification : IInspectable
            {
                [propget] HRESULT Content([out] [retval] Windows.Data.Xml.Dom.XmlDocument** value);
                [propget] HRESULT DeliveryTime([out] [retval] Windows.Foundation.DateTime* value);
                [propput] HRESULT ExpirationTime([in] Windows.Foundation.IReference<Windows.Foundation.DateTime>* value);
                [propget] HRESULT ExpirationTime([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                [propput] HRESULT Tag([in] HSTRING value);
                [propget] HRESULT Tag([out] [retval] HSTRING* value);
                [propput] HRESULT Id([in] HSTRING value);
                [propget] HRESULT Id([out] [retval] HSTRING* value);
            }

            [version(0x06020000)]
            runtimeclass TileUpdater
            {
                [default] interface Windows.UI.Notifications.ITileUpdater;
            }

            [threading(mta)]
            [activatable(Windows.UI.Notifications.ITileNotificationFactory, 0x06020000)]
            [version(0x06020000)]
            runtimeclass TileNotification
            {
                [default] interface Windows.UI.Notifications.ITileNotification;
            }

            [version(0x06020000)]
            [threading(mta)]
            [activatable(Windows.UI.Notifications.IScheduledTileNotificationFactory, 0x06020000)]
            runtimeclass ScheduledTileNotification
            {
                [default] interface Windows.UI.Notifications.IScheduledTileNotification;
            }

            [version(0x06020000)]
            runtimeclass BadgeUpdater
            {
                [default] interface Windows.UI.Notifications.IBadgeUpdater;
            }

            [version(0x06020000)]
            [threading(mta)]
            [activatable(Windows.UI.Notifications.IBadgeNotificationFactory, 0x06020000)]
            runtimeclass BadgeNotification
            {
                [default] interface Windows.UI.Notifications.IBadgeNotification;
            }

            [version(0x06020000)]
            runtimeclass ToastNotifier
            {
                [default] interface Windows.UI.Notifications.IToastNotifier;
            }

            [version(0x06020000)]
            [activatable(Windows.UI.Notifications.IToastNotificationFactory, 0x06020000)]
            [threading(mta)]
            runtimeclass ToastNotification
            {
                [default] interface Windows.UI.Notifications.IToastNotification;
            }

            [threading(mta)]
            [version(0x06020000)]
            [activatable(Windows.UI.Notifications.IScheduledToastNotificationFactory, 0x06020000)]
            runtimeclass ScheduledToastNotification
            {
                [default] interface Windows.UI.Notifications.IScheduledToastNotification;
            }

            [version(0x06020000)]
            runtimeclass ToastDismissedEventArgs
            {
                [default] interface Windows.UI.Notifications.IToastDismissedEventArgs;
            }

            [version(0x06020000)]
            runtimeclass ToastFailedEventArgs
            {
                [default] interface Windows.UI.Notifications.IToastFailedEventArgs;
            }

            [version(0x06020000)]
            [static(Windows.UI.Notifications.ITileUpdateManagerStatics, 0x06020000)]
            [threading(mta)]
            runtimeclass TileUpdateManager
            {
            }

            [threading(mta)]
            [version(0x06020000)]
            [static(Windows.UI.Notifications.IBadgeUpdateManagerStatics, 0x06020000)]
            runtimeclass BadgeUpdateManager
            {
            }

            [version(0x06020000)]
            [threading(mta)]
            [static(Windows.UI.Notifications.IToastNotificationManagerStatics, 0x06020000)]
            runtimeclass ToastNotificationManager
            {
            }
        }
    }
}
