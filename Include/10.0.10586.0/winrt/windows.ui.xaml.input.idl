//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0014
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Devices.Input.idl";
import "Windows.System.idl";
import "Windows.UI.Core.idl";
import "Windows.UI.Input.idl";
import "Windows.UI.Xaml.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Edevices2Einput_h__)")
cpp_quote("#include <Windows.Devices.Input.h>")
cpp_quote("#endif // !defined(__windows2Edevices2Einput_h__)")
cpp_quote("#if !defined(__windows2Esystem_h__)")
cpp_quote("#include <Windows.System.h>")
cpp_quote("#endif // !defined(__windows2Esystem_h__)")
cpp_quote("#if !defined(__windows2Eui2Ecore_h__)")
cpp_quote("#include <Windows.UI.Core.h>")
cpp_quote("#endif // !defined(__windows2Eui2Ecore_h__)")
cpp_quote("#if !defined(__windows2Eui2Einput_h__)")
cpp_quote("#include <Windows.UI.Input.h>")
cpp_quote("#endif // !defined(__windows2Eui2Einput_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl_h__)")
cpp_quote("#include <Windows.UI.Xaml.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Devices
    {
        namespace Input
        {
            typedef enum PointerDeviceType PointerDeviceType;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct Point Point;

        typedef struct Rect Rect;
    }
}
namespace Windows
{
    namespace System
    {
        typedef enum VirtualKey VirtualKey;

        typedef enum VirtualKeyModifiers VirtualKeyModifiers;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Core
        {
            typedef struct CorePhysicalKeyStatus CorePhysicalKeyStatus;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Input
        {
            typedef enum HoldingState HoldingState;

            typedef struct ManipulationDelta ManipulationDelta;

            typedef struct ManipulationVelocities ManipulationVelocities;

            runtimeclass PointerPoint;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            runtimeclass UIElement;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Input
            {
                typedef enum FocusNavigationDirection FocusNavigationDirection;

                typedef enum InputScopeNameValue InputScopeNameValue;

                typedef enum KeyboardNavigationMode KeyboardNavigationMode;

                typedef enum ManipulationModes ManipulationModes;

                delegate DoubleTappedEventHandler;

                delegate HoldingEventHandler;

                delegate KeyEventHandler;

                delegate ManipulationCompletedEventHandler;

                delegate ManipulationDeltaEventHandler;

                delegate ManipulationInertiaStartingEventHandler;

                delegate ManipulationStartedEventHandler;

                delegate ManipulationStartingEventHandler;

                delegate PointerEventHandler;

                delegate RightTappedEventHandler;

                delegate TappedEventHandler;

                interface ICommand;

                interface IFocusManager;

                interface IFocusManagerStatics;

                interface IFocusManagerStatics2;

                interface IFocusManagerStatics3;

                interface IInertiaExpansionBehavior;

                interface IInertiaRotationBehavior;

                interface IInertiaTranslationBehavior;

                interface IManipulationPivot;

                interface IManipulationPivotFactory;

                interface IPointer;

                interface IDoubleTappedRoutedEventArgs;

                interface IHoldingRoutedEventArgs;

                interface IInputScope;

                interface IInputScopeName;

                interface IInputScopeNameFactory;

                interface IKeyRoutedEventArgs;

                interface IKeyRoutedEventArgs2;

                interface IManipulationCompletedRoutedEventArgs;

                interface IManipulationDeltaRoutedEventArgs;

                interface IManipulationInertiaStartingRoutedEventArgs;

                interface IManipulationStartedRoutedEventArgs;

                interface IManipulationStartedRoutedEventArgsFactory;

                interface IManipulationStartingRoutedEventArgs;

                interface IPointerRoutedEventArgs;

                interface IRightTappedRoutedEventArgs;

                interface ITappedRoutedEventArgs;

                runtimeclass Pointer;

                runtimeclass FocusManager;

                runtimeclass InertiaExpansionBehavior;

                runtimeclass InertiaRotationBehavior;

                runtimeclass InertiaTranslationBehavior;

                runtimeclass ManipulationPivot;

                runtimeclass DoubleTappedRoutedEventArgs;

                runtimeclass HoldingRoutedEventArgs;

                runtimeclass InputScope;

                runtimeclass InputScopeName;

                runtimeclass KeyRoutedEventArgs;

                runtimeclass ManipulationCompletedRoutedEventArgs;

                runtimeclass ManipulationDeltaRoutedEventArgs;

                runtimeclass ManipulationInertiaStartingRoutedEventArgs;

                runtimeclass ManipulationStartedRoutedEventArgs;

                runtimeclass ManipulationStartingRoutedEventArgs;

                runtimeclass PointerRoutedEventArgs;

                runtimeclass RightTappedRoutedEventArgs;

                runtimeclass TappedRoutedEventArgs;
            }
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Input
            {
                declare
                {
                    interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.Input.InputScopeName*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.Input.Pointer*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.Input.InputScopeName*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.Input.Pointer*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.Input.InputScopeName*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.Input.Pointer*>;

                    interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.Input.InputScopeName*>;
                }
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Input
            {
                [version(0x06030000)]
                enum FocusNavigationDirection
                {
                    Next     = 0,
                    Previous = 1,
                    [version(0x0A000000)]
                    Up       = 2,
                    [version(0x0A000000)]
                    Down     = 3,
                    [version(0x0A000000)]
                    Left     = 4,
                    [version(0x0A000000)]
                    Right    = 5,
                    [version(0x0A000000)]
                    None     = 6
                };

                [version(0x06020000)]
                enum InputScopeNameValue
                {
                    Default                 = 0,
                    Url                     = 1,
                    EmailSmtpAddress        = 5,
                    [version(0x0A000000)]
                    PersonalFullName        = 7,
                    [version(0x06030000)]
                    CurrencyAmountAndSymbol = 20,
                    [version(0x0A000000)]
                    CurrencyAmount          = 21,
                    [version(0x0A000000)]
                    DateMonthNumber         = 23,
                    [version(0x0A000000)]
                    DateDayNumber           = 24,
                    [version(0x0A000000)]
                    DateYear                = 25,
                    [version(0x0A000000)]
                    Digits                  = 28,
                    Number                  = 29,
                    [version(0x0A000000)]
                    Password                = 31,
                    TelephoneNumber         = 32,
                    [version(0x0A000000)]
                    TelephoneCountryCode    = 33,
                    [version(0x0A000000)]
                    TelephoneAreaCode       = 34,
                    [version(0x0A000000)]
                    TelephoneLocalNumber    = 35,
                    [version(0x0A000000)]
                    TimeHour                = 37,
                    [version(0x0A000000)]
                    TimeMinutesOrSeconds    = 38,
                    NumberFullWidth         = 39,
                    AlphanumericHalfWidth   = 40,
                    AlphanumericFullWidth   = 41,
                    Hiragana                = 44,
                    KatakanaHalfWidth       = 45,
                    KatakanaFullWidth       = 46,
                    Hanja                   = 47,
                    HangulHalfWidth         = 48,
                    HangulFullWidth         = 49,
                    Search                  = 50,
                    [version(0x06030000)]
                    Formula                 = 51,
                    [version(0x06030000)]
                    SearchIncremental       = 52,
                    ChineseHalfWidth        = 53,
                    ChineseFullWidth        = 54,
                    NativeScript            = 55,
                    [version(0x0A000000)]
                    Text                    = 57,
                    [version(0x06030000)]
                    Chat                    = 58,
                    [version(0x06030000)]
                    NameOrPhoneNumber       = 59,
                    [version(0x0A000000)]
                    EmailNameOrAddress      = 60,
                    [version(0x0A000000)]
                    Maps                    = 62,
                    [version(0x0A000000)]
                    NumericPassword         = 63,
                    [version(0x0A000000)]
                    NumericPin              = 64,
                    [version(0x0A000000)]
                    AlphanumericPin         = 65,
                    [version(0x0A000000)]
                    FormulaNumber           = 67
                };

                [version(0x06020000)]
                enum KeyboardNavigationMode
                {
                    Local = 0,
                    Cycle = 1,
                    Once  = 2
                };

                [flags]
                [version(0x06020000)]
                enum ManipulationModes
                {
                    None             = 0x0,
                    TranslateX       = 0x1,
                    TranslateY       = 0x2,
                    TranslateRailsX  = 0x4,
                    TranslateRailsY  = 0x8,
                    Rotate           = 0x10,
                    Scale            = 0x20,
                    TranslateInertia = 0x40,
                    RotateInertia    = 0x80,
                    ScaleInertia     = 0x100,
                    All              = 0xFFFF,
                    System           = 0x10000
                };

                [uuid(3124D025-04A7-4D45-825E-8204A624DBF4)]
                [version(0x06020000)]
                delegate
                    HRESULT DoubleTappedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs* e);

                [uuid(ECAE8CCD-8E5E-4FBE-9846-30A6370AFCDF)]
                [version(0x06020000)]
                delegate
                    HRESULT HoldingEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.HoldingRoutedEventArgs* e);

                [uuid(7C63D2E5-7A0E-4E12-B96A-7715AA6FF1C8)]
                [version(0x06020000)]
                delegate
                    HRESULT KeyEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.KeyRoutedEventArgs* e);

                [uuid(38EF4B0F-14F8-42DF-9A1E-A4BCC4AF77F4)]
                [version(0x06020000)]
                delegate
                    HRESULT ManipulationCompletedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs* e);

                [uuid(AA1160CB-DFB9-4C56-ABDC-711B63C8EB94)]
                [version(0x06020000)]
                delegate
                    HRESULT ManipulationDeltaEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs* e);

                [uuid(D39D6322-7C9C-481B-827B-C8B2D9BB6FC7)]
                [version(0x06020000)]
                delegate
                    HRESULT ManipulationInertiaStartingEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs* e);

                [uuid(F88345F8-E0A3-4BE2-B90C-DC20E6D8BEB0)]
                [version(0x06020000)]
                delegate
                    HRESULT ManipulationStartedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs* e);

                [uuid(10D0B04E-BFE4-42CB-823C-3FECD8770EF8)]
                [version(0x06020000)]
                delegate
                    HRESULT ManipulationStartingEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs* e);

                [uuid(E4385929-C004-4BCF-8970-359486E39F88)]
                [version(0x06020000)]
                delegate
                    HRESULT PointerEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.PointerRoutedEventArgs* e);

                [uuid(2532A062-F447-4950-9C46-F1E34A2C2238)]
                [version(0x06020000)]
                delegate
                    HRESULT RightTappedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.RightTappedRoutedEventArgs* e);

                [uuid(68D940CC-9FF0-49CE-B141-3F07EC477B97)]
                [version(0x06020000)]
                delegate
                    HRESULT TappedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.TappedRoutedEventArgs* e);

                [uuid(E5AF3542-CA67-4081-995B-709DD13792DF)]
                [version(0x06020000)]
                interface ICommand : IInspectable
                {
                    [eventadd] HRESULT CanExecuteChanged([in] Windows.Foundation.EventHandler<IInspectable*>* value, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CanExecuteChanged([in] EventRegistrationToken token);
                    HRESULT CanExecute([in] IInspectable* parameter, [out] [retval] boolean* returnValue);
                    HRESULT Execute([in] IInspectable* parameter);
                }

                [exclusiveto(Windows.UI.Xaml.Input.FocusManager)]
                [uuid(C843F50B-3B83-4DA1-9D6F-557C1169F341)]
                [version(0x06020000)]
                interface IFocusManager : IInspectable
                {
                }

                [exclusiveto(Windows.UI.Xaml.Input.FocusManager)]
                [uuid(1ECCD326-8182-4482-826A-0918E9ED9AF7)]
                [version(0x06020000)]
                interface IFocusManagerStatics : IInspectable
                {
                    HRESULT GetFocusedElement([out] [retval] IInspectable** returnValue);
                }

                [exclusiveto(Windows.UI.Xaml.Input.FocusManager)]
                [uuid(A920D761-DD87-4F31-BEDA-EF417FE7C04A)]
                [version(0x06030000)]
                interface IFocusManagerStatics2 : IInspectable
                {
                    HRESULT TryMoveFocus([in] Windows.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [out] [retval] boolean* returnValue);
                }

                [exclusiveto(Windows.UI.Xaml.Input.FocusManager)]
                [uuid(60805EBF-B149-417D-83F1-BAEB560E2A47)]
                [version(0x0A000000)]
                interface IFocusManagerStatics3 : IInspectable
                {
                    [overload("FindNextFocusableElement")] HRESULT FindNextFocusableElement([in] Windows.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [out] [retval] Windows.UI.Xaml.UIElement** result);
                    [overload("FindNextFocusableElement")] HRESULT FindNextFocusableElementWithHint([in] Windows.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [in] Windows.Foundation.Rect hintRect, [out] [retval] Windows.UI.Xaml.UIElement** result);
                }

                [exclusiveto(Windows.UI.Xaml.Input.InertiaExpansionBehavior)]
                [uuid(751D87E5-8D42-44C5-965E-3CD30CC9D6F7)]
                [version(0x06020000)]
                interface IInertiaExpansionBehavior : IInspectable
                {
                    [propget] HRESULT DesiredDeceleration([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredDeceleration([in] DOUBLE value);
                    [propget] HRESULT DesiredExpansion([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredExpansion([in] DOUBLE value);
                }

                [exclusiveto(Windows.UI.Xaml.Input.InertiaRotationBehavior)]
                [uuid(424CFB2E-BBFD-4625-AE78-20C65BF1EFAF)]
                [version(0x06020000)]
                interface IInertiaRotationBehavior : IInspectable
                {
                    [propget] HRESULT DesiredDeceleration([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredDeceleration([in] DOUBLE value);
                    [propget] HRESULT DesiredRotation([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredRotation([in] DOUBLE value);
                }

                [exclusiveto(Windows.UI.Xaml.Input.InertiaTranslationBehavior)]
                [uuid(45D3A512-3B32-4882-A4C2-ECFA2D4B6DF0)]
                [version(0x06020000)]
                interface IInertiaTranslationBehavior : IInspectable
                {
                    [propget] HRESULT DesiredDeceleration([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredDeceleration([in] DOUBLE value);
                    [propget] HRESULT DesiredDisplacement([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredDisplacement([in] DOUBLE value);
                }

                [exclusiveto(Windows.UI.Xaml.Input.ManipulationPivot)]
                [uuid(2E3838A5-E6C2-4998-82AC-18748B141666)]
                [version(0x06020000)]
                interface IManipulationPivot : IInspectable
                {
                    [propget] HRESULT Center([out] [retval] Windows.Foundation.Point* value);
                    [propput] HRESULT Center([in] Windows.Foundation.Point value);
                    [propget] HRESULT Radius([out] [retval] DOUBLE* value);
                    [propput] HRESULT Radius([in] DOUBLE value);
                }

                [exclusiveto(Windows.UI.Xaml.Input.ManipulationPivot)]
                [uuid(6D05B039-3702-4396-AD9B-A825EFA63A3B)]
                [version(0x06020000)]
                interface IManipulationPivotFactory : IInspectable
                {
                    HRESULT CreateInstanceWithCenterAndRadius([in] Windows.Foundation.Point center, [in] DOUBLE radius, [out] [retval] Windows.UI.Xaml.Input.ManipulationPivot** instance);
                }

                [exclusiveto(Windows.UI.Xaml.Input.Pointer)]
                [uuid(5EE8F39F-747D-4171-90E6-CD37A9DFFB11)]
                [version(0x06020000)]
                interface IPointer : IInspectable
                {
                    [propget] HRESULT PointerId([out] [retval] UINT32* value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT IsInContact([out] [retval] boolean* value);
                    [propget] HRESULT IsInRange([out] [retval] boolean* value);
                }

                [exclusiveto(Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs)]
                [uuid(AF404424-26DF-44F4-8714-9359249B62D3)]
                [version(0x06020000)]
                interface IDoubleTappedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT GetPosition([in] Windows.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* returnValue);
                }

                [exclusiveto(Windows.UI.Xaml.Input.HoldingRoutedEventArgs)]
                [uuid(C246FF23-D80D-44DE-8DB9-0D815E269AC0)]
                [version(0x06020000)]
                interface IHoldingRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT HoldingState([out] [retval] Windows.UI.Input.HoldingState* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT GetPosition([in] Windows.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* returnValue);
                }

                [exclusiveto(Windows.UI.Xaml.Input.InputScope)]
                [uuid(5C0F85F3-F9D8-4220-B666-045D074D9BFA)]
                [version(0x06020000)]
                interface IInputScope : IInspectable
                {
                    [propget] HRESULT Names([out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Xaml.Input.InputScopeName*>** value);
                }

                [exclusiveto(Windows.UI.Xaml.Input.InputScopeName)]
                [uuid(FD3E6997-08FB-4CBA-A021-792D7589FD5A)]
                [version(0x06020000)]
                interface IInputScopeName : IInspectable
                {
                    [propget] HRESULT NameValue([out] [retval] Windows.UI.Xaml.Input.InputScopeNameValue* value);
                    [propput] HRESULT NameValue([in] Windows.UI.Xaml.Input.InputScopeNameValue value);
                }

                [exclusiveto(Windows.UI.Xaml.Input.InputScopeName)]
                [uuid(4A40BB52-4BD7-4E54-8617-1CDA8A1EDA7F)]
                [version(0x06020000)]
                interface IInputScopeNameFactory : IInspectable
                {
                    HRESULT CreateInstance([in] Windows.UI.Xaml.Input.InputScopeNameValue nameValue, [out] [retval] Windows.UI.Xaml.Input.InputScopeName** instance);
                }

                [exclusiveto(Windows.UI.Xaml.Input.KeyRoutedEventArgs)]
                [uuid(D4CD3DFE-4079-42E9-A39A-3095D3F049C6)]
                [version(0x06020000)]
                interface IKeyRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Key([out] [retval] Windows.System.VirtualKey* value);
                    [propget] HRESULT KeyStatus([out] [retval] Windows.UI.Core.CorePhysicalKeyStatus* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [exclusiveto(Windows.UI.Xaml.Input.KeyRoutedEventArgs)]
                [uuid(1B02D57A-9634-4F14-91B2-133E42FDB3CD)]
                [version(0x0A000000)]
                interface IKeyRoutedEventArgs2 : IInspectable
                {
                    [propget] HRESULT OriginalKey([out] [retval] Windows.System.VirtualKey* value);
                }

                [exclusiveto(Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs)]
                [uuid(B5AD9B23-2F41-498E-8319-015EE8A75346)]
                [version(0x06020000)]
                interface IManipulationCompletedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Container([out] [retval] Windows.UI.Xaml.UIElement** value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                    [propget] HRESULT IsInertial([out] [retval] boolean* value);
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Velocities([out] [retval] Windows.UI.Input.ManipulationVelocities* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                }

                [exclusiveto(Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs)]
                [uuid(400D5794-4C6F-491D-82D6-3517109399C6)]
                [version(0x06020000)]
                interface IManipulationDeltaRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Container([out] [retval] Windows.UI.Xaml.UIElement** value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                    [propget] HRESULT IsInertial([out] [retval] boolean* value);
                    [propget] HRESULT Delta([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Velocities([out] [retval] Windows.UI.Input.ManipulationVelocities* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    HRESULT Complete();
                }

                [exclusiveto(Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs)]
                [uuid(246A91A9-CA43-4C0B-ACEF-81E8B8147520)]
                [version(0x06020000)]
                interface IManipulationInertiaStartingRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Container([out] [retval] Windows.UI.Xaml.UIElement** value);
                    [propget] HRESULT ExpansionBehavior([out] [retval] Windows.UI.Xaml.Input.InertiaExpansionBehavior** value);
                    [propput] HRESULT ExpansionBehavior([in] Windows.UI.Xaml.Input.InertiaExpansionBehavior* value);
                    [propget] HRESULT RotationBehavior([out] [retval] Windows.UI.Xaml.Input.InertiaRotationBehavior** value);
                    [propput] HRESULT RotationBehavior([in] Windows.UI.Xaml.Input.InertiaRotationBehavior* value);
                    [propget] HRESULT TranslationBehavior([out] [retval] Windows.UI.Xaml.Input.InertiaTranslationBehavior** value);
                    [propput] HRESULT TranslationBehavior([in] Windows.UI.Xaml.Input.InertiaTranslationBehavior* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Delta([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Velocities([out] [retval] Windows.UI.Input.ManipulationVelocities* value);
                }

                [exclusiveto(Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs)]
                [uuid(5DB1AA05-9F80-48B6-AE6C-4F119DE8FF13)]
                [version(0x06020000)]
                interface IManipulationStartedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Container([out] [retval] Windows.UI.Xaml.UIElement** value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    HRESULT Complete();
                }

                [exclusiveto(Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs)]
                [uuid(84C1DAA7-7272-4463-B6C3-A40B9BA151FC)]
                [version(0x06020000)]
                interface IManipulationStartedRoutedEventArgsFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs** instance);
                }

                [exclusiveto(Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs)]
                [uuid(18D636B7-53A4-4C15-A498-F3A9CA212A42)]
                [version(0x06020000)]
                interface IManipulationStartingRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Mode([out] [retval] Windows.UI.Xaml.Input.ManipulationModes* value);
                    [propput] HRESULT Mode([in] Windows.UI.Xaml.Input.ManipulationModes value);
                    [propget] HRESULT Container([out] [retval] Windows.UI.Xaml.UIElement** value);
                    [propput] HRESULT Container([in] Windows.UI.Xaml.UIElement* value);
                    [propget] HRESULT Pivot([out] [retval] Windows.UI.Xaml.Input.ManipulationPivot** value);
                    [propput] HRESULT Pivot([in] Windows.UI.Xaml.Input.ManipulationPivot* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [exclusiveto(Windows.UI.Xaml.Input.PointerRoutedEventArgs)]
                [uuid(DA628F0A-9752-49E2-BDE2-49ECCAB9194D)]
                [version(0x06020000)]
                interface IPointerRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Pointer([out] [retval] Windows.UI.Xaml.Input.Pointer** value);
                    [propget] HRESULT KeyModifiers([out] [retval] Windows.System.VirtualKeyModifiers* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT GetCurrentPoint([in] Windows.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.UI.Input.PointerPoint** returnValue);
                    HRESULT GetIntermediatePoints([in] Windows.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Input.PointerPoint*>** returnValue);
                }

                [exclusiveto(Windows.UI.Xaml.Input.RightTappedRoutedEventArgs)]
                [uuid(6834869D-7BD5-4033-B237-172F79ABE393)]
                [version(0x06020000)]
                interface IRightTappedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT GetPosition([in] Windows.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* returnValue);
                }

                [exclusiveto(Windows.UI.Xaml.Input.TappedRoutedEventArgs)]
                [uuid(A099E6BE-E624-459A-BB1D-E05C73E2CC66)]
                [version(0x06020000)]
                interface ITappedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT GetPosition([in] Windows.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* returnValue);
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass Pointer
                {
                    [default] interface Windows.UI.Xaml.Input.IPointer;
                }

                [marshaling_behavior(agile)]
                [static(Windows.UI.Xaml.Input.IFocusManagerStatics2, 0x06030000)]
                [static(Windows.UI.Xaml.Input.IFocusManagerStatics3, 0x0A000000)]
                [static(Windows.UI.Xaml.Input.IFocusManagerStatics, 0x06020000)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass FocusManager
                {
                    [default] interface Windows.UI.Xaml.Input.IFocusManager;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass InertiaExpansionBehavior
                {
                    [default] interface Windows.UI.Xaml.Input.IInertiaExpansionBehavior;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass InertiaRotationBehavior
                {
                    [default] interface Windows.UI.Xaml.Input.IInertiaRotationBehavior;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass InertiaTranslationBehavior
                {
                    [default] interface Windows.UI.Xaml.Input.IInertiaTranslationBehavior;
                }

                [activatable(Windows.UI.Xaml.Input.IManipulationPivotFactory, 0x06020000)]
                [activatable(0x06020000)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass ManipulationPivot
                {
                    [default] interface Windows.UI.Xaml.Input.IManipulationPivot;
                }

                [activatable(0x06020000)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass DoubleTappedRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IDoubleTappedRoutedEventArgs;
                }

                [activatable(0x06020000)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass HoldingRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IHoldingRoutedEventArgs;
                }

                [activatable(0x06020000)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass InputScope : Windows.UI.Xaml.DependencyObject
                {
                    [default] interface Windows.UI.Xaml.Input.IInputScope;
                }

                [activatable(0x06020000)]
                [activatable(Windows.UI.Xaml.Input.IInputScopeNameFactory, 0x06020000)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass InputScopeName : Windows.UI.Xaml.DependencyObject
                {
                    [default] interface Windows.UI.Xaml.Input.IInputScopeName;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass KeyRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IKeyRoutedEventArgs;
                    [version(0x0A000000)] interface Windows.UI.Xaml.Input.IKeyRoutedEventArgs2;
                }

                [activatable(0x06020000)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass ManipulationCompletedRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs;
                }

                [activatable(0x06020000)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass ManipulationDeltaRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs;
                }

                [activatable(0x06020000)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass ManipulationInertiaStartingRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs;
                }

                [composable(Windows.UI.Xaml.Input.IManipulationStartedRoutedEventArgsFactory, public, 0x06020000)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass ManipulationStartedRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IManipulationStartedRoutedEventArgs;
                }

                [activatable(0x06020000)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass ManipulationStartingRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IManipulationStartingRoutedEventArgs;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass PointerRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IPointerRoutedEventArgs;
                }

                [activatable(0x06020000)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass RightTappedRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IRightTappedRoutedEventArgs;
                }

                [activatable(0x06020000)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass TappedRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.ITappedRoutedEventArgs;
                }
            }
        }
    }
}
