//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0014
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Foundation
    {
        typedef struct DateTime DateTime;

        typedef struct TimeSpan TimeSpan;
    }
}
namespace Windows
{
    namespace Devices
    {
        namespace Geolocation
        {
            typedef enum PositionAccuracy PositionAccuracy;

            typedef enum PositionStatus PositionStatus;

            typedef enum PositionSource PositionSource;

            typedef enum GeoshapeType GeoshapeType;

            typedef enum AltitudeReferenceSystem AltitudeReferenceSystem;

            typedef enum GeolocationAccessStatus GeolocationAccessStatus;

            typedef struct BasicGeoposition BasicGeoposition;

            interface IGeoshape;

            interface IGeopoint;

            interface IGeopointFactory;

            interface IGeopath;

            interface IGeopathFactory;

            interface IGeoboundingBox;

            interface IGeoboundingBoxFactory;

            interface IGeoboundingBoxStatics;

            interface IGeocoordinateSatelliteData;

            interface IVenueData;

            interface IGeocoordinate;

            interface IGeocoordinateWithPositionData;

            interface IGeocoordinateWithPoint;

            interface IGeoposition;

            interface IGeoposition2;

            interface ICivicAddress;

            interface IPositionChangedEventArgs;

            interface IStatusChangedEventArgs;

            interface IGeolocator;

            interface IGeolocatorWithScalarAccuracy;

            interface IGeolocatorStatics;

            interface IGeocircle;

            interface IGeocircleFactory;

            runtimeclass Geopoint;

            runtimeclass Geopath;

            runtimeclass GeoboundingBox;

            runtimeclass GeocoordinateSatelliteData;

            runtimeclass VenueData;

            runtimeclass Geocoordinate;

            runtimeclass CivicAddress;

            runtimeclass Geoposition;

            runtimeclass PositionChangedEventArgs;

            runtimeclass StatusChangedEventArgs;

            runtimeclass Geolocator;

            runtimeclass Geocircle;
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace Devices
    {
        namespace Geolocation
        {
            declare
            {
                interface Windows.Foundation.Collections.IIterable<Windows.Devices.Geolocation.BasicGeoposition>;

                interface Windows.Foundation.Collections.IIterable<Windows.Devices.Geolocation.Geopath*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Devices.Geolocation.Geopoint*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Devices.Geolocation.Geoposition*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Devices.Geolocation.BasicGeoposition>;

                interface Windows.Foundation.Collections.IIterator<Windows.Devices.Geolocation.Geopath*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Devices.Geolocation.Geopoint*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Devices.Geolocation.Geoposition*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Devices.Geolocation.BasicGeoposition>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Devices.Geolocation.Geopath*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Devices.Geolocation.Geoposition*>;

                interface Windows.Foundation.Collections.IVector<Windows.Devices.Geolocation.Geopath*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Devices.Geolocation.GeolocationAccessStatus>;

                interface Windows.Foundation.IAsyncOperation<Windows.Devices.Geolocation.Geopoint*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Devices.Geolocation.Geoposition*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Devices.Geolocation.Geoposition*>*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Devices.Geolocation.Geolocator*, Windows.Devices.Geolocation.PositionChangedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Devices.Geolocation.Geolocator*, Windows.Devices.Geolocation.StatusChangedEventArgs*>;
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace Devices
    {
        namespace Geolocation
        {
            [version(0x06020000)]
            enum PositionAccuracy
            {
                Default = 0,
                High    = 1
            };

            [version(0x06020000)]
            enum PositionStatus
            {
                Ready          = 0,
                Initializing   = 1,
                NoData         = 2,
                Disabled       = 3,
                NotInitialized = 4,
                NotAvailable   = 5
            };

            [version(0x06030000)]
            enum PositionSource
            {
                Cellular  = 0,
                Satellite = 1,
                WiFi      = 2,
                [version(0x06030000)]
                IPAddress = 3,
                [version(0x06030000)]
                Unknown   = 4
            };

            [version(0x06030000)]
            enum GeoshapeType
            {
                Geopoint       = 0,
                Geocircle      = 1,
                [version(0x0A000000)]
                Geopath        = 2,
                [version(0x0A000000)]
                GeoboundingBox = 3
            };

            [version(0x06030000)]
            enum AltitudeReferenceSystem
            {
                Unspecified = 0,
                Terrain     = 1,
                Ellipsoid   = 2,
                Geoid       = 3,
                Surface     = 4
            };

            [version(0x0A000000)]
            enum GeolocationAccessStatus
            {
                Unspecified = 0,
                Allowed     = 1,
                Denied      = 2
            };

            [version(0x06030000)]
            struct BasicGeoposition
            {
                DOUBLE Latitude;
                DOUBLE Longitude;
                DOUBLE Altitude;
            };

            [uuid(C99CA2AF-C729-43C1-8FAB-D6DEC914DF7E)]
            [version(0x06030000)]
            interface IGeoshape : IInspectable
            {
                [propget] HRESULT GeoshapeType([out] [retval] Windows.Devices.Geolocation.GeoshapeType* value);
                [propget] HRESULT SpatialReferenceId([out] [retval] UINT32* value);
                [propget] HRESULT AltitudeReferenceSystem([out] [retval] Windows.Devices.Geolocation.AltitudeReferenceSystem* value);
            }

            [exclusiveto(Windows.Devices.Geolocation.Geopoint)]
            [uuid(6BFA00EB-E56E-49BB-9CAF-CBAA78A8BCEF)]
            [version(0x06030000)]
            interface IGeopoint : IInspectable
                requires
                    Windows.Devices.Geolocation.IGeoshape
            {
                [propget] HRESULT Position([out] [retval] Windows.Devices.Geolocation.BasicGeoposition* value);
            }

            [exclusiveto(Windows.Devices.Geolocation.Geopoint)]
            [uuid(DB6B8D33-76BD-4E30-8AF7-A844DC37B7A0)]
            [version(0x06030000)]
            interface IGeopointFactory : IInspectable
            {
                HRESULT Create([in] Windows.Devices.Geolocation.BasicGeoposition position, [out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                HRESULT CreateWithAltitudeReferenceSystem([in] Windows.Devices.Geolocation.BasicGeoposition position, [in] Windows.Devices.Geolocation.AltitudeReferenceSystem altitudeReferenceSystem, [out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                HRESULT CreateWithAltitudeReferenceSystemAndSpatialReferenceId([in] Windows.Devices.Geolocation.BasicGeoposition position, [in] Windows.Devices.Geolocation.AltitudeReferenceSystem altitudeReferenceSystem, [in] UINT32 spatialReferenceId, [out] [retval] Windows.Devices.Geolocation.Geopoint** value);
            }

            [exclusiveto(Windows.Devices.Geolocation.Geopath)]
            [uuid(E53FD7B9-2DA4-4714-A652-DE8593289898)]
            [version(0x0A000000)]
            interface IGeopath : IInspectable
                requires
                    Windows.Devices.Geolocation.IGeoshape
            {
                [propget] HRESULT Positions([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Devices.Geolocation.BasicGeoposition>** value);
            }

            [exclusiveto(Windows.Devices.Geolocation.Geopath)]
            [uuid(27BEA9C8-C7E7-4359-9B9B-FCA3E05EF593)]
            [version(0x0A000000)]
            interface IGeopathFactory : IInspectable
            {
                HRESULT Create([in] Windows.Foundation.Collections.IIterable<Windows.Devices.Geolocation.BasicGeoposition>* positions, [out] [retval] Windows.Devices.Geolocation.Geopath** value);
                HRESULT CreateWithAltitudeReference([in] Windows.Foundation.Collections.IIterable<Windows.Devices.Geolocation.BasicGeoposition>* positions, [in] Windows.Devices.Geolocation.AltitudeReferenceSystem altitudeReferenceSystem, [out] [retval] Windows.Devices.Geolocation.Geopath** value);
                HRESULT CreateWithAltitudeReferenceAndSpatialReference([in] Windows.Foundation.Collections.IIterable<Windows.Devices.Geolocation.BasicGeoposition>* positions, [in] Windows.Devices.Geolocation.AltitudeReferenceSystem altitudeReferenceSystem, [in] UINT32 spatialReferenceId, [out] [retval] Windows.Devices.Geolocation.Geopath** value);
            }

            [exclusiveto(Windows.Devices.Geolocation.GeoboundingBox)]
            [uuid(0896C80B-274F-43DA-9A06-CBFCDAEB4EC2)]
            [version(0x0A000000)]
            interface IGeoboundingBox : IInspectable
                requires
                    Windows.Devices.Geolocation.IGeoshape
            {
                [propget] HRESULT NorthwestCorner([out] [retval] Windows.Devices.Geolocation.BasicGeoposition* value);
                [propget] HRESULT SoutheastCorner([out] [retval] Windows.Devices.Geolocation.BasicGeoposition* value);
                [propget] HRESULT Center([out] [retval] Windows.Devices.Geolocation.BasicGeoposition* value);
                [propget] HRESULT MinAltitude([out] [retval] DOUBLE* value);
                [propget] HRESULT MaxAltitude([out] [retval] DOUBLE* value);
            }

            [exclusiveto(Windows.Devices.Geolocation.GeoboundingBox)]
            [uuid(4DFBA589-0411-4ABC-B3B5-5BBCCB57D98C)]
            [version(0x0A000000)]
            interface IGeoboundingBoxFactory : IInspectable
            {
                HRESULT Create([in] Windows.Devices.Geolocation.BasicGeoposition northwestCorner, [in] Windows.Devices.Geolocation.BasicGeoposition southeastCorner, [out] [retval] Windows.Devices.Geolocation.GeoboundingBox** value);
                HRESULT CreateWithAltitudeReference([in] Windows.Devices.Geolocation.BasicGeoposition northwestCorner, [in] Windows.Devices.Geolocation.BasicGeoposition southeastCorner, [in] Windows.Devices.Geolocation.AltitudeReferenceSystem altitudeReferenceSystem, [out] [retval] Windows.Devices.Geolocation.GeoboundingBox** value);
                HRESULT CreateWithAltitudeReferenceAndSpatialReference([in] Windows.Devices.Geolocation.BasicGeoposition northwestCorner, [in] Windows.Devices.Geolocation.BasicGeoposition southeastCorner, [in] Windows.Devices.Geolocation.AltitudeReferenceSystem altitudeReferenceSystem, [in] UINT32 spatialReferenceId, [out] [retval] Windows.Devices.Geolocation.GeoboundingBox** value);
            }

            [exclusiveto(Windows.Devices.Geolocation.GeoboundingBox)]
            [uuid(67B80708-E61A-4CD0-841B-93233792B5CA)]
            [version(0x0A000000)]
            interface IGeoboundingBoxStatics : IInspectable
            {
                [overload("TryCompute")] HRESULT TryCompute([in] Windows.Foundation.Collections.IIterable<Windows.Devices.Geolocation.BasicGeoposition>* positions, [out] [retval] Windows.Devices.Geolocation.GeoboundingBox** value);
                [overload("TryCompute")] HRESULT TryComputeWithAltitudeReference([in] Windows.Foundation.Collections.IIterable<Windows.Devices.Geolocation.BasicGeoposition>* positions, [in] Windows.Devices.Geolocation.AltitudeReferenceSystem altitudeRefSystem, [out] [retval] Windows.Devices.Geolocation.GeoboundingBox** value);
                [overload("TryCompute")] HRESULT TryComputeWithAltitudeReferenceAndSpatialReference([in] Windows.Foundation.Collections.IIterable<Windows.Devices.Geolocation.BasicGeoposition>* positions, [in] Windows.Devices.Geolocation.AltitudeReferenceSystem altitudeRefSystem, [in] UINT32 spatialReferenceId, [out] [retval] Windows.Devices.Geolocation.GeoboundingBox** value);
            }

            [exclusiveto(Windows.Devices.Geolocation.GeocoordinateSatelliteData)]
            [uuid(C32A74D9-2608-474C-912C-06DD490F4AF7)]
            [version(0x06030000)]
            interface IGeocoordinateSatelliteData : IInspectable
            {
                [propget] HRESULT PositionDilutionOfPrecision([out] [retval] Windows.Foundation.IReference<DOUBLE>** ppValue);
                [propget] HRESULT HorizontalDilutionOfPrecision([out] [retval] Windows.Foundation.IReference<DOUBLE>** ppValue);
                [propget] HRESULT VerticalDilutionOfPrecision([out] [retval] Windows.Foundation.IReference<DOUBLE>** ppValue);
            }

            [exclusiveto(Windows.Devices.Geolocation.VenueData)]
            [uuid(66F39187-60E3-4B2F-B527-4F53F1C3C677)]
            [version(0x0A000000)]
            interface IVenueData : IInspectable
            {
                [propget] HRESULT Id([out] [retval] HSTRING* value);
                [propget] HRESULT Level([out] [retval] HSTRING* value);
            }

            [exclusiveto(Windows.Devices.Geolocation.Geocoordinate)]
            [uuid(EE21A3AA-976A-4C70-803D-083EA55BCBC4)]
            [version(0x06020000)]
            interface IGeocoordinate : IInspectable
            {
                [deprecated("Latitude may be altered or unavailable after Windows 8.1. Instead, use Point.Position.Latitude", deprecate, 0x06030000)] [propget] HRESULT Latitude([out] [retval] DOUBLE* value);
                [deprecated("Longitude may be altered or unavailable after Windows 8.1. Instead, use Point.Position.Longitude", deprecate, 0x06030000)] [propget] HRESULT Longitude([out] [retval] DOUBLE* value);
                [deprecated("Altitude may be altered or unavailable after Windows 8.1. Instead, use Point.Position.Altitude", deprecate, 0x06030000)] [propget] HRESULT Altitude([out] [retval] Windows.Foundation.IReference<DOUBLE>** value);
                [propget] HRESULT Accuracy([out] [retval] DOUBLE* value);
                [propget] HRESULT AltitudeAccuracy([out] [retval] Windows.Foundation.IReference<DOUBLE>** value);
                [propget] HRESULT Heading([out] [retval] Windows.Foundation.IReference<DOUBLE>** value);
                [propget] HRESULT Speed([out] [retval] Windows.Foundation.IReference<DOUBLE>** value);
                [propget] HRESULT Timestamp([out] [retval] Windows.Foundation.DateTime* value);
            }

            [exclusiveto(Windows.Devices.Geolocation.Geocoordinate)]
            [uuid(95E634BE-DBD6-40AC-B8F2-A65C0340D9A6)]
            [version(0x06030000)]
            interface IGeocoordinateWithPositionData : IInspectable
                requires
                    Windows.Devices.Geolocation.IGeocoordinate
            {
                [propget] HRESULT PositionSource([out] [retval] Windows.Devices.Geolocation.PositionSource* pValue);
                [propget] HRESULT SatelliteData([out] [retval] Windows.Devices.Geolocation.GeocoordinateSatelliteData** ppValue);
            }

            [exclusiveto(Windows.Devices.Geolocation.Geocoordinate)]
            [uuid(FEEA0525-D22C-4D46-B527-0B96066FC7DB)]
            [version(0x06030000)]
            interface IGeocoordinateWithPoint : IInspectable
            {
                [propget] HRESULT Point([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
            }

            [exclusiveto(Windows.Devices.Geolocation.Geoposition)]
            [uuid(C18D0454-7D41-4FF7-A957-9DFFB4EF7F5B)]
            [version(0x06020000)]
            interface IGeoposition : IInspectable
            {
                [propget] HRESULT Coordinate([out] [retval] Windows.Devices.Geolocation.Geocoordinate** value);
                [propget] HRESULT CivicAddress([out] [retval] Windows.Devices.Geolocation.CivicAddress** value);
            }

            [exclusiveto(Windows.Devices.Geolocation.Geoposition)]
            [uuid(7F62F697-8671-4B0D-86F8-474A8496187C)]
            [version(0x0A000000)]
            interface IGeoposition2 : IInspectable
                requires
                    Windows.Devices.Geolocation.IGeoposition
            {
                [propget] HRESULT VenueData([out] [retval] Windows.Devices.Geolocation.VenueData** value);
            }

            [exclusiveto(Windows.Devices.Geolocation.CivicAddress)]
            [uuid(A8567A1A-64F4-4D48-BCEA-F6B008ECA34C)]
            [version(0x06020000)]
            interface ICivicAddress : IInspectable
            {
                [propget] HRESULT Country([out] [retval] HSTRING* value);
                [propget] HRESULT State([out] [retval] HSTRING* value);
                [propget] HRESULT City([out] [retval] HSTRING* value);
                [propget] HRESULT PostalCode([out] [retval] HSTRING* value);
                [propget] HRESULT Timestamp([out] [retval] Windows.Foundation.DateTime* value);
            }

            [exclusiveto(Windows.Devices.Geolocation.PositionChangedEventArgs)]
            [uuid(37859CE5-9D1E-46C5-BF3B-6AD8CAC1A093)]
            [version(0x06020000)]
            interface IPositionChangedEventArgs : IInspectable
            {
                [propget] HRESULT Position([out] [retval] Windows.Devices.Geolocation.Geoposition** value);
            }

            [exclusiveto(Windows.Devices.Geolocation.StatusChangedEventArgs)]
            [uuid(3453D2DA-8C93-4111-A205-9AECFC9BE5C0)]
            [version(0x06020000)]
            interface IStatusChangedEventArgs : IInspectable
            {
                [propget] HRESULT Status([out] [retval] Windows.Devices.Geolocation.PositionStatus* value);
            }

            [exclusiveto(Windows.Devices.Geolocation.Geolocator)]
            [uuid(A9C3BF62-4524-4989-8AA9-DE019D2E551F)]
            [version(0x06020000)]
            interface IGeolocator : IInspectable
            {
                [propget] HRESULT DesiredAccuracy([out] [retval] Windows.Devices.Geolocation.PositionAccuracy* value);
                [propput] HRESULT DesiredAccuracy([in] Windows.Devices.Geolocation.PositionAccuracy value);
                [propget] HRESULT MovementThreshold([out] [retval] DOUBLE* value);
                [propput] HRESULT MovementThreshold([in] DOUBLE value);
                [propget] HRESULT ReportInterval([out] [retval] UINT32* value);
                [propput] HRESULT ReportInterval([in] UINT32 value);
                [propget] HRESULT LocationStatus([out] [retval] Windows.Devices.Geolocation.PositionStatus* value);
                [overload("GetGeopositionAsync")] HRESULT GetGeopositionAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Devices.Geolocation.Geoposition*>** value);
                [overload("GetGeopositionAsync")] HRESULT GetGeopositionAsyncWithAgeAndTimeout([in] Windows.Foundation.TimeSpan maximumAge, [in] Windows.Foundation.TimeSpan timeout, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Devices.Geolocation.Geoposition*>** value);
                [eventadd] HRESULT PositionChanged([in] Windows.Foundation.TypedEventHandler<Windows.Devices.Geolocation.Geolocator*, Windows.Devices.Geolocation.PositionChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PositionChanged([in] EventRegistrationToken token);
                [eventadd] HRESULT StatusChanged([in] Windows.Foundation.TypedEventHandler<Windows.Devices.Geolocation.Geolocator*, Windows.Devices.Geolocation.StatusChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT StatusChanged([in] EventRegistrationToken token);
            }

            [exclusiveto(Windows.Devices.Geolocation.Geolocator)]
            [uuid(96F5D3C1-B80F-460A-994D-A96C47A51AA4)]
            [version(0x06030000)]
            interface IGeolocatorWithScalarAccuracy : IInspectable
                requires
                    Windows.Devices.Geolocation.IGeolocator
            {
                [propget] HRESULT DesiredAccuracyInMeters([out] [retval] Windows.Foundation.IReference<UINT32>** value);
                [propput] HRESULT DesiredAccuracyInMeters([in] Windows.Foundation.IReference<UINT32>* value);
            }

            [exclusiveto(Windows.Devices.Geolocation.Geolocator)]
            [uuid(9A8E7571-2DF5-4591-9F87-EB5FD894E9B7)]
            [version(0x0A000000)]
            interface IGeolocatorStatics : IInspectable
            {
                HRESULT RequestAccessAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Devices.Geolocation.GeolocationAccessStatus>** result);
                [overload("GetGeopositionHistoryAsync")] HRESULT GetGeopositionHistoryAsync([in] Windows.Foundation.DateTime startTime, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Devices.Geolocation.Geoposition*>*>** result);
                [overload("GetGeopositionHistoryAsync")] HRESULT GetGeopositionHistoryWithDurationAsync([in] Windows.Foundation.DateTime startTime, [in] Windows.Foundation.TimeSpan duration, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Devices.Geolocation.Geoposition*>*>** result);
            }

            [exclusiveto(Windows.Devices.Geolocation.Geocircle)]
            [uuid(39E45843-A7F9-4E63-92A7-BA0C28D124B1)]
            [version(0x06030000)]
            interface IGeocircle : IInspectable
                requires
                    Windows.Devices.Geolocation.IGeoshape
            {
                [propget] HRESULT Center([out] [retval] Windows.Devices.Geolocation.BasicGeoposition* value);
                [propget] HRESULT Radius([out] [retval] DOUBLE* value);
            }

            [exclusiveto(Windows.Devices.Geolocation.Geocircle)]
            [uuid(AFD6531F-72B1-4F7D-87CC-4ED4C9849C05)]
            [version(0x06030000)]
            interface IGeocircleFactory : IInspectable
            {
                HRESULT Create([in] Windows.Devices.Geolocation.BasicGeoposition position, [in] DOUBLE radius, [out] [retval] Windows.Devices.Geolocation.Geocircle** value);
                HRESULT CreateWithAltitudeReferenceSystem([in] Windows.Devices.Geolocation.BasicGeoposition position, [in] DOUBLE radius, [in] Windows.Devices.Geolocation.AltitudeReferenceSystem altitudeReferenceSystem, [out] [retval] Windows.Devices.Geolocation.Geocircle** value);
                HRESULT CreateWithAltitudeReferenceSystemAndSpatialReferenceId([in] Windows.Devices.Geolocation.BasicGeoposition position, [in] DOUBLE radius, [in] Windows.Devices.Geolocation.AltitudeReferenceSystem altitudeReferenceSystem, [in] UINT32 spatialReferenceId, [out] [retval] Windows.Devices.Geolocation.Geocircle** value);
            }

            [activatable(Windows.Devices.Geolocation.IGeopointFactory, 0x06030000)]
            [marshaling_behavior(agile)]
            [version(0x06030000)]
            runtimeclass Geopoint
            {
                [default] interface Windows.Devices.Geolocation.IGeopoint;
                interface Windows.Devices.Geolocation.IGeoshape;
            }

            [activatable(Windows.Devices.Geolocation.IGeopathFactory, 0x0A000000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass Geopath
            {
                [default] interface Windows.Devices.Geolocation.IGeopath;
                interface Windows.Devices.Geolocation.IGeoshape;
            }

            [activatable(Windows.Devices.Geolocation.IGeoboundingBoxFactory, 0x0A000000)]
            [marshaling_behavior(agile)]
            [static(Windows.Devices.Geolocation.IGeoboundingBoxStatics, 0x0A000000)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass GeoboundingBox
            {
                [default] interface Windows.Devices.Geolocation.IGeoboundingBox;
                interface Windows.Devices.Geolocation.IGeoshape;
            }

            [marshaling_behavior(agile)]
            [version(0x06030000)]
            runtimeclass GeocoordinateSatelliteData
            {
                [default] interface Windows.Devices.Geolocation.IGeocoordinateSatelliteData;
            }

            [marshaling_behavior(agile)]
            [version(0x0A000000)]
            runtimeclass VenueData
            {
                [default] interface Windows.Devices.Geolocation.IVenueData;
            }

            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass Geocoordinate
            {
                [default] interface Windows.Devices.Geolocation.IGeocoordinate;
                [version(0x06030000)] interface Windows.Devices.Geolocation.IGeocoordinateWithPositionData;
                [version(0x06030000)] interface Windows.Devices.Geolocation.IGeocoordinateWithPoint;
            }

            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass CivicAddress
            {
                [default] interface Windows.Devices.Geolocation.ICivicAddress;
            }

            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass Geoposition
            {
                [default] interface Windows.Devices.Geolocation.IGeoposition;
                [version(0x0A000000)] interface Windows.Devices.Geolocation.IGeoposition2;
            }

            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass PositionChangedEventArgs
            {
                [default] interface Windows.Devices.Geolocation.IPositionChangedEventArgs;
            }

            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass StatusChangedEventArgs
            {
                [default] interface Windows.Devices.Geolocation.IStatusChangedEventArgs;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [static(Windows.Devices.Geolocation.IGeolocatorStatics, 0x0A000000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass Geolocator
            {
                [default] interface Windows.Devices.Geolocation.IGeolocator;
                [version(0x06030000)] interface Windows.Devices.Geolocation.IGeolocatorWithScalarAccuracy;
            }

            [activatable(Windows.Devices.Geolocation.IGeocircleFactory, 0x06030000)]
            [marshaling_behavior(agile)]
            [version(0x06030000)]
            runtimeclass Geocircle
            {
                [default] interface Windows.Devices.Geolocation.IGeocircle;
                interface Windows.Devices.Geolocation.IGeoshape;
            }
        }
    }
}
