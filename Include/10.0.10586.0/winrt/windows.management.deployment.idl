//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0014
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.ApplicationModel.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Eapplicationmodel_h__)")
cpp_quote("#include <Windows.ApplicationModel.h>")
cpp_quote("#endif // !defined(__windows2Eapplicationmodel_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace ApplicationModel
    {
        runtimeclass Package;
    }
}
namespace Windows
{
    namespace Foundation
    {
        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace Management
    {
        namespace Deployment
        {
            typedef enum DeploymentProgressState DeploymentProgressState;

            typedef enum DeploymentOptions DeploymentOptions;

            typedef enum RemovalOptions RemovalOptions;

            typedef enum PackageTypes PackageTypes;

            typedef enum PackageInstallState PackageInstallState;

            typedef enum PackageState PackageState;

            typedef enum PackageStatus PackageStatus;

            typedef struct DeploymentProgress DeploymentProgress;

            interface IDeploymentResult;

            interface IPackageUserInformation;

            interface IPackageManager;

            interface IPackageManager2;

            interface IPackageManager3;

            interface IPackageVolume;

            runtimeclass DeploymentResult;

            runtimeclass PackageUserInformation;

            runtimeclass PackageVolume;

            runtimeclass PackageManager;
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace Management
    {
        namespace Deployment
        {
            declare
            {
                interface Windows.Foundation.Collections.IIterable<Windows.Management.Deployment.PackageUserInformation*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Management.Deployment.PackageVolume*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Management.Deployment.PackageUserInformation*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Management.Deployment.PackageVolume*>;

                interface Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>;

                interface Windows.Foundation.IAsyncOperation<Windows.Management.Deployment.PackageVolume*>;
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace Management
    {
        namespace Deployment
        {
            [version(0x06020000)]
            enum DeploymentProgressState
            {
                Queued     = 0,
                Processing = 1
            };

            [flags]
            [version(0x06020000)]
            enum DeploymentOptions
            {
                None                           = 0x0,
                ForceApplicationShutdown       = 0x1,
                DevelopmentMode                = 0x2,
                [version(0x06030000)]
                InstallAllResources            = 0x20,
                [version(0x0A000000)]
                ForceTargetApplicationShutdown = 0x40
            };

            [flags]
            [version(0x06030000)]
            enum RemovalOptions
            {
                None                    = 0x0,
                PreserveApplicationData = 0x1000
            };

            [flags]
            [version(0x06030000)]
            enum PackageTypes
            {
                None      = 0x0,
                Main      = 0x1,
                Framework = 0x2,
                Resource  = 0x4,
                Bundle    = 0x8,
                [version(0x0A000000)]
                Xap       = 0x10
            };

            [version(0x06020000)]
            enum PackageInstallState
            {
                NotInstalled = 0,
                Staged       = 1,
                Installed    = 2,
                [version(0x0A000000)]
                Paused       = 6
            };

            [version(0x06020000)]
            enum PackageState
            {
                Normal         = 0,
                LicenseInvalid = 1,
                Modified       = 2,
                Tampered       = 3
            };

            [flags]
            [version(0x0A000000)]
            enum PackageStatus
            {
                OK           = 0x0,
                LicenseIssue = 0x1,
                Modified     = 0x2,
                Tampered     = 0x4,
                Disabled     = 0x8
            };

            [version(0x06020000)]
            struct DeploymentProgress
            {
                Windows.Management.Deployment.DeploymentProgressState state;
                UINT32 percentage;
            };

            [exclusiveto(Windows.Management.Deployment.DeploymentResult)]
            [uuid(2563B9AE-B77D-4C1F-8A7B-20E6AD515EF3)]
            [version(0x06020000)]
            interface IDeploymentResult : IInspectable
            {
                [propget] HRESULT ErrorText([out] [retval] HSTRING* value);
                [propget] HRESULT ActivityId([out] [retval] GUID* value);
                [propget] HRESULT ExtendedErrorCode([out] [retval] HRESULT* value);
            }

            [exclusiveto(Windows.Management.Deployment.PackageUserInformation)]
            [uuid(F6383423-FA09-4CBC-9055-15CA275E2E7E)]
            [version(0x06020000)]
            interface IPackageUserInformation : IInspectable
            {
                [propget] HRESULT UserSecurityId([out] [retval] HSTRING* value);
                [propget] HRESULT InstallState([out] [retval] Windows.Management.Deployment.PackageInstallState* value);
            }

            [exclusiveto(Windows.Management.Deployment.PackageManager)]
            [uuid(9A7D4B65-5E8F-4FC7-A2E5-7F6925CB8B53)]
            [version(0x06020000)]
            interface IPackageManager : IInspectable
            {
                [overload("AddPackageAsync")] HRESULT AddPackageAsync([in] Windows.Foundation.Uri* packageUri, [in] Windows.Foundation.Collections.IIterable<Windows.Foundation.Uri*>* dependencyPackageUris, [in] Windows.Management.Deployment.DeploymentOptions deploymentOptions, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                HRESULT UpdatePackageAsync([in] Windows.Foundation.Uri* packageUri, [in] Windows.Foundation.Collections.IIterable<Windows.Foundation.Uri*>* dependencyPackageUris, [in] Windows.Management.Deployment.DeploymentOptions deploymentOptions, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                HRESULT RemovePackageAsync([in] HSTRING packageFullName, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                HRESULT StagePackageAsync([in] Windows.Foundation.Uri* packageUri, [in] Windows.Foundation.Collections.IIterable<Windows.Foundation.Uri*>* dependencyPackageUris, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                [overload("RegisterPackageAsync")] HRESULT RegisterPackageAsync([in] Windows.Foundation.Uri* manifestUri, [in] Windows.Foundation.Collections.IIterable<Windows.Foundation.Uri*>* dependencyPackageUris, [in] Windows.Management.Deployment.DeploymentOptions deploymentOptions, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                [overload("FindPackages")] HRESULT FindPackages([out] [retval] Windows.Foundation.Collections.IIterable<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesForUser")] HRESULT FindPackagesByUserSecurityId([in] HSTRING userSecurityId, [out] [retval] Windows.Foundation.Collections.IIterable<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackages")] HRESULT FindPackagesByNamePublisher([in] HSTRING packageName, [in] HSTRING packagePublisher, [out] [retval] Windows.Foundation.Collections.IIterable<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesForUser")] HRESULT FindPackagesByUserSecurityIdNamePublisher([in] HSTRING userSecurityId, [in] HSTRING packageName, [in] HSTRING packagePublisher, [out] [retval] Windows.Foundation.Collections.IIterable<Windows.ApplicationModel.Package*>** packageCollection);
                HRESULT FindUsers([in] HSTRING packageFullName, [out] [retval] Windows.Foundation.Collections.IIterable<Windows.Management.Deployment.PackageUserInformation*>** users);
                HRESULT SetPackageState([in] HSTRING packageFullName, [in] Windows.Management.Deployment.PackageState packageState);
                [overload("FindPackage")] HRESULT FindPackageByPackageFullName([in] HSTRING packageFullName, [out] [retval] Windows.ApplicationModel.Package** packageInformation);
                HRESULT CleanupPackageForUserAsync([in] HSTRING packageName, [in] HSTRING userSecurityId, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                [overload("FindPackages")] HRESULT FindPackagesByPackageFamilyName([in] HSTRING packageFamilyName, [out] [retval] Windows.Foundation.Collections.IIterable<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesForUser")] HRESULT FindPackagesByUserSecurityIdPackageFamilyName([in] HSTRING userSecurityId, [in] HSTRING packageFamilyName, [out] [retval] Windows.Foundation.Collections.IIterable<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackageForUser")] HRESULT FindPackageByUserSecurityIdPackageFullName([in] HSTRING userSecurityId, [in] HSTRING packageFullName, [out] [retval] Windows.ApplicationModel.Package** packageInformation);
            }

            [exclusiveto(Windows.Management.Deployment.PackageManager)]
            [uuid(F7AAD08D-0840-46F2-B5D8-CAD47693A095)]
            [version(0x06030000)]
            interface IPackageManager2 : IInspectable
            {
                [overload("RemovePackageAsync")] HRESULT RemovePackageWithOptionsAsync([in] HSTRING packageFullName, [in] Windows.Management.Deployment.RemovalOptions removalOptions, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                [overload("StagePackageAsync")] HRESULT StagePackageWithOptionsAsync([in] Windows.Foundation.Uri* packageUri, [in] Windows.Foundation.Collections.IIterable<Windows.Foundation.Uri*>* dependencyPackageUris, [in] Windows.Management.Deployment.DeploymentOptions deploymentOptions, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                HRESULT RegisterPackageByFullNameAsync([in] HSTRING mainPackageFullName, [in] Windows.Foundation.Collections.IIterable<HSTRING>* dependencyPackageFullNames, [in] Windows.Management.Deployment.DeploymentOptions deploymentOptions, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                [overload("FindPackagesWithPackageTypes")] HRESULT FindPackagesWithPackageTypes([in] Windows.Management.Deployment.PackageTypes packageTypes, [out] [retval] Windows.Foundation.Collections.IIterable<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesForUserWithPackageTypes")] HRESULT FindPackagesByUserSecurityIdWithPackageTypes([in] HSTRING userSecurityId, [in] Windows.Management.Deployment.PackageTypes packageTypes, [out] [retval] Windows.Foundation.Collections.IIterable<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesWithPackageTypes")] HRESULT FindPackagesByNamePublisherWithPackageTypes([in] HSTRING packageName, [in] HSTRING packagePublisher, [in] Windows.Management.Deployment.PackageTypes packageTypes, [out] [retval] Windows.Foundation.Collections.IIterable<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesForUserWithPackageTypes")] HRESULT FindPackagesByUserSecurityIdNamePublisherWithPackageTypes([in] HSTRING userSecurityId, [in] HSTRING packageName, [in] HSTRING packagePublisher, [in] Windows.Management.Deployment.PackageTypes packageTypes, [out] [retval] Windows.Foundation.Collections.IIterable<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesWithPackageTypes")] HRESULT FindPackagesByPackageFamilyNameWithPackageTypes([in] HSTRING packageFamilyName, [in] Windows.Management.Deployment.PackageTypes packageTypes, [out] [retval] Windows.Foundation.Collections.IIterable<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesForUserWithPackageTypes")] HRESULT FindPackagesByUserSecurityIdPackageFamilyNameWithPackageTypes([in] HSTRING userSecurityId, [in] HSTRING packageFamilyName, [in] Windows.Management.Deployment.PackageTypes packageTypes, [out] [retval] Windows.Foundation.Collections.IIterable<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("StageUserDataAsync")] HRESULT StageUserDataAsync([in] HSTRING packageFullName, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
            }

            [exclusiveto(Windows.Management.Deployment.PackageManager)]
            [uuid(DAAD9948-36F1-41A7-9188-BC263E0DCB72)]
            [version(0x0A000000)]
            interface IPackageManager3 : IInspectable
            {
                HRESULT AddPackageVolumeAsync([in] HSTRING packageStorePath, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Management.Deployment.PackageVolume*>** packageVolume);
                [overload("AddPackageAsync")] HRESULT AddPackageToVolumeAsync([in] Windows.Foundation.Uri* packageUri, [in] Windows.Foundation.Collections.IIterable<Windows.Foundation.Uri*>* dependencyPackageUris, [in] Windows.Management.Deployment.DeploymentOptions deploymentOptions, [in] Windows.Management.Deployment.PackageVolume* targetVolume, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                HRESULT ClearPackageStatus([in] HSTRING packageFullName, [in] Windows.Management.Deployment.PackageStatus status);
                [overload("RegisterPackageAsync")] HRESULT RegisterPackageWithAppDataVolumeAsync([in] Windows.Foundation.Uri* manifestUri, [in] Windows.Foundation.Collections.IIterable<Windows.Foundation.Uri*>* dependencyPackageUris, [in] Windows.Management.Deployment.DeploymentOptions deploymentOptions, [in] Windows.Management.Deployment.PackageVolume* appDataVolume, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                [overload("FindPackageVolume")] HRESULT FindPackageVolumeByName([in] HSTRING volumeName, [out] [retval] Windows.Management.Deployment.PackageVolume** volume);
                HRESULT FindPackageVolumes([out] [retval] Windows.Foundation.Collections.IIterable<Windows.Management.Deployment.PackageVolume*>** volumeCollection);
                HRESULT GetDefaultPackageVolume([out] [retval] Windows.Management.Deployment.PackageVolume** volume);
                HRESULT MovePackageToVolumeAsync([in] HSTRING packageFullName, [in] Windows.Management.Deployment.DeploymentOptions deploymentOptions, [in] Windows.Management.Deployment.PackageVolume* targetVolume, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                HRESULT RemovePackageVolumeAsync([in] Windows.Management.Deployment.PackageVolume* volume, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                HRESULT SetDefaultPackageVolume([in] Windows.Management.Deployment.PackageVolume* volume);
                HRESULT SetPackageStatus([in] HSTRING packageFullName, [in] Windows.Management.Deployment.PackageStatus status);
                HRESULT SetPackageVolumeOfflineAsync([in] Windows.Management.Deployment.PackageVolume* packageVolume, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                HRESULT SetPackageVolumeOnlineAsync([in] Windows.Management.Deployment.PackageVolume* packageVolume, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                [overload("StagePackageAsync")] HRESULT StagePackageToVolumeAsync([in] Windows.Foundation.Uri* packageUri, [in] Windows.Foundation.Collections.IIterable<Windows.Foundation.Uri*>* dependencyPackageUris, [in] Windows.Management.Deployment.DeploymentOptions deploymentOptions, [in] Windows.Management.Deployment.PackageVolume* targetVolume, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
                [overload("StageUserDataAsync")] HRESULT StageUserDataWithOptionsAsync([in] HSTRING packageFullName, [in] Windows.Management.Deployment.DeploymentOptions deploymentOptions, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Management.Deployment.DeploymentResult*, Windows.Management.Deployment.DeploymentProgress>** deploymentOperation);
            }

            [exclusiveto(Windows.Management.Deployment.PackageVolume)]
            [uuid(CF2672C3-1A40-4450-9739-2ACE2E898853)]
            [version(0x0A000000)]
            interface IPackageVolume : IInspectable
            {
                [propget] HRESULT IsOffline([out] [retval] boolean* value);
                [propget] HRESULT IsSystemVolume([out] [retval] boolean* value);
                [propget] HRESULT MountPoint([out] [retval] HSTRING* value);
                [propget] HRESULT Name([out] [retval] HSTRING* value);
                [propget] HRESULT PackageStorePath([out] [retval] HSTRING* value);
                [propget] HRESULT SupportsHardLinks([out] [retval] boolean* value);
                [overload("FindPackages")] HRESULT FindPackages([out] [retval] Windows.Foundation.Collections.IVector<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackages")] HRESULT FindPackagesByNamePublisher([in] HSTRING packageName, [in] HSTRING packagePublisher, [out] [retval] Windows.Foundation.Collections.IVector<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackages")] HRESULT FindPackagesByPackageFamilyName([in] HSTRING packageFamilyName, [out] [retval] Windows.Foundation.Collections.IVector<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesWithPackageTypes")] HRESULT FindPackagesWithPackageTypes([in] Windows.Management.Deployment.PackageTypes packageTypes, [out] [retval] Windows.Foundation.Collections.IVector<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesWithPackageTypes")] HRESULT FindPackagesByNamePublisherWithPackagesTypes([in] Windows.Management.Deployment.PackageTypes packageTypes, [in] HSTRING packageName, [in] HSTRING packagePublisher, [out] [retval] Windows.Foundation.Collections.IVector<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesWithPackageTypes")] HRESULT FindPackagesByPackageFamilyNameWithPackageTypes([in] Windows.Management.Deployment.PackageTypes packageTypes, [in] HSTRING packageFamilyName, [out] [retval] Windows.Foundation.Collections.IVector<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackage")] HRESULT FindPackageByPackageFullName([in] HSTRING packageFullName, [out] [retval] Windows.Foundation.Collections.IVector<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesForUser")] HRESULT FindPackagesByUserSecurityId([in] HSTRING userSecurityId, [out] [retval] Windows.Foundation.Collections.IVector<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesForUser")] HRESULT FindPackagesByUserSecurityIdNamePublisher([in] HSTRING userSecurityId, [in] HSTRING packageName, [in] HSTRING packagePublisher, [out] [retval] Windows.Foundation.Collections.IVector<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesForUser")] HRESULT FindPackagesByUserSecurityIdPackageFamilyName([in] HSTRING userSecurityId, [in] HSTRING packageFamilyName, [out] [retval] Windows.Foundation.Collections.IVector<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesForUserWithPackageTypes")] HRESULT FindPackagesByUserSecurityIdWithPackageTypes([in] HSTRING userSecurityId, [in] Windows.Management.Deployment.PackageTypes packageTypes, [out] [retval] Windows.Foundation.Collections.IVector<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesForUserWithPackageTypes")] HRESULT FindPackagesByUserSecurityIdNamePublisherWithPackageTypes([in] HSTRING userSecurityId, [in] Windows.Management.Deployment.PackageTypes packageTypes, [in] HSTRING packageName, [in] HSTRING packagePublisher, [out] [retval] Windows.Foundation.Collections.IVector<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackagesForUserWithPackageTypes")] HRESULT FindPackagesByUserSecurityIdPackageFamilyNameWithPackagesTypes([in] HSTRING userSecurityId, [in] Windows.Management.Deployment.PackageTypes packageTypes, [in] HSTRING packageFamilyName, [out] [retval] Windows.Foundation.Collections.IVector<Windows.ApplicationModel.Package*>** packageCollection);
                [overload("FindPackageForUser")] HRESULT FindPackageByUserSecurityIdPackageFullName([in] HSTRING userSecurityId, [in] HSTRING packageFullName, [out] [retval] Windows.Foundation.Collections.IVector<Windows.ApplicationModel.Package*>** packageCollection);
            }

            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass DeploymentResult
            {
                [default] interface Windows.Management.Deployment.IDeploymentResult;
            }

            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass PackageUserInformation
            {
                [default] interface Windows.Management.Deployment.IPackageUserInformation;
            }

            [activatable(0x0A000000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass PackageVolume
            {
                [default] interface Windows.Management.Deployment.IPackageVolume;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass PackageManager
            {
                [default] interface Windows.Management.Deployment.IPackageManager;
                [version(0x06030000)] interface Windows.Management.Deployment.IPackageManager2;
                [version(0x0A000000)] interface Windows.Management.Deployment.IPackageManager3;
            }
        }
    }
}
