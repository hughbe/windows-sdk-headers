//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0014
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Storage.idl";
import "Windows.Storage.FileProperties.idl";
import "Windows.Storage.Search.idl";
import "Windows.Storage.Streams.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Estorage_h__)")
cpp_quote("#include <Windows.Storage.h>")
cpp_quote("#endif // !defined(__windows2Estorage_h__)")
cpp_quote("#if !defined(__windows2Estorage2Efileproperties_h__)")
cpp_quote("#include <Windows.Storage.FileProperties.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Efileproperties_h__)")
cpp_quote("#if !defined(__windows2Estorage2Esearch_h__)")
cpp_quote("#include <Windows.Storage.Search.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Esearch_h__)")
cpp_quote("#if !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#include <Windows.Storage.Streams.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Storage
    {
        namespace FileProperties
        {
            runtimeclass BasicProperties;

            runtimeclass DocumentProperties;

            runtimeclass ImageProperties;

            runtimeclass MusicProperties;

            runtimeclass StorageItemThumbnail;

            typedef enum ThumbnailMode ThumbnailMode;

            typedef enum ThumbnailOptions ThumbnailOptions;

            runtimeclass VideoProperties;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        interface IStorageFile;

        interface IStorageFile2;

        interface IStorageFilePropertiesWithAvailability;

        interface IStorageFolder;

        interface IStorageFolder2;

        interface IStorageItem;

        interface IStorageItem2;

        interface IStorageItemProperties;

        interface IStorageItemPropertiesWithProvider;
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Search
        {
            interface IStorageFolderQueryOperations;

            interface IStorageQueryResultBase;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IInputStreamReference;

            interface IRandomAccessStreamReference;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace BulkAccess
        {
            interface IStorageItemInformation;

            interface IFileInformationFactoryFactory;

            interface IFileInformationFactory;

            runtimeclass FileInformationFactory;

            runtimeclass FileInformation;

            runtimeclass FolderInformation;
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace Storage
    {
        namespace BulkAccess
        {
            declare
            {
                interface Windows.Foundation.Collections.IIterable<Windows.Storage.BulkAccess.FileInformation*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Storage.BulkAccess.FolderInformation*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Storage.BulkAccess.IStorageItemInformation*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Storage.BulkAccess.FileInformation*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Storage.BulkAccess.FolderInformation*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Storage.BulkAccess.IStorageItemInformation*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.FileInformation*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.FolderInformation*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.IStorageItemInformation*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.FileInformation*>*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.FolderInformation*>*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.IStorageItemInformation*>*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Storage.BulkAccess.IStorageItemInformation*, IInspectable*>;
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace Storage
    {
        namespace BulkAccess
        {
            [uuid(87A5CB8B-8972-4F40-8DE0-D86FB179D8FA)]
            [version(0x06020000)]
            interface IStorageItemInformation : IInspectable
            {
                [propget] HRESULT MusicProperties([out] [retval] Windows.Storage.FileProperties.MusicProperties** value);
                [propget] HRESULT VideoProperties([out] [retval] Windows.Storage.FileProperties.VideoProperties** value);
                [propget] HRESULT ImageProperties([out] [retval] Windows.Storage.FileProperties.ImageProperties** value);
                [propget] HRESULT DocumentProperties([out] [retval] Windows.Storage.FileProperties.DocumentProperties** value);
                [propget] HRESULT BasicProperties([out] [retval] Windows.Storage.FileProperties.BasicProperties** value);
                [propget] HRESULT Thumbnail([out] [retval] Windows.Storage.FileProperties.StorageItemThumbnail** value);
                [eventadd] HRESULT ThumbnailUpdated([in] Windows.Foundation.TypedEventHandler<Windows.Storage.BulkAccess.IStorageItemInformation*, IInspectable*>* changedHandler, [out] [retval] EventRegistrationToken* eventCookie);
                [eventremove] HRESULT ThumbnailUpdated([in] EventRegistrationToken eventCookie);
                [eventadd] HRESULT PropertiesUpdated([in] Windows.Foundation.TypedEventHandler<Windows.Storage.BulkAccess.IStorageItemInformation*, IInspectable*>* changedHandler, [out] [retval] EventRegistrationToken* eventCookie);
                [eventremove] HRESULT PropertiesUpdated([in] EventRegistrationToken eventCookie);
            }

            [exclusiveto(Windows.Storage.BulkAccess.FileInformationFactory)]
            [uuid(84EA0E7D-E4A2-4F00-8AFA-AF5E0F826BD5)]
            [version(0x06020000)]
            interface IFileInformationFactoryFactory : IInspectable
            {
                HRESULT CreateWithMode([in] Windows.Storage.Search.IStorageQueryResultBase* queryResult, [in] Windows.Storage.FileProperties.ThumbnailMode mode, [out] [retval] Windows.Storage.BulkAccess.FileInformationFactory** value);
                HRESULT CreateWithModeAndSize([in] Windows.Storage.Search.IStorageQueryResultBase* queryResult, [in] Windows.Storage.FileProperties.ThumbnailMode mode, [in] UINT32 requestedThumbnailSize, [out] [retval] Windows.Storage.BulkAccess.FileInformationFactory** value);
                HRESULT CreateWithModeAndSizeAndOptions([in] Windows.Storage.Search.IStorageQueryResultBase* queryResult, [in] Windows.Storage.FileProperties.ThumbnailMode mode, [in] UINT32 requestedThumbnailSize, [in] Windows.Storage.FileProperties.ThumbnailOptions thumbnailOptions, [out] [retval] Windows.Storage.BulkAccess.FileInformationFactory** value);
                HRESULT CreateWithModeAndSizeAndOptionsAndFlags([in] Windows.Storage.Search.IStorageQueryResultBase* queryResult, [in] Windows.Storage.FileProperties.ThumbnailMode mode, [in] UINT32 requestedThumbnailSize, [in] Windows.Storage.FileProperties.ThumbnailOptions thumbnailOptions, [in] boolean delayLoad, [out] [retval] Windows.Storage.BulkAccess.FileInformationFactory** value);
            }

            [exclusiveto(Windows.Storage.BulkAccess.FileInformationFactory)]
            [uuid(401D88BE-960F-4D6D-A7D0-1A3861E76C83)]
            [version(0x06020000)]
            interface IFileInformationFactory : IInspectable
            {
                [overload("GetItemsAsync")] HRESULT GetItemsAsync([in] UINT32 startIndex, [in] UINT32 maxItemsToRetrieve, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.IStorageItemInformation*>*>** operation);
                [overload("GetItemsAsync")] HRESULT GetItemsAsyncDefaultStartAndCount([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.IStorageItemInformation*>*>** operation);
                [overload("GetFilesAsync")] HRESULT GetFilesAsync([in] UINT32 startIndex, [in] UINT32 maxItemsToRetrieve, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.FileInformation*>*>** operation);
                [overload("GetFilesAsync")] HRESULT GetFilesAsyncDefaultStartAndCount([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.FileInformation*>*>** operation);
                [overload("GetFoldersAsync")] HRESULT GetFoldersAsync([in] UINT32 startIndex, [in] UINT32 maxItemsToRetrieve, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.FolderInformation*>*>** operation);
                [overload("GetFoldersAsync")] HRESULT GetFoldersAsyncDefaultStartAndCount([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.FolderInformation*>*>** operation);
                HRESULT GetVirtualizedItemsVector([out] [retval] IInspectable** vector);
                HRESULT GetVirtualizedFilesVector([out] [retval] IInspectable** vector);
                HRESULT GetVirtualizedFoldersVector([out] [retval] IInspectable** vector);
            }

            [activatable(Windows.Storage.BulkAccess.IFileInformationFactoryFactory, 0x06020000)]
            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass FileInformationFactory
            {
                [default] interface Windows.Storage.BulkAccess.IFileInformationFactory;
            }

            [version(0x06020000)]
            runtimeclass FileInformation
            {
                [default] interface Windows.Storage.BulkAccess.IStorageItemInformation;
                interface Windows.Storage.IStorageFile;
                interface Windows.Storage.Streams.IInputStreamReference;
                interface Windows.Storage.Streams.IRandomAccessStreamReference;
                interface Windows.Storage.IStorageItem;
                interface Windows.Storage.IStorageItemProperties;
                [version(0x06030000)] interface Windows.Storage.IStorageItem2;
                [version(0x06030000)] interface Windows.Storage.IStorageItemPropertiesWithProvider;
                [version(0x06030000)] interface Windows.Storage.IStorageFilePropertiesWithAvailability;
                [version(0x0A000000)] interface Windows.Storage.IStorageFile2;
            }

            [version(0x06020000)]
            runtimeclass FolderInformation
            {
                [default] interface Windows.Storage.BulkAccess.IStorageItemInformation;
                interface Windows.Storage.IStorageFolder;
                interface Windows.Storage.IStorageItem;
                interface Windows.Storage.IStorageItemProperties;
                interface Windows.Storage.Search.IStorageFolderQueryOperations;
                [version(0x06030000)] interface Windows.Storage.IStorageItem2;
                [version(0x06030000)] interface Windows.Storage.IStorageFolder2;
                [version(0x06030000)] interface Windows.Storage.IStorageItemPropertiesWithProvider;
            }
        }
    }
}
