//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0014
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Storage.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Estorage_h__)")
cpp_quote("#include <Windows.Storage.h>")
cpp_quote("#endif // !defined(__windows2Estorage_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Foundation
    {
        typedef struct DateTime DateTime;

        interface IClosable;

        interface IMemoryBuffer;

        runtimeclass MemoryBuffer;

        typedef struct TimeSpan TimeSpan;

        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace Storage
    {
        interface IStorageFile;
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            typedef enum ByteOrder ByteOrder;

            typedef enum UnicodeEncoding UnicodeEncoding;

            typedef enum InputStreamOptions InputStreamOptions;

            interface IDataReader;

            interface IDataReaderFactory;

            interface IDataReaderStatics;

            interface IDataWriter;

            interface IDataWriterFactory;

            interface IRandomAccessStreamReference;

            interface IRandomAccessStreamStatics;

            interface IBufferFactory;

            interface IBuffer;

            interface IBufferStatics;

            interface IContentTypeProvider;

            interface IInputStreamReference;

            interface IRandomAccessStreamReferenceStatics;

            interface IInputStream;

            interface IOutputStream;

            interface IRandomAccessStream;

            interface IRandomAccessStreamWithContentType;

            runtimeclass DataReaderLoadOperation;

            runtimeclass DataReader;

            runtimeclass DataWriterStoreOperation;

            runtimeclass DataWriter;

            runtimeclass RandomAccessStream;

            runtimeclass Buffer;

            runtimeclass RandomAccessStreamReference;

            runtimeclass FileRandomAccessStream;

            runtimeclass FileInputStream;

            runtimeclass FileOutputStream;

            runtimeclass RandomAccessStreamOverStream;

            runtimeclass InputStreamOverStream;

            runtimeclass OutputStreamOverStream;

            runtimeclass InMemoryRandomAccessStream;
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            declare
            {
                interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<HSTRING, Windows.Storage.Streams.IBuffer*>*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<HSTRING, Windows.Storage.Streams.RandomAccessStreamReference*>*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<UINT32, Windows.Storage.Streams.IBuffer*>*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Storage.Streams.IBuffer*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Storage.Streams.IRandomAccessStream*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<HSTRING, Windows.Storage.Streams.IBuffer*>*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<HSTRING, Windows.Storage.Streams.RandomAccessStreamReference*>*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<UINT32, Windows.Storage.Streams.IBuffer*>*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Storage.Streams.IBuffer*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Storage.Streams.IRandomAccessStream*>;

                interface Windows.Foundation.Collections.IKeyValuePair<HSTRING, Windows.Storage.Streams.IBuffer*>;

                interface Windows.Foundation.Collections.IKeyValuePair<HSTRING, Windows.Storage.Streams.RandomAccessStreamReference*>;

                interface Windows.Foundation.Collections.IKeyValuePair<UINT32, Windows.Storage.Streams.IBuffer*>;

                interface Windows.Foundation.Collections.IMapView<HSTRING, Windows.Storage.Streams.IBuffer*>;

                interface Windows.Foundation.Collections.IMapView<HSTRING, Windows.Storage.Streams.RandomAccessStreamReference*>;

                interface Windows.Foundation.Collections.IMapView<UINT32, Windows.Storage.Streams.IBuffer*>;

                interface Windows.Foundation.Collections.IMap<HSTRING, Windows.Storage.Streams.RandomAccessStreamReference*>;

                interface Windows.Foundation.Collections.IMap<UINT32, Windows.Storage.Streams.IBuffer*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Storage.Streams.IBuffer*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Storage.Streams.IRandomAccessStream*>;

                interface Windows.Foundation.Collections.IVector<Windows.Storage.Streams.IRandomAccessStream*>;

                interface Windows.Foundation.IAsyncOperationWithProgress<Windows.Storage.Streams.IBuffer*, UINT32>;

                interface Windows.Foundation.IAsyncOperationWithProgress<Windows.Storage.Streams.IBuffer*, UINT64>;

                interface Windows.Foundation.IAsyncOperationWithProgress<Windows.Storage.Streams.IInputStream*, UINT64>;

                interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IMapView<HSTRING, Windows.Storage.Streams.RandomAccessStreamReference*>*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IMapView<UINT32, Windows.Storage.Streams.IBuffer*>*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IBuffer*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IInputStream*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IOutputStream*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStream*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStreamReference*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStreamWithContentType*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.RandomAccessStreamReference*>;
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            [version(0x06020000)]
            enum ByteOrder
            {
                LittleEndian = 0,
                BigEndian    = 1
            };

            [version(0x06020000)]
            enum UnicodeEncoding
            {
                Utf8    = 0,
                Utf16LE = 1,
                Utf16BE = 2
            };

            [flags]
            [version(0x06020000)]
            enum InputStreamOptions
            {
                None      = 0x0,
                Partial   = 0x1,
                ReadAhead = 0x2
            };

            [uuid(E2B50029-B4C1-4314-A4B8-FB813A2F275E)]
            [version(0x06020000)]
            interface IDataReader : IInspectable
            {
                [propget] HRESULT UnconsumedBufferLength([out] [retval] UINT32* value);
                [propget] HRESULT UnicodeEncoding([out] [retval] Windows.Storage.Streams.UnicodeEncoding* value);
                [propput] HRESULT UnicodeEncoding([in] Windows.Storage.Streams.UnicodeEncoding value);
                [propget] HRESULT ByteOrder([out] [retval] Windows.Storage.Streams.ByteOrder* value);
                [propput] HRESULT ByteOrder([in] Windows.Storage.Streams.ByteOrder value);
                [propget] HRESULT InputStreamOptions([out] [retval] Windows.Storage.Streams.InputStreamOptions* value);
                [propput] HRESULT InputStreamOptions([in] Windows.Storage.Streams.InputStreamOptions value);
                HRESULT ReadByte([out] [retval] BYTE* value);
                HRESULT ReadBytes([in] UINT32 __valueSize, [out] [size_is(__valueSize)] BYTE* value);
                HRESULT ReadBuffer([in] UINT32 length, [out] [retval] Windows.Storage.Streams.IBuffer** buffer);
                HRESULT ReadBoolean([out] [retval] boolean* value);
                HRESULT ReadGuid([out] [retval] GUID* value);
                HRESULT ReadInt16([out] [retval] INT16* value);
                HRESULT ReadInt32([out] [retval] INT32* value);
                HRESULT ReadInt64([out] [retval] INT64* value);
                HRESULT ReadUInt16([out] [retval] UINT16* value);
                HRESULT ReadUInt32([out] [retval] UINT32* value);
                HRESULT ReadUInt64([out] [retval] UINT64* value);
                HRESULT ReadSingle([out] [retval] FLOAT* value);
                HRESULT ReadDouble([out] [retval] DOUBLE* value);
                HRESULT ReadString([in] UINT32 codeUnitCount, [out] [retval] HSTRING* value);
                HRESULT ReadDateTime([out] [retval] Windows.Foundation.DateTime* value);
                HRESULT ReadTimeSpan([out] [retval] Windows.Foundation.TimeSpan* value);
                HRESULT LoadAsync([in] UINT32 count, [out] [retval] Windows.Storage.Streams.DataReaderLoadOperation** operation);
                HRESULT DetachBuffer([out] [retval] Windows.Storage.Streams.IBuffer** buffer);
                HRESULT DetachStream([out] [retval] Windows.Storage.Streams.IInputStream** stream);
            }

            [exclusiveto(Windows.Storage.Streams.DataReader)]
            [uuid(D7527847-57DA-4E15-914C-06806699A098)]
            [version(0x06020000)]
            interface IDataReaderFactory : IInspectable
            {
                HRESULT CreateDataReader([in] Windows.Storage.Streams.IInputStream* inputStream, [out] [retval] Windows.Storage.Streams.DataReader** dataReader);
            }

            [exclusiveto(Windows.Storage.Streams.DataReader)]
            [uuid(11FCBFC8-F93A-471B-B121-F379E349313C)]
            [version(0x06020000)]
            interface IDataReaderStatics : IInspectable
            {
                HRESULT FromBuffer([in] Windows.Storage.Streams.IBuffer* buffer, [out] [retval] Windows.Storage.Streams.DataReader** dataReader);
            }

            [uuid(64B89265-D341-4922-B38A-DD4AF8808C4E)]
            [version(0x06020000)]
            interface IDataWriter : IInspectable
            {
                [propget] HRESULT UnstoredBufferLength([out] [retval] UINT32* value);
                [propget] HRESULT UnicodeEncoding([out] [retval] Windows.Storage.Streams.UnicodeEncoding* value);
                [propput] HRESULT UnicodeEncoding([in] Windows.Storage.Streams.UnicodeEncoding value);
                [propget] HRESULT ByteOrder([out] [retval] Windows.Storage.Streams.ByteOrder* value);
                [propput] HRESULT ByteOrder([in] Windows.Storage.Streams.ByteOrder value);
                HRESULT WriteByte([in] BYTE value);
                HRESULT WriteBytes([in] UINT32 __valueSize, [in] [size_is(__valueSize)] BYTE* value);
                [overload("WriteBuffer")] HRESULT WriteBuffer([in] Windows.Storage.Streams.IBuffer* buffer);
                [overload("WriteBuffer")] HRESULT WriteBufferRange([in] Windows.Storage.Streams.IBuffer* buffer, [in] UINT32 start, [in] UINT32 count);
                HRESULT WriteBoolean([in] boolean value);
                HRESULT WriteGuid([in] GUID value);
                HRESULT WriteInt16([in] INT16 value);
                HRESULT WriteInt32([in] INT32 value);
                HRESULT WriteInt64([in] INT64 value);
                HRESULT WriteUInt16([in] UINT16 value);
                HRESULT WriteUInt32([in] UINT32 value);
                HRESULT WriteUInt64([in] UINT64 value);
                HRESULT WriteSingle([in] FLOAT value);
                HRESULT WriteDouble([in] DOUBLE value);
                HRESULT WriteDateTime([in] Windows.Foundation.DateTime value);
                HRESULT WriteTimeSpan([in] Windows.Foundation.TimeSpan value);
                HRESULT WriteString([in] HSTRING value, [out] [retval] UINT32* codeUnitCount);
                HRESULT MeasureString([in] HSTRING value, [out] [retval] UINT32* codeUnitCount);
                HRESULT StoreAsync([out] [retval] Windows.Storage.Streams.DataWriterStoreOperation** operation);
                HRESULT FlushAsync([out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                HRESULT DetachBuffer([out] [retval] Windows.Storage.Streams.IBuffer** buffer);
                HRESULT DetachStream([out] [retval] Windows.Storage.Streams.IOutputStream** outputStream);
            }

            [exclusiveto(Windows.Storage.Streams.DataWriter)]
            [uuid(338C67C2-8B84-4C2B-9C50-7B8767847A1F)]
            [version(0x06020000)]
            interface IDataWriterFactory : IInspectable
            {
                HRESULT CreateDataWriter([in] Windows.Storage.Streams.IOutputStream* outputStream, [out] [retval] Windows.Storage.Streams.DataWriter** dataWriter);
            }

            [uuid(33EE3134-1DD6-4E3A-8067-D1C162E8642B)]
            [version(0x06020000)]
            interface IRandomAccessStreamReference : IInspectable
            {
                HRESULT OpenReadAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStreamWithContentType*>** operation);
            }

            [exclusiveto(Windows.Storage.Streams.RandomAccessStream)]
            [uuid(524CEDCF-6E29-4CE5-9573-6B753DB66C3A)]
            [version(0x06020000)]
            interface IRandomAccessStreamStatics : IInspectable
            {
                [overload("CopyAsync")] HRESULT CopyAsync([in] Windows.Storage.Streams.IInputStream* source, [in] Windows.Storage.Streams.IOutputStream* destination, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<UINT64, UINT64>** operation);
                [overload("CopyAsync")] HRESULT CopySizeAsync([in] Windows.Storage.Streams.IInputStream* source, [in] Windows.Storage.Streams.IOutputStream* destination, [in] UINT64 bytesToCopy, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<UINT64, UINT64>** operation);
                HRESULT CopyAndCloseAsync([in] Windows.Storage.Streams.IInputStream* source, [in] Windows.Storage.Streams.IOutputStream* destination, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<UINT64, UINT64>** operation);
            }

            [exclusiveto(Windows.Storage.Streams.Buffer)]
            [uuid(71AF914D-C10F-484B-BC50-14BC623B3A27)]
            [version(0x06020000)]
            interface IBufferFactory : IInspectable
            {
                HRESULT Create([in] [range(0x00000000, 0x7FFFFFFF)] UINT32 capacity, [out] [retval] Windows.Storage.Streams.Buffer** value);
            }

            [uuid(905A0FE0-BC53-11DF-8C49-001E4FC686DA)]
            [version(0x06020000)]
            interface IBuffer : IInspectable
            {
                [propget] HRESULT Capacity([out] [retval] UINT32* value);
                [propget] HRESULT Length([out] [retval] UINT32* value);
                [propput] HRESULT Length([in] UINT32 value);
            }

            [exclusiveto(Windows.Storage.Streams.Buffer)]
            [uuid(E901E65B-D716-475A-A90A-AF7229B1E741)]
            [version(0x0A000000)]
            interface IBufferStatics : IInspectable
            {
                HRESULT CreateCopyFromMemoryBuffer([in] Windows.Foundation.IMemoryBuffer* input, [out] [retval] Windows.Storage.Streams.Buffer** value);
                HRESULT CreateMemoryBufferOverIBuffer([in] Windows.Storage.Streams.IBuffer* input, [out] [retval] Windows.Foundation.MemoryBuffer** value);
            }

            [uuid(97D098A5-3B99-4DE9-88A5-E11D2F50C795)]
            [version(0x06020000)]
            interface IContentTypeProvider : IInspectable
            {
                [propget] HRESULT ContentType([out] [retval] HSTRING* value);
            }

            [uuid(43929D18-5EC9-4B5A-919C-4205B0C804B6)]
            [version(0x06020000)]
            interface IInputStreamReference : IInspectable
            {
                HRESULT OpenSequentialReadAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IInputStream*>** operation);
            }

            [exclusiveto(Windows.Storage.Streams.RandomAccessStreamReference)]
            [uuid(857309DC-3FBF-4E7D-986F-EF3B1A07A964)]
            [version(0x06020000)]
            interface IRandomAccessStreamReferenceStatics : IInspectable
            {
                HRESULT CreateFromFile([in] Windows.Storage.IStorageFile* file, [out] [retval] Windows.Storage.Streams.RandomAccessStreamReference** streamReference);
                HRESULT CreateFromUri([in] Windows.Foundation.Uri* uri, [out] [retval] Windows.Storage.Streams.RandomAccessStreamReference** streamReference);
                HRESULT CreateFromStream([in] Windows.Storage.Streams.IRandomAccessStream* stream, [out] [retval] Windows.Storage.Streams.RandomAccessStreamReference** streamReference);
            }

            [uuid(905A0FE2-BC53-11DF-8C49-001E4FC686DA)]
            [version(0x06020000)]
            interface IInputStream : IInspectable
                requires
                    Windows.Foundation.IClosable
            {
                HRESULT ReadAsync([in] Windows.Storage.Streams.IBuffer* buffer, [in] UINT32 count, [in] Windows.Storage.Streams.InputStreamOptions options, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Storage.Streams.IBuffer*, UINT32>** operation);
            }

            [uuid(905A0FE6-BC53-11DF-8C49-001E4FC686DA)]
            [version(0x06020000)]
            interface IOutputStream : IInspectable
                requires
                    Windows.Foundation.IClosable
            {
                HRESULT WriteAsync([in] Windows.Storage.Streams.IBuffer* buffer, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<UINT32, UINT32>** operation);
                HRESULT FlushAsync([out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
            }

            [uuid(905A0FE1-BC53-11DF-8C49-001E4FC686DA)]
            [version(0x06020000)]
            interface IRandomAccessStream : IInspectable
                requires
                    Windows.Foundation.IClosable,
                    Windows.Storage.Streams.IInputStream,
                    Windows.Storage.Streams.IOutputStream
            {
                [propget] HRESULT Size([out] [retval] UINT64* value);
                [propput] HRESULT Size([in] UINT64 value);
                HRESULT GetInputStreamAt([in] UINT64 position, [out] [retval] Windows.Storage.Streams.IInputStream** stream);
                HRESULT GetOutputStreamAt([in] UINT64 position, [out] [retval] Windows.Storage.Streams.IOutputStream** stream);
                [propget] HRESULT Position([out] [retval] UINT64* value);
                HRESULT Seek([in] UINT64 position);
                HRESULT CloneStream([out] [retval] Windows.Storage.Streams.IRandomAccessStream** stream);
                [propget] HRESULT CanRead([out] [retval] boolean* value);
                [propget] HRESULT CanWrite([out] [retval] boolean* value);
            }

            [uuid(CC254827-4B3D-438F-9232-10C76BC7E038)]
            [version(0x06020000)]
            interface IRandomAccessStreamWithContentType : IInspectable
                requires
                    Windows.Storage.Streams.IRandomAccessStream,
                    Windows.Foundation.IClosable,
                    Windows.Storage.Streams.IInputStream,
                    Windows.Storage.Streams.IOutputStream,
                    Windows.Storage.Streams.IContentTypeProvider
            {
            }

            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass DataReaderLoadOperation
            {
                [default] interface Windows.Foundation.IAsyncOperation<UINT32>;
            }

            [activatable(Windows.Storage.Streams.IDataReaderFactory, 0x06020000)]
            [marshaling_behavior(agile)]
            [static(Windows.Storage.Streams.IDataReaderStatics, 0x06020000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass DataReader
            {
                [default] interface Windows.Storage.Streams.IDataReader;
                interface Windows.Foundation.IClosable;
            }

            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass DataWriterStoreOperation
            {
                [default] interface Windows.Foundation.IAsyncOperation<UINT32>;
            }

            [activatable(Windows.Storage.Streams.IDataWriterFactory, 0x06020000)]
            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass DataWriter
            {
                [default] interface Windows.Storage.Streams.IDataWriter;
                interface Windows.Foundation.IClosable;
            }

            [marshaling_behavior(agile)]
            [static(Windows.Storage.Streams.IRandomAccessStreamStatics, 0x06020000)]
            [version(0x06020000)]
            runtimeclass RandomAccessStream
            {
            }

            [activatable(Windows.Storage.Streams.IBufferFactory, 0x06020000)]
            [marshaling_behavior(agile)]
            [static(Windows.Storage.Streams.IBufferStatics, 0x0A000000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass Buffer
            {
                [default] interface Windows.Storage.Streams.IBuffer;
            }

            [marshaling_behavior(agile)]
            [static(Windows.Storage.Streams.IRandomAccessStreamReferenceStatics, 0x06020000)]
            [version(0x06020000)]
            runtimeclass RandomAccessStreamReference
            {
                [default] interface Windows.Storage.Streams.IRandomAccessStreamReference;
            }

            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass FileRandomAccessStream
            {
                [default] interface Windows.Storage.Streams.IRandomAccessStream;
                interface Windows.Storage.Streams.IOutputStream;
                interface Windows.Foundation.IClosable;
                interface Windows.Storage.Streams.IInputStream;
            }

            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass FileInputStream
            {
                [default] interface Windows.Storage.Streams.IInputStream;
                interface Windows.Foundation.IClosable;
            }

            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass FileOutputStream
            {
                [default] interface Windows.Storage.Streams.IOutputStream;
                interface Windows.Foundation.IClosable;
            }

            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass RandomAccessStreamOverStream
            {
                [default] interface Windows.Storage.Streams.IRandomAccessStream;
                interface Windows.Storage.Streams.IOutputStream;
                interface Windows.Foundation.IClosable;
                interface Windows.Storage.Streams.IInputStream;
            }

            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass InputStreamOverStream
            {
                [default] interface Windows.Storage.Streams.IInputStream;
                interface Windows.Foundation.IClosable;
            }

            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass OutputStreamOverStream
            {
                [default] interface Windows.Storage.Streams.IOutputStream;
                interface Windows.Foundation.IClosable;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass InMemoryRandomAccessStream
            {
                [default] interface Windows.Storage.Streams.IRandomAccessStream;
                interface Windows.Storage.Streams.IOutputStream;
                interface Windows.Foundation.IClosable;
                interface Windows.Storage.Streams.IInputStream;
            }
        }
    }
}
