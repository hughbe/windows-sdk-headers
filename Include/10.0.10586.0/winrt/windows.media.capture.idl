//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0014
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Graphics.Imaging.idl";
import "Windows.Media.idl";
import "Windows.Media.Capture.Core.idl";
import "Windows.Media.Core.idl";
import "Windows.Media.Devices.idl";
import "Windows.Media.Effects.idl";
import "Windows.Media.MediaProperties.idl";
import "Windows.Storage.idl";
import "Windows.Storage.Streams.idl";
import "Windows.System.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Egraphics2Eimaging_h__)")
cpp_quote("#include <Windows.Graphics.Imaging.h>")
cpp_quote("#endif // !defined(__windows2Egraphics2Eimaging_h__)")
cpp_quote("#if !defined(__windows2Emedia_h__)")
cpp_quote("#include <Windows.Media.h>")
cpp_quote("#endif // !defined(__windows2Emedia_h__)")
cpp_quote("#if !defined(__windows2Emedia2Ecapture2Ecore_h__)")
cpp_quote("#include <Windows.Media.Capture.Core.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Ecapture2Ecore_h__)")
cpp_quote("#if !defined(__windows2Emedia2Ecore_h__)")
cpp_quote("#include <Windows.Media.Core.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Ecore_h__)")
cpp_quote("#if !defined(__windows2Emedia2Edevices_h__)")
cpp_quote("#include <Windows.Media.Devices.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Edevices_h__)")
cpp_quote("#if !defined(__windows2Emedia2Eeffects_h__)")
cpp_quote("#include <Windows.Media.Effects.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Eeffects_h__)")
cpp_quote("#if !defined(__windows2Emedia2Emediaproperties_h__)")
cpp_quote("#include <Windows.Media.MediaProperties.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Emediaproperties_h__)")
cpp_quote("#if !defined(__windows2Estorage_h__)")
cpp_quote("#include <Windows.Storage.h>")
cpp_quote("#endif // !defined(__windows2Estorage_h__)")
cpp_quote("#if !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#include <Windows.Storage.Streams.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#if !defined(__windows2Esystem_h__)")
cpp_quote("#include <Windows.System.h>")
cpp_quote("#endif // !defined(__windows2Esystem_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Foundation
    {
        namespace Collections
        {
            interface IPropertySet;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IAsyncAction;

        interface IClosable;

        typedef struct Size Size;

        typedef struct TimeSpan TimeSpan;
    }
}
namespace Windows
{
    namespace Graphics
    {
        namespace Imaging
        {
            runtimeclass SoftwareBitmap;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        typedef enum AudioProcessing AudioProcessing;
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Capture
        {
            namespace Core
            {
                runtimeclass VariablePhotoSequenceCapture;
            }
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Core
        {
            interface IMediaSource;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Devices
        {
            typedef enum AdvancedPhotoMode AdvancedPhotoMode;

            runtimeclass AudioDeviceController;

            typedef enum CameraStreamState CameraStreamState;

            typedef enum CaptureSceneMode CaptureSceneMode;

            typedef enum MediaCaptureFocusState MediaCaptureFocusState;

            typedef enum MediaCapturePauseBehavior MediaCapturePauseBehavior;

            runtimeclass VideoDeviceController;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Effects
        {
            interface IAudioEffectDefinition;

            interface IVideoEffectDefinition;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        interface IMediaExtension;
    }
}
namespace Windows
{
    namespace Media
    {
        namespace MediaProperties
        {
            interface IMediaEncodingProperties;

            runtimeclass ImageEncodingProperties;

            runtimeclass MediaEncodingProfile;

            runtimeclass MediaPropertySet;

            runtimeclass MediaRatio;

            runtimeclass VideoEncodingProperties;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        runtimeclass VideoFrame;
    }
}
namespace Windows
{
    namespace Storage
    {
        interface IStorageFile;

        runtimeclass StorageFile;

        runtimeclass StorageFolder;
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IContentTypeProvider;

            interface IInputStream;

            interface IOutputStream;

            interface IRandomAccessStream;

            interface IRandomAccessStreamWithContentType;
        }
    }
}
namespace Windows
{
    namespace System
    {
        typedef enum VirtualKey VirtualKey;

        typedef enum VirtualKeyModifiers VirtualKeyModifiers;
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Capture
        {
            typedef enum AppCaptureVideoEncodingBitrateMode AppCaptureVideoEncodingBitrateMode;

            typedef enum AppCaptureVideoEncodingResolutionMode AppCaptureVideoEncodingResolutionMode;

            typedef enum AppCaptureHistoricalBufferLengthUnit AppCaptureHistoricalBufferLengthUnit;

            typedef enum CameraCaptureUIMode CameraCaptureUIMode;

            typedef enum CameraCaptureUIPhotoFormat CameraCaptureUIPhotoFormat;

            typedef enum CameraCaptureUIVideoFormat CameraCaptureUIVideoFormat;

            typedef enum CameraCaptureUIMaxVideoResolution CameraCaptureUIMaxVideoResolution;

            typedef enum CameraCaptureUIMaxPhotoResolution CameraCaptureUIMaxPhotoResolution;

            typedef enum MediaCategory MediaCategory;

            typedef enum MediaStreamType MediaStreamType;

            typedef enum StreamingCaptureMode StreamingCaptureMode;

            typedef enum VideoRotation VideoRotation;

            typedef enum PhotoCaptureSource PhotoCaptureSource;

            typedef enum VideoDeviceCharacteristic VideoDeviceCharacteristic;

            typedef enum PowerlineFrequency PowerlineFrequency;

            typedef enum MediaCaptureThermalStatus MediaCaptureThermalStatus;

            typedef enum KnownVideoProfile KnownVideoProfile;

            typedef struct WhiteBalanceGain WhiteBalanceGain;

            delegate MediaCaptureFailedEventHandler;

            delegate RecordLimitationExceededEventHandler;

            interface IAppCaptureManagerStatics;

            interface IAppCaptureAlternateShortcutKeys;

            interface IAppCaptureAlternateShortcutKeys2;

            interface IAppCaptureSettings;

            interface IAppCaptureSettings2;

            interface IAppCaptureSettings3;

            interface ICameraCaptureUIPhotoCaptureSettings;

            interface ICameraCaptureUIVideoCaptureSettings;

            interface ICameraCaptureUI;

            interface ICameraOptionsUIStatics;

            interface IAppCapture;

            interface IAppCaptureStatics;

            interface IMediaCaptureFailedEventArgs;

            interface IMediaCaptureVideoProfileMediaDescription;

            interface IMediaCaptureVideoProfile;

            interface IMediaCaptureInitializationSettings;

            interface IMediaCaptureInitializationSettings2;

            interface IMediaCaptureInitializationSettings3;

            interface IMediaCaptureInitializationSettings4;

            interface IMediaCaptureStatics;

            interface IMediaCapture;

            interface IMediaCapture2;

            interface IMediaCapture3;

            interface IMediaCapture4;

            interface ILowLagPhotoCapture;

            interface IAdvancedPhotoCapture;

            interface IAdvancedCapturedPhoto;

            interface IOptionalReferencePhotoCapturedEventArgs;

            interface ILowLagMediaRecording;

            interface ILowLagMediaRecording2;

            interface ILowLagPhotoSequenceCapture;

            interface ICapturedFrameControlValues;

            interface ICapturedFrameControlValues2;

            interface IPhotoCapturedEventArgs;

            interface ICapturedPhoto;

            interface ICapturedFrame;

            interface ICapturedFrameWithSoftwareBitmap;

            interface IMediaCaptureVideoPreview;

            interface IMediaCaptureSettings;

            interface IMediaCaptureSettings2;

            interface IMediaCaptureFocusChangedEventArgs;

            interface IPhotoConfirmationCapturedEventArgs;

            interface IVideoStreamConfiguration;

            runtimeclass AppCaptureSettings;

            runtimeclass AppCaptureAlternateShortcutKeys;

            runtimeclass AppCaptureManager;

            runtimeclass CameraCaptureUIPhotoCaptureSettings;

            runtimeclass CameraCaptureUIVideoCaptureSettings;

            runtimeclass CameraCaptureUI;

            runtimeclass CameraOptionsUI;

            runtimeclass AppCapture;

            runtimeclass MediaCaptureFailedEventArgs;

            runtimeclass MediaCapture;

            runtimeclass MediaCaptureVideoProfileMediaDescription;

            runtimeclass MediaCaptureVideoProfile;

            runtimeclass MediaCaptureInitializationSettings;

            runtimeclass MediaCaptureSettings;

            runtimeclass LowLagMediaRecording;

            runtimeclass LowLagPhotoCapture;

            runtimeclass LowLagPhotoSequenceCapture;

            runtimeclass MediaCaptureFocusChangedEventArgs;

            runtimeclass PhotoConfirmationCapturedEventArgs;

            runtimeclass AdvancedPhotoCapture;

            runtimeclass CapturedPhoto;

            runtimeclass AdvancedCapturedPhoto;

            runtimeclass OptionalReferencePhotoCapturedEventArgs;

            runtimeclass CapturedFrame;

            runtimeclass PhotoCapturedEventArgs;

            runtimeclass CapturedFrameControlValues;

            runtimeclass VideoStreamConfiguration;
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace Media
    {
        namespace Capture
        {
            declare
            {
                interface Windows.Foundation.Collections.IIterable<Windows.Media.Capture.MediaCaptureVideoProfile*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Media.Capture.MediaCaptureVideoProfile*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.MediaCaptureVideoProfile*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Media.Capture.AdvancedCapturedPhoto*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Media.Capture.AdvancedPhotoCapture*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Media.Capture.CapturedPhoto*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Media.Capture.LowLagMediaRecording*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Media.Capture.LowLagPhotoCapture*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Media.Capture.LowLagPhotoSequenceCapture*>;

                interface Windows.Foundation.IReference<Windows.Media.Capture.WhiteBalanceGain>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Capture.AdvancedPhotoCapture*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Capture.AdvancedPhotoCapture*, Windows.Media.Capture.OptionalReferencePhotoCapturedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Capture.AppCapture*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Capture.LowLagPhotoSequenceCapture*, Windows.Media.Capture.PhotoCapturedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Capture.MediaCapture*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Capture.MediaCapture*, Windows.Media.Capture.MediaCaptureFocusChangedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Capture.MediaCapture*, Windows.Media.Capture.PhotoConfirmationCapturedEventArgs*>;
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace Media
    {
        namespace Capture
        {
            [version(0x0A000000)]
            enum AppCaptureVideoEncodingBitrateMode
            {
                Custom   = 0,
                High     = 1,
                Standard = 2
            };

            [version(0x0A000000)]
            enum AppCaptureVideoEncodingResolutionMode
            {
                Custom   = 0,
                High     = 1,
                Standard = 2
            };

            [version(0x0A000000)]
            enum AppCaptureHistoricalBufferLengthUnit
            {
                Megabytes = 0,
                Seconds   = 1
            };

            [version(0x06020000)]
            enum CameraCaptureUIMode
            {
                PhotoOrVideo = 0,
                Photo        = 1,
                Video        = 2
            };

            [version(0x06020000)]
            enum CameraCaptureUIPhotoFormat
            {
                Jpeg   = 0,
                Png    = 1,
                JpegXR = 2
            };

            [version(0x06020000)]
            enum CameraCaptureUIVideoFormat
            {
                Mp4 = 0,
                Wmv = 1
            };

            [version(0x06020000)]
            enum CameraCaptureUIMaxVideoResolution
            {
                HighestAvailable   = 0,
                LowDefinition      = 1,
                StandardDefinition = 2,
                HighDefinition     = 3
            };

            [version(0x06020000)]
            enum CameraCaptureUIMaxPhotoResolution
            {
                HighestAvailable = 0,
                VerySmallQvga    = 1,
                SmallVga         = 2,
                MediumXga        = 3,
                Large3M          = 4,
                VeryLarge5M      = 5
            };

            [version(0x06030000)]
            enum MediaCategory
            {
                Other          = 0,
                Communications = 1,
                [version(0x0A000000)]
                Media          = 2,
                [version(0x0A000000)]
                GameChat       = 3,
                [version(0x0A000000)]
                Speech         = 4
            };

            [version(0x06020000)]
            enum MediaStreamType
            {
                VideoPreview = 0,
                VideoRecord  = 1,
                Audio        = 2,
                Photo        = 3
            };

            [version(0x06020000)]
            enum StreamingCaptureMode
            {
                AudioAndVideo = 0,
                Audio         = 1,
                Video         = 2
            };

            [version(0x06020000)]
            enum VideoRotation
            {
                None                = 0,
                Clockwise90Degrees  = 1,
                Clockwise180Degrees = 2,
                Clockwise270Degrees = 3
            };

            [version(0x06020000)]
            enum PhotoCaptureSource
            {
                Auto         = 0,
                VideoPreview = 1,
                Photo        = 2
            };

            [version(0x06020000)]
            enum VideoDeviceCharacteristic
            {
                AllStreamsIndependent         = 0,
                PreviewRecordStreamsIdentical = 1,
                PreviewPhotoStreamsIdentical  = 2,
                RecordPhotoStreamsIdentical   = 3,
                AllStreamsIdentical           = 4
            };

            [version(0x06020000)]
            enum PowerlineFrequency
            {
                Disabled   = 0,
                FiftyHertz = 1,
                SixtyHertz = 2
            };

            [version(0x0A000000)]
            enum MediaCaptureThermalStatus
            {
                Normal     = 0,
                Overheated = 1
            };

            [version(0x0A000000)]
            enum KnownVideoProfile
            {
                VideoRecording        = 0,
                HighQualityPhoto      = 1,
                BalancedVideoAndPhoto = 2,
                VideoConferencing     = 3,
                PhotoSequence         = 4
            };

            [version(0x0A000000)]
            struct WhiteBalanceGain
            {
                DOUBLE R;
                DOUBLE G;
                DOUBLE B;
            };

            [uuid(2014EFFB-5CD8-4F08-A314-0D360DA59F14)]
            [version(0x06020000)]
            delegate
                HRESULT MediaCaptureFailedEventHandler([in] Windows.Media.Capture.MediaCapture* sender, [in] Windows.Media.Capture.MediaCaptureFailedEventArgs* errorEventArgs);

            [uuid(3FAE8F2E-4FE1-4FFD-AABA-E1F1337D4E53)]
            [version(0x06020000)]
            delegate
                HRESULT RecordLimitationExceededEventHandler([in] Windows.Media.Capture.MediaCapture* sender);

            [exclusiveto(Windows.Media.Capture.AppCaptureManager)]
            [uuid(7D9E3EA7-6282-4735-8D4E-AA45F90F6723)]
            [version(0x0A000000)]
            interface IAppCaptureManagerStatics : IInspectable
            {
                HRESULT GetCurrentSettings([out] [retval] Windows.Media.Capture.AppCaptureSettings** value);
                HRESULT ApplySettings([in] Windows.Media.Capture.AppCaptureSettings* appCaptureSettings);
            }

            [exclusiveto(Windows.Media.Capture.AppCaptureAlternateShortcutKeys)]
            [uuid(19E8E0EF-236C-40F9-B38F-9B7DD65D1CCC)]
            [version(0x0A000000)]
            interface IAppCaptureAlternateShortcutKeys : IInspectable
            {
                [propput] HRESULT ToggleGameBarKey([in] Windows.System.VirtualKey value);
                [propget] HRESULT ToggleGameBarKey([out] [retval] Windows.System.VirtualKey* value);
                [propput] HRESULT ToggleGameBarKeyModifiers([in] Windows.System.VirtualKeyModifiers value);
                [propget] HRESULT ToggleGameBarKeyModifiers([out] [retval] Windows.System.VirtualKeyModifiers* value);
                [propput] HRESULT SaveHistoricalVideoKey([in] Windows.System.VirtualKey value);
                [propget] HRESULT SaveHistoricalVideoKey([out] [retval] Windows.System.VirtualKey* value);
                [propput] HRESULT SaveHistoricalVideoKeyModifiers([in] Windows.System.VirtualKeyModifiers value);
                [propget] HRESULT SaveHistoricalVideoKeyModifiers([out] [retval] Windows.System.VirtualKeyModifiers* value);
                [propput] HRESULT ToggleRecordingKey([in] Windows.System.VirtualKey value);
                [propget] HRESULT ToggleRecordingKey([out] [retval] Windows.System.VirtualKey* value);
                [propput] HRESULT ToggleRecordingKeyModifiers([in] Windows.System.VirtualKeyModifiers value);
                [propget] HRESULT ToggleRecordingKeyModifiers([out] [retval] Windows.System.VirtualKeyModifiers* value);
                [propput] HRESULT TakeScreenshotKey([in] Windows.System.VirtualKey value);
                [propget] HRESULT TakeScreenshotKey([out] [retval] Windows.System.VirtualKey* value);
                [propput] HRESULT TakeScreenshotKeyModifiers([in] Windows.System.VirtualKeyModifiers value);
                [propget] HRESULT TakeScreenshotKeyModifiers([out] [retval] Windows.System.VirtualKeyModifiers* value);
                [propput] HRESULT ToggleRecordingIndicatorKey([in] Windows.System.VirtualKey value);
                [propget] HRESULT ToggleRecordingIndicatorKey([out] [retval] Windows.System.VirtualKey* value);
                [propput] HRESULT ToggleRecordingIndicatorKeyModifiers([in] Windows.System.VirtualKeyModifiers value);
                [propget] HRESULT ToggleRecordingIndicatorKeyModifiers([out] [retval] Windows.System.VirtualKeyModifiers* value);
            }

            [exclusiveto(Windows.Media.Capture.AppCaptureAlternateShortcutKeys)]
            [uuid(C3669090-DD17-47F0-95E5-CE42286CF338)]
            [version(0x0A000000)]
            interface IAppCaptureAlternateShortcutKeys2 : IInspectable
            {
                [propput] HRESULT ToggleMicrophoneCaptureKey([in] Windows.System.VirtualKey value);
                [propget] HRESULT ToggleMicrophoneCaptureKey([out] [retval] Windows.System.VirtualKey* value);
                [propput] HRESULT ToggleMicrophoneCaptureKeyModifiers([in] Windows.System.VirtualKeyModifiers value);
                [propget] HRESULT ToggleMicrophoneCaptureKeyModifiers([out] [retval] Windows.System.VirtualKeyModifiers* value);
            }

            [exclusiveto(Windows.Media.Capture.AppCaptureSettings)]
            [uuid(14683A86-8807-48D3-883A-970EE4532A39)]
            [version(0x0A000000)]
            interface IAppCaptureSettings : IInspectable
            {
                [propput] HRESULT AppCaptureDestinationFolder([in] Windows.Storage.StorageFolder* value);
                [propget] HRESULT AppCaptureDestinationFolder([out] [retval] Windows.Storage.StorageFolder** value);
                [propput] HRESULT AudioEncodingBitrate([in] UINT32 value);
                [propget] HRESULT AudioEncodingBitrate([out] [retval] UINT32* value);
                [propput] HRESULT IsAudioCaptureEnabled([in] boolean value);
                [propget] HRESULT IsAudioCaptureEnabled([out] [retval] boolean* value);
                [propput] HRESULT CustomVideoEncodingBitrate([in] UINT32 value);
                [propget] HRESULT CustomVideoEncodingBitrate([out] [retval] UINT32* value);
                [propput] HRESULT CustomVideoEncodingHeight([in] UINT32 value);
                [propget] HRESULT CustomVideoEncodingHeight([out] [retval] UINT32* value);
                [propput] HRESULT CustomVideoEncodingWidth([in] UINT32 value);
                [propget] HRESULT CustomVideoEncodingWidth([out] [retval] UINT32* value);
                [propput] HRESULT HistoricalBufferLength([in] UINT32 value);
                [propget] HRESULT HistoricalBufferLength([out] [retval] UINT32* value);
                [propput] HRESULT HistoricalBufferLengthUnit([in] Windows.Media.Capture.AppCaptureHistoricalBufferLengthUnit value);
                [propget] HRESULT HistoricalBufferLengthUnit([out] [retval] Windows.Media.Capture.AppCaptureHistoricalBufferLengthUnit* value);
                [propput] HRESULT IsHistoricalCaptureEnabled([in] boolean value);
                [propget] HRESULT IsHistoricalCaptureEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsHistoricalCaptureOnBatteryAllowed([in] boolean value);
                [propget] HRESULT IsHistoricalCaptureOnBatteryAllowed([out] [retval] boolean* value);
                [propput] HRESULT IsHistoricalCaptureOnWirelessDisplayAllowed([in] boolean value);
                [propget] HRESULT IsHistoricalCaptureOnWirelessDisplayAllowed([out] [retval] boolean* value);
                [propput] HRESULT MaximumRecordLength([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT MaximumRecordLength([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT ScreenshotDestinationFolder([in] Windows.Storage.StorageFolder* value);
                [propget] HRESULT ScreenshotDestinationFolder([out] [retval] Windows.Storage.StorageFolder** value);
                [propput] HRESULT VideoEncodingBitrateMode([in] Windows.Media.Capture.AppCaptureVideoEncodingBitrateMode value);
                [propget] HRESULT VideoEncodingBitrateMode([out] [retval] Windows.Media.Capture.AppCaptureVideoEncodingBitrateMode* value);
                [propput] HRESULT VideoEncodingResolutionMode([in] Windows.Media.Capture.AppCaptureVideoEncodingResolutionMode value);
                [propget] HRESULT VideoEncodingResolutionMode([out] [retval] Windows.Media.Capture.AppCaptureVideoEncodingResolutionMode* value);
                [propput] HRESULT IsAppCaptureEnabled([in] boolean value);
                [propget] HRESULT IsAppCaptureEnabled([out] [retval] boolean* value);
                [propget] HRESULT IsCpuConstrained([out] [retval] boolean* value);
                [propget] HRESULT IsDisabledByPolicy([out] [retval] boolean* value);
                [propget] HRESULT IsMemoryConstrained([out] [retval] boolean* value);
                [propget] HRESULT HasHardwareEncoder([out] [retval] boolean* value);
            }

            [exclusiveto(Windows.Media.Capture.AppCaptureSettings)]
            [uuid(FCB8CEE7-E26B-476F-9B1A-EC342D2A8FDE)]
            [version(0x0A000000)]
            interface IAppCaptureSettings2 : IInspectable
            {
                [propget] HRESULT IsGpuConstrained([out] [retval] boolean* value);
                [propget] HRESULT AlternateShortcutKeys([out] [retval] Windows.Media.Capture.AppCaptureAlternateShortcutKeys** value);
            }

            [exclusiveto(Windows.Media.Capture.AppCaptureSettings)]
            [uuid(A93502FE-88C2-42D6-AAAA-40FEFFD75AEC)]
            [version(0x0A000000)]
            interface IAppCaptureSettings3 : IInspectable
            {
                [propput] HRESULT IsMicrophoneCaptureEnabled([in] boolean value);
                [propget] HRESULT IsMicrophoneCaptureEnabled([out] [retval] boolean* value);
            }

            [exclusiveto(Windows.Media.Capture.CameraCaptureUIPhotoCaptureSettings)]
            [uuid(B9F5BE97-3472-46A8-8A9E-04CE42CCC97D)]
            [version(0x06020000)]
            interface ICameraCaptureUIPhotoCaptureSettings : IInspectable
            {
                [propget] HRESULT Format([out] [retval] Windows.Media.Capture.CameraCaptureUIPhotoFormat* value);
                [propput] HRESULT Format([in] Windows.Media.Capture.CameraCaptureUIPhotoFormat value);
                [propget] HRESULT MaxResolution([out] [retval] Windows.Media.Capture.CameraCaptureUIMaxPhotoResolution* value);
                [propput] HRESULT MaxResolution([in] Windows.Media.Capture.CameraCaptureUIMaxPhotoResolution value);
                [propget] HRESULT CroppedSizeInPixels([out] [retval] Windows.Foundation.Size* value);
                [propput] HRESULT CroppedSizeInPixels([in] Windows.Foundation.Size value);
                [propget] HRESULT CroppedAspectRatio([out] [retval] Windows.Foundation.Size* value);
                [propput] HRESULT CroppedAspectRatio([in] Windows.Foundation.Size value);
                [propget] HRESULT AllowCropping([out] [retval] boolean* value);
                [propput] HRESULT AllowCropping([in] boolean value);
            }

            [exclusiveto(Windows.Media.Capture.CameraCaptureUIVideoCaptureSettings)]
            [uuid(64E92D1F-A28D-425A-B84F-E568335FF24E)]
            [version(0x06020000)]
            interface ICameraCaptureUIVideoCaptureSettings : IInspectable
            {
                [propget] HRESULT Format([out] [retval] Windows.Media.Capture.CameraCaptureUIVideoFormat* value);
                [propput] HRESULT Format([in] Windows.Media.Capture.CameraCaptureUIVideoFormat value);
                [propget] HRESULT MaxResolution([out] [retval] Windows.Media.Capture.CameraCaptureUIMaxVideoResolution* value);
                [propput] HRESULT MaxResolution([in] Windows.Media.Capture.CameraCaptureUIMaxVideoResolution value);
                [propget] HRESULT MaxDurationInSeconds([out] [retval] FLOAT* value);
                [propput] HRESULT MaxDurationInSeconds([in] FLOAT value);
                [propget] HRESULT AllowTrimming([out] [retval] boolean* value);
                [propput] HRESULT AllowTrimming([in] boolean value);
            }

            [exclusiveto(Windows.Media.Capture.CameraCaptureUI)]
            [uuid(48587540-6F93-4BB4-B8F3-E89E48948C91)]
            [version(0x06020000)]
            interface ICameraCaptureUI : IInspectable
            {
                [propget] HRESULT PhotoSettings([out] [retval] Windows.Media.Capture.CameraCaptureUIPhotoCaptureSettings** value);
                [propget] HRESULT VideoSettings([out] [retval] Windows.Media.Capture.CameraCaptureUIVideoCaptureSettings** value);
                HRESULT CaptureFileAsync([in] Windows.Media.Capture.CameraCaptureUIMode mode, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** asyncInfo);
            }

            [exclusiveto(Windows.Media.Capture.CameraOptionsUI)]
            [uuid(3B0D5E34-3906-4B7D-946C-7BDE844499AE)]
            [version(0x06020000)]
            interface ICameraOptionsUIStatics : IInspectable
            {
                HRESULT Show([in] Windows.Media.Capture.MediaCapture* mediaCapture);
            }

            [exclusiveto(Windows.Media.Capture.AppCapture)]
            [uuid(9749D453-A29A-45ED-8F29-22D09942CFF7)]
            [version(0x0A000001)]
            interface IAppCapture : IInspectable
            {
                [propget] HRESULT IsCapturingAudio([out] [retval] boolean* value);
                [propget] HRESULT IsCapturingVideo([out] [retval] boolean* value);
                [eventadd] HRESULT CapturingChanged([in] Windows.Foundation.TypedEventHandler<Windows.Media.Capture.AppCapture*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT CapturingChanged([in] EventRegistrationToken token);
            }

            [exclusiveto(Windows.Media.Capture.AppCapture)]
            [uuid(F922DD6C-0A7E-4E74-8B20-9C1F902D08A1)]
            [version(0x0A000001)]
            interface IAppCaptureStatics : IInspectable
            {
                HRESULT GetForCurrentView([out] [retval] Windows.Media.Capture.AppCapture** value);
            }

            [exclusiveto(Windows.Media.Capture.MediaCaptureFailedEventArgs)]
            [uuid(80FDE3F4-54C4-42C0-8D19-CEA1A87CA18B)]
            [version(0x06020000)]
            interface IMediaCaptureFailedEventArgs : IInspectable
            {
                [propget] HRESULT Message([out] [retval] HSTRING* value);
                [propget] HRESULT Code([out] [retval] UINT32* value);
            }

            [exclusiveto(Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription)]
            [uuid(8012AFEF-B691-49FF-83F2-C1E76EAAEA1B)]
            [version(0x0A000000)]
            interface IMediaCaptureVideoProfileMediaDescription : IInspectable
            {
                [propget] HRESULT Width([out] [retval] UINT32* value);
                [propget] HRESULT Height([out] [retval] UINT32* value);
                [propget] HRESULT FrameRate([out] [retval] DOUBLE* value);
                [propget] HRESULT IsVariablePhotoSequenceSupported([out] [retval] boolean* value);
                [propget] HRESULT IsHdrVideoSupported([out] [retval] boolean* value);
            }

            [exclusiveto(Windows.Media.Capture.MediaCaptureVideoProfile)]
            [uuid(21A073BF-A3EE-4ECF-9EF6-50B0BC4E1305)]
            [version(0x0A000000)]
            interface IMediaCaptureVideoProfile : IInspectable
            {
                [propget] HRESULT Id([out] [retval] HSTRING* value);
                [propget] HRESULT VideoDeviceId([out] [retval] HSTRING* value);
                [propget] HRESULT SupportedPreviewMediaDescription([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription*>** value);
                [propget] HRESULT SupportedRecordMediaDescription([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription*>** value);
                [propget] HRESULT SupportedPhotoMediaDescription([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription*>** value);
                HRESULT GetConcurrency([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.MediaCaptureVideoProfile*>** value);
            }

            [exclusiveto(Windows.Media.Capture.MediaCaptureInitializationSettings)]
            [uuid(9782BA70-EA65-4900-9356-8CA887726884)]
            [version(0x06020000)]
            interface IMediaCaptureInitializationSettings : IInspectable
            {
                [propput] HRESULT AudioDeviceId([in] HSTRING value);
                [propget] HRESULT AudioDeviceId([out] [retval] HSTRING* value);
                [propput] HRESULT VideoDeviceId([in] HSTRING value);
                [propget] HRESULT VideoDeviceId([out] [retval] HSTRING* value);
                [propput] HRESULT StreamingCaptureMode([in] Windows.Media.Capture.StreamingCaptureMode value);
                [propget] HRESULT StreamingCaptureMode([out] [retval] Windows.Media.Capture.StreamingCaptureMode* value);
                [propput] HRESULT PhotoCaptureSource([in] Windows.Media.Capture.PhotoCaptureSource value);
                [propget] HRESULT PhotoCaptureSource([out] [retval] Windows.Media.Capture.PhotoCaptureSource* value);
            }

            [exclusiveto(Windows.Media.Capture.MediaCaptureInitializationSettings)]
            [uuid(404E0626-C9DC-43E9-AEE4-E6BF1B57B44C)]
            [version(0x06030000)]
            interface IMediaCaptureInitializationSettings2 : IInspectable
            {
                [propput] HRESULT MediaCategory([in] Windows.Media.Capture.MediaCategory value);
                [propget] HRESULT MediaCategory([out] [retval] Windows.Media.Capture.MediaCategory* value);
                [propput] HRESULT AudioProcessing([in] Windows.Media.AudioProcessing value);
                [propget] HRESULT AudioProcessing([out] [retval] Windows.Media.AudioProcessing* value);
            }

            [exclusiveto(Windows.Media.Capture.MediaCaptureInitializationSettings)]
            [uuid(4160519D-BE48-4730-8104-0CF6E9E97948)]
            [version(0x0A000000)]
            interface IMediaCaptureInitializationSettings3 : IInspectable
            {
                [propput] HRESULT AudioSource([in] Windows.Media.Core.IMediaSource* value);
                [propget] HRESULT AudioSource([out] [retval] Windows.Media.Core.IMediaSource** value);
                [propput] HRESULT VideoSource([in] Windows.Media.Core.IMediaSource* value);
                [propget] HRESULT VideoSource([out] [retval] Windows.Media.Core.IMediaSource** value);
            }

            [exclusiveto(Windows.Media.Capture.MediaCaptureInitializationSettings)]
            [uuid(F502A537-4CB7-4D28-95ED-4F9F012E0518)]
            [version(0x0A000000)]
            interface IMediaCaptureInitializationSettings4 : IInspectable
            {
                [propget] HRESULT VideoProfile([out] [retval] Windows.Media.Capture.MediaCaptureVideoProfile** value);
                [propput] HRESULT VideoProfile([in] Windows.Media.Capture.MediaCaptureVideoProfile* value);
                [propget] HRESULT PreviewMediaDescription([out] [retval] Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription** value);
                [propput] HRESULT PreviewMediaDescription([in] Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription* value);
                [propget] HRESULT RecordMediaDescription([out] [retval] Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription** value);
                [propput] HRESULT RecordMediaDescription([in] Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription* value);
                [propget] HRESULT PhotoMediaDescription([out] [retval] Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription** value);
                [propput] HRESULT PhotoMediaDescription([in] Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription* value);
            }

            [exclusiveto(Windows.Media.Capture.MediaCapture)]
            [uuid(ACEF81FF-99ED-4645-965E-1925CFC63834)]
            [version(0x0A000000)]
            interface IMediaCaptureStatics : IInspectable
            {
                HRESULT IsVideoProfileSupported([in] HSTRING videoDeviceId, [out] [retval] boolean* value);
                HRESULT FindAllVideoProfiles([in] HSTRING videoDeviceId, [out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.MediaCaptureVideoProfile*>** value);
                HRESULT FindConcurrentProfiles([in] HSTRING videoDeviceId, [out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.MediaCaptureVideoProfile*>** value);
                HRESULT FindKnownVideoProfiles([in] HSTRING videoDeviceId, [in] Windows.Media.Capture.KnownVideoProfile name, [out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.MediaCaptureVideoProfile*>** value);
            }

            [exclusiveto(Windows.Media.Capture.MediaCapture)]
            [uuid(C61AFBB4-FB10-4A34-AC18-CA80D9C8E7EE)]
            [version(0x06020000)]
            interface IMediaCapture : IInspectable
            {
                [overload("InitializeAsync")] HRESULT InitializeAsync([out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                [overload("InitializeAsync")] HRESULT InitializeWithSettingsAsync([in] Windows.Media.Capture.MediaCaptureInitializationSettings* mediaCaptureInitializationSettings, [out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                HRESULT StartRecordToStorageFileAsync([in] Windows.Media.MediaProperties.MediaEncodingProfile* encodingProfile, [in] Windows.Storage.IStorageFile* file, [out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                HRESULT StartRecordToStreamAsync([in] Windows.Media.MediaProperties.MediaEncodingProfile* encodingProfile, [in] Windows.Storage.Streams.IRandomAccessStream* stream, [out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                [overload("StartRecordToCustomSinkAsync")] HRESULT StartRecordToCustomSinkAsync([in] Windows.Media.MediaProperties.MediaEncodingProfile* encodingProfile, [in] Windows.Media.IMediaExtension* customMediaSink, [out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                [overload("StartRecordToCustomSinkAsync")] HRESULT StartRecordToCustomSinkIdAsync([in] Windows.Media.MediaProperties.MediaEncodingProfile* encodingProfile, [in] HSTRING customSinkActivationId, [in] Windows.Foundation.Collections.IPropertySet* customSinkSettings, [out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                HRESULT StopRecordAsync([out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                HRESULT CapturePhotoToStorageFileAsync([in] Windows.Media.MediaProperties.ImageEncodingProperties* type, [in] Windows.Storage.IStorageFile* file, [out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                HRESULT CapturePhotoToStreamAsync([in] Windows.Media.MediaProperties.ImageEncodingProperties* type, [in] Windows.Storage.Streams.IRandomAccessStream* stream, [out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                [deprecated("AddEffectAsync might not be available in future versions of Windows. Starting with Windows Threshold, use AddAudioEffectAsync and AddVideoEffectAsync instead", deprecate, 0x0A000000)] HRESULT AddEffectAsync([in] Windows.Media.Capture.MediaStreamType mediaStreamType, [in] HSTRING effectActivationID, [in] Windows.Foundation.Collections.IPropertySet* effectSettings, [out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                HRESULT ClearEffectsAsync([in] Windows.Media.Capture.MediaStreamType mediaStreamType, [out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                HRESULT SetEncoderProperty([in] Windows.Media.Capture.MediaStreamType mediaStreamType, [in] GUID propertyId, [in] IInspectable* propertyValue);
                HRESULT GetEncoderProperty([in] Windows.Media.Capture.MediaStreamType mediaStreamType, [in] GUID propertyId, [out] [retval] IInspectable** propertyValue);
                [eventadd] HRESULT Failed([in] Windows.Media.Capture.MediaCaptureFailedEventHandler* errorEventHandler, [out] [retval] EventRegistrationToken* eventCookie);
                [eventremove] HRESULT Failed([in] EventRegistrationToken eventCookie);
                [eventadd] HRESULT RecordLimitationExceeded([in] Windows.Media.Capture.RecordLimitationExceededEventHandler* recordLimitationExceededEventHandler, [out] [retval] EventRegistrationToken* eventCookie);
                [eventremove] HRESULT RecordLimitationExceeded([in] EventRegistrationToken eventCookie);
                [propget] HRESULT MediaCaptureSettings([out] [retval] Windows.Media.Capture.MediaCaptureSettings** value);
                [propget] HRESULT AudioDeviceController([out] [retval] Windows.Media.Devices.AudioDeviceController** value);
                [propget] HRESULT VideoDeviceController([out] [retval] Windows.Media.Devices.VideoDeviceController** value);
                HRESULT SetPreviewMirroring([in] boolean value);
                HRESULT GetPreviewMirroring([out] [retval] boolean* value);
                HRESULT SetPreviewRotation([in] Windows.Media.Capture.VideoRotation value);
                HRESULT GetPreviewRotation([out] [retval] Windows.Media.Capture.VideoRotation* value);
                HRESULT SetRecordRotation([in] Windows.Media.Capture.VideoRotation value);
                HRESULT GetRecordRotation([out] [retval] Windows.Media.Capture.VideoRotation* value);
            }

            [exclusiveto(Windows.Media.Capture.MediaCapture)]
            [uuid(9CC68260-7DA1-4043-B652-21B8878DAFF9)]
            [version(0x06030000)]
            interface IMediaCapture2 : IInspectable
            {
                HRESULT PrepareLowLagRecordToStorageFileAsync([in] Windows.Media.MediaProperties.MediaEncodingProfile* encodingProfile, [in] Windows.Storage.IStorageFile* file, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Capture.LowLagMediaRecording*>** operation);
                HRESULT PrepareLowLagRecordToStreamAsync([in] Windows.Media.MediaProperties.MediaEncodingProfile* encodingProfile, [in] Windows.Storage.Streams.IRandomAccessStream* stream, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Capture.LowLagMediaRecording*>** operation);
                [overload("PrepareLowLagRecordToCustomSinkAsync")] HRESULT PrepareLowLagRecordToCustomSinkAsync([in] Windows.Media.MediaProperties.MediaEncodingProfile* encodingProfile, [in] Windows.Media.IMediaExtension* customMediaSink, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Capture.LowLagMediaRecording*>** operation);
                [overload("PrepareLowLagRecordToCustomSinkAsync")] HRESULT PrepareLowLagRecordToCustomSinkIdAsync([in] Windows.Media.MediaProperties.MediaEncodingProfile* encodingProfile, [in] HSTRING customSinkActivationId, [in] Windows.Foundation.Collections.IPropertySet* customSinkSettings, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Capture.LowLagMediaRecording*>** operation);
                HRESULT PrepareLowLagPhotoCaptureAsync([in] Windows.Media.MediaProperties.ImageEncodingProperties* type, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Capture.LowLagPhotoCapture*>** operation);
                HRESULT PrepareLowLagPhotoSequenceCaptureAsync([in] Windows.Media.MediaProperties.ImageEncodingProperties* type, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Capture.LowLagPhotoSequenceCapture*>** operation);
                HRESULT SetEncodingPropertiesAsync([in] Windows.Media.Capture.MediaStreamType mediaStreamType, [in] Windows.Media.MediaProperties.IMediaEncodingProperties* mediaEncodingProperties, [in] Windows.Media.MediaProperties.MediaPropertySet* encoderProperties, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            }

            [exclusiveto(Windows.Media.Capture.MediaCapture)]
            [uuid(D4136F30-1564-466E-BC0A-AF94E02AB016)]
            [version(0x0A000000)]
            interface IMediaCapture3 : IInspectable
            {
                HRESULT PrepareVariablePhotoSequenceCaptureAsync([in] Windows.Media.MediaProperties.ImageEncodingProperties* type, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Capture.Core.VariablePhotoSequenceCapture*>** operation);
                [eventadd] HRESULT FocusChanged([in] Windows.Foundation.TypedEventHandler<Windows.Media.Capture.MediaCapture*, Windows.Media.Capture.MediaCaptureFocusChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT FocusChanged([in] EventRegistrationToken token);
                [eventadd] HRESULT PhotoConfirmationCaptured([in] Windows.Foundation.TypedEventHandler<Windows.Media.Capture.MediaCapture*, Windows.Media.Capture.PhotoConfirmationCapturedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PhotoConfirmationCaptured([in] EventRegistrationToken token);
            }

            [exclusiveto(Windows.Media.Capture.MediaCapture)]
            [uuid(BACD6FD6-FB08-4947-AEA2-CE14EFF0CE13)]
            [version(0x0A000000)]
            interface IMediaCapture4 : IInspectable
            {
                HRESULT AddAudioEffectAsync([in] Windows.Media.Effects.IAudioEffectDefinition* definition, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.IMediaExtension*>** op);
                HRESULT AddVideoEffectAsync([in] Windows.Media.Effects.IVideoEffectDefinition* definition, [in] Windows.Media.Capture.MediaStreamType mediaStreamType, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.IMediaExtension*>** op);
                HRESULT PauseRecordAsync([in] Windows.Media.Devices.MediaCapturePauseBehavior behavior, [out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                HRESULT ResumeRecordAsync([out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                [eventadd] HRESULT CameraStreamStateChanged([in] Windows.Foundation.TypedEventHandler<Windows.Media.Capture.MediaCapture*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT CameraStreamStateChanged([in] EventRegistrationToken token);
                [propget] HRESULT CameraStreamState([out] [retval] Windows.Media.Devices.CameraStreamState* streamState);
                [overload("GetPreviewFrameAsync")] HRESULT GetPreviewFrameAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.VideoFrame*>** operation);
                [overload("GetPreviewFrameAsync")] HRESULT GetPreviewFrameCopyAsync([in] Windows.Media.VideoFrame* destination, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.VideoFrame*>** operation);
                [eventadd] HRESULT ThermalStatusChanged([in] Windows.Foundation.TypedEventHandler<Windows.Media.Capture.MediaCapture*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ThermalStatusChanged([in] EventRegistrationToken token);
                [propget] HRESULT ThermalStatus([out] [retval] Windows.Media.Capture.MediaCaptureThermalStatus* value);
                HRESULT PrepareAdvancedPhotoCaptureAsync([in] Windows.Media.MediaProperties.ImageEncodingProperties* encodingProperties, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Capture.AdvancedPhotoCapture*>** operation);
            }

            [exclusiveto(Windows.Media.Capture.LowLagPhotoCapture)]
            [uuid(A37251B7-6B44-473D-8F24-F703D6C0EC44)]
            [version(0x06030000)]
            interface ILowLagPhotoCapture : IInspectable
            {
                HRESULT CaptureAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Capture.CapturedPhoto*>** operation);
                HRESULT FinishAsync([out] [retval] Windows.Foundation.IAsyncAction** operation);
            }

            [exclusiveto(Windows.Media.Capture.AdvancedPhotoCapture)]
            [uuid(83FFAAFA-6667-44DC-973C-A6BCE596AA0F)]
            [version(0x0A000000)]
            interface IAdvancedPhotoCapture : IInspectable
            {
                [overload("CaptureAsync")] HRESULT CaptureAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Capture.AdvancedCapturedPhoto*>** operation);
                [overload("CaptureAsync")] HRESULT CaptureWithContextAsync([in] IInspectable* context, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Capture.AdvancedCapturedPhoto*>** operation);
                [eventadd] HRESULT OptionalReferencePhotoCaptured([in] Windows.Foundation.TypedEventHandler<Windows.Media.Capture.AdvancedPhotoCapture*, Windows.Media.Capture.OptionalReferencePhotoCapturedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT OptionalReferencePhotoCaptured([in] EventRegistrationToken token);
                [eventadd] HRESULT AllPhotosCaptured([in] Windows.Foundation.TypedEventHandler<Windows.Media.Capture.AdvancedPhotoCapture*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT AllPhotosCaptured([in] EventRegistrationToken token);
                HRESULT FinishAsync([out] [retval] Windows.Foundation.IAsyncAction** operation);
            }

            [exclusiveto(Windows.Media.Capture.AdvancedCapturedPhoto)]
            [uuid(F072728B-B292-4491-9D41-99807A550BBF)]
            [version(0x0A000000)]
            interface IAdvancedCapturedPhoto : IInspectable
            {
                [propget] HRESULT Frame([out] [retval] Windows.Media.Capture.CapturedFrame** value);
                [propget] HRESULT Mode([out] [retval] Windows.Media.Devices.AdvancedPhotoMode* value);
                [propget] HRESULT Context([out] [retval] IInspectable** value);
            }

            [exclusiveto(Windows.Media.Capture.OptionalReferencePhotoCapturedEventArgs)]
            [uuid(470F88B3-1E6D-4051-9C8B-F1D85AF047B7)]
            [version(0x0A000000)]
            interface IOptionalReferencePhotoCapturedEventArgs : IInspectable
            {
                [propget] HRESULT Frame([out] [retval] Windows.Media.Capture.CapturedFrame** value);
                [propget] HRESULT Context([out] [retval] IInspectable** value);
            }

            [exclusiveto(Windows.Media.Capture.LowLagMediaRecording)]
            [uuid(41C8BAF7-FF3F-49F0-A477-F195E3CE5108)]
            [version(0x06030000)]
            interface ILowLagMediaRecording : IInspectable
            {
                HRESULT StartAsync([out] [retval] Windows.Foundation.IAsyncAction** operation);
                HRESULT StopAsync([out] [retval] Windows.Foundation.IAsyncAction** operation);
                HRESULT FinishAsync([out] [retval] Windows.Foundation.IAsyncAction** operation);
            }

            [exclusiveto(Windows.Media.Capture.LowLagMediaRecording)]
            [uuid(6369C758-5644-41E2-97AF-8EF56A25E225)]
            [version(0x0A000000)]
            interface ILowLagMediaRecording2 : IInspectable
            {
                HRESULT PauseAsync([in] Windows.Media.Devices.MediaCapturePauseBehavior behavior, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                HRESULT ResumeAsync([out] [retval] Windows.Foundation.IAsyncAction** operation);
            }

            [exclusiveto(Windows.Media.Capture.LowLagPhotoSequenceCapture)]
            [uuid(7CC346BB-B9A9-4C91-8FFA-287E9C668669)]
            [version(0x06030000)]
            interface ILowLagPhotoSequenceCapture : IInspectable
            {
                HRESULT StartAsync([out] [retval] Windows.Foundation.IAsyncAction** operation);
                HRESULT StopAsync([out] [retval] Windows.Foundation.IAsyncAction** operation);
                HRESULT FinishAsync([out] [retval] Windows.Foundation.IAsyncAction** operation);
                [eventadd] HRESULT PhotoCaptured([in] Windows.Foundation.TypedEventHandler<Windows.Media.Capture.LowLagPhotoSequenceCapture*, Windows.Media.Capture.PhotoCapturedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PhotoCaptured([in] EventRegistrationToken token);
            }

            [exclusiveto(Windows.Media.Capture.CapturedFrameControlValues)]
            [uuid(90C65B7F-4E0D-4CA4-882D-7A144FED0A90)]
            [version(0x0A000000)]
            interface ICapturedFrameControlValues : IInspectable
            {
                [propget] HRESULT Exposure([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                [propget] HRESULT ExposureCompensation([out] [retval] Windows.Foundation.IReference<FLOAT>** value);
                [propget] HRESULT IsoSpeed([out] [retval] Windows.Foundation.IReference<UINT32>** value);
                [propget] HRESULT Focus([out] [retval] Windows.Foundation.IReference<UINT32>** value);
                [propget] HRESULT SceneMode([out] [retval] Windows.Foundation.IReference<Windows.Media.Devices.CaptureSceneMode>** value);
                [propget] HRESULT Flashed([out] [retval] Windows.Foundation.IReference<boolean>** value);
                [propget] HRESULT FlashPowerPercent([out] [retval] Windows.Foundation.IReference<FLOAT>** value);
                [propget] HRESULT WhiteBalance([out] [retval] Windows.Foundation.IReference<UINT32>** value);
                [propget] HRESULT ZoomFactor([out] [retval] Windows.Foundation.IReference<FLOAT>** value);
            }

            [exclusiveto(Windows.Media.Capture.CapturedFrameControlValues)]
            [uuid(500B2B88-06D2-4AA7-A7DB-D37AF73321D8)]
            [version(0x0A000000)]
            interface ICapturedFrameControlValues2 : IInspectable
            {
                [propget] HRESULT FocusState([out] [retval] Windows.Foundation.IReference<Windows.Media.Devices.MediaCaptureFocusState>** value);
                [propget] HRESULT IsoDigitalGain([out] [retval] Windows.Foundation.IReference<DOUBLE>** value);
                [propget] HRESULT IsoAnalogGain([out] [retval] Windows.Foundation.IReference<DOUBLE>** value);
                [propget] HRESULT SensorFrameRate([out] [retval] Windows.Media.MediaProperties.MediaRatio** value);
                [propget] HRESULT WhiteBalanceGain([out] [retval] Windows.Foundation.IReference<Windows.Media.Capture.WhiteBalanceGain>** value);
            }

            [exclusiveto(Windows.Media.Capture.PhotoCapturedEventArgs)]
            [uuid(373BFBC1-984E-4FF0-BF85-1C00AABC5A45)]
            [version(0x06030000)]
            interface IPhotoCapturedEventArgs : IInspectable
            {
                [propget] HRESULT Frame([out] [retval] Windows.Media.Capture.CapturedFrame** value);
                [propget] HRESULT Thumbnail([out] [retval] Windows.Media.Capture.CapturedFrame** value);
                [propget] HRESULT CaptureTimeOffset([out] [retval] Windows.Foundation.TimeSpan* value);
            }

            [exclusiveto(Windows.Media.Capture.CapturedPhoto)]
            [uuid(B0CE7E5A-CFCC-4D6C-8AD1-0869208ACA16)]
            [version(0x06030000)]
            interface ICapturedPhoto : IInspectable
            {
                [propget] HRESULT Frame([out] [retval] Windows.Media.Capture.CapturedFrame** value);
                [propget] HRESULT Thumbnail([out] [retval] Windows.Media.Capture.CapturedFrame** value);
            }

            [exclusiveto(Windows.Media.Capture.CapturedFrame)]
            [uuid(1DD2DE1F-571B-44D8-8E80-A08A1578766E)]
            [version(0x06030000)]
            interface ICapturedFrame : IInspectable
                requires
                    Windows.Storage.Streams.IRandomAccessStreamWithContentType,
                    Windows.Storage.Streams.IRandomAccessStream,
                    Windows.Foundation.IClosable,
                    Windows.Storage.Streams.IInputStream,
                    Windows.Storage.Streams.IOutputStream,
                    Windows.Storage.Streams.IContentTypeProvider
            {
                [propget] HRESULT Width([out] [retval] UINT32* value);
                [propget] HRESULT Height([out] [retval] UINT32* value);
            }

            [exclusiveto(Windows.Media.Capture.CapturedFrame)]
            [uuid(B58E8B6E-8503-49B5-9E86-897D26A3FF3D)]
            [version(0x0A000000)]
            interface ICapturedFrameWithSoftwareBitmap : IInspectable
            {
                [propget] HRESULT SoftwareBitmap([out] [retval] Windows.Graphics.Imaging.SoftwareBitmap** value);
            }

            [exclusiveto(Windows.Media.Capture.MediaCapture)]
            [uuid(27727073-549E-447F-A20A-4F03C479D8C0)]
            [version(0x06020000)]
            interface IMediaCaptureVideoPreview : IInspectable
            {
                HRESULT StartPreviewAsync([out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                [overload("StartPreviewToCustomSinkAsync")] HRESULT StartPreviewToCustomSinkAsync([in] Windows.Media.MediaProperties.MediaEncodingProfile* encodingProfile, [in] Windows.Media.IMediaExtension* customMediaSink, [out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                [overload("StartPreviewToCustomSinkAsync")] HRESULT StartPreviewToCustomSinkIdAsync([in] Windows.Media.MediaProperties.MediaEncodingProfile* encodingProfile, [in] HSTRING customSinkActivationId, [in] Windows.Foundation.Collections.IPropertySet* customSinkSettings, [out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
                HRESULT StopPreviewAsync([out] [retval] Windows.Foundation.IAsyncAction** asyncInfo);
            }

            [exclusiveto(Windows.Media.Capture.MediaCaptureSettings)]
            [uuid(1D83AAFE-6D45-4477-8DC4-AC5BC01C4091)]
            [version(0x06020000)]
            interface IMediaCaptureSettings : IInspectable
            {
                [propget] HRESULT AudioDeviceId([out] [retval] HSTRING* value);
                [propget] HRESULT VideoDeviceId([out] [retval] HSTRING* value);
                [propget] HRESULT StreamingCaptureMode([out] [retval] Windows.Media.Capture.StreamingCaptureMode* value);
                [propget] HRESULT PhotoCaptureSource([out] [retval] Windows.Media.Capture.PhotoCaptureSource* value);
                [propget] HRESULT VideoDeviceCharacteristic([out] [retval] Windows.Media.Capture.VideoDeviceCharacteristic* value);
            }

            [exclusiveto(Windows.Media.Capture.MediaCaptureSettings)]
            [uuid(6F9E7CFB-FA9F-4B13-9CBE-5AB94F1F3493)]
            [version(0x06030000)]
            interface IMediaCaptureSettings2 : IInspectable
            {
                [propget] HRESULT ConcurrentRecordAndPhotoSupported([out] [retval] boolean* value);
                [propget] HRESULT ConcurrentRecordAndPhotoSequenceSupported([out] [retval] boolean* value);
                [propget] HRESULT CameraSoundRequiredForRegion([out] [retval] boolean* value);
                [propget] HRESULT Horizontal35mmEquivalentFocalLength([out] [retval] Windows.Foundation.IReference<UINT32>** value);
                [propget] HRESULT PitchOffsetDegrees([out] [retval] Windows.Foundation.IReference<INT32>** value);
                [propget] HRESULT Vertical35mmEquivalentFocalLength([out] [retval] Windows.Foundation.IReference<UINT32>** value);
                [propget] HRESULT MediaCategory([out] [retval] Windows.Media.Capture.MediaCategory* value);
                [propget] HRESULT AudioProcessing([out] [retval] Windows.Media.AudioProcessing* value);
            }

            [exclusiveto(Windows.Media.Capture.MediaCaptureFocusChangedEventArgs)]
            [uuid(81E1BC7F-2277-493E-ABEE-D3F44FF98C04)]
            [version(0x0A000000)]
            interface IMediaCaptureFocusChangedEventArgs : IInspectable
            {
                [propget] HRESULT FocusState([out] [retval] Windows.Media.Devices.MediaCaptureFocusState* value);
            }

            [exclusiveto(Windows.Media.Capture.PhotoConfirmationCapturedEventArgs)]
            [uuid(AB473672-C28A-4827-8F8D-3636D3BEB51E)]
            [version(0x0A000000)]
            interface IPhotoConfirmationCapturedEventArgs : IInspectable
            {
                [propget] HRESULT Frame([out] [retval] Windows.Media.Capture.CapturedFrame** value);
                [propget] HRESULT CaptureTimeOffset([out] [retval] Windows.Foundation.TimeSpan* value);
            }

            [exclusiveto(Windows.Media.Capture.VideoStreamConfiguration)]
            [uuid(D8770A6F-4390-4B5E-AD3E-0F8AF0963490)]
            [version(0x0A000000)]
            interface IVideoStreamConfiguration : IInspectable
            {
                [propget] HRESULT InputProperties([out] [retval] Windows.Media.MediaProperties.VideoEncodingProperties** value);
                [propget] HRESULT OutputProperties([out] [retval] Windows.Media.MediaProperties.VideoEncodingProperties** value);
            }

            [threading(both)]
            [version(0x0A000000)]
            runtimeclass AppCaptureSettings
            {
                [default] interface Windows.Media.Capture.IAppCaptureSettings;
                interface Windows.Media.Capture.IAppCaptureSettings2;
                [version(0x0A000000)] interface Windows.Media.Capture.IAppCaptureSettings3;
            }

            [threading(both)]
            [version(0x0A000000)]
            runtimeclass AppCaptureAlternateShortcutKeys
            {
                [default] interface Windows.Media.Capture.IAppCaptureAlternateShortcutKeys;
                [version(0x0A000000)] interface Windows.Media.Capture.IAppCaptureAlternateShortcutKeys2;
            }

            [static(Windows.Media.Capture.IAppCaptureManagerStatics, 0x0A000000)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass AppCaptureManager
            {
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass CameraCaptureUIPhotoCaptureSettings
            {
                [default] interface Windows.Media.Capture.ICameraCaptureUIPhotoCaptureSettings;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass CameraCaptureUIVideoCaptureSettings
            {
                [default] interface Windows.Media.Capture.ICameraCaptureUIVideoCaptureSettings;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(none)]
            [threading(sta)]
            [version(0x06020000)]
            runtimeclass CameraCaptureUI
            {
                [default] interface Windows.Media.Capture.ICameraCaptureUI;
            }

            [static(Windows.Media.Capture.ICameraOptionsUIStatics, 0x06020000)]
            [threading(mta)]
            [version(0x06020000)]
            runtimeclass CameraOptionsUI
            {
            }

            [static(Windows.Media.Capture.IAppCaptureStatics, 0x0A000001)]
            [version(0x0A000001)]
            runtimeclass AppCapture
            {
                [default] interface Windows.Media.Capture.IAppCapture;
            }

            [marshaling_behavior(standard)]
            [threading(mta)]
            [version(0x06020000)]
            runtimeclass MediaCaptureFailedEventArgs
            {
                [default] interface Windows.Media.Capture.IMediaCaptureFailedEventArgs;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(standard)]
            [static(Windows.Media.Capture.IMediaCaptureStatics, 0x0A000000)]
            [threading(mta)]
            [version(0x06020000)]
            runtimeclass MediaCapture
            {
                [default] interface Windows.Media.Capture.IMediaCapture;
                interface Windows.Media.Capture.IMediaCaptureVideoPreview;
                [version(0x06030000)] interface Windows.Media.Capture.IMediaCapture2;
                [version(0x06030000)] interface Windows.Foundation.IClosable;
                [version(0x0A000000)] interface Windows.Media.Capture.IMediaCapture3;
                [version(0x0A000000)] interface Windows.Media.Capture.IMediaCapture4;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass MediaCaptureVideoProfileMediaDescription
            {
                [default] interface Windows.Media.Capture.IMediaCaptureVideoProfileMediaDescription;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass MediaCaptureVideoProfile
            {
                [default] interface Windows.Media.Capture.IMediaCaptureVideoProfile;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass MediaCaptureInitializationSettings
            {
                [default] interface Windows.Media.Capture.IMediaCaptureInitializationSettings;
                [version(0x06030000)] interface Windows.Media.Capture.IMediaCaptureInitializationSettings2;
                [version(0x0A000000)] interface Windows.Media.Capture.IMediaCaptureInitializationSettings3;
                [version(0x0A000000)] interface Windows.Media.Capture.IMediaCaptureInitializationSettings4;
            }

            [marshaling_behavior(standard)]
            [threading(mta)]
            [version(0x06020000)]
            runtimeclass MediaCaptureSettings
            {
                [default] interface Windows.Media.Capture.IMediaCaptureSettings;
                [version(0x06030000)] interface Windows.Media.Capture.IMediaCaptureSettings2;
            }

            [marshaling_behavior(standard)]
            [threading(mta)]
            [version(0x06030000)]
            runtimeclass LowLagMediaRecording
            {
                [default] interface Windows.Media.Capture.ILowLagMediaRecording;
                [version(0x0A000000)] interface Windows.Media.Capture.ILowLagMediaRecording2;
            }

            [marshaling_behavior(standard)]
            [threading(mta)]
            [version(0x06030000)]
            runtimeclass LowLagPhotoCapture
            {
                [default] interface Windows.Media.Capture.ILowLagPhotoCapture;
            }

            [marshaling_behavior(standard)]
            [threading(mta)]
            [version(0x06030000)]
            runtimeclass LowLagPhotoSequenceCapture
            {
                [default] interface Windows.Media.Capture.ILowLagPhotoSequenceCapture;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass MediaCaptureFocusChangedEventArgs
            {
                [default] interface Windows.Media.Capture.IMediaCaptureFocusChangedEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass PhotoConfirmationCapturedEventArgs
            {
                [default] interface Windows.Media.Capture.IPhotoConfirmationCapturedEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass AdvancedPhotoCapture
            {
                [default] interface Windows.Media.Capture.IAdvancedPhotoCapture;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass CapturedPhoto
            {
                [default] interface Windows.Media.Capture.ICapturedPhoto;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass AdvancedCapturedPhoto
            {
                [default] interface Windows.Media.Capture.IAdvancedCapturedPhoto;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass OptionalReferencePhotoCapturedEventArgs
            {
                [default] interface Windows.Media.Capture.IOptionalReferencePhotoCapturedEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass CapturedFrame
            {
                [default] interface Windows.Media.Capture.ICapturedFrame;
                interface Windows.Storage.Streams.IRandomAccessStreamWithContentType;
                interface Windows.Storage.Streams.IContentTypeProvider;
                interface Windows.Storage.Streams.IRandomAccessStream;
                interface Windows.Storage.Streams.IOutputStream;
                interface Windows.Foundation.IClosable;
                interface Windows.Storage.Streams.IInputStream;
                [version(0x0A000000)] interface Windows.Media.Capture.ICapturedFrameWithSoftwareBitmap;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass PhotoCapturedEventArgs
            {
                [default] interface Windows.Media.Capture.IPhotoCapturedEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass CapturedFrameControlValues
            {
                [default] interface Windows.Media.Capture.ICapturedFrameControlValues;
                [version(0x0A000000)] interface Windows.Media.Capture.ICapturedFrameControlValues2;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass VideoStreamConfiguration
            {
                [default] interface Windows.Media.Capture.IVideoStreamConfiguration;
            }
        }
    }
}
