//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0014
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.ApplicationModel.Background.idl";
import "Windows.Graphics.Imaging.idl";
import "Windows.Storage.Streams.idl";
import "Windows.UI.Xaml.idl";
import "Windows.UI.Xaml.Media.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Eapplicationmodel2Ebackground_h__)")
cpp_quote("#include <Windows.ApplicationModel.Background.h>")
cpp_quote("#endif // !defined(__windows2Eapplicationmodel2Ebackground_h__)")
cpp_quote("#if !defined(__windows2Egraphics2Eimaging_h__)")
cpp_quote("#include <Windows.Graphics.Imaging.h>")
cpp_quote("#endif // !defined(__windows2Egraphics2Eimaging_h__)")
cpp_quote("#if !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#include <Windows.Storage.Streams.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl_h__)")
cpp_quote("#include <Windows.UI.Xaml.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl2Emedia_h__)")
cpp_quote("#include <Windows.UI.Xaml.Media.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl2Emedia_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace ApplicationModel
    {
        namespace Background
        {
            interface IBackgroundTaskInstance;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IAsyncAction;

        interface IClosable;

        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace Graphics
    {
        namespace Imaging
        {
            runtimeclass SoftwareBitmap;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IBuffer;

            interface IRandomAccessStream;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            runtimeclass DependencyProperty;

            delegate ExceptionRoutedEventHandler;

            delegate RoutedEventHandler;

            runtimeclass UIElement;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                namespace Imaging
                {
                    typedef enum BitmapCreateOptions BitmapCreateOptions;

                    typedef enum DecodePixelType DecodePixelType;

                    delegate DownloadProgressEventHandler;

                    interface IDownloadProgressEventArgs;

                    interface IXamlRenderingBackgroundTask;

                    interface IXamlRenderingBackgroundTaskOverrides;

                    interface IXamlRenderingBackgroundTaskFactory;

                    interface IBitmapSource;

                    interface IBitmapSourceStatics;

                    interface IBitmapSourceFactory;

                    interface IRenderTargetBitmap;

                    interface IRenderTargetBitmapStatics;

                    interface ISurfaceImageSource;

                    interface ISurfaceImageSourceFactory;

                    interface IBitmapImage;

                    interface IBitmapImageStatics;

                    interface IBitmapImageFactory;

                    interface IBitmapImage2;

                    interface IBitmapImageStatics2;

                    interface IVirtualSurfaceImageSource;

                    interface IVirtualSurfaceImageSourceFactory;

                    interface IWriteableBitmap;

                    interface IWriteableBitmapFactory;

                    interface ISoftwareBitmapSource;

                    runtimeclass DownloadProgressEventArgs;

                    runtimeclass XamlRenderingBackgroundTask;

                    runtimeclass BitmapSource;

                    runtimeclass RenderTargetBitmap;

                    runtimeclass SurfaceImageSource;

                    runtimeclass BitmapImage;

                    runtimeclass VirtualSurfaceImageSource;

                    runtimeclass WriteableBitmap;

                    runtimeclass SoftwareBitmapSource;
                }
            }
        }
    }
}

// Generic instantiations

// Type definition
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                namespace Imaging
                {
                    [flags]
                    [version(0x06020000)]
                    enum BitmapCreateOptions
                    {
                        None             = 0x0,
                        IgnoreImageCache = 0x8
                    };

                    [version(0x06030000)]
                    enum DecodePixelType
                    {
                        Physical = 0,
                        Logical  = 1
                    };

                    [uuid(1ABAEE23-74EE-4CC7-99BA-B171E3CDA61E)]
                    [version(0x06020000)]
                    delegate
                        HRESULT DownloadProgressEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Media.Imaging.DownloadProgressEventArgs* e);

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.DownloadProgressEventArgs)]
                    [uuid(7311E0D4-FE94-4E70-9B90-CDD47AC23AFB)]
                    [version(0x06020000)]
                    interface IDownloadProgressEventArgs : IInspectable
                    {
                        [propget] HRESULT Progress([out] [retval] INT32* value);
                        [propput] HRESULT Progress([in] INT32 value);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask)]
                    [uuid(5D5FE9AA-533E-44B8-A975-FC5F1E3BFF52)]
                    [version(0x0A000000)]
                    interface IXamlRenderingBackgroundTask : IInspectable
                    {
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask)]
                    [uuid(9C2A6997-A908-4711-B4B2-A960DB3D8E5A)]
                    [version(0x0A000000)]
                    interface IXamlRenderingBackgroundTaskOverrides : IInspectable
                    {
                        HRESULT OnRun([in] Windows.ApplicationModel.Background.IBackgroundTaskInstance* taskInstance);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask)]
                    [uuid(A3D1BB63-38F8-4DA3-9FCA-FD8128A2CBF9)]
                    [version(0x0A000000)]
                    interface IXamlRenderingBackgroundTaskFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask** instance);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.BitmapSource)]
                    [uuid(23D86411-202F-41B2-8C5B-A8A3B333800B)]
                    [version(0x06020000)]
                    interface IBitmapSource : IInspectable
                    {
                        [propget] HRESULT PixelWidth([out] [retval] INT32* value);
                        [propget] HRESULT PixelHeight([out] [retval] INT32* value);
                        HRESULT SetSource([in] Windows.Storage.Streams.IRandomAccessStream* streamSource);
                        HRESULT SetSourceAsync([in] Windows.Storage.Streams.IRandomAccessStream* streamSource, [out] [retval] Windows.Foundation.IAsyncAction** returnValue);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.BitmapSource)]
                    [uuid(9A9C9981-827B-4E51-891B-8A15B511842D)]
                    [version(0x06020000)]
                    interface IBitmapSourceStatics : IInspectable
                    {
                        [propget] HRESULT PixelWidthProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PixelHeightProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.BitmapSource)]
                    [uuid(E240420E-D4A7-49A4-A0B4-A59FDD77E508)]
                    [version(0x06020000)]
                    interface IBitmapSourceFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Media.Imaging.BitmapSource** instance);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.RenderTargetBitmap)]
                    [uuid(500DEE81-893C-4C0A-8FEC-4678AC717589)]
                    [version(0x06030000)]
                    interface IRenderTargetBitmap : IInspectable
                    {
                        [propget] HRESULT PixelWidth([out] [retval] INT32* value);
                        [propget] HRESULT PixelHeight([out] [retval] INT32* value);
                        [overload("RenderAsync")] HRESULT RenderAsync([in] Windows.UI.Xaml.UIElement* element, [out] [retval] Windows.Foundation.IAsyncAction** returnValue);
                        [overload("RenderAsync")] HRESULT RenderToSizeAsync([in] Windows.UI.Xaml.UIElement* element, [in] INT32 scaledWidth, [in] INT32 scaledHeight, [out] [retval] Windows.Foundation.IAsyncAction** returnValue);
                        HRESULT GetPixelsAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IBuffer*>** returnValue);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.RenderTargetBitmap)]
                    [uuid(F0A1EFEE-C131-4D40-9C47-F7D7CF2B077F)]
                    [version(0x06030000)]
                    interface IRenderTargetBitmapStatics : IInspectable
                    {
                        [propget] HRESULT PixelWidthProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PixelHeightProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.SurfaceImageSource)]
                    [uuid(62F7D416-C714-4C4C-8273-F839BC58135C)]
                    [version(0x06020000)]
                    interface ISurfaceImageSource : IInspectable
                    {
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.SurfaceImageSource)]
                    [uuid(3AB2212A-EF65-4A5F-BFAC-73993E8C12C9)]
                    [version(0x06020000)]
                    interface ISurfaceImageSourceFactory : IInspectable
                    {
                        HRESULT CreateInstanceWithDimensions([in] INT32 pixelWidth, [in] INT32 pixelHeight, [in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Media.Imaging.SurfaceImageSource** instance);
                        HRESULT CreateInstanceWithDimensionsAndOpacity([in] INT32 pixelWidth, [in] INT32 pixelHeight, [in] boolean isOpaque, [in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Media.Imaging.SurfaceImageSource** instance);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.BitmapImage)]
                    [uuid(31AF3271-E3B4-442D-A341-4C0226B2725B)]
                    [version(0x06020000)]
                    interface IBitmapImage : IInspectable
                    {
                        [propget] HRESULT CreateOptions([out] [retval] Windows.UI.Xaml.Media.Imaging.BitmapCreateOptions* value);
                        [propput] HRESULT CreateOptions([in] Windows.UI.Xaml.Media.Imaging.BitmapCreateOptions value);
                        [propget] HRESULT UriSource([out] [retval] Windows.Foundation.Uri** value);
                        [propput] HRESULT UriSource([in] Windows.Foundation.Uri* value);
                        [propget] HRESULT DecodePixelWidth([out] [retval] INT32* value);
                        [propput] HRESULT DecodePixelWidth([in] INT32 value);
                        [propget] HRESULT DecodePixelHeight([out] [retval] INT32* value);
                        [propput] HRESULT DecodePixelHeight([in] INT32 value);
                        [eventadd] HRESULT DownloadProgress([in] Windows.UI.Xaml.Media.Imaging.DownloadProgressEventHandler* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT DownloadProgress([in] EventRegistrationToken token);
                        [eventadd] HRESULT ImageOpened([in] Windows.UI.Xaml.RoutedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ImageOpened([in] EventRegistrationToken token);
                        [eventadd] HRESULT ImageFailed([in] Windows.UI.Xaml.ExceptionRoutedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ImageFailed([in] EventRegistrationToken token);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.BitmapImage)]
                    [uuid(9E282143-70E8-437C-9FA4-2CBF295CFF84)]
                    [version(0x06020000)]
                    interface IBitmapImageStatics : IInspectable
                    {
                        [propget] HRESULT CreateOptionsProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT UriSourceProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DecodePixelWidthProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DecodePixelHeightProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.BitmapImage)]
                    [uuid(C9132978-4810-4E5E-8087-03671EE60D85)]
                    [version(0x06020000)]
                    interface IBitmapImageFactory : IInspectable
                    {
                        HRESULT CreateInstanceWithUriSource([in] Windows.Foundation.Uri* uriSource, [out] [retval] Windows.UI.Xaml.Media.Imaging.BitmapImage** instance);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.BitmapImage)]
                    [uuid(1069C1B6-8C9B-4762-BE3D-759F5698F2B3)]
                    [version(0x06030000)]
                    interface IBitmapImage2 : IInspectable
                    {
                        [propget] HRESULT DecodePixelType([out] [retval] Windows.UI.Xaml.Media.Imaging.DecodePixelType* value);
                        [propput] HRESULT DecodePixelType([in] Windows.UI.Xaml.Media.Imaging.DecodePixelType value);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.BitmapImage)]
                    [uuid(C5F5576A-75AF-41A4-B893-8FE91FEE2882)]
                    [version(0x06030000)]
                    interface IBitmapImageStatics2 : IInspectable
                    {
                        [propget] HRESULT DecodePixelTypeProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource)]
                    [uuid(4A711FEA-BFAC-11E0-A06A-9DE44724019B)]
                    [version(0x06020000)]
                    interface IVirtualSurfaceImageSource : IInspectable
                    {
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource)]
                    [uuid(3AB2212A-BFAC-11E0-8A92-69E44724019B)]
                    [version(0x06020000)]
                    interface IVirtualSurfaceImageSourceFactory : IInspectable
                    {
                        HRESULT CreateInstanceWithDimensions([in] INT32 pixelWidth, [in] INT32 pixelHeight, [out] [retval] Windows.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource** instance);
                        HRESULT CreateInstanceWithDimensionsAndOpacity([in] INT32 pixelWidth, [in] INT32 pixelHeight, [in] boolean isOpaque, [out] [retval] Windows.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource** instance);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.WriteableBitmap)]
                    [uuid(BF0B7E6F-DF7C-4A85-8413-A1216285835C)]
                    [version(0x06020000)]
                    interface IWriteableBitmap : IInspectable
                    {
                        [propget] HRESULT PixelBuffer([out] [retval] Windows.Storage.Streams.IBuffer** value);
                        HRESULT Invalidate();
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.WriteableBitmap)]
                    [uuid(5563EBB1-3EF2-42C5-9C6D-1CF5DCC041FF)]
                    [version(0x06020000)]
                    interface IWriteableBitmapFactory : IInspectable
                    {
                        HRESULT CreateInstanceWithDimensions([in] INT32 pixelWidth, [in] INT32 pixelHeight, [out] [retval] Windows.UI.Xaml.Media.Imaging.WriteableBitmap** instance);
                    }

                    [exclusiveto(Windows.UI.Xaml.Media.Imaging.SoftwareBitmapSource)]
                    [uuid(D2DD9ED0-D3C5-4056-91B5-B7C1D1E8130E)]
                    [version(0x0A000000)]
                    interface ISoftwareBitmapSource : IInspectable
                    {
                        HRESULT SetBitmapAsync([in] Windows.Graphics.Imaging.SoftwareBitmap* softwareBitmap, [out] [retval] Windows.Foundation.IAsyncAction** returnValue);
                    }

                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x06020000)]
                    runtimeclass DownloadProgressEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Media.Imaging.IDownloadProgressEventArgs;
                    }

                    [composable(Windows.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskFactory, protected, 0x0A000000)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x0A000000)]
                    runtimeclass XamlRenderingBackgroundTask
                    {
                        [default] interface Windows.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTask;
                        [overridable] [version(0x0A000000)] interface Windows.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskOverrides;
                    }

                    [composable(Windows.UI.Xaml.Media.Imaging.IBitmapSourceFactory, protected, 0x06020000)]
                    [marshaling_behavior(agile)]
                    [static(Windows.UI.Xaml.Media.Imaging.IBitmapSourceStatics, 0x06020000)]
                    [threading(both)]
                    [version(0x06020000)]
                    runtimeclass BitmapSource : Windows.UI.Xaml.Media.ImageSource
                    {
                        [default] interface Windows.UI.Xaml.Media.Imaging.IBitmapSource;
                    }

                    [activatable(0x06030000)]
                    [marshaling_behavior(agile)]
                    [static(Windows.UI.Xaml.Media.Imaging.IRenderTargetBitmapStatics, 0x06030000)]
                    [threading(both)]
                    [version(0x06030000)]
                    runtimeclass RenderTargetBitmap : Windows.UI.Xaml.Media.ImageSource
                    {
                        [default] interface Windows.UI.Xaml.Media.Imaging.IRenderTargetBitmap;
                    }

                    [composable(Windows.UI.Xaml.Media.Imaging.ISurfaceImageSourceFactory, public, 0x06020000)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x06020000)]
                    runtimeclass SurfaceImageSource : Windows.UI.Xaml.Media.ImageSource
                    {
                        [default] interface Windows.UI.Xaml.Media.Imaging.ISurfaceImageSource;
                    }

                    [activatable(Windows.UI.Xaml.Media.Imaging.IBitmapImageFactory, 0x06020000)]
                    [activatable(0x06020000)]
                    [marshaling_behavior(agile)]
                    [static(Windows.UI.Xaml.Media.Imaging.IBitmapImageStatics2, 0x06030000)]
                    [static(Windows.UI.Xaml.Media.Imaging.IBitmapImageStatics, 0x06020000)]
                    [threading(both)]
                    [version(0x06020000)]
                    runtimeclass BitmapImage : Windows.UI.Xaml.Media.Imaging.BitmapSource
                    {
                        [default] interface Windows.UI.Xaml.Media.Imaging.IBitmapImage;
                        [version(0x06030000)] interface Windows.UI.Xaml.Media.Imaging.IBitmapImage2;
                    }

                    [activatable(Windows.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSourceFactory, 0x06020000)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x06020000)]
                    runtimeclass VirtualSurfaceImageSource : Windows.UI.Xaml.Media.Imaging.SurfaceImageSource
                    {
                        [default] interface Windows.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource;
                    }

                    [activatable(Windows.UI.Xaml.Media.Imaging.IWriteableBitmapFactory, 0x06020000)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x06020000)]
                    runtimeclass WriteableBitmap : Windows.UI.Xaml.Media.Imaging.BitmapSource
                    {
                        [default] interface Windows.UI.Xaml.Media.Imaging.IWriteableBitmap;
                    }

                    [activatable(0x0A000000)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x0A000000)]
                    runtimeclass SoftwareBitmapSource : Windows.UI.Xaml.Media.ImageSource
                    {
                        [default] interface Windows.UI.Xaml.Media.Imaging.ISoftwareBitmapSource;
                        [version(0x0A000000)] interface Windows.Foundation.IClosable;
                    }
                }
            }
        }
    }
}
