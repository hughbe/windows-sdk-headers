//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0014
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Storage.Streams.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#include <Windows.Storage.Streams.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IBuffer;
        }
    }
}
namespace Windows
{
    namespace Security
    {
        namespace Credentials
        {
            namespace UI
            {
                typedef enum AuthenticationProtocol AuthenticationProtocol;

                typedef enum CredentialSaveOption CredentialSaveOption;

                typedef enum UserConsentVerifierAvailability UserConsentVerifierAvailability;

                typedef enum UserConsentVerificationResult UserConsentVerificationResult;

                interface ICredentialPickerOptions;

                interface ICredentialPickerStatics;

                interface ICredentialPickerResults;

                interface IUserConsentVerifierStatics;

                runtimeclass CredentialPickerOptions;

                runtimeclass CredentialPickerResults;

                runtimeclass CredentialPicker;

                runtimeclass UserConsentVerifier;
            }
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace Security
    {
        namespace Credentials
        {
            namespace UI
            {
                declare
                {
                    interface Windows.Foundation.IAsyncOperation<Windows.Security.Credentials.UI.CredentialPickerResults*>;

                    interface Windows.Foundation.IAsyncOperation<Windows.Security.Credentials.UI.UserConsentVerificationResult>;

                    interface Windows.Foundation.IAsyncOperation<Windows.Security.Credentials.UI.UserConsentVerifierAvailability>;
                }
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace Security
    {
        namespace Credentials
        {
            namespace UI
            {
                [version(0x06020000)]
                enum AuthenticationProtocol
                {
                    Basic     = 0,
                    Digest    = 1,
                    Ntlm      = 2,
                    Kerberos  = 3,
                    Negotiate = 4,
                    CredSsp   = 5,
                    Custom    = 6
                };

                [version(0x06020000)]
                enum CredentialSaveOption
                {
                    Unselected = 0,
                    Selected   = 1,
                    Hidden     = 2
                };

                [version(0x06030000)]
                enum UserConsentVerifierAvailability
                {
                    Available            = 0,
                    DeviceNotPresent     = 1,
                    NotConfiguredForUser = 2,
                    DisabledByPolicy     = 3,
                    DeviceBusy           = 4
                };

                [version(0x06030000)]
                enum UserConsentVerificationResult
                {
                    Verified             = 0,
                    DeviceNotPresent     = 1,
                    NotConfiguredForUser = 2,
                    DisabledByPolicy     = 3,
                    DeviceBusy           = 4,
                    RetriesExhausted     = 5,
                    Canceled             = 6
                };

                [exclusiveto(Windows.Security.Credentials.UI.CredentialPickerOptions)]
                [uuid(965A0B4C-95FA-467F-992B-0B22E5859BF6)]
                [version(0x06020000)]
                interface ICredentialPickerOptions : IInspectable
                {
                    [propput] HRESULT Caption([in] HSTRING value);
                    [propget] HRESULT Caption([out] [retval] HSTRING* value);
                    [propput] HRESULT Message([in] HSTRING value);
                    [propget] HRESULT Message([out] [retval] HSTRING* value);
                    [propput] HRESULT ErrorCode([in] UINT32 value);
                    [propget] HRESULT ErrorCode([out] [retval] UINT32* value);
                    [propput] HRESULT TargetName([in] HSTRING value);
                    [propget] HRESULT TargetName([out] [retval] HSTRING* value);
                    [propput] HRESULT AuthenticationProtocol([in] Windows.Security.Credentials.UI.AuthenticationProtocol value);
                    [propget] HRESULT AuthenticationProtocol([out] [retval] Windows.Security.Credentials.UI.AuthenticationProtocol* value);
                    [propput] HRESULT CustomAuthenticationProtocol([in] HSTRING value);
                    [propget] HRESULT CustomAuthenticationProtocol([out] [retval] HSTRING* value);
                    [propput] HRESULT PreviousCredential([in] Windows.Storage.Streams.IBuffer* value);
                    [propget] HRESULT PreviousCredential([out] [retval] Windows.Storage.Streams.IBuffer** value);
                    [propput] HRESULT AlwaysDisplayDialog([in] boolean value);
                    [propget] HRESULT AlwaysDisplayDialog([out] [retval] boolean* value);
                    [propput] HRESULT CallerSavesCredential([in] boolean value);
                    [propget] HRESULT CallerSavesCredential([out] [retval] boolean* value);
                    [propput] HRESULT CredentialSaveOption([in] Windows.Security.Credentials.UI.CredentialSaveOption value);
                    [propget] HRESULT CredentialSaveOption([out] [retval] Windows.Security.Credentials.UI.CredentialSaveOption* value);
                }

                [exclusiveto(Windows.Security.Credentials.UI.CredentialPicker)]
                [uuid(AA3A5C73-C9EA-4782-99FB-E6D7E938E12D)]
                [version(0x06020000)]
                interface ICredentialPickerStatics : IInspectable
                {
                    [overload("PickAsync")] HRESULT PickWithOptionsAsync([in] Windows.Security.Credentials.UI.CredentialPickerOptions* options, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Security.Credentials.UI.CredentialPickerResults*>** operation);
                    [overload("PickAsync")] HRESULT PickWithMessageAsync([in] HSTRING targetName, [in] HSTRING message, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Security.Credentials.UI.CredentialPickerResults*>** operation);
                    [overload("PickAsync")] HRESULT PickWithCaptionAsync([in] HSTRING targetName, [in] HSTRING message, [in] HSTRING caption, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Security.Credentials.UI.CredentialPickerResults*>** operation);
                }

                [exclusiveto(Windows.Security.Credentials.UI.CredentialPickerResults)]
                [uuid(1948F99A-CC30-410C-9C38-CC0884C5B3D7)]
                [version(0x06020000)]
                interface ICredentialPickerResults : IInspectable
                {
                    [propget] HRESULT ErrorCode([out] [retval] UINT32* value);
                    [propget] HRESULT CredentialSaveOption([out] [retval] Windows.Security.Credentials.UI.CredentialSaveOption* value);
                    [propget] HRESULT CredentialSaved([out] [retval] boolean* value);
                    [propget] HRESULT Credential([out] [retval] Windows.Storage.Streams.IBuffer** value);
                    [propget] HRESULT CredentialDomainName([out] [retval] HSTRING* value);
                    [propget] HRESULT CredentialUserName([out] [retval] HSTRING* value);
                    [propget] HRESULT CredentialPassword([out] [retval] HSTRING* value);
                }

                [exclusiveto(Windows.Security.Credentials.UI.UserConsentVerifier)]
                [uuid(AF4F3F91-564C-4DDC-B8B5-973447627C65)]
                [version(0x06030000)]
                interface IUserConsentVerifierStatics : IInspectable
                {
                    HRESULT CheckAvailabilityAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Security.Credentials.UI.UserConsentVerifierAvailability>** result);
                    HRESULT RequestVerificationAsync([in] HSTRING message, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Security.Credentials.UI.UserConsentVerificationResult>** result);
                }

                [activatable(0x06020000)]
                [marshaling_behavior(standard)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass CredentialPickerOptions
                {
                    [default] interface Windows.Security.Credentials.UI.ICredentialPickerOptions;
                }

                [version(0x06020000)]
                runtimeclass CredentialPickerResults
                {
                    [default] interface Windows.Security.Credentials.UI.ICredentialPickerResults;
                }

                [static(Windows.Security.Credentials.UI.ICredentialPickerStatics, 0x06020000)]
                [threading(both)]
                [version(0x06020000)]
                runtimeclass CredentialPicker
                {
                }

                [marshaling_behavior(agile)]
                [static(Windows.Security.Credentials.UI.IUserConsentVerifierStatics, 0x06030000)]
                [threading(both)]
                [version(0x06030000)]
                runtimeclass UserConsentVerifier
                {
                }
            }
        }
    }
}
