

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 8.00.0613 */
/* @@MIDL_FILE_HEADING(  ) */



/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif /* __RPCNDR_H_VERSION__ */

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __windows2Eui2Examl2Econtrols2Emaps_h__
#define __windows2Eui2Examl2Econtrols2Emaps_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__
#define ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__
typedef interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

#endif 	/* ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__ */


#ifndef ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__
#define ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__
typedef interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

#endif 	/* ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__ */


#ifndef ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__
#define ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__
typedef interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

#endif 	/* ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__ */


#ifndef ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__
#define ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__
typedef interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

#endif 	/* ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__ */


#ifndef ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__
#define ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__
typedef interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

#endif 	/* ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__ */


#ifndef ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__
#define ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__
typedef interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

#endif 	/* ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__ */


#ifndef ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__
#define ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__
typedef interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

#endif 	/* ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__ */


#ifndef ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__
#define ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__
typedef interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

#endif 	/* ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__ */


#ifndef ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__
#define ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__
typedef interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

#endif 	/* ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__ */


#ifndef ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__
#define ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__
typedef interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

#endif 	/* ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__ */


#ifndef ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__
#define ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__
typedef interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

#endif 	/* ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__ */


#ifndef ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__
#define ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__
typedef interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

#endif 	/* ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__ */


#ifndef ____FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_FWD_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_FWD_DEFINED__
typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama;

#endif 	/* ____FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_FWD_DEFINED__ */


#ifndef ____FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_FWD_DEFINED__
#define ____FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_FWD_DEFINED__
typedef interface __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama;

#endif 	/* ____FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlDataHelper;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlDataHelperFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlBusinessLandmarkClickEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlTransitFeatureClickEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlBusinessLandmarkRightTappedEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlTransitFeatureRightTappedEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapActualCameraChangedEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapActualCameraChangedEventArgs2;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapActualCameraChangingEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapActualCameraChangingEventArgs2;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapCustomExperienceChangedEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementClickEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementPointerEnteredEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementPointerExitedEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapRightTappedEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTargetCameraChangedEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTargetCameraChangedEventArgs2;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileBitmapRequest;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileBitmapRequestDeferral;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileBitmapRequestedEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileUriRequest;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileUriRequestDeferral;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileUriRequestedEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapCamera;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapCameraFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapCustomExperience;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapCustomExperienceFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElement;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementStatics;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElement2;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementStatics2;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapInputEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapItemsControl;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapItemsControlStatics;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapRouteView;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapRouteViewFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapScene;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapSceneStatics;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileDataSource;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileDataSourceFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileSource;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileSourceStatics;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileSourceFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IStreetsidePanorama;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IStreetsidePanoramaStatics;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface ICustomMapTileDataSource;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface ICustomMapTileDataSourceFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IHttpMapTileDataSource;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IHttpMapTileDataSourceFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface ILocalMapTileDataSource;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface ILocalMapTileDataSourceFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapIcon;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapIconStatics;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapIcon2;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapIconStatics2;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapPolygon;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapPolygonStatics;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapPolygon2;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapPolyline;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapPolylineStatics;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IStreetsideExperience;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IStreetsideExperienceFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControl;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlStatics;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControl2;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlStatics2;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControl3;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_FWD_DEFINED__ */


/* header files for imported files */
#include "inspectable.h"
#include "AsyncInfo.h"
#include "EventToken.h"
#include "Windows.Foundation.h"
#include "Windows.Devices.Geolocation.h"
#include "Windows.Services.Maps.h"
#include "Windows.Services.Maps.LocalSearch.h"
#include "Windows.Storage.Streams.h"
#include "Windows.UI.Xaml.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0000 */
/* [local] */ 

#ifdef __cplusplus
} /*extern "C"*/ 
#endif
#include <windows.foundation.collections.h>
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapElement;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapElement;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0000 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0000_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3951 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3951 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3951_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3951_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0001 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#define DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("f916b428-3b74-5ad4-9d97-1b0a387aecb5"))
IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElement*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.UI.Xaml.Controls.Maps.MapElement>"; }
};
typedef IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t;
#define ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__
#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0001 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0001_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3952 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3952 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3952_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3952_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0002 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#define DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("81d25c25-a4b3-5d0d-92ab-26360c2a7fac"))
IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElement*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Controls.Maps.MapElement>"; }
};
typedef IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t;
#define ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__
#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapRouteView;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapRouteView;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0002 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0002_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3953 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3953 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3953_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3953_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0003 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#define DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("af256095-4144-55a7-9139-89843b572db7"))
IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*, ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.UI.Xaml.Controls.Maps.MapRouteView>"; }
};
typedef IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t;
#define ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__
#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0003 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0003_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3954 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3954 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3954_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3954_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0004 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#define DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("090ad4b3-8fce-502d-8665-18650c51bea9"))
IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*, ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Controls.Maps.MapRouteView>"; }
};
typedef IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t;
#define ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__
#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapTileSource;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapTileSource;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0004 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0004_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3955 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3955 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3955_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3955_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0005 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#define DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e5c7eba6-7c75-50bc-8b36-2d8ca1fa538b"))
IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.UI.Xaml.Controls.Maps.MapTileSource>"; }
};
typedef IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t;
#define ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__
#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0005 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0005_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3956 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3956 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3956_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3956_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0006 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#define DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("6d8a73f7-abd7-56c4-99a7-06c1fa77dcd2"))
IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Controls.Maps.MapTileSource>"; }
};
typedef IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t;
#define ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__
#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0006 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0006_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3957 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3957 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3957_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3957_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0007 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#define DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("cec120d8-ea73-5aa3-914a-37dd2554f686"))
IVectorView<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElement*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.UI.Xaml.Controls.Maps.MapElement>"; }
};
typedef IVectorView<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t;
#define ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__
#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0007 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0007_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3958 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3958 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3958_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3958_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0008 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#define DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bdbb45ea-0c73-56bc-a375-3f2a7beb6f2e"))
IVectorView<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*, ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.UI.Xaml.Controls.Maps.MapRouteView>"; }
};
typedef IVectorView<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t;
#define ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__
#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0008 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0008_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3959 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3959 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3959_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3959_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0009 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#define DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("de7aa182-8e17-5565-9a9d-94a4ff25364a"))
IVectorView<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.UI.Xaml.Controls.Maps.MapTileSource>"; }
};
typedef IVectorView<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t;
#define ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__
#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0009 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0009_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3960 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3960 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3960_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3960_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0010 */
/* [local] */ 

#ifndef DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#define DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("02773f2d-bb17-56fd-96cc-89f1c47f9e11"))
IVector<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElement*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapElement>"; }
};
typedef IVector<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t;
#define ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_FWD_DEFINED__
#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0010 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0010_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3961 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3961 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3961_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3961_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0011 */
/* [local] */ 

#ifndef DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#define DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("8ce513b4-0a7d-5553-b735-79cd5a7fee3f"))
IVector<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*, ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapRouteView>"; }
};
typedef IVector<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t;
#define ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_FWD_DEFINED__
#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0011 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0011_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3962 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3962 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3962_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3962_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0012 */
/* [local] */ 

#ifndef DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#define DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("19f78a46-2c65-5f94-bf5b-963347a0a318"))
IVector<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapTileSource>"; }
};
typedef IVector<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t;
#define ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_FWD_DEFINED__
#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class StreetsidePanorama;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IStreetsidePanorama;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0012 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0012_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3963 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3963 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3963_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3963_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0013 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("f6f3b17c-4527-5528-86aa-1cf1fb78a5eb"))
IAsyncOperationCompletedHandler<ABI::Windows::UI::Xaml::Controls::Maps::StreetsidePanorama*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::StreetsidePanorama*, ABI::Windows::UI::Xaml::Controls::Maps::IStreetsidePanorama*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.UI.Xaml.Controls.Maps.StreetsidePanorama>"; }
};
typedef IAsyncOperationCompletedHandler<ABI::Windows::UI::Xaml::Controls::Maps::StreetsidePanorama*> __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_t;
#define ____FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_FWD_DEFINED__
#define __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0013 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0013_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3964 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3964 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3964_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3964_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0014 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_USE
#define DEF___FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("6ad8ea47-6670-51d8-a1db-33fe75491f0c"))
IAsyncOperation<ABI::Windows::UI::Xaml::Controls::Maps::StreetsidePanorama*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::StreetsidePanorama*, ABI::Windows::UI::Xaml::Controls::Maps::IStreetsidePanorama*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IAsyncOperation`1<Windows.UI.Xaml.Controls.Maps.StreetsidePanorama>"; }
};
typedef IAsyncOperation<ABI::Windows::UI::Xaml::Controls::Maps::StreetsidePanorama*> __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_t;
#define ____FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_FWD_DEFINED__
#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class CustomMapTileDataSource;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface ICustomMapTileDataSource;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapTileBitmapRequestedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapTileBitmapRequestedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0014 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0014_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0014_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3965 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3965 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3965_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3965_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0015 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("8d2d9655-2f82-5271-9e95-a2db39d872f0"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::CustomMapTileDataSource*,ABI::Windows::UI::Xaml::Controls::Maps::MapTileBitmapRequestedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::CustomMapTileDataSource*, ABI::Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSource*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTileBitmapRequestedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource, Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::CustomMapTileDataSource*,ABI::Windows::UI::Xaml::Controls::Maps::MapTileBitmapRequestedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class HttpMapTileDataSource;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IHttpMapTileDataSource;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapTileUriRequestedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapTileUriRequestedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0015 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0015_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3966 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3966 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3966_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3966_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0016 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("4933a19a-00cc-5c21-a3df-b68f9939f6ef"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::HttpMapTileDataSource*,ABI::Windows::UI::Xaml::Controls::Maps::MapTileUriRequestedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::HttpMapTileDataSource*, ABI::Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSource*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTileUriRequestedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource, Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::HttpMapTileDataSource*,ABI::Windows::UI::Xaml::Controls::Maps::MapTileUriRequestedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class LocalMapTileDataSource;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface ILocalMapTileDataSource;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0016 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0016_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0016_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3967 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3967 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3967_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3967_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0017 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("76752fc4-b240-502c-9098-622c6c36e6a3"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::LocalMapTileDataSource*,ABI::Windows::UI::Xaml::Controls::Maps::MapTileUriRequestedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::LocalMapTileDataSource*, ABI::Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSource*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTileUriRequestedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource, Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::LocalMapTileDataSource*,ABI::Windows::UI::Xaml::Controls::Maps::MapTileUriRequestedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapControl;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapControl;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

interface IInspectable;


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0017 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0017_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0017_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3968 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3968 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3968_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3968_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0018 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("f250dd93-e636-51ef-bc93-ee78d431a6bd"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,IInspectable*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>,IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Object>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,IInspectable*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapActualCameraChangedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapActualCameraChangedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0018 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0018_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0018_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3969 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3969 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3969_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3969_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0019 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("1b536ae0-08b0-5c54-bb30-679e6a875d61"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapActualCameraChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapActualCameraChangedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapActualCameraChangedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapActualCameraChangingEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapActualCameraChangingEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0019 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0019_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3970 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3970 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3970_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3970_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0020 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("78bfb71b-2d80-50e1-a2e9-e5667ff89ef2"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapActualCameraChangingEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapActualCameraChangingEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangingEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapActualCameraChangingEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapControlBusinessLandmarkClickEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapControlBusinessLandmarkClickEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0020 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0020_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3971 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3971 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3971_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3971_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0021 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("3a9d75c2-a41b-5708-8c1b-8e7c26e857d0"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkClickEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkClickEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkClickEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkClickEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkClickEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapControlBusinessLandmarkRightTappedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapControlBusinessLandmarkRightTappedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0021 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0021_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3972 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3972 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3972_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3972_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0022 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("e3634a54-05ed-5e39-9d8a-03857f0ba0e7"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkRightTappedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkRightTappedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkRightTappedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkRightTappedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkRightTappedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapControlTransitFeatureClickEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapControlTransitFeatureClickEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0022 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0022_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3973 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3973 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3973_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3973_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0023 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("3ec75af0-1679-53ff-bb0c-376b8c441980"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeatureClickEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeatureClickEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureClickEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeatureClickEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapControlTransitFeatureRightTappedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapControlTransitFeatureRightTappedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0023 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0023_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3974 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3974 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3974_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3974_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0024 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a18b47d7-6326-5fc1-8a40-88af91bb0589"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeatureRightTappedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeatureRightTappedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureRightTappedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeatureRightTappedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapCustomExperienceChangedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapCustomExperienceChangedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0024 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0024_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3975 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3975 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3975_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3975_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0025 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("272cf26f-18da-599e-896f-3bfbf6fb1326"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapCustomExperienceChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapCustomExperienceChangedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapCustomExperienceChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapCustomExperienceChangedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapElementClickEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapElementClickEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0025 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0025_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3976 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3976 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3976_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3976_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0026 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("4c7821a1-d570-597d-acc7-068853c4ab27"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapElementClickEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElementClickEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElementClickEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapElementClickEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapElementPointerEnteredEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapElementPointerEnteredEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0026 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0026_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3977 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3977 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3977_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3977_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0027 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("ca2638e5-7c33-5b90-9b66-273731fc7091"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapElementPointerEnteredEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElementPointerEnteredEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElementPointerEnteredEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapElementPointerEnteredEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapElementPointerExitedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapElementPointerExitedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0027 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0027_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3978 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3978 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3978_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3978_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0028 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("f6a7bfd1-2c79-5191-b382-75b141d18846"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapElementPointerExitedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElementPointerExitedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElementPointerExitedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapElementPointerExitedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapInputEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapInputEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0028 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0028_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3979 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3979 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3979_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3979_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0029 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("b92f6816-4d0a-52c2-9868-94b5c942007e"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapInputEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapInputEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapInputEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapInputEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapInputEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapRightTappedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapRightTappedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0029 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0029_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3980 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3980 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3980_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3980_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0030 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("efc52f2d-ad6b-59af-a0f0-2253d434414f"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapRightTappedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapRightTappedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapRightTappedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapRightTappedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapTargetCameraChangedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapTargetCameraChangedEventArgs;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0030 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0030_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0030_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3981 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3981 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3981_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3981_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0031 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("2671c2dd-e212-5e43-80e2-ab6ff3f3086c"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapTargetCameraChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTargetCameraChangedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*,ABI::Windows::UI::Xaml::Controls::Maps::MapTargetCameraChangedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapScene;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
interface IMapScene;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0031 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0031_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0031_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3982 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3982 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3982_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3982_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0032 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("766ed4a8-e810-5f78-bc96-9aff9f58cfca"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapScene*,ABI::Windows::UI::Xaml::Controls::Maps::MapTargetCameraChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapScene*, ABI::Windows::UI::Xaml::Controls::Maps::IMapScene*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTargetCameraChangedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapScene, Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapScene*,ABI::Windows::UI::Xaml::Controls::Maps::MapTargetCameraChangedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Services {
namespace Maps {
namespace LocalSearch {
class LocalLocation;
} /*LocalSearch*/
} /*Maps*/
} /*Services*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Services {
namespace Maps {
namespace LocalSearch {
interface ILocalLocation;
} /*LocalSearch*/
} /*Maps*/
} /*Services*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0032 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0032_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0032_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3983 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3983 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3983_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3983_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0033 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE
#define DEF___FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("a23c2e87-a8e7-568f-96a1-69e98f86b9d3"))
IIterator<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*, ABI::Windows::Services::Maps::LocalSearch::ILocalLocation*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Services.Maps.LocalSearch.LocalLocation>"; }
};
typedef IIterator<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*> __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_t;
#define ____FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_FWD_DEFINED__
#define __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0033 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0033_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0033_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3984 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3984 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3984_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3984_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0034 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE
#define DEF___FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("5474eefb-60f4-58ac-89e2-6e83f79fa76c"))
IIterable<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*, ABI::Windows::Services::Maps::LocalSearch::ILocalLocation*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Services.Maps.LocalSearch.LocalLocation>"; }
};
typedef IIterable<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*> __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_t;
#define ____FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_FWD_DEFINED__
#define __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0034 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0034_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0034_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3985 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3985 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3985_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3985_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0035 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE
#define DEF___FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("619192f2-4f9d-5629-ab01-b18512503d73"))
IVectorView<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*, ABI::Windows::Services::Maps::LocalSearch::ILocalLocation*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Services.Maps.LocalSearch.LocalLocation>"; }
};
typedef IVectorView<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*> __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_t;
#define ____FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_FWD_DEFINED__
#define __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0035 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0035_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0035_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3986 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3986 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3986_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3986_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0036 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("09335560-6c6b-5a26-9348-97b781132b20"))
IKeyValuePair<HSTRING,IInspectable*> : IKeyValuePair_impl<HSTRING,IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IKeyValuePair`2<String, Object>"; }
};
typedef IKeyValuePair<HSTRING,IInspectable*> __FIKeyValuePair_2_HSTRING_IInspectable_t;
#define ____FIKeyValuePair_2_HSTRING_IInspectable_FWD_DEFINED__
#define __FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_HSTRING_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIKeyValuePair_2_HSTRING_IInspectable_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0036 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0036_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3987 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3987 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3987_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3987_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0037 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("5db5fa32-707c-5849-a06b-91c8eb9d10e8"))
IIterator<__FIKeyValuePair_2_HSTRING_IInspectable*> : IIterator_impl<__FIKeyValuePair_2_HSTRING_IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>"; }
};
typedef IIterator<__FIKeyValuePair_2_HSTRING_IInspectable*> __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_t;
#define ____FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_FWD_DEFINED__
#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0037 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0037_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3988 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3988 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3988_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3988_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0038 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("fe2f3d47-5d47-5499-8374-430c7cda0204"))
IIterable<__FIKeyValuePair_2_HSTRING_IInspectable*> : IIterable_impl<__FIKeyValuePair_2_HSTRING_IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>"; }
};
typedef IIterable<__FIKeyValuePair_2_HSTRING_IInspectable*> __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_t;
#define ____FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_FWD_DEFINED__
#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0038 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0038_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3989 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3989 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3989_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3989_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0039 */
/* [local] */ 

#ifndef DEF___FIMapView_2_HSTRING_IInspectable_USE
#define DEF___FIMapView_2_HSTRING_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bb78502a-f79d-54fa-92c9-90c5039fdf7e"))
IMapView<HSTRING,IInspectable*> : IMapView_impl<HSTRING,IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IMapView`2<String, Object>"; }
};
typedef IMapView<HSTRING,IInspectable*> __FIMapView_2_HSTRING_IInspectable_t;
#define ____FIMapView_2_HSTRING_IInspectable_FWD_DEFINED__
#define __FIMapView_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIMapView_2_HSTRING_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIMapView_2_HSTRING_IInspectable_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
class DependencyObject;
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
interface IDependencyObject;
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0039 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0039_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0039_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3990 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3990 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3990_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3990_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0040 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CUI__CXaml__CDependencyObject_USE
#define DEF___FIIterator_1_Windows__CUI__CXaml__CDependencyObject_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("29f8d454-905d-587e-b9d8-bfd418805a65"))
IIterator<ABI::Windows::UI::Xaml::DependencyObject*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::DependencyObject*, ABI::Windows::UI::Xaml::IDependencyObject*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.UI.Xaml.DependencyObject>"; }
};
typedef IIterator<ABI::Windows::UI::Xaml::DependencyObject*> __FIIterator_1_Windows__CUI__CXaml__CDependencyObject_t;
#define ____FIIterator_1_Windows__CUI__CXaml__CDependencyObject_FWD_DEFINED__
#define __FIIterator_1_Windows__CUI__CXaml__CDependencyObject ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CUI__CXaml__CDependencyObject_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Windows__CUI__CXaml__CDependencyObject_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0040 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0040_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0040_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3991 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3991 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3991_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3991_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0041 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CUI__CXaml__CDependencyObject_USE
#define DEF___FIIterable_1_Windows__CUI__CXaml__CDependencyObject_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("f66c6bd3-55b4-5bbb-b82a-6d9ce383091a"))
IIterable<ABI::Windows::UI::Xaml::DependencyObject*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::DependencyObject*, ABI::Windows::UI::Xaml::IDependencyObject*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.DependencyObject>"; }
};
typedef IIterable<ABI::Windows::UI::Xaml::DependencyObject*> __FIIterable_1_Windows__CUI__CXaml__CDependencyObject_t;
#define ____FIIterable_1_Windows__CUI__CXaml__CDependencyObject_FWD_DEFINED__
#define __FIIterable_1_Windows__CUI__CXaml__CDependencyObject ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CUI__CXaml__CDependencyObject_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Windows__CUI__CXaml__CDependencyObject_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0041 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0041_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3992 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3992 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3992_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3992_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0042 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_USE
#define DEF___FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("fe750d77-1307-5df2-a021-1c7a8d6b80ad"))
IVectorView<ABI::Windows::UI::Xaml::DependencyObject*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::DependencyObject*, ABI::Windows::UI::Xaml::IDependencyObject*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.UI.Xaml.DependencyObject>"; }
};
typedef IVectorView<ABI::Windows::UI::Xaml::DependencyObject*> __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_t;
#define ____FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_FWD_DEFINED__
#define __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0042 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0042_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0042_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3993 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3993 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3993_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3993_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0043 */
/* [local] */ 

#ifndef DEF___FIVector_1_Windows__CUI__CXaml__CDependencyObject_USE
#define DEF___FIVector_1_Windows__CUI__CXaml__CDependencyObject_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("771b857e-ab5c-5db8-a021-397c92cdc44c"))
IVector<ABI::Windows::UI::Xaml::DependencyObject*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::DependencyObject*, ABI::Windows::UI::Xaml::IDependencyObject*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.DependencyObject>"; }
};
typedef IVector<ABI::Windows::UI::Xaml::DependencyObject*> __FIVector_1_Windows__CUI__CXaml__CDependencyObject_t;
#define ____FIVector_1_Windows__CUI__CXaml__CDependencyObject_FWD_DEFINED__
#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CUI__CXaml__CDependencyObject_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1_Windows__CUI__CXaml__CDependencyObject_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Geolocation {
class Geopoint;
} /*Geolocation*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Geolocation {
interface IGeopoint;
} /*Geolocation*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0043 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0043_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0043_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3994 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3994 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3994_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3994_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0044 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_USE
#define DEF___FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("88225b39-8be9-5c03-9714-8f1642d8a43f"))
IIterator<ABI::Windows::Devices::Geolocation::Geopoint*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Geolocation::Geopoint*, ABI::Windows::Devices::Geolocation::IGeopoint*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Devices.Geolocation.Geopoint>"; }
};
typedef IIterator<ABI::Windows::Devices::Geolocation::Geopoint*> __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_t;
#define ____FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_FWD_DEFINED__
#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0044 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0044_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0044_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3995 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3995 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3995_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3995_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0045 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_USE
#define DEF___FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e7617fc9-2cc7-5bd1-bc5a-f47260834ed8"))
IIterable<ABI::Windows::Devices::Geolocation::Geopoint*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Geolocation::Geopoint*, ABI::Windows::Devices::Geolocation::IGeopoint*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Devices.Geolocation.Geopoint>"; }
};
typedef IIterable<ABI::Windows::Devices::Geolocation::Geopoint*> __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_t;
#define ____FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_FWD_DEFINED__
#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0045 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0045_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0045_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3996 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3996 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3996_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3996_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0046 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("60310303-49c5-52e6-abc6-a9b36eccc716"))
IKeyValuePair<HSTRING,HSTRING> : IKeyValuePair_impl<HSTRING,HSTRING> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IKeyValuePair`2<String, String>"; }
};
typedef IKeyValuePair<HSTRING,HSTRING> __FIKeyValuePair_2_HSTRING_HSTRING_t;
#define ____FIKeyValuePair_2_HSTRING_HSTRING_FWD_DEFINED__
#define __FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_HSTRING_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIKeyValuePair_2_HSTRING_HSTRING_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0046 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0046_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0046_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3997 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3997 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3997_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3997_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0047 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("05eb86f1-7140-5517-b88d-cbaebe57e6b1"))
IIterator<__FIKeyValuePair_2_HSTRING_HSTRING*> : IIterator_impl<__FIKeyValuePair_2_HSTRING_HSTRING*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>"; }
};
typedef IIterator<__FIKeyValuePair_2_HSTRING_HSTRING*> __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_t;
#define ____FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_FWD_DEFINED__
#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0047 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0047_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0047_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3998 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3998 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3998_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3998_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0048 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e9bdaaf0-cbf6-5c72-be90-29cbf3a1319b"))
IIterable<__FIKeyValuePair_2_HSTRING_HSTRING*> : IIterable_impl<__FIKeyValuePair_2_HSTRING_HSTRING*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>"; }
};
typedef IIterable<__FIKeyValuePair_2_HSTRING_HSTRING*> __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_t;
#define ____FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_FWD_DEFINED__
#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0048 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0048_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3999 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3999 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3999_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_3999_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0049 */
/* [local] */ 

#ifndef DEF___FIMapView_2_HSTRING_HSTRING_USE
#define DEF___FIMapView_2_HSTRING_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("ac7f26f2-feb7-5b2a-8ac4-345bc62caede"))
IMapView<HSTRING,HSTRING> : IMapView_impl<HSTRING,HSTRING> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IMapView`2<String, String>"; }
};
typedef IMapView<HSTRING,HSTRING> __FIMapView_2_HSTRING_HSTRING_t;
#define ____FIMapView_2_HSTRING_HSTRING_FWD_DEFINED__
#define __FIMapView_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIMapView_2_HSTRING_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIMapView_2_HSTRING_HSTRING_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0049 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0049_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0049_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4000 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4000 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4000_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0050 */
/* [local] */ 

#ifndef DEF___FIMap_2_HSTRING_HSTRING_USE
#define DEF___FIMap_2_HSTRING_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("f6d1f700-49c2-52ae-8154-826f9908773c"))
IMap<HSTRING,HSTRING> : IMap_impl<HSTRING,HSTRING> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IMap`2<String, String>"; }
};
typedef IMap<HSTRING,HSTRING> __FIMap_2_HSTRING_HSTRING_t;
#define ____FIMap_2_HSTRING_HSTRING_FWD_DEFINED__
#define __FIMap_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIMap_2_HSTRING_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIMap_2_HSTRING_HSTRING_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Geolocation {
class Geopath;
} /*Geolocation*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Geolocation {
interface IGeopath;
} /*Geolocation*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0050 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0050_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0050_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4001 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4001 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4001_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0051 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_USE
#define DEF___FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("cf1d4402-4754-57e7-aae0-69ca42cbd8f2"))
IIterator<ABI::Windows::Devices::Geolocation::Geopath*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Geolocation::Geopath*, ABI::Windows::Devices::Geolocation::IGeopath*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Devices.Geolocation.Geopath>"; }
};
typedef IIterator<ABI::Windows::Devices::Geolocation::Geopath*> __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_t;
#define ____FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_FWD_DEFINED__
#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0051 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0051_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4002 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4002 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4002_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0052 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_USE
#define DEF___FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("246fcfbd-a881-5e8e-9908-c1b9ebdfec78"))
IIterable<ABI::Windows::Devices::Geolocation::Geopath*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Geolocation::Geopath*, ABI::Windows::Devices::Geolocation::IGeopath*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Devices.Geolocation.Geopath>"; }
};
typedef IIterable<ABI::Windows::Devices::Geolocation::Geopath*> __FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_t;
#define ____FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_FWD_DEFINED__
#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopath ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0052 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0052_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0052_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4003 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4003 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4003_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0053 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_USE
#define DEF___FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("a83321cb-1b54-5f68-9234-4a824d33e371"))
IVectorView<ABI::Windows::Devices::Geolocation::Geopath*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Geolocation::Geopath*, ABI::Windows::Devices::Geolocation::IGeopath*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Geolocation.Geopath>"; }
};
typedef IVectorView<ABI::Windows::Devices::Geolocation::Geopath*> __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_t;
#define ____FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_FWD_DEFINED__
#define __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0053 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0053_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4004 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4004 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4004_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0054 */
/* [local] */ 

#ifndef DEF___FIVector_1_Windows__CDevices__CGeolocation__CGeopath_USE
#define DEF___FIVector_1_Windows__CDevices__CGeolocation__CGeopath_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("7ca97e6d-6893-5672-a0c7-625c5090381e"))
IVector<ABI::Windows::Devices::Geolocation::Geopath*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Geolocation::Geopath*, ABI::Windows::Devices::Geolocation::IGeopath*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.Devices.Geolocation.Geopath>"; }
};
typedef IVector<ABI::Windows::Devices::Geolocation::Geopath*> __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_t;
#define ____FIVector_1_Windows__CDevices__CGeolocation__CGeopath_FWD_DEFINED__
#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CDevices__CGeolocation__CGeopath_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1_Windows__CDevices__CGeolocation__CGeopath_USE */

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
struct Thickness;
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0054 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0054_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0054_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4005 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4005 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4005_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0055 */
/* [local] */ 

#ifndef DEF___FIReference_1_Windows__CUI__CXaml__CThickness_USE
#define DEF___FIReference_1_Windows__CUI__CXaml__CThickness_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a19f7ba8-d8cd-5df2-ab44-fefd26644484"))
IReference<struct ABI::Windows::UI::Xaml::Thickness> : IReference_impl<struct ABI::Windows::UI::Xaml::Thickness> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReference`1<Windows.UI.Xaml.Thickness>"; }
};
typedef IReference<struct ABI::Windows::UI::Xaml::Thickness> __FIReference_1_Windows__CUI__CXaml__CThickness_t;
#define ____FIReference_1_Windows__CUI__CXaml__CThickness_FWD_DEFINED__
#define __FIReference_1_Windows__CUI__CXaml__CThickness ABI::Windows::Foundation::__FIReference_1_Windows__CUI__CXaml__CThickness_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReference_1_Windows__CUI__CXaml__CThickness_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0055 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0055_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0055_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4006 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4006 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4006_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0056 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_boolean_USE
#define DEF___FIAsyncOperationCompletedHandler_1_boolean_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("c1d3d1a2-ae17-5a5f-b5a2-bdcc8844889a"))
IAsyncOperationCompletedHandler<bool> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<bool, boolean>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Boolean>"; }
};
typedef IAsyncOperationCompletedHandler<bool> __FIAsyncOperationCompletedHandler_1_boolean_t;
#define ____FIAsyncOperationCompletedHandler_1_boolean_FWD_DEFINED__
#define __FIAsyncOperationCompletedHandler_1_boolean ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_boolean_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperationCompletedHandler_1_boolean_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0056 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0056_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0056_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4007 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4007 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4007_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0057 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_boolean_USE
#define DEF___FIAsyncOperation_1_boolean_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("cdb5efb3-5788-509d-9be1-71ccb8a3362a"))
IAsyncOperation<bool> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<bool, boolean>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IAsyncOperation`1<Boolean>"; }
};
typedef IAsyncOperation<bool> __FIAsyncOperation_1_boolean_t;
#define ____FIAsyncOperation_1_boolean_FWD_DEFINED__
#define __FIAsyncOperation_1_boolean ABI::Windows::Foundation::__FIAsyncOperation_1_boolean_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperation_1_boolean_USE */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0057 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0057_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0057_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4008 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4008 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4008_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0058 */
/* [local] */ 

#ifndef DEF___FIReference_1_double_USE
#define DEF___FIReference_1_double_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("2f2d6c29-5473-5f3e-92e7-96572bb990e2"))
IReference<double> : IReference_impl<double> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReference`1<Double>"; }
};
typedef IReference<double> __FIReference_1_double_t;
#define ____FIReference_1_double_FWD_DEFINED__
#define __FIReference_1_double ABI::Windows::Foundation::__FIReference_1_double_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReference_1_double_USE */
#if defined(__cplusplus)
}
#endif // defined(__cplusplus)
#include <Windows.Foundation.h>
#if !defined(__windows2Edevices2Egeolocation_h__)
#include <Windows.Devices.Geolocation.h>
#endif // !defined(__windows2Edevices2Egeolocation_h__)
#if !defined(__windows2Eservices2Emaps_h__)
#include <Windows.Services.Maps.h>
#endif // !defined(__windows2Eservices2Emaps_h__)
#if !defined(__windows2Eservices2Emaps2Elocalsearch_h__)
#include <Windows.Services.Maps.LocalSearch.h>
#endif // !defined(__windows2Eservices2Emaps2Elocalsearch_h__)
#if !defined(__windows2Estorage2Estreams_h__)
#include <Windows.Storage.Streams.h>
#endif // !defined(__windows2Estorage2Estreams_h__)
#if !defined(__windows2Eui_h__)
#include <Windows.UI.h>
#endif // !defined(__windows2Eui_h__)
#if !defined(__windows2Eui2Examl_h__)
#include <Windows.UI.Xaml.h>
#endif // !defined(__windows2Eui2Examl_h__)
#if !defined(__windows2Eui2Examl2Econtrols_h__)
#include <Windows.UI.Xaml.Controls.h>
#endif // !defined(__windows2Eui2Examl2Econtrols_h__)
#if defined(__cplusplus)
extern "C" {
#endif // defined(__cplusplus)
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Geolocation {
class GeoboundingBox;
} /*Geolocation*/
} /*Devices*/
} /*Windows*/
}
#endif

#if !defined(__cplusplus)
typedef struct __x_ABI_CWindows_CFoundation_CPoint __x_ABI_CWindows_CFoundation_CPoint;

#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Foundation {
class Uri;
} /*Foundation*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Services {
namespace Maps {
class MapRoute;
} /*Maps*/
} /*Services*/
} /*Windows*/
}
#endif


#if !defined(__cplusplus)
typedef struct __x_ABI_CWindows_CUI_CColor __x_ABI_CWindows_CUI_CColor;

#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
class DataTemplate;
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
class DependencyProperty;
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif

#if !defined(__cplusplus)
typedef struct __x_ABI_CWindows_CUI_CXaml_CThickness __x_ABI_CWindows_CUI_CXaml_CThickness;

#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange;

#endif












































#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapControlDataHelper;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapTileBitmapRequestDeferral;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapTileBitmapRequest;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapTileUriRequestDeferral;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapTileUriRequest;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapCamera;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapCustomExperience;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapItemsControl;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapTileDataSource;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapIcon;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapPolygon;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class MapPolyline;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace UI {
namespace Xaml {
namespace Controls {
namespace Maps {
class StreetsideExperience;
} /*Maps*/
} /*Controls*/
} /*Xaml*/
} /*UI*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0058 */
/* [local] */ 



#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Foundation {
            
            typedef struct Point Point;
            
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            
            typedef struct Color Color;
            
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                
                typedef struct Thickness Thickness;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        typedef enum MapAnimationKind MapAnimationKind;
                        
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        typedef enum MapCameraChangeReason MapCameraChangeReason;
                        
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        typedef enum MapColorScheme MapColorScheme;
                        
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        typedef enum MapElementCollisionBehavior MapElementCollisionBehavior;
                        
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        typedef enum MapInteractionMode MapInteractionMode;
                        
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        typedef enum MapLoadingStatus MapLoadingStatus;
                        
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        typedef enum MapPanInteractionMode MapPanInteractionMode;
                        
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        typedef enum MapStyle MapStyle;
                        
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        typedef enum MapTileLayer MapTileLayer;
                        
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        typedef enum MapWatermarkMode MapWatermarkMode;
                        
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        typedef struct MapZoomLevelRange MapZoomLevelRange;
                        
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif















































extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0058_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0058_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4009 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4009 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4009_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0059 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
#define DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0059 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0059_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0059_v0_0_s_ifspec;

#ifndef ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__
#define ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__

/* interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f916b428-3b74-5ad4-9d97-1b0a387aecb5")
    __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapElement **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::UI::Xaml::Controls::Maps::IMapElement **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl;

    interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
    {
        CONST_VTBL struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0060 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0060 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0060_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0060_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4010 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4010 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4010_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0061 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
#define DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0061 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0061_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0061_v0_0_s_ifspec;

#ifndef ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__
#define ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__

/* interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("81d25c25-a4b3-5d0d-92ab-26360c2a7fac")
    __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement **first);
        
        END_INTERFACE
    } __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl;

    interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
    {
        CONST_VTBL struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0062 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0062 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0062_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0062_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4011 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4011 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4011_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0063 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
#define DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0063 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0063_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0063_v0_0_s_ifspec;

#ifndef ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__
#define ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__

/* interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("af256095-4144-55a7-9139-89843b572db7")
    __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl;

    interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
    {
        CONST_VTBL struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0064 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0064 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0064_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0064_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4012 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4012 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4012_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0065 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
#define DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0065 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0065_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0065_v0_0_s_ifspec;

#ifndef ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__
#define ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__

/* interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("090ad4b3-8fce-502d-8665-18650c51bea9")
    __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView **first);
        
        END_INTERFACE
    } __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl;

    interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
    {
        CONST_VTBL struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0066 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0066 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0066_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0066_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4013 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4013 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4013_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0067 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
#define DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0067 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0067_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0067_v0_0_s_ifspec;

#ifndef ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__
#define ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__

/* interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e5c7eba6-7c75-50bc-8b36-2d8ca1fa538b")
    __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl;

    interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
    {
        CONST_VTBL struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0068 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0068 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0068_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0068_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4014 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4014 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4014_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4014_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0069 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
#define DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0069 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0069_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0069_v0_0_s_ifspec;

#ifndef ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__
#define ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__

/* interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6d8a73f7-abd7-56c4-99a7-06c1fa77dcd2")
    __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __RPC__in __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource **first);
        
        END_INTERFACE
    } __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl;

    interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
    {
        CONST_VTBL struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0070 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0070 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0070_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0070_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4015 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4015 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4015_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0071 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
#define DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0071 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0071_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0071_v0_0_s_ifspec;

#ifndef ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__
#define ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__

/* interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("cec120d8-ea73-5aa3-914a-37dd2554f686")
    __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapElement **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ __RPC__out unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapElement *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::UI::Xaml::Controls::Maps::IMapElement **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [retval][out] */ __RPC__out unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl;

    interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
    {
        CONST_VTBL struct __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0072 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0072 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0072_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0072_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4016 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4016 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4016_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4016_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0073 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
#define DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0073 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0073_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0073_v0_0_s_ifspec;

#ifndef ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__
#define ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__

/* interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bdbb45ea-0c73-56bc-a375-3f2a7beb6f2e")
    __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ __RPC__out unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [retval][out] */ __RPC__out unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl;

    interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
    {
        CONST_VTBL struct __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0074 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0074 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0074_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0074_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4017 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4017 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4017_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4017_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0075 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
#define DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0075 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0075_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0075_v0_0_s_ifspec;

#ifndef ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__
#define ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__

/* interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("de7aa182-8e17-5565-9a9d-94a4ff25364a")
    __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ __RPC__out unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [retval][out] */ __RPC__out unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl;

    interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
    {
        CONST_VTBL struct __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0076 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0076 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0076_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0076_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4018 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4018 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4018_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4018_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0077 */
/* [local] */ 

#ifndef DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
#define DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0077 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0077_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0077_v0_0_s_ifspec;

#ifndef ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__
#define ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__

/* interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement */
/* [unique][uuid][object] */ 



/* interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("02773f2d-bb17-56fd-96cc-89f1c47f9e11")
    __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapElement **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ __RPC__out unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapElement *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapElement *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapElement *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapElement *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::UI::Xaml::Controls::Maps::IMapElement **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __RPC__in_ecount_full(count) ABI::Windows::UI::Xaml::Controls::Maps::IMapElement **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [retval][out] */ __RPC__out unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ unsigned int index,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement *item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ unsigned int index,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __RPC__in_ecount_full(count) __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement **value);
        
        END_INTERFACE
    } __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl;

    interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
    {
        CONST_VTBL struct __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0078 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0078 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0078_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0078_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4019 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4019 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4019_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0079 */
/* [local] */ 

#ifndef DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
#define DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0079 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0079_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0079_v0_0_s_ifspec;

#ifndef ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__
#define ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__

/* interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView */
/* [unique][uuid][object] */ 



/* interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8ce513b4-0a7d-5553-b735-79cd5a7fee3f")
    __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ __RPC__out unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __RPC__in_ecount_full(count) ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [retval][out] */ __RPC__out unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ unsigned int index,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView *item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ unsigned int index,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __RPC__in_ecount_full(count) __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView **value);
        
        END_INTERFACE
    } __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl;

    interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
    {
        CONST_VTBL struct __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0080 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0080 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0080_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0080_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4020 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4020 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4020_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0081 */
/* [local] */ 

#ifndef DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
#define DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0081 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0081_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0081_v0_0_s_ifspec;

#ifndef ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__
#define ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__

/* interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource */
/* [unique][uuid][object] */ 



/* interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("19f78a46-2c65-5f94-bf5b-963347a0a318")
    __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ __RPC__out unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __RPC__in_ecount_full(count) ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [retval][out] */ __RPC__out unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ unsigned int index,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource *item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ unsigned int index,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __RPC__in __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __RPC__in_ecount_full(count) __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource **value);
        
        END_INTERFACE
    } __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl;

    interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
    {
        CONST_VTBL struct __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0082 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0082 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0082_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0082_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4021 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4021 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4021_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0083 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)



/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0083 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0083_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0083_v0_0_s_ifspec;

#ifndef ____FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__

/* interface __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f6f3b17c-4527-5528-86aa-1cf1fb78a5eb")
    __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama *asyncInfo,
            /* [in] */ AsyncStatus status) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama * This,
            /* [in] */ __RPC__in_opt __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama *asyncInfo,
            /* [in] */ AsyncStatus status);
        
        END_INTERFACE
    } __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl;

    interface __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama
    {
        CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_Invoke(This,asyncInfo,status)	\
    ( (This)->lpVtbl -> Invoke(This,asyncInfo,status) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0084 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0084 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0084_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0084_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4022 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4022 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4022_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0085 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama
#define DEF___FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0085 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0085_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0085_v0_0_s_ifspec;

#ifndef ____FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__
#define ____FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__

/* interface __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6ad8ea47-6670-51d8-a1db-33fe75491f0c")
    __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama : public IInspectable
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Completed( 
            /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama *handler) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Completed( 
            /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama **handler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetResults( 
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IStreetsidePanorama **results) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Completed )( 
            __RPC__in __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama * This,
            /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama *handler);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Completed )( 
            __RPC__in __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama **handler);
        
        HRESULT ( STDMETHODCALLTYPE *GetResults )( 
            __RPC__in __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama * This,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama **results);
        
        END_INTERFACE
    } __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl;

    interface __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama
    {
        CONST_VTBL struct __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_put_Completed(This,handler)	\
    ( (This)->lpVtbl -> put_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_get_Completed(This,handler)	\
    ( (This)->lpVtbl -> get_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_GetResults(This,results)	\
    ( (This)->lpVtbl -> GetResults(This,results) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0086 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0086 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0086_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0086_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4023 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4023 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4023_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0087 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0087 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0087_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0087_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8d2d9655-2f82-5271-9e95-a2db39d872f0")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSource *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0088 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0088 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0088_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0088_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4024 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4024 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4024_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0089 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0089 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0089_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0089_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4933a19a-00cc-5c21-a3df-b68f9939f6ef")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSource *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0090 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0090 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0090_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0090_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4025 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4025 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4025_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0091 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0091 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0091_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0091_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("76752fc4-b240-502c-9098-622c6c36e6a3")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSource *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0092 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0092 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0092_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0092_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4026 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4026 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4026_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0093 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0093 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0093_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0093_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f250dd93-e636-51ef-bc93-ee78d431a6bd")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControl *sender,
            /* [in] */ __RPC__in_opt IInspectable *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl *sender,
            /* [in] */ __RPC__in_opt IInspectable *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectableVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0094 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0094 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0094_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0094_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4027 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4027 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4027_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0095 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0095 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0095_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0095_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1b536ae0-08b0-5c54-bb30-679e6a875d61")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControl *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0096 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0096 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0096_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0096_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4028 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4028 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4028_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0097 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0097 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0097_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0097_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("78bfb71b-2d80-50e1-a2e9-e5667ff89ef2")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControl *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangingEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0098 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0098 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0098_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0098_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4029 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4029 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4029_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0099 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0099 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0099_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0099_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3a9d75c2-a41b-5708-8c1b-8e7c26e857d0")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControl *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkClickEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0100 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0100 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0100_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0100_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4030 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4030 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4030_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4030_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0101 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0101 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0101_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0101_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e3634a54-05ed-5e39-9d8a-03857f0ba0e7")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControl *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkRightTappedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0102 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0102 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0102_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0102_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4031 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4031 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4031_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4031_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0103 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0103 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0103_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0103_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3ec75af0-1679-53ff-bb0c-376b8c441980")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControl *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureClickEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0104 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0104 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0104_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0104_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4032 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4032 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4032_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4032_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0105 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0105 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0105_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0105_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a18b47d7-6326-5fc1-8a40-88af91bb0589")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControl *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureRightTappedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0106 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0106 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0106_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0106_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4033 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4033 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4033_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4033_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0107 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0107 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0107_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0107_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("272cf26f-18da-599e-896f-3bfbf6fb1326")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControl *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapCustomExperienceChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0108 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0108 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0108_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0108_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4034 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4034 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4034_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4034_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0109 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0109 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0109_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0109_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4c7821a1-d570-597d-acc7-068853c4ab27")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControl *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapElementClickEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0110 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0110 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0110_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0110_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4035 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4035 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4035_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4035_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0111 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0111 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0111_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0111_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ca2638e5-7c33-5b90-9b66-273731fc7091")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControl *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapElementPointerEnteredEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0112 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0112 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0112_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0112_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4036 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4036 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4036_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0113 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0113 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0113_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0113_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f6a7bfd1-2c79-5191-b382-75b141d18846")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControl *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapElementPointerExitedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0114 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0114 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0114_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0114_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4037 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4037 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4037_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0115 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0115 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0115_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0115_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b92f6816-4d0a-52c2-9868-94b5c942007e")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControl *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapInputEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0116 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0116 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0116_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0116_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4038 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4038 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4038_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0117 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0117 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0117_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0117_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("efc52f2d-ad6b-59af-a0f0-2253d434414f")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControl *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapRightTappedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0118 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0118 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0118_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0118_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4039 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4039 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4039_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4039_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0119 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0119 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0119_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0119_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2671c2dd-e212-5e43-80e2-ab6ff3f3086c")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControl *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0120 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0120 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0120_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0120_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4040 */




/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4040 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4040_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_4040_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0121 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0121 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0121_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0121_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("766ed4a8-e810-5f78-bc96-9aff9f58cfca")
    __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapScene *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0122 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs */
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind
    {
        MapAnimationKind_Default	= 0,
        MapAnimationKind_None	= 1,
        MapAnimationKind_Linear	= 2,
        MapAnimationKind_Bow	= 3
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason
    {
        MapCameraChangeReason_System	= 0,
        MapCameraChangeReason_UserInteraction	= 1,
        MapCameraChangeReason_Programmatic	= 2
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme
    {
        MapColorScheme_Light	= 0,
        MapColorScheme_Dark	= 1
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior
    {
        MapElementCollisionBehavior_Hide	= 0,
        MapElementCollisionBehavior_RemainVisible	= 1
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode
    {
        MapInteractionMode_Auto	= 0,
        MapInteractionMode_Disabled	= 1,
        MapInteractionMode_GestureOnly	= 2,
        MapInteractionMode_ControlOnly	= 3,
        MapInteractionMode_GestureAndControl	= 4
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus
    {
        MapLoadingStatus_Loading	= 0,
        MapLoadingStatus_Loaded	= 1,
        MapLoadingStatus_DataUnavailable	= 2
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode
    {
        MapPanInteractionMode_Auto	= 0,
        MapPanInteractionMode_Disabled	= 1
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle
    {
        MapStyle_None	= 0,
        MapStyle_Road	= 1,
        MapStyle_Aerial	= 2,
        MapStyle_AerialWithRoads	= 3,
        MapStyle_Terrain	= 4,
        MapStyle_Aerial3D	= 5,
        MapStyle_Aerial3DWithRoads	= 6
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer
    {
        MapTileLayer_LabelOverlay	= 0,
        MapTileLayer_RoadOverlay	= 1,
        MapTileLayer_AreaOverlay	= 2,
        MapTileLayer_BackgroundOverlay	= 3,
        MapTileLayer_BackgroundReplacement	= 4
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode
    {
        MapWatermarkMode_Automatic	= 0,
        MapWatermarkMode_On	= 1
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)
struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange
    {
    DOUBLE Min;
    DOUBLE Max;
    } ;
#endif
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlDataHelper[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlDataHelper";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0122 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        /* [v1_enum] */ 
                        enum MapAnimationKind
                            {
                                MapAnimationKind_Default	= 0,
                                MapAnimationKind_None	= 1,
                                MapAnimationKind_Linear	= 2,
                                MapAnimationKind_Bow	= 3
                            } ;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        /* [v1_enum] */ 
                        enum MapCameraChangeReason
                            {
                                MapCameraChangeReason_System	= 0,
                                MapCameraChangeReason_UserInteraction	= 1,
                                MapCameraChangeReason_Programmatic	= 2
                            } ;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        /* [v1_enum] */ 
                        enum MapColorScheme
                            {
                                MapColorScheme_Light	= 0,
                                MapColorScheme_Dark	= 1
                            } ;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        /* [v1_enum] */ 
                        enum MapElementCollisionBehavior
                            {
                                MapElementCollisionBehavior_Hide	= 0,
                                MapElementCollisionBehavior_RemainVisible	= 1
                            } ;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        /* [v1_enum] */ 
                        enum MapInteractionMode
                            {
                                MapInteractionMode_Auto	= 0,
                                MapInteractionMode_Disabled	= 1,
                                MapInteractionMode_GestureOnly	= 2,
                                MapInteractionMode_ControlOnly	= 3,
                                MapInteractionMode_GestureAndControl	= 4
                            } ;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        /* [v1_enum] */ 
                        enum MapLoadingStatus
                            {
                                MapLoadingStatus_Loading	= 0,
                                MapLoadingStatus_Loaded	= 1,
                                MapLoadingStatus_DataUnavailable	= 2
                            } ;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        /* [v1_enum] */ 
                        enum MapPanInteractionMode
                            {
                                MapPanInteractionMode_Auto	= 0,
                                MapPanInteractionMode_Disabled	= 1
                            } ;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        /* [v1_enum] */ 
                        enum MapStyle
                            {
                                MapStyle_None	= 0,
                                MapStyle_Road	= 1,
                                MapStyle_Aerial	= 2,
                                MapStyle_AerialWithRoads	= 3,
                                MapStyle_Terrain	= 4,
                                MapStyle_Aerial3D	= 5,
                                MapStyle_Aerial3DWithRoads	= 6
                            } ;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        /* [v1_enum] */ 
                        enum MapTileLayer
                            {
                                MapTileLayer_LabelOverlay	= 0,
                                MapTileLayer_RoadOverlay	= 1,
                                MapTileLayer_AreaOverlay	= 2,
                                MapTileLayer_BackgroundOverlay	= 3,
                                MapTileLayer_BackgroundReplacement	= 4
                            } ;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        /* [v1_enum] */ 
                        enum MapWatermarkMode
                            {
                                MapWatermarkMode_Automatic	= 0,
                                MapWatermarkMode_On	= 1
                            } ;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        
                        struct MapZoomLevelRange
                            {
                            DOUBLE Min;
                            DOUBLE Max;
                            } ;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0122_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0122_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapControlDataHelper */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("8BB0F09C-14AB-486C-9DE5-5A5DEF0205A2")
                            IMapControlDataHelper : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE add_BusinessLandmarkClick( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_BusinessLandmarkClick( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_TransitFeatureClick( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_TransitFeatureClick( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_BusinessLandmarkRightTapped( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_BusinessLandmarkRightTapped( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_TransitFeatureRightTapped( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_TransitFeatureRightTapped( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapControlDataHelper = __uuidof(IMapControlDataHelper);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *add_BusinessLandmarkClick )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_BusinessLandmarkClick )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_TransitFeatureClick )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_TransitFeatureClick )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_BusinessLandmarkRightTapped )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_BusinessLandmarkRightTapped )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_TransitFeatureRightTapped )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_TransitFeatureRightTapped )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_add_BusinessLandmarkClick(This,value,token)	\
    ( (This)->lpVtbl -> add_BusinessLandmarkClick(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_remove_BusinessLandmarkClick(This,token)	\
    ( (This)->lpVtbl -> remove_BusinessLandmarkClick(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_add_TransitFeatureClick(This,value,token)	\
    ( (This)->lpVtbl -> add_TransitFeatureClick(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_remove_TransitFeatureClick(This,token)	\
    ( (This)->lpVtbl -> remove_TransitFeatureClick(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_add_BusinessLandmarkRightTapped(This,value,token)	\
    ( (This)->lpVtbl -> add_BusinessLandmarkRightTapped(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_remove_BusinessLandmarkRightTapped(This,token)	\
    ( (This)->lpVtbl -> remove_BusinessLandmarkRightTapped(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_add_TransitFeatureRightTapped(This,value,token)	\
    ( (This)->lpVtbl -> add_TransitFeatureRightTapped(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_remove_TransitFeatureRightTapped(This,token)	\
    ( (This)->lpVtbl -> remove_TransitFeatureRightTapped(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0123 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlDataHelperFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlDataHelperFactory";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0123 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0123_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0123_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapControlDataHelperFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("3B70AA8E-02EF-469C-BBAF-DC2158D4289B")
                            IMapControlDataHelperFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateInstance( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControl *map,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapControlDataHelper **instance) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapControlDataHelperFactory = __uuidof(IMapControlDataHelperFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstance )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl *map,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper **instance);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_CreateInstance(This,map,instance)	\
    ( (This)->lpVtbl -> CreateInstance(This,map,instance) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0124 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlBusinessLandmarkClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkClickEventArgs";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0124 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0124_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0124_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkClickEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("5E464922-4A1A-4797-BEB7-5CF7754CB867")
                            IMapControlBusinessLandmarkClickEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LocalLocations( 
                                    /* [out][retval] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapControlBusinessLandmarkClickEventArgs = __uuidof(IMapControlBusinessLandmarkClickEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocalLocations )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_get_LocalLocations(This,value)	\
    ( (This)->lpVtbl -> get_LocalLocations(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0125 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlTransitFeatureClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureClickEventArgs";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0125 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0125_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0125_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureClickEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("76179969-B765-4622-B08A-3072745A4541")
                            IMapControlTransitFeatureClickEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DisplayName( 
                                    /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeopoint **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TransitProperties( 
                                    /* [out][retval] */ __RPC__deref_out_opt __FIMapView_2_HSTRING_IInspectable **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapControlTransitFeatureClickEventArgs = __uuidof(IMapControlTransitFeatureClickEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TransitProperties )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIMapView_2_HSTRING_IInspectable **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_get_DisplayName(This,value)	\
    ( (This)->lpVtbl -> get_DisplayName(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_get_Location(This,value)	\
    ( (This)->lpVtbl -> get_Location(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_get_TransitProperties(This,value)	\
    ( (This)->lpVtbl -> get_TransitProperties(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0126 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlBusinessLandmarkRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkRightTappedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0126 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0126_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0126_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkRightTappedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("59AB8AE7-F184-4AB1-B0B0-35C8BF0654B2")
                            IMapControlBusinessLandmarkRightTappedEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LocalLocations( 
                                    /* [out][retval] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapControlBusinessLandmarkRightTappedEventArgs = __uuidof(IMapControlBusinessLandmarkRightTappedEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocalLocations )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_get_LocalLocations(This,value)	\
    ( (This)->lpVtbl -> get_LocalLocations(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0127 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlTransitFeatureRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureRightTappedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0127 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0127_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0127_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureRightTappedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("AEA1CC49-A729-4EAE-A59A-3EC9A125A028")
                            IMapControlTransitFeatureRightTappedEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DisplayName( 
                                    /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeopoint **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TransitProperties( 
                                    /* [out][retval] */ __RPC__deref_out_opt __FIMapView_2_HSTRING_IInspectable **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapControlTransitFeatureRightTappedEventArgs = __uuidof(IMapControlTransitFeatureRightTappedEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TransitProperties )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIMapView_2_HSTRING_IInspectable **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_get_DisplayName(This,value)	\
    ( (This)->lpVtbl -> get_DisplayName(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_get_Location(This,value)	\
    ( (This)->lpVtbl -> get_Location(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_get_TransitProperties(This,value)	\
    ( (This)->lpVtbl -> get_TransitProperties(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0128 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapActualCameraChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0128 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0128_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0128_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("DAA080DA-B7F4-422C-A618-BBAA7C1D814C")
                            IMapActualCameraChangedEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Camera( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapActualCameraChangedEventArgs = __uuidof(IMapActualCameraChangedEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Camera )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_get_Camera(This,value)	\
    ( (This)->lpVtbl -> get_Camera(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0129 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapActualCameraChangedEventArgs2[] = L"Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs2";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0129 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0129_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0129_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2 */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangedEventArgs2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("7BA4C7E5-10DC-455A-9D04-1D72FB6D9B93")
                            IMapActualCameraChangedEventArgs2 : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChangeReason( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Xaml::Controls::Maps::MapCameraChangeReason *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapActualCameraChangedEventArgs2 = __uuidof(IMapActualCameraChangedEventArgs2);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChangeReason )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_get_ChangeReason(This,value)	\
    ( (This)->lpVtbl -> get_ChangeReason(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0130 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapActualCameraChangingEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0130 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0130_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0130_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangingEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("6B0DBED6-93F7-4682-8DE5-A47A1CC7A945")
                            IMapActualCameraChangingEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Camera( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapActualCameraChangingEventArgs = __uuidof(IMapActualCameraChangingEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Camera )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_get_Camera(This,value)	\
    ( (This)->lpVtbl -> get_Camera(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0131 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapActualCameraChangingEventArgs2[] = L"Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs2";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0131 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0131_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0131_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2 */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangingEventArgs2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("F2867897-40AC-4E8A-A927-510F3846A47E")
                            IMapActualCameraChangingEventArgs2 : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChangeReason( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Xaml::Controls::Maps::MapCameraChangeReason *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapActualCameraChangingEventArgs2 = __uuidof(IMapActualCameraChangingEventArgs2);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChangeReason )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_get_ChangeReason(This,value)	\
    ( (This)->lpVtbl -> get_ChangeReason(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0132 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapCustomExperienceChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapCustomExperienceChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0132 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0132_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0132_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapCustomExperienceChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("B9E6FB9B-8FC1-4042-AC34-A61B38BB7514")
                            IMapCustomExperienceChangedEventArgs : public IInspectable
                            {
                            public:
                            };

                            extern const __declspec(selectany) IID & IID_IMapCustomExperienceChangedEventArgs = __uuidof(IMapCustomExperienceChangedEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0133 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementClickEventArgs";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0133 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0133_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0133_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapElementClickEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("40168A11-D080-4519-99A1-3149FB8999D0")
                            IMapElementClickEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::Foundation::Point *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeopoint **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MapElements( 
                                    /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapElementClickEventArgs = __uuidof(IMapElementClickEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CPoint *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MapElements )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_get_Position(This,value)	\
    ( (This)->lpVtbl -> get_Position(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_get_Location(This,value)	\
    ( (This)->lpVtbl -> get_Location(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_get_MapElements(This,value)	\
    ( (This)->lpVtbl -> get_MapElements(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0134 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementPointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementPointerEnteredEventArgs";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0134 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0134_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0134_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapElementPointerEnteredEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("AB85DD4E-91D7-4B31-8F0A-D390C7D3A2EF")
                            IMapElementPointerEnteredEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::Foundation::Point *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeopoint **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MapElement( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapElement **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapElementPointerEnteredEventArgs = __uuidof(IMapElementPointerEnteredEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CPoint *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MapElement )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_get_Position(This,value)	\
    ( (This)->lpVtbl -> get_Position(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_get_Location(This,value)	\
    ( (This)->lpVtbl -> get_Location(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_get_MapElement(This,value)	\
    ( (This)->lpVtbl -> get_MapElement(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0135 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementPointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementPointerExitedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0135 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0135_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0135_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapElementPointerExitedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("C1A45AF9-60C9-4679-9119-20ABC75D931F")
                            IMapElementPointerExitedEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::Foundation::Point *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeopoint **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MapElement( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapElement **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapElementPointerExitedEventArgs = __uuidof(IMapElementPointerExitedEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CPoint *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MapElement )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_get_Position(This,value)	\
    ( (This)->lpVtbl -> get_Position(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_get_Location(This,value)	\
    ( (This)->lpVtbl -> get_Location(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_get_MapElement(This,value)	\
    ( (This)->lpVtbl -> get_MapElement(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0136 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapRightTappedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0136 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0136_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0136_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapRightTappedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("20943171-6FE8-40A6-AD0E-297379B575A7")
                            IMapRightTappedEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::Foundation::Point *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeopoint **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapRightTappedEventArgs = __uuidof(IMapRightTappedEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CPoint *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_get_Position(This,value)	\
    ( (This)->lpVtbl -> get_Position(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_get_Location(This,value)	\
    ( (This)->lpVtbl -> get_Location(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0137 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTargetCameraChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0137 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0137_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0137_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("DBF00472-E953-4FA8-97D0-EA86359057CF")
                            IMapTargetCameraChangedEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Camera( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapTargetCameraChangedEventArgs = __uuidof(IMapTargetCameraChangedEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Camera )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_get_Camera(This,value)	\
    ( (This)->lpVtbl -> get_Camera(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0138 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTargetCameraChangedEventArgs2[] = L"Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs2";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0138 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0138_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0138_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2 */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("97C0B332-F2B6-460B-8D91-AC020A2383DD")
                            IMapTargetCameraChangedEventArgs2 : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChangeReason( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Xaml::Controls::Maps::MapCameraChangeReason *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapTargetCameraChangedEventArgs2 = __uuidof(IMapTargetCameraChangedEventArgs2);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChangeReason )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_get_ChangeReason(This,value)	\
    ( (This)->lpVtbl -> get_ChangeReason(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0139 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileBitmapRequest[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequest";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0139 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0139_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0139_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequest */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("46733FBC-D89D-472B-B5F6-D7066B0584F4")
                            IMapTileBitmapRequest : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PixelData( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Storage::Streams::IRandomAccessStreamReference **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PixelData( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Storage::Streams::IRandomAccessStreamReference *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE GetDeferral( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestDeferral **returnValue) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapTileBitmapRequest = __uuidof(IMapTileBitmapRequest);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PixelData )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PixelData )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference *value);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeferral )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral **returnValue);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_get_PixelData(This,value)	\
    ( (This)->lpVtbl -> get_PixelData(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_put_PixelData(This,value)	\
    ( (This)->lpVtbl -> put_PixelData(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_GetDeferral(This,returnValue)	\
    ( (This)->lpVtbl -> GetDeferral(This,returnValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0140 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileBitmapRequestDeferral[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestDeferral";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0140 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0140_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0140_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestDeferral */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("FE370542-A4AC-4EFA-9665-0490B0CAFDD2")
                            IMapTileBitmapRequestDeferral : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE Complete( void) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapTileBitmapRequestDeferral = __uuidof(IMapTileBitmapRequestDeferral);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferralVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Complete )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral * This);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferralVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferralVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_Complete(This)	\
    ( (This)->lpVtbl -> Complete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0141 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileBitmapRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0141 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0141_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0141_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("337F691D-9B02-4AA2-8B1E-CC4D91719BF3")
                            IMapTileBitmapRequestedEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_X( 
                                    /* [out][retval] */ __RPC__out INT32 *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Y( 
                                    /* [out][retval] */ __RPC__out INT32 *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZoomLevel( 
                                    /* [out][retval] */ __RPC__out INT32 *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Request( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequest **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapTileBitmapRequestedEventArgs = __uuidof(IMapTileBitmapRequestedEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_X )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs * This,
            /* [out][retval] */ __RPC__out INT32 *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Y )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs * This,
            /* [out][retval] */ __RPC__out INT32 *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZoomLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs * This,
            /* [out][retval] */ __RPC__out INT32 *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Request )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_get_X(This,value)	\
    ( (This)->lpVtbl -> get_X(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_get_Y(This,value)	\
    ( (This)->lpVtbl -> get_Y(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_get_ZoomLevel(This,value)	\
    ( (This)->lpVtbl -> get_ZoomLevel(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_get_Request(This,value)	\
    ( (This)->lpVtbl -> get_Request(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0142 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileUriRequest[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileUriRequest";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0142 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0142_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0142_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequest */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("17402335-3127-45B8-87A7-99F87D4E2745")
                            IMapTileUriRequest : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Uri( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Foundation::IUriRuntimeClass **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Uri( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Foundation::IUriRuntimeClass *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE GetDeferral( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestDeferral **returnValue) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapTileUriRequest = __uuidof(IMapTileUriRequest);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Uri )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CFoundation_CIUriRuntimeClass **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Uri )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CFoundation_CIUriRuntimeClass *value);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeferral )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral **returnValue);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_get_Uri(This,value)	\
    ( (This)->lpVtbl -> get_Uri(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_put_Uri(This,value)	\
    ( (This)->lpVtbl -> put_Uri(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_GetDeferral(This,returnValue)	\
    ( (This)->lpVtbl -> GetDeferral(This,returnValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0143 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileUriRequestDeferral[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestDeferral";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0143 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0143_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0143_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestDeferral */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("C117ADE0-BF3E-4C51-8FAA-4B593CF68EB2")
                            IMapTileUriRequestDeferral : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE Complete( void) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapTileUriRequestDeferral = __uuidof(IMapTileUriRequestDeferral);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferralVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Complete )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral * This);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferralVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferralVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_Complete(This)	\
    ( (This)->lpVtbl -> Complete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0144 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileUriRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0144 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0144_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0144_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("D2147B43-1BBF-4B98-8DD3-B7834E407E0D")
                            IMapTileUriRequestedEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_X( 
                                    /* [out][retval] */ __RPC__out INT32 *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Y( 
                                    /* [out][retval] */ __RPC__out INT32 *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZoomLevel( 
                                    /* [out][retval] */ __RPC__out INT32 *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Request( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequest **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapTileUriRequestedEventArgs = __uuidof(IMapTileUriRequestedEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_X )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs * This,
            /* [out][retval] */ __RPC__out INT32 *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Y )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs * This,
            /* [out][retval] */ __RPC__out INT32 *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZoomLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs * This,
            /* [out][retval] */ __RPC__out INT32 *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Request )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_get_X(This,value)	\
    ( (This)->lpVtbl -> get_X(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_get_Y(This,value)	\
    ( (This)->lpVtbl -> get_Y(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_get_ZoomLevel(This,value)	\
    ( (This)->lpVtbl -> get_ZoomLevel(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_get_Request(This,value)	\
    ( (This)->lpVtbl -> get_Request(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0145 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapCamera[] = L"Windows.UI.Xaml.Controls.Maps.IMapCamera";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0145 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0145_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0145_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("53A6B623-C0F8-4D8B-AD1E-A59598EA840B")
                            IMapCamera : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeopoint **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Location( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Heading( 
                                    /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Heading( 
                                    /* [in] */ DOUBLE value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Pitch( 
                                    /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Pitch( 
                                    /* [in] */ DOUBLE value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Roll( 
                                    /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Roll( 
                                    /* [in] */ DOUBLE value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FieldOfView( 
                                    /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FieldOfView( 
                                    /* [in] */ DOUBLE value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapCamera = __uuidof(IMapCamera);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Location )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Heading )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Heading )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This,
            /* [in] */ DOUBLE value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pitch )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Pitch )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This,
            /* [in] */ DOUBLE value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Roll )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Roll )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This,
            /* [in] */ DOUBLE value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FieldOfView )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FieldOfView )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera * This,
            /* [in] */ DOUBLE value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_get_Location(This,value)	\
    ( (This)->lpVtbl -> get_Location(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_put_Location(This,value)	\
    ( (This)->lpVtbl -> put_Location(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_get_Heading(This,value)	\
    ( (This)->lpVtbl -> get_Heading(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_put_Heading(This,value)	\
    ( (This)->lpVtbl -> put_Heading(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_get_Pitch(This,value)	\
    ( (This)->lpVtbl -> get_Pitch(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_put_Pitch(This,value)	\
    ( (This)->lpVtbl -> put_Pitch(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_get_Roll(This,value)	\
    ( (This)->lpVtbl -> get_Roll(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_put_Roll(This,value)	\
    ( (This)->lpVtbl -> put_Roll(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_get_FieldOfView(This,value)	\
    ( (This)->lpVtbl -> get_FieldOfView(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_put_FieldOfView(This,value)	\
    ( (This)->lpVtbl -> put_FieldOfView(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0146 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapCameraFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapCameraFactory";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0146 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0146_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0146_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapCameraFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("EA3B0F16-83AF-4ACE-8E71-10AD9F1E9E7F")
                            IMapCameraFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithLocation( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *location,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera **instance) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithLocationAndHeading( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *location,
                                    /* [in] */ DOUBLE headingInDegrees,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera **instance) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithLocationHeadingAndPitch( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *location,
                                    /* [in] */ DOUBLE headingInDegrees,
                                    /* [in] */ DOUBLE pitchInDegrees,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera **instance) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithLocationHeadingPitchRollAndFieldOfView( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *location,
                                    /* [in] */ DOUBLE headingInDegrees,
                                    /* [in] */ DOUBLE pitchInDegrees,
                                    /* [in] */ DOUBLE rollInDegrees,
                                    /* [in] */ DOUBLE fieldOfViewInDegrees,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera **instance) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapCameraFactory = __uuidof(IMapCameraFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstanceWithLocation )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *location,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera **instance);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstanceWithLocationAndHeading )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *location,
            /* [in] */ DOUBLE headingInDegrees,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera **instance);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstanceWithLocationHeadingAndPitch )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *location,
            /* [in] */ DOUBLE headingInDegrees,
            /* [in] */ DOUBLE pitchInDegrees,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera **instance);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstanceWithLocationHeadingPitchRollAndFieldOfView )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *location,
            /* [in] */ DOUBLE headingInDegrees,
            /* [in] */ DOUBLE pitchInDegrees,
            /* [in] */ DOUBLE rollInDegrees,
            /* [in] */ DOUBLE fieldOfViewInDegrees,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera **instance);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_CreateInstanceWithLocation(This,location,instance)	\
    ( (This)->lpVtbl -> CreateInstanceWithLocation(This,location,instance) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_CreateInstanceWithLocationAndHeading(This,location,headingInDegrees,instance)	\
    ( (This)->lpVtbl -> CreateInstanceWithLocationAndHeading(This,location,headingInDegrees,instance) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_CreateInstanceWithLocationHeadingAndPitch(This,location,headingInDegrees,pitchInDegrees,instance)	\
    ( (This)->lpVtbl -> CreateInstanceWithLocationHeadingAndPitch(This,location,headingInDegrees,pitchInDegrees,instance) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_CreateInstanceWithLocationHeadingPitchRollAndFieldOfView(This,location,headingInDegrees,pitchInDegrees,rollInDegrees,fieldOfViewInDegrees,instance)	\
    ( (This)->lpVtbl -> CreateInstanceWithLocationHeadingPitchRollAndFieldOfView(This,location,headingInDegrees,pitchInDegrees,rollInDegrees,fieldOfViewInDegrees,instance) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0147 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapCustomExperience[] = L"Windows.UI.Xaml.Controls.Maps.IMapCustomExperience";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0147 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0147_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0147_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapCustomExperience */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("64592866-14A3-4E5F-8883-8E9C500EEEDE")
                            IMapCustomExperience : public IInspectable
                            {
                            public:
                            };

                            extern const __declspec(selectany) IID & IID_IMapCustomExperience = __uuidof(IMapCustomExperience);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0148 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapCustomExperienceFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapCustomExperienceFactory";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0148 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0148_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0148_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapCustomExperienceFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("7A403FB5-A1B1-4E7F-921E-3E6B8D8EBED6")
                            IMapCustomExperienceFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateInstance( 
                                    /* [in] */ __RPC__in_opt IInspectable *outer,
                                    /* [out] */ __RPC__deref_out_opt IInspectable **inner,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapCustomExperience **instance) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapCustomExperienceFactory = __uuidof(IMapCustomExperienceFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstance )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory * This,
            /* [in] */ __RPC__in_opt IInspectable *outer,
            /* [out] */ __RPC__deref_out_opt IInspectable **inner,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience **instance);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_CreateInstance(This,outer,inner,instance)	\
    ( (This)->lpVtbl -> CreateInstance(This,outer,inner,instance) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0149 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElement[] = L"Windows.UI.Xaml.Controls.Maps.IMapElement";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0149 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0149_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0149_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapElement */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("D61FC4DF-B245-47F2-9AC2-43C058B1C903")
                            IMapElement : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZIndex( 
                                    /* [out][retval] */ __RPC__out INT32 *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ZIndex( 
                                    /* [in] */ INT32 value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Visible( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Visible( 
                                    /* [in] */ boolean value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapElement = __uuidof(IMapElement);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZIndex )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement * This,
            /* [out][retval] */ __RPC__out INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ZIndex )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement * This,
            /* [in] */ boolean value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_get_ZIndex(This,value)	\
    ( (This)->lpVtbl -> get_ZIndex(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_put_ZIndex(This,value)	\
    ( (This)->lpVtbl -> put_ZIndex(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_get_Visible(This,value)	\
    ( (This)->lpVtbl -> get_Visible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_put_Visible(This,value)	\
    ( (This)->lpVtbl -> put_Visible(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0150 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementStatics";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0150 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0150_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0150_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapElementStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("E8C71CF2-BFEF-4B49-8E99-41B5E3789FD2")
                            IMapElementStatics : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZIndexProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VisibleProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapElementStatics = __uuidof(IMapElementStatics);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZIndexProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VisibleProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_get_ZIndexProperty(This,value)	\
    ( (This)->lpVtbl -> get_ZIndexProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_get_VisibleProperty(This,value)	\
    ( (This)->lpVtbl -> get_VisibleProperty(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0151 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementFactory";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0151 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0151_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0151_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapElementFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("4A30D007-0BD6-47A5-860B-7E7CF5F0C573")
                            IMapElementFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateInstance( 
                                    /* [in] */ __RPC__in_opt IInspectable *outer,
                                    /* [out] */ __RPC__deref_out_opt IInspectable **inner,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapElement **instance) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapElementFactory = __uuidof(IMapElementFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstance )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory * This,
            /* [in] */ __RPC__in_opt IInspectable *outer,
            /* [out] */ __RPC__deref_out_opt IInspectable **inner,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement **instance);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_CreateInstance(This,outer,inner,instance)	\
    ( (This)->lpVtbl -> CreateInstance(This,outer,inner,instance) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0152 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElement2[] = L"Windows.UI.Xaml.Controls.Maps.IMapElement2";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0152 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0152_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0152_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2 */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapElement2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("6619F261-FBA6-4964-A7FF-F1AF63AB9CB0")
                            IMapElement2 : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MapTabIndex( 
                                    /* [out][retval] */ __RPC__out INT32 *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MapTabIndex( 
                                    /* [in] */ INT32 value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapElement2 = __uuidof(IMapElement2);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MapTabIndex )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2 * This,
            /* [out][retval] */ __RPC__out INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MapTabIndex )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2 * This,
            /* [in] */ INT32 value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_get_MapTabIndex(This,value)	\
    ( (This)->lpVtbl -> get_MapTabIndex(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_put_MapTabIndex(This,value)	\
    ( (This)->lpVtbl -> put_MapTabIndex(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0153 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementStatics2[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementStatics2";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0153 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0153_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0153_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2 */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapElementStatics2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("9BF72F30-80FE-4F30-BCC1-FA894050F676")
                            IMapElementStatics2 : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MapTabIndexProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapElementStatics2 = __uuidof(IMapElementStatics2);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MapTabIndexProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_get_MapTabIndexProperty(This,value)	\
    ( (This)->lpVtbl -> get_MapTabIndexProperty(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0154 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapInputEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapInputEventArgs";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0154 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0154_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0154_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapInputEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("9FC503A0-A8A2-4394-92E9-2247764F2F49")
                            IMapInputEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::Foundation::Point *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeopoint **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapInputEventArgs = __uuidof(IMapInputEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CPoint *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_get_Position(This,value)	\
    ( (This)->lpVtbl -> get_Position(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_get_Location(This,value)	\
    ( (This)->lpVtbl -> get_Location(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0155 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapItemsControl[] = L"Windows.UI.Xaml.Controls.Maps.IMapItemsControl";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0155 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0155_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0155_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapItemsControl */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("94C2C4D3-B335-42C5-B660-E6A07EC3BDDC")
                            IMapItemsControl : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ItemsSource( 
                                    /* [out][retval] */ __RPC__deref_out_opt IInspectable **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ItemsSource( 
                                    /* [in] */ __RPC__in_opt IInspectable *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Items( 
                                    /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CUI__CXaml__CDependencyObject **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ItemTemplate( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDataTemplate **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ItemTemplate( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::IDataTemplate *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapItemsControl = __uuidof(IMapItemsControl);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ItemsSource )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl * This,
            /* [out][retval] */ __RPC__deref_out_opt IInspectable **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ItemsSource )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl * This,
            /* [in] */ __RPC__in_opt IInspectable *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Items )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CUI__CXaml__CDependencyObject **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ItemTemplate )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDataTemplate **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ItemTemplate )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CIDataTemplate *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_get_ItemsSource(This,value)	\
    ( (This)->lpVtbl -> get_ItemsSource(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_put_ItemsSource(This,value)	\
    ( (This)->lpVtbl -> put_ItemsSource(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_get_Items(This,value)	\
    ( (This)->lpVtbl -> get_Items(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_get_ItemTemplate(This,value)	\
    ( (This)->lpVtbl -> get_ItemTemplate(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_put_ItemTemplate(This,value)	\
    ( (This)->lpVtbl -> put_ItemTemplate(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0156 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapItemsControlStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapItemsControlStatics";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0156 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0156_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0156_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapItemsControlStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("33A859C7-789B-425C-8A0A-32385896CB4A")
                            IMapItemsControlStatics : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ItemsSourceProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ItemsProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ItemTemplateProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapItemsControlStatics = __uuidof(IMapItemsControlStatics);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ItemsSourceProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ItemsProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ItemTemplateProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_get_ItemsSourceProperty(This,value)	\
    ( (This)->lpVtbl -> get_ItemsSourceProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_get_ItemsProperty(This,value)	\
    ( (This)->lpVtbl -> get_ItemsProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_get_ItemTemplateProperty(This,value)	\
    ( (This)->lpVtbl -> get_ItemTemplateProperty(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0157 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapRouteView[] = L"Windows.UI.Xaml.Controls.Maps.IMapRouteView";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0157 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0157_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0157_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("740EAEC5-BACC-41E1-A67E-DD6513832049")
                            IMapRouteView : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RouteColor( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Color *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RouteColor( 
                                    /* [in] */ ABI::Windows::UI::Color value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OutlineColor( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Color *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OutlineColor( 
                                    /* [in] */ ABI::Windows::UI::Color value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Route( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Services::Maps::IMapRoute **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapRouteView = __uuidof(IMapRouteView);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RouteColor )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RouteColor )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutlineColor )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutlineColor )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Route )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CServices_CMaps_CIMapRoute **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_get_RouteColor(This,value)	\
    ( (This)->lpVtbl -> get_RouteColor(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_put_RouteColor(This,value)	\
    ( (This)->lpVtbl -> put_RouteColor(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_get_OutlineColor(This,value)	\
    ( (This)->lpVtbl -> get_OutlineColor(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_put_OutlineColor(This,value)	\
    ( (This)->lpVtbl -> put_OutlineColor(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_get_Route(This,value)	\
    ( (This)->lpVtbl -> get_Route(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0158 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapRouteViewFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapRouteViewFactory";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0158 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0158_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0158_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteViewFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("F083ADDF-0066-4628-82FE-EA78C23CEC1E")
                            IMapRouteViewFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithMapRoute( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Services::Maps::IMapRoute *route,
                                    /* [in] */ __RPC__in_opt IInspectable *outer,
                                    /* [out] */ __RPC__deref_out_opt IInspectable **inner,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView **instance) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapRouteViewFactory = __uuidof(IMapRouteViewFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstanceWithMapRoute )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CServices_CMaps_CIMapRoute *route,
            /* [in] */ __RPC__in_opt IInspectable *outer,
            /* [out] */ __RPC__deref_out_opt IInspectable **inner,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView **instance);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_CreateInstanceWithMapRoute(This,route,outer,inner,instance)	\
    ( (This)->lpVtbl -> CreateInstanceWithMapRoute(This,route,outer,inner,instance) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0159 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapScene[] = L"Windows.UI.Xaml.Controls.Maps.IMapScene";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0159 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0159_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0159_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapScene */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("8BBA10A9-50E7-482C-9789-C688B178AC24")
                            IMapScene : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TargetCamera( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera **value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_TargetCameraChanged( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_TargetCameraChanged( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapScene = __uuidof(IMapScene);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TargetCamera )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera **value);
        
        HRESULT ( STDMETHODCALLTYPE *add_TargetCameraChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_TargetCameraChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_get_TargetCamera(This,value)	\
    ( (This)->lpVtbl -> get_TargetCamera(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_add_TargetCameraChanged(This,value,token)	\
    ( (This)->lpVtbl -> add_TargetCameraChanged(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_remove_TargetCameraChanged(This,token)	\
    ( (This)->lpVtbl -> remove_TargetCameraChanged(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0160 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapSceneStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapSceneStatics";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0160 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0160_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0160_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapSceneStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("03E4AD6C-86EC-44D9-9597-FB75B7DEBA0A")
                            IMapSceneStatics : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateFromBoundingBox( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeoboundingBox *bounds,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapScene **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateFromBoundingBoxWithHeadingAndPitch( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeoboundingBox *bounds,
                                    /* [in] */ DOUBLE headingInDegrees,
                                    /* [in] */ DOUBLE pitchInDegrees,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapScene **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateFromCamera( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera *camera,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapScene **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateFromLocation( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *location,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapScene **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateFromLocationWithHeadingAndPitch( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *location,
                                    /* [in] */ DOUBLE headingInDegrees,
                                    /* [in] */ DOUBLE pitchInDegrees,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapScene **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateFromLocationAndRadius( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *location,
                                    /* [in] */ DOUBLE radiusInMeters,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapScene **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateFromLocationAndRadiusWithHeadingAndPitch( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *location,
                                    /* [in] */ DOUBLE radiusInMeters,
                                    /* [in] */ DOUBLE headingInDegrees,
                                    /* [in] */ DOUBLE pitchInDegrees,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapScene **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateFromLocations( 
                                    /* [in] */ __RPC__in_opt __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint *locations,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapScene **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateFromLocationsWithHeadingAndPitch( 
                                    /* [in] */ __RPC__in_opt __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint *locations,
                                    /* [in] */ DOUBLE headingInDegrees,
                                    /* [in] */ DOUBLE pitchInDegrees,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapScene **returnValue) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapSceneStatics = __uuidof(IMapSceneStatics);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromBoundingBox )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox *bounds,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromBoundingBoxWithHeadingAndPitch )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox *bounds,
            /* [in] */ DOUBLE headingInDegrees,
            /* [in] */ DOUBLE pitchInDegrees,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromCamera )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera *camera,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromLocation )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *location,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromLocationWithHeadingAndPitch )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *location,
            /* [in] */ DOUBLE headingInDegrees,
            /* [in] */ DOUBLE pitchInDegrees,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromLocationAndRadius )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *location,
            /* [in] */ DOUBLE radiusInMeters,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromLocationAndRadiusWithHeadingAndPitch )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *location,
            /* [in] */ DOUBLE radiusInMeters,
            /* [in] */ DOUBLE headingInDegrees,
            /* [in] */ DOUBLE pitchInDegrees,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromLocations )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics * This,
            /* [in] */ __RPC__in_opt __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint *locations,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromLocationsWithHeadingAndPitch )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics * This,
            /* [in] */ __RPC__in_opt __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint *locations,
            /* [in] */ DOUBLE headingInDegrees,
            /* [in] */ DOUBLE pitchInDegrees,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene **returnValue);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromBoundingBox(This,bounds,returnValue)	\
    ( (This)->lpVtbl -> CreateFromBoundingBox(This,bounds,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromBoundingBoxWithHeadingAndPitch(This,bounds,headingInDegrees,pitchInDegrees,returnValue)	\
    ( (This)->lpVtbl -> CreateFromBoundingBoxWithHeadingAndPitch(This,bounds,headingInDegrees,pitchInDegrees,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromCamera(This,camera,returnValue)	\
    ( (This)->lpVtbl -> CreateFromCamera(This,camera,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromLocation(This,location,returnValue)	\
    ( (This)->lpVtbl -> CreateFromLocation(This,location,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromLocationWithHeadingAndPitch(This,location,headingInDegrees,pitchInDegrees,returnValue)	\
    ( (This)->lpVtbl -> CreateFromLocationWithHeadingAndPitch(This,location,headingInDegrees,pitchInDegrees,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromLocationAndRadius(This,location,radiusInMeters,returnValue)	\
    ( (This)->lpVtbl -> CreateFromLocationAndRadius(This,location,radiusInMeters,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromLocationAndRadiusWithHeadingAndPitch(This,location,radiusInMeters,headingInDegrees,pitchInDegrees,returnValue)	\
    ( (This)->lpVtbl -> CreateFromLocationAndRadiusWithHeadingAndPitch(This,location,radiusInMeters,headingInDegrees,pitchInDegrees,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromLocations(This,locations,returnValue)	\
    ( (This)->lpVtbl -> CreateFromLocations(This,locations,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromLocationsWithHeadingAndPitch(This,locations,headingInDegrees,pitchInDegrees,returnValue)	\
    ( (This)->lpVtbl -> CreateFromLocationsWithHeadingAndPitch(This,locations,headingInDegrees,pitchInDegrees,returnValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0161 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileDataSource";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0161 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0161_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0161_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("C03D9F5E-BE1F-4C69-9969-79467A513C38")
                            IMapTileDataSource : public IInspectable
                            {
                            public:
                            };

                            extern const __declspec(selectany) IID & IID_IMapTileDataSource = __uuidof(IMapTileDataSource);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0162 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileDataSourceFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileDataSourceFactory";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0162 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0162_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0162_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSourceFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("A3920FBD-E446-4648-A74D-FD2C5D557C06")
                            IMapTileDataSourceFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateInstance( 
                                    /* [in] */ __RPC__in_opt IInspectable *outer,
                                    /* [out] */ __RPC__deref_out_opt IInspectable **inner,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource **instance) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapTileDataSourceFactory = __uuidof(IMapTileDataSourceFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstance )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory * This,
            /* [in] */ __RPC__in_opt IInspectable *outer,
            /* [out] */ __RPC__deref_out_opt IInspectable **inner,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource **instance);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_CreateInstance(This,outer,inner,instance)	\
    ( (This)->lpVtbl -> CreateInstance(This,outer,inner,instance) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0163 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileSource[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileSource";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0163 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0163_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0163_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("88A76E4E-2FDF-4567-9255-1100519C8D62")
                            IMapTileSource : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DataSource( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DataSource( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Layer( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Xaml::Controls::Maps::MapTileLayer *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Layer( 
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapTileLayer value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZoomLevelRange( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Xaml::Controls::Maps::MapZoomLevelRange *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ZoomLevelRange( 
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapZoomLevelRange value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Bounds( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeoboundingBox **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Bounds( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeoboundingBox *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AllowOverstretch( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AllowOverstretch( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsFadingEnabled( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IsFadingEnabled( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsTransparencyEnabled( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IsTransparencyEnabled( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsRetryEnabled( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IsRetryEnabled( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZIndex( 
                                    /* [out][retval] */ __RPC__out INT32 *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ZIndex( 
                                    /* [in] */ INT32 value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TilePixelSize( 
                                    /* [out][retval] */ __RPC__out INT32 *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TilePixelSize( 
                                    /* [in] */ INT32 value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Visible( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Visible( 
                                    /* [in] */ boolean value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapTileSource = __uuidof(IMapTileSource);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSource )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DataSource )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZoomLevelRange )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ZoomLevelRange )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bounds )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Bounds )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowOverstretch )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowOverstretch )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsFadingEnabled )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsFadingEnabled )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsTransparencyEnabled )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsTransparencyEnabled )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsRetryEnabled )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsRetryEnabled )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZIndex )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [out][retval] */ __RPC__out INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ZIndex )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TilePixelSize )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [out][retval] */ __RPC__out INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TilePixelSize )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource * This,
            /* [in] */ boolean value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_DataSource(This,value)	\
    ( (This)->lpVtbl -> get_DataSource(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_DataSource(This,value)	\
    ( (This)->lpVtbl -> put_DataSource(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_Layer(This,value)	\
    ( (This)->lpVtbl -> get_Layer(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_Layer(This,value)	\
    ( (This)->lpVtbl -> put_Layer(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_ZoomLevelRange(This,value)	\
    ( (This)->lpVtbl -> get_ZoomLevelRange(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_ZoomLevelRange(This,value)	\
    ( (This)->lpVtbl -> put_ZoomLevelRange(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_Bounds(This,value)	\
    ( (This)->lpVtbl -> get_Bounds(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_Bounds(This,value)	\
    ( (This)->lpVtbl -> put_Bounds(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_AllowOverstretch(This,value)	\
    ( (This)->lpVtbl -> get_AllowOverstretch(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_AllowOverstretch(This,value)	\
    ( (This)->lpVtbl -> put_AllowOverstretch(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_IsFadingEnabled(This,value)	\
    ( (This)->lpVtbl -> get_IsFadingEnabled(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_IsFadingEnabled(This,value)	\
    ( (This)->lpVtbl -> put_IsFadingEnabled(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_IsTransparencyEnabled(This,value)	\
    ( (This)->lpVtbl -> get_IsTransparencyEnabled(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_IsTransparencyEnabled(This,value)	\
    ( (This)->lpVtbl -> put_IsTransparencyEnabled(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_IsRetryEnabled(This,value)	\
    ( (This)->lpVtbl -> get_IsRetryEnabled(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_IsRetryEnabled(This,value)	\
    ( (This)->lpVtbl -> put_IsRetryEnabled(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_ZIndex(This,value)	\
    ( (This)->lpVtbl -> get_ZIndex(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_ZIndex(This,value)	\
    ( (This)->lpVtbl -> put_ZIndex(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_TilePixelSize(This,value)	\
    ( (This)->lpVtbl -> get_TilePixelSize(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_TilePixelSize(This,value)	\
    ( (This)->lpVtbl -> put_TilePixelSize(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_Visible(This,value)	\
    ( (This)->lpVtbl -> get_Visible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_Visible(This,value)	\
    ( (This)->lpVtbl -> put_Visible(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0164 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileSourceStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0164 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0164_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0164_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSourceStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("93FCC93C-7035-4603-99B1-E659921B6093")
                            IMapTileSourceStatics : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DataSourceProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LayerProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZoomLevelRangeProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BoundsProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AllowOverstretchProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsFadingEnabledProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsTransparencyEnabledProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsRetryEnabledProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZIndexProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TilePixelSizeProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VisibleProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapTileSourceStatics = __uuidof(IMapTileSourceStatics);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSourceProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LayerProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZoomLevelRangeProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BoundsProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowOverstretchProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsFadingEnabledProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsTransparencyEnabledProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsRetryEnabledProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZIndexProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TilePixelSizeProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VisibleProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_DataSourceProperty(This,value)	\
    ( (This)->lpVtbl -> get_DataSourceProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_LayerProperty(This,value)	\
    ( (This)->lpVtbl -> get_LayerProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_ZoomLevelRangeProperty(This,value)	\
    ( (This)->lpVtbl -> get_ZoomLevelRangeProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_BoundsProperty(This,value)	\
    ( (This)->lpVtbl -> get_BoundsProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_AllowOverstretchProperty(This,value)	\
    ( (This)->lpVtbl -> get_AllowOverstretchProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_IsFadingEnabledProperty(This,value)	\
    ( (This)->lpVtbl -> get_IsFadingEnabledProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_IsTransparencyEnabledProperty(This,value)	\
    ( (This)->lpVtbl -> get_IsTransparencyEnabledProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_IsRetryEnabledProperty(This,value)	\
    ( (This)->lpVtbl -> get_IsRetryEnabledProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_ZIndexProperty(This,value)	\
    ( (This)->lpVtbl -> get_ZIndexProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_TilePixelSizeProperty(This,value)	\
    ( (This)->lpVtbl -> get_TilePixelSizeProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_VisibleProperty(This,value)	\
    ( (This)->lpVtbl -> get_VisibleProperty(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0165 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileSourceFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileSourceFactory";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0165 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0165_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0165_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSourceFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("CD7F811F-77FA-482B-9D34-71D31D465C48")
                            IMapTileSourceFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateInstance( 
                                    /* [in] */ __RPC__in_opt IInspectable *outer,
                                    /* [out] */ __RPC__deref_out_opt IInspectable **inner,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource **instance) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithDataSource( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource *dataSource,
                                    /* [in] */ __RPC__in_opt IInspectable *outer,
                                    /* [out] */ __RPC__deref_out_opt IInspectable **inner,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource **instance) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithDataSourceAndZoomRange( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource *dataSource,
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapZoomLevelRange zoomLevelRange,
                                    /* [in] */ __RPC__in_opt IInspectable *outer,
                                    /* [out] */ __RPC__deref_out_opt IInspectable **inner,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource **instance) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithDataSourceZoomRangeAndBounds( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource *dataSource,
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapZoomLevelRange zoomLevelRange,
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeoboundingBox *bounds,
                                    /* [in] */ __RPC__in_opt IInspectable *outer,
                                    /* [out] */ __RPC__deref_out_opt IInspectable **inner,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource **instance) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithDataSourceZoomRangeBoundsAndTileSize( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource *dataSource,
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapZoomLevelRange zoomLevelRange,
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeoboundingBox *bounds,
                                    /* [in] */ INT32 tileSizeInPixels,
                                    /* [in] */ __RPC__in_opt IInspectable *outer,
                                    /* [out] */ __RPC__deref_out_opt IInspectable **inner,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource **instance) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapTileSourceFactory = __uuidof(IMapTileSourceFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstance )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory * This,
            /* [in] */ __RPC__in_opt IInspectable *outer,
            /* [out] */ __RPC__deref_out_opt IInspectable **inner,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource **instance);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstanceWithDataSource )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource *dataSource,
            /* [in] */ __RPC__in_opt IInspectable *outer,
            /* [out] */ __RPC__deref_out_opt IInspectable **inner,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource **instance);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstanceWithDataSourceAndZoomRange )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource *dataSource,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange zoomLevelRange,
            /* [in] */ __RPC__in_opt IInspectable *outer,
            /* [out] */ __RPC__deref_out_opt IInspectable **inner,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource **instance);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstanceWithDataSourceZoomRangeAndBounds )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource *dataSource,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange zoomLevelRange,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox *bounds,
            /* [in] */ __RPC__in_opt IInspectable *outer,
            /* [out] */ __RPC__deref_out_opt IInspectable **inner,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource **instance);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstanceWithDataSourceZoomRangeBoundsAndTileSize )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource *dataSource,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange zoomLevelRange,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox *bounds,
            /* [in] */ INT32 tileSizeInPixels,
            /* [in] */ __RPC__in_opt IInspectable *outer,
            /* [out] */ __RPC__deref_out_opt IInspectable **inner,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource **instance);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_CreateInstance(This,outer,inner,instance)	\
    ( (This)->lpVtbl -> CreateInstance(This,outer,inner,instance) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_CreateInstanceWithDataSource(This,dataSource,outer,inner,instance)	\
    ( (This)->lpVtbl -> CreateInstanceWithDataSource(This,dataSource,outer,inner,instance) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_CreateInstanceWithDataSourceAndZoomRange(This,dataSource,zoomLevelRange,outer,inner,instance)	\
    ( (This)->lpVtbl -> CreateInstanceWithDataSourceAndZoomRange(This,dataSource,zoomLevelRange,outer,inner,instance) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_CreateInstanceWithDataSourceZoomRangeAndBounds(This,dataSource,zoomLevelRange,bounds,outer,inner,instance)	\
    ( (This)->lpVtbl -> CreateInstanceWithDataSourceZoomRangeAndBounds(This,dataSource,zoomLevelRange,bounds,outer,inner,instance) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_CreateInstanceWithDataSourceZoomRangeBoundsAndTileSize(This,dataSource,zoomLevelRange,bounds,tileSizeInPixels,outer,inner,instance)	\
    ( (This)->lpVtbl -> CreateInstanceWithDataSourceZoomRangeBoundsAndTileSize(This,dataSource,zoomLevelRange,bounds,tileSizeInPixels,outer,inner,instance) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0166 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IStreetsidePanorama[] = L"Windows.UI.Xaml.Controls.Maps.IStreetsidePanorama";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0166 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0166_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0166_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IStreetsidePanorama */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("6FE00FD8-AD60-4664-B539-B1069F16C5AF")
                            IStreetsidePanorama : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeopoint **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IStreetsidePanorama = __uuidof(IStreetsidePanorama);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_get_Location(This,value)	\
    ( (This)->lpVtbl -> get_Location(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0167 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IStreetsidePanoramaStatics[] = L"Windows.UI.Xaml.Controls.Maps.IStreetsidePanoramaStatics";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0167 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0167_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0167_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IStreetsidePanoramaStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("D3B47F69-54B3-4EC5-B2A0-4F8204576507")
                            IStreetsidePanoramaStatics : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE FindNearbyWithLocationAsync( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *location,
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE FindNearbyWithLocationAndRadiusAsync( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *location,
                                    /* [in] */ DOUBLE radiusInMeters,
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama **returnValue) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IStreetsidePanoramaStatics = __uuidof(IStreetsidePanoramaStatics);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *FindNearbyWithLocationAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *location,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *FindNearbyWithLocationAndRadiusAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *location,
            /* [in] */ DOUBLE radiusInMeters,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama **returnValue);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FindNearbyWithLocationAsync(This,location,returnValue)	\
    ( (This)->lpVtbl -> FindNearbyWithLocationAsync(This,location,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FindNearbyWithLocationAndRadiusAsync(This,location,radiusInMeters,returnValue)	\
    ( (This)->lpVtbl -> FindNearbyWithLocationAndRadiusAsync(This,location,radiusInMeters,returnValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0168 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_ICustomMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.ICustomMapTileDataSource";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0168 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0168_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0168_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSource */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("65DA384A-2DB1-4BE1-B155-3D0C9ECF4799")
                            ICustomMapTileDataSource : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE add_BitmapRequested( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_BitmapRequested( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICustomMapTileDataSource = __uuidof(ICustomMapTileDataSource);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *add_BitmapRequested )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_BitmapRequested )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_add_BitmapRequested(This,value,token)	\
    ( (This)->lpVtbl -> add_BitmapRequested(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_remove_BitmapRequested(This,token)	\
    ( (This)->lpVtbl -> remove_BitmapRequested(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0169 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_ICustomMapTileDataSourceFactory[] = L"Windows.UI.Xaml.Controls.Maps.ICustomMapTileDataSourceFactory";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0169 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0169_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0169_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSourceFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("C8477947-C955-4F22-9444-A1D8D744AF11")
                            ICustomMapTileDataSourceFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateInstance( 
                                    /* [in] */ __RPC__in_opt IInspectable *outer,
                                    /* [out] */ __RPC__deref_out_opt IInspectable **inner,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSource **instance) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICustomMapTileDataSourceFactory = __uuidof(ICustomMapTileDataSourceFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstance )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory * This,
            /* [in] */ __RPC__in_opt IInspectable *outer,
            /* [out] */ __RPC__deref_out_opt IInspectable **inner,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource **instance);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_CreateInstance(This,outer,inner,instance)	\
    ( (This)->lpVtbl -> CreateInstance(This,outer,inner,instance) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0170 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IHttpMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.IHttpMapTileDataSource";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0170 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0170_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0170_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSource */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("9D03CB5C-FD79-4795-87BE-7E54CA0B37D0")
                            IHttpMapTileDataSource : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UriFormatString( 
                                    /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_UriFormatString( 
                                    /* [in] */ __RPC__in HSTRING value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AdditionalRequestHeaders( 
                                    /* [out][retval] */ __RPC__deref_out_opt __FIMap_2_HSTRING_HSTRING **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AllowCaching( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AllowCaching( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_UriRequested( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_UriRequested( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IHttpMapTileDataSource = __uuidof(IHttpMapTileDataSource);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UriFormatString )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_UriFormatString )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource * This,
            /* [in] */ __RPC__in HSTRING value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AdditionalRequestHeaders )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIMap_2_HSTRING_HSTRING **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowCaching )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowCaching )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource * This,
            /* [in] */ boolean value);
        
        HRESULT ( STDMETHODCALLTYPE *add_UriRequested )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_UriRequested )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_get_UriFormatString(This,value)	\
    ( (This)->lpVtbl -> get_UriFormatString(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_put_UriFormatString(This,value)	\
    ( (This)->lpVtbl -> put_UriFormatString(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_get_AdditionalRequestHeaders(This,value)	\
    ( (This)->lpVtbl -> get_AdditionalRequestHeaders(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_get_AllowCaching(This,value)	\
    ( (This)->lpVtbl -> get_AllowCaching(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_put_AllowCaching(This,value)	\
    ( (This)->lpVtbl -> put_AllowCaching(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_add_UriRequested(This,value,token)	\
    ( (This)->lpVtbl -> add_UriRequested(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_remove_UriRequested(This,token)	\
    ( (This)->lpVtbl -> remove_UriRequested(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0171 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IHttpMapTileDataSourceFactory[] = L"Windows.UI.Xaml.Controls.Maps.IHttpMapTileDataSourceFactory";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0171 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0171_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0171_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSourceFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("53B4B107-84DC-4291-89F8-6D0BB612A055")
                            IHttpMapTileDataSourceFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateInstance( 
                                    /* [in] */ __RPC__in_opt IInspectable *outer,
                                    /* [out] */ __RPC__deref_out_opt IInspectable **inner,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSource **instance) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithUriFormatString( 
                                    /* [in] */ __RPC__in HSTRING uriFormatString,
                                    /* [in] */ __RPC__in_opt IInspectable *outer,
                                    /* [out] */ __RPC__deref_out_opt IInspectable **inner,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSource **instance) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IHttpMapTileDataSourceFactory = __uuidof(IHttpMapTileDataSourceFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstance )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory * This,
            /* [in] */ __RPC__in_opt IInspectable *outer,
            /* [out] */ __RPC__deref_out_opt IInspectable **inner,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource **instance);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstanceWithUriFormatString )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory * This,
            /* [in] */ __RPC__in HSTRING uriFormatString,
            /* [in] */ __RPC__in_opt IInspectable *outer,
            /* [out] */ __RPC__deref_out_opt IInspectable **inner,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource **instance);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_CreateInstance(This,outer,inner,instance)	\
    ( (This)->lpVtbl -> CreateInstance(This,outer,inner,instance) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_CreateInstanceWithUriFormatString(This,uriFormatString,outer,inner,instance)	\
    ( (This)->lpVtbl -> CreateInstanceWithUriFormatString(This,uriFormatString,outer,inner,instance) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0172 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_ILocalMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.ILocalMapTileDataSource";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0172 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0172_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0172_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSource */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("616257B5-9108-4F12-8BF4-BB3C8F6274E5")
                            ILocalMapTileDataSource : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UriFormatString( 
                                    /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_UriFormatString( 
                                    /* [in] */ __RPC__in HSTRING value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_UriRequested( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_UriRequested( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ILocalMapTileDataSource = __uuidof(ILocalMapTileDataSource);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UriFormatString )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_UriFormatString )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource * This,
            /* [in] */ __RPC__in HSTRING value);
        
        HRESULT ( STDMETHODCALLTYPE *add_UriRequested )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_UriRequested )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_get_UriFormatString(This,value)	\
    ( (This)->lpVtbl -> get_UriFormatString(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_put_UriFormatString(This,value)	\
    ( (This)->lpVtbl -> put_UriFormatString(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_add_UriRequested(This,value,token)	\
    ( (This)->lpVtbl -> add_UriRequested(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_remove_UriRequested(This,token)	\
    ( (This)->lpVtbl -> remove_UriRequested(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0173 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_ILocalMapTileDataSourceFactory[] = L"Windows.UI.Xaml.Controls.Maps.ILocalMapTileDataSourceFactory";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0173 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0173_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0173_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSourceFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("C5CFE9FC-72AC-4839-8A0D-011F24693C79")
                            ILocalMapTileDataSourceFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateInstance( 
                                    /* [in] */ __RPC__in_opt IInspectable *outer,
                                    /* [out] */ __RPC__deref_out_opt IInspectable **inner,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSource **instance) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithUriFormatString( 
                                    /* [in] */ __RPC__in HSTRING uriFormatString,
                                    /* [in] */ __RPC__in_opt IInspectable *outer,
                                    /* [out] */ __RPC__deref_out_opt IInspectable **inner,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSource **instance) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ILocalMapTileDataSourceFactory = __uuidof(ILocalMapTileDataSourceFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstance )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory * This,
            /* [in] */ __RPC__in_opt IInspectable *outer,
            /* [out] */ __RPC__deref_out_opt IInspectable **inner,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource **instance);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstanceWithUriFormatString )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory * This,
            /* [in] */ __RPC__in HSTRING uriFormatString,
            /* [in] */ __RPC__in_opt IInspectable *outer,
            /* [out] */ __RPC__deref_out_opt IInspectable **inner,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource **instance);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_CreateInstance(This,outer,inner,instance)	\
    ( (This)->lpVtbl -> CreateInstance(This,outer,inner,instance) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_CreateInstanceWithUriFormatString(This,uriFormatString,outer,inner,instance)	\
    ( (This)->lpVtbl -> CreateInstanceWithUriFormatString(This,uriFormatString,outer,inner,instance) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0174 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapIcon[] = L"Windows.UI.Xaml.Controls.Maps.IMapIcon";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0174 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0174_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0174_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapIcon */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("D2096872-23D9-4A2B-8BE0-69F3A85482AB")
                            IMapIcon : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeopoint **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Location( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Title( 
                                    /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Title( 
                                    /* [in] */ __RPC__in HSTRING value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NormalizedAnchorPoint( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::Foundation::Point *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_NormalizedAnchorPoint( 
                                    /* [in] */ ABI::Windows::Foundation::Point value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Image( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Storage::Streams::IRandomAccessStreamReference **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Image( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Storage::Streams::IRandomAccessStreamReference *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapIcon = __uuidof(IMapIcon);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Location )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Title )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon * This,
            /* [in] */ __RPC__in HSTRING value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NormalizedAnchorPoint )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CPoint *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NormalizedAnchorPoint )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CPoint value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Image )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_get_Location(This,value)	\
    ( (This)->lpVtbl -> get_Location(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_put_Location(This,value)	\
    ( (This)->lpVtbl -> put_Location(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_get_Title(This,value)	\
    ( (This)->lpVtbl -> get_Title(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_put_Title(This,value)	\
    ( (This)->lpVtbl -> put_Title(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_get_NormalizedAnchorPoint(This,value)	\
    ( (This)->lpVtbl -> get_NormalizedAnchorPoint(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_put_NormalizedAnchorPoint(This,value)	\
    ( (This)->lpVtbl -> put_NormalizedAnchorPoint(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_get_Image(This,value)	\
    ( (This)->lpVtbl -> get_Image(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_put_Image(This,value)	\
    ( (This)->lpVtbl -> put_Image(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0175 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapIconStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapIconStatics";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0175 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0175_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0175_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapIconStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("DCBC9E56-1190-4B5D-9E56-E5B6724AA328")
                            IMapIconStatics : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LocationProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TitleProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NormalizedAnchorPointProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapIconStatics = __uuidof(IMapIconStatics);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocationProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TitleProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NormalizedAnchorPointProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_get_LocationProperty(This,value)	\
    ( (This)->lpVtbl -> get_LocationProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_get_TitleProperty(This,value)	\
    ( (This)->lpVtbl -> get_TitleProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_get_NormalizedAnchorPointProperty(This,value)	\
    ( (This)->lpVtbl -> get_NormalizedAnchorPointProperty(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0176 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapIcon2[] = L"Windows.UI.Xaml.Controls.Maps.IMapIcon2";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0176 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0176_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0176_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2 */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapIcon2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("611254B9-D8AA-4BBD-A316-BADF06911D63")
                            IMapIcon2 : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CollisionBehaviorDesired( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Xaml::Controls::Maps::MapElementCollisionBehavior *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CollisionBehaviorDesired( 
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapElementCollisionBehavior value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapIcon2 = __uuidof(IMapIcon2);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CollisionBehaviorDesired )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CollisionBehaviorDesired )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2 * This,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_get_CollisionBehaviorDesired(This,value)	\
    ( (This)->lpVtbl -> get_CollisionBehaviorDesired(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_put_CollisionBehaviorDesired(This,value)	\
    ( (This)->lpVtbl -> put_CollisionBehaviorDesired(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0177 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapIconStatics2[] = L"Windows.UI.Xaml.Controls.Maps.IMapIconStatics2";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0177 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0177_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0177_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2 */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapIconStatics2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("FF4C306A-CF76-46AB-A12F-B603B986C696")
                            IMapIconStatics2 : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CollisionBehaviorDesiredProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapIconStatics2 = __uuidof(IMapIconStatics2);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CollisionBehaviorDesiredProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_get_CollisionBehaviorDesiredProperty(This,value)	\
    ( (This)->lpVtbl -> get_CollisionBehaviorDesiredProperty(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0178 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapPolygon[] = L"Windows.UI.Xaml.Controls.Maps.IMapPolygon";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0178 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0178_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0178_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapPolygon */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("ABDA2285-4926-4C3A-A5F9-19DF7F69DB3D")
                            IMapPolygon : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Path( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeopath **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Path( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopath *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StrokeColor( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Color *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StrokeColor( 
                                    /* [in] */ ABI::Windows::UI::Color value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StrokeThickness( 
                                    /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StrokeThickness( 
                                    /* [in] */ DOUBLE value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StrokeDashed( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StrokeDashed( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FillColor( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Color *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FillColor( 
                                    /* [in] */ ABI::Windows::UI::Color value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapPolygon = __uuidof(IMapPolygon);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StrokeColor )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StrokeColor )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StrokeThickness )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StrokeThickness )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This,
            /* [in] */ DOUBLE value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StrokeDashed )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StrokeDashed )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FillColor )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FillColor )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_get_Path(This,value)	\
    ( (This)->lpVtbl -> get_Path(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_put_Path(This,value)	\
    ( (This)->lpVtbl -> put_Path(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_get_StrokeColor(This,value)	\
    ( (This)->lpVtbl -> get_StrokeColor(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_put_StrokeColor(This,value)	\
    ( (This)->lpVtbl -> put_StrokeColor(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_get_StrokeThickness(This,value)	\
    ( (This)->lpVtbl -> get_StrokeThickness(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_put_StrokeThickness(This,value)	\
    ( (This)->lpVtbl -> put_StrokeThickness(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_get_StrokeDashed(This,value)	\
    ( (This)->lpVtbl -> get_StrokeDashed(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_put_StrokeDashed(This,value)	\
    ( (This)->lpVtbl -> put_StrokeDashed(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_get_FillColor(This,value)	\
    ( (This)->lpVtbl -> get_FillColor(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_put_FillColor(This,value)	\
    ( (This)->lpVtbl -> put_FillColor(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0179 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapPolygonStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapPolygonStatics";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0179 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0179_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0179_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapPolygonStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("37F573BE-097B-424C-87CC-2EE042FDA6D2")
                            IMapPolygonStatics : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PathProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StrokeThicknessProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StrokeDashedProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapPolygonStatics = __uuidof(IMapPolygonStatics);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PathProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StrokeThicknessProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StrokeDashedProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_get_PathProperty(This,value)	\
    ( (This)->lpVtbl -> get_PathProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_get_StrokeThicknessProperty(This,value)	\
    ( (This)->lpVtbl -> get_StrokeThicknessProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_get_StrokeDashedProperty(This,value)	\
    ( (This)->lpVtbl -> get_StrokeDashedProperty(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0180 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapPolygon2[] = L"Windows.UI.Xaml.Controls.Maps.IMapPolygon2";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0180 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0180_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0180_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2 */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapPolygon2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("96C8A11E-636B-4018-9C2E-ACC9122A01B2")
                            IMapPolygon2 : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Paths( 
                                    /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CDevices__CGeolocation__CGeopath **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapPolygon2 = __uuidof(IMapPolygon2);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Paths )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CDevices__CGeolocation__CGeopath **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_get_Paths(This,value)	\
    ( (This)->lpVtbl -> get_Paths(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0181 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapPolyline[] = L"Windows.UI.Xaml.Controls.Maps.IMapPolyline";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0181 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0181_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0181_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapPolyline */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("FBAD24A2-24DF-4A86-8FFA-0F8F4D9EC17D")
                            IMapPolyline : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Path( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeopath **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Path( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopath *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StrokeColor( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Color *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StrokeColor( 
                                    /* [in] */ ABI::Windows::UI::Color value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StrokeThickness( 
                                    /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StrokeThickness( 
                                    /* [in] */ DOUBLE value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StrokeDashed( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StrokeDashed( 
                                    /* [in] */ boolean value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapPolyline = __uuidof(IMapPolyline);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StrokeColor )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StrokeColor )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StrokeThickness )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StrokeThickness )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline * This,
            /* [in] */ DOUBLE value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StrokeDashed )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StrokeDashed )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline * This,
            /* [in] */ boolean value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_get_Path(This,value)	\
    ( (This)->lpVtbl -> get_Path(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_put_Path(This,value)	\
    ( (This)->lpVtbl -> put_Path(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_get_StrokeColor(This,value)	\
    ( (This)->lpVtbl -> get_StrokeColor(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_put_StrokeColor(This,value)	\
    ( (This)->lpVtbl -> put_StrokeColor(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_get_StrokeThickness(This,value)	\
    ( (This)->lpVtbl -> get_StrokeThickness(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_put_StrokeThickness(This,value)	\
    ( (This)->lpVtbl -> put_StrokeThickness(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_get_StrokeDashed(This,value)	\
    ( (This)->lpVtbl -> get_StrokeDashed(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_put_StrokeDashed(This,value)	\
    ( (This)->lpVtbl -> put_StrokeDashed(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0182 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapPolylineStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapPolylineStatics";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0182 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0182_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0182_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapPolylineStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("61FDE44B-1DDF-4303-B809-EC87F58AD065")
                            IMapPolylineStatics : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PathProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StrokeDashedProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapPolylineStatics = __uuidof(IMapPolylineStatics);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PathProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StrokeDashedProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_get_PathProperty(This,value)	\
    ( (This)->lpVtbl -> get_PathProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_get_StrokeDashedProperty(This,value)	\
    ( (This)->lpVtbl -> get_StrokeDashedProperty(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0183 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IStreetsideExperience[] = L"Windows.UI.Xaml.Controls.Maps.IStreetsideExperience";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0183 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0183_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0183_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IStreetsideExperience */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("A558AEC9-E30C-46C8-8116-484691675558")
                            IStreetsideExperience : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AddressTextVisible( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AddressTextVisible( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CursorVisible( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CursorVisible( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OverviewMapVisible( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OverviewMapVisible( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreetLabelsVisible( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StreetLabelsVisible( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ExitButtonVisible( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ExitButtonVisible( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZoomButtonsVisible( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ZoomButtonsVisible( 
                                    /* [in] */ boolean value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IStreetsideExperience = __uuidof(IStreetsideExperience);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AddressTextVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AddressTextVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CursorVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CursorVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OverviewMapVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OverviewMapVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreetLabelsVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreetLabelsVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExitButtonVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExitButtonVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZoomButtonsVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ZoomButtonsVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience * This,
            /* [in] */ boolean value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_get_AddressTextVisible(This,value)	\
    ( (This)->lpVtbl -> get_AddressTextVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_put_AddressTextVisible(This,value)	\
    ( (This)->lpVtbl -> put_AddressTextVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_get_CursorVisible(This,value)	\
    ( (This)->lpVtbl -> get_CursorVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_put_CursorVisible(This,value)	\
    ( (This)->lpVtbl -> put_CursorVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_get_OverviewMapVisible(This,value)	\
    ( (This)->lpVtbl -> get_OverviewMapVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_put_OverviewMapVisible(This,value)	\
    ( (This)->lpVtbl -> put_OverviewMapVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_get_StreetLabelsVisible(This,value)	\
    ( (This)->lpVtbl -> get_StreetLabelsVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_put_StreetLabelsVisible(This,value)	\
    ( (This)->lpVtbl -> put_StreetLabelsVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_get_ExitButtonVisible(This,value)	\
    ( (This)->lpVtbl -> get_ExitButtonVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_put_ExitButtonVisible(This,value)	\
    ( (This)->lpVtbl -> put_ExitButtonVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_get_ZoomButtonsVisible(This,value)	\
    ( (This)->lpVtbl -> get_ZoomButtonsVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_put_ZoomButtonsVisible(This,value)	\
    ( (This)->lpVtbl -> put_ZoomButtonsVisible(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0184 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IStreetsideExperienceFactory[] = L"Windows.UI.Xaml.Controls.Maps.IStreetsideExperienceFactory";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0184 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0184_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0184_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IStreetsideExperienceFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("7A5BCF3C-649E-4342-9995-68A6CF5961A7")
                            IStreetsideExperienceFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithPanorama( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IStreetsidePanorama *panorama,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IStreetsideExperience **instance) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithPanoramaHeadingPitchAndFieldOfView( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IStreetsidePanorama *panorama,
                                    /* [in] */ DOUBLE headingInDegrees,
                                    /* [in] */ DOUBLE pitchInDegrees,
                                    /* [in] */ DOUBLE fieldOfViewInDegrees,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IStreetsideExperience **instance) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IStreetsideExperienceFactory = __uuidof(IStreetsideExperienceFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstanceWithPanorama )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama *panorama,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience **instance);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstanceWithPanoramaHeadingPitchAndFieldOfView )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama *panorama,
            /* [in] */ DOUBLE headingInDegrees,
            /* [in] */ DOUBLE pitchInDegrees,
            /* [in] */ DOUBLE fieldOfViewInDegrees,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience **instance);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactoryVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_CreateInstanceWithPanorama(This,panorama,instance)	\
    ( (This)->lpVtbl -> CreateInstanceWithPanorama(This,panorama,instance) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_CreateInstanceWithPanoramaHeadingPitchAndFieldOfView(This,panorama,headingInDegrees,pitchInDegrees,fieldOfViewInDegrees,instance)	\
    ( (This)->lpVtbl -> CreateInstanceWithPanoramaHeadingPitchAndFieldOfView(This,panorama,headingInDegrees,pitchInDegrees,fieldOfViewInDegrees,instance) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0185 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0185 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0185_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0185_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapControl */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("42D0B851-5256-4747-9E6C-0D11E966141E")
                            IMapControl : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Center( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeopoint **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Center( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Children( 
                                    /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CUI__CXaml__CDependencyObject **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorScheme( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Xaml::Controls::Maps::MapColorScheme *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ColorScheme( 
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapColorScheme value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DesiredPitch( 
                                    /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DesiredPitch( 
                                    /* [in] */ DOUBLE value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Heading( 
                                    /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Heading( 
                                    /* [in] */ DOUBLE value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LandmarksVisible( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LandmarksVisible( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LoadingStatus( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Xaml::Controls::Maps::MapLoadingStatus *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MapServiceToken( 
                                    /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MapServiceToken( 
                                    /* [in] */ __RPC__in HSTRING value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MaxZoomLevel( 
                                    /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinZoomLevel( 
                                    /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PedestrianFeaturesVisible( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PedestrianFeaturesVisible( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Pitch( 
                                    /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Style( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Xaml::Controls::Maps::MapStyle *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Style( 
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapStyle value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrafficFlowVisible( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrafficFlowVisible( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TransformOrigin( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::Foundation::Point *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TransformOrigin( 
                                    /* [in] */ ABI::Windows::Foundation::Point value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_WatermarkMode( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Xaml::Controls::Maps::MapWatermarkMode *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_WatermarkMode( 
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapWatermarkMode value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZoomLevel( 
                                    /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ZoomLevel( 
                                    /* [in] */ DOUBLE value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MapElements( 
                                    /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Routes( 
                                    /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TileSources( 
                                    /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource **value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_CenterChanged( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_CenterChanged( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_HeadingChanged( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_HeadingChanged( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_LoadingStatusChanged( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_LoadingStatusChanged( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_MapDoubleTapped( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_MapDoubleTapped( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_MapHolding( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_MapHolding( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_MapTapped( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_MapTapped( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_PitchChanged( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_PitchChanged( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_TransformOriginChanged( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_TransformOriginChanged( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_ZoomLevelChanged( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_ZoomLevelChanged( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE FindMapElementsAtOffset( 
                                    /* [in] */ ABI::Windows::Foundation::Point offset,
                                    /* [out][retval] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE GetLocationFromOffset( 
                                    /* [in] */ ABI::Windows::Foundation::Point offset,
                                    /* [out] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeopoint **location) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE GetOffsetFromLocation( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *location,
                                    /* [out] */ __RPC__out ABI::Windows::Foundation::Point *offset) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE IsLocationInView( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *location,
                                    /* [out] */ __RPC__out boolean *isInView) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE TrySetViewBoundsAsync( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeoboundingBox *bounds,
                                    /* [in] */ __RPC__in_opt __FIReference_1_Windows__CUI__CXaml__CThickness *margin,
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapAnimationKind animation,
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE TrySetViewWithCenterAsync( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *center,
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE TrySetViewWithCenterAndZoomAsync( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *center,
                                    /* [in] */ __RPC__in_opt __FIReference_1_double *zoomLevel,
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE TrySetViewWithCenterZoomHeadingAndPitchAsync( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *center,
                                    /* [in] */ __RPC__in_opt __FIReference_1_double *zoomLevel,
                                    /* [in] */ __RPC__in_opt __FIReference_1_double *heading,
                                    /* [in] */ __RPC__in_opt __FIReference_1_double *desiredPitch,
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE TrySetViewWithCenterZoomHeadingPitchAndAnimationAsync( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *center,
                                    /* [in] */ __RPC__in_opt __FIReference_1_double *zoomLevel,
                                    /* [in] */ __RPC__in_opt __FIReference_1_double *heading,
                                    /* [in] */ __RPC__in_opt __FIReference_1_double *desiredPitch,
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapAnimationKind animation,
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapControl = __uuidof(IMapControl);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Center )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Center )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CUI__CXaml__CDependencyObject **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorScheme )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorScheme )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DesiredPitch )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DesiredPitch )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ DOUBLE value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Heading )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Heading )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ DOUBLE value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LandmarksVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LandmarksVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LoadingStatus )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MapServiceToken )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MapServiceToken )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in HSTRING value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxZoomLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinZoomLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PedestrianFeaturesVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PedestrianFeaturesVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pitch )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrafficFlowVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrafficFlowVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TransformOrigin )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CPoint *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TransformOrigin )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CPoint value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_WatermarkMode )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_WatermarkMode )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZoomLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ZoomLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ DOUBLE value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MapElements )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Routes )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TileSources )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource **value);
        
        HRESULT ( STDMETHODCALLTYPE *add_CenterChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_CenterChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_HeadingChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_HeadingChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_LoadingStatusChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_LoadingStatusChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_MapDoubleTapped )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_MapDoubleTapped )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_MapHolding )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_MapHolding )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_MapTapped )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_MapTapped )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_PitchChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_PitchChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_TransformOriginChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_TransformOriginChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_ZoomLevelChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_ZoomLevelChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *FindMapElementsAtOffset )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CPoint offset,
            /* [out][retval] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocationFromOffset )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CPoint offset,
            /* [out] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint **location);
        
        HRESULT ( STDMETHODCALLTYPE *GetOffsetFromLocation )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *location,
            /* [out] */ __RPC__out __x_ABI_CWindows_CFoundation_CPoint *offset);
        
        HRESULT ( STDMETHODCALLTYPE *IsLocationInView )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *location,
            /* [out] */ __RPC__out boolean *isInView);
        
        HRESULT ( STDMETHODCALLTYPE *TrySetViewBoundsAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox *bounds,
            /* [in] */ __RPC__in_opt __FIReference_1_Windows__CUI__CXaml__CThickness *margin,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind animation,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *TrySetViewWithCenterAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *center,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *TrySetViewWithCenterAndZoomAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *center,
            /* [in] */ __RPC__in_opt __FIReference_1_double *zoomLevel,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *TrySetViewWithCenterZoomHeadingAndPitchAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *center,
            /* [in] */ __RPC__in_opt __FIReference_1_double *zoomLevel,
            /* [in] */ __RPC__in_opt __FIReference_1_double *heading,
            /* [in] */ __RPC__in_opt __FIReference_1_double *desiredPitch,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *TrySetViewWithCenterZoomHeadingPitchAndAnimationAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *center,
            /* [in] */ __RPC__in_opt __FIReference_1_double *zoomLevel,
            /* [in] */ __RPC__in_opt __FIReference_1_double *heading,
            /* [in] */ __RPC__in_opt __FIReference_1_double *desiredPitch,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind animation,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_Center(This,value)	\
    ( (This)->lpVtbl -> get_Center(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_Center(This,value)	\
    ( (This)->lpVtbl -> put_Center(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_Children(This,value)	\
    ( (This)->lpVtbl -> get_Children(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_ColorScheme(This,value)	\
    ( (This)->lpVtbl -> get_ColorScheme(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_ColorScheme(This,value)	\
    ( (This)->lpVtbl -> put_ColorScheme(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_DesiredPitch(This,value)	\
    ( (This)->lpVtbl -> get_DesiredPitch(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_DesiredPitch(This,value)	\
    ( (This)->lpVtbl -> put_DesiredPitch(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_Heading(This,value)	\
    ( (This)->lpVtbl -> get_Heading(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_Heading(This,value)	\
    ( (This)->lpVtbl -> put_Heading(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_LandmarksVisible(This,value)	\
    ( (This)->lpVtbl -> get_LandmarksVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_LandmarksVisible(This,value)	\
    ( (This)->lpVtbl -> put_LandmarksVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_LoadingStatus(This,value)	\
    ( (This)->lpVtbl -> get_LoadingStatus(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_MapServiceToken(This,value)	\
    ( (This)->lpVtbl -> get_MapServiceToken(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_MapServiceToken(This,value)	\
    ( (This)->lpVtbl -> put_MapServiceToken(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_MaxZoomLevel(This,value)	\
    ( (This)->lpVtbl -> get_MaxZoomLevel(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_MinZoomLevel(This,value)	\
    ( (This)->lpVtbl -> get_MinZoomLevel(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_PedestrianFeaturesVisible(This,value)	\
    ( (This)->lpVtbl -> get_PedestrianFeaturesVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_PedestrianFeaturesVisible(This,value)	\
    ( (This)->lpVtbl -> put_PedestrianFeaturesVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_Pitch(This,value)	\
    ( (This)->lpVtbl -> get_Pitch(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_Style(This,value)	\
    ( (This)->lpVtbl -> get_Style(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_Style(This,value)	\
    ( (This)->lpVtbl -> put_Style(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_TrafficFlowVisible(This,value)	\
    ( (This)->lpVtbl -> get_TrafficFlowVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_TrafficFlowVisible(This,value)	\
    ( (This)->lpVtbl -> put_TrafficFlowVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_TransformOrigin(This,value)	\
    ( (This)->lpVtbl -> get_TransformOrigin(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_TransformOrigin(This,value)	\
    ( (This)->lpVtbl -> put_TransformOrigin(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_WatermarkMode(This,value)	\
    ( (This)->lpVtbl -> get_WatermarkMode(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_WatermarkMode(This,value)	\
    ( (This)->lpVtbl -> put_WatermarkMode(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_ZoomLevel(This,value)	\
    ( (This)->lpVtbl -> get_ZoomLevel(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_ZoomLevel(This,value)	\
    ( (This)->lpVtbl -> put_ZoomLevel(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_MapElements(This,value)	\
    ( (This)->lpVtbl -> get_MapElements(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_Routes(This,value)	\
    ( (This)->lpVtbl -> get_Routes(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_TileSources(This,value)	\
    ( (This)->lpVtbl -> get_TileSources(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_CenterChanged(This,value,token)	\
    ( (This)->lpVtbl -> add_CenterChanged(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_CenterChanged(This,token)	\
    ( (This)->lpVtbl -> remove_CenterChanged(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_HeadingChanged(This,value,token)	\
    ( (This)->lpVtbl -> add_HeadingChanged(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_HeadingChanged(This,token)	\
    ( (This)->lpVtbl -> remove_HeadingChanged(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_LoadingStatusChanged(This,value,token)	\
    ( (This)->lpVtbl -> add_LoadingStatusChanged(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_LoadingStatusChanged(This,token)	\
    ( (This)->lpVtbl -> remove_LoadingStatusChanged(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_MapDoubleTapped(This,value,token)	\
    ( (This)->lpVtbl -> add_MapDoubleTapped(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_MapDoubleTapped(This,token)	\
    ( (This)->lpVtbl -> remove_MapDoubleTapped(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_MapHolding(This,value,token)	\
    ( (This)->lpVtbl -> add_MapHolding(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_MapHolding(This,token)	\
    ( (This)->lpVtbl -> remove_MapHolding(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_MapTapped(This,value,token)	\
    ( (This)->lpVtbl -> add_MapTapped(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_MapTapped(This,token)	\
    ( (This)->lpVtbl -> remove_MapTapped(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_PitchChanged(This,value,token)	\
    ( (This)->lpVtbl -> add_PitchChanged(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_PitchChanged(This,token)	\
    ( (This)->lpVtbl -> remove_PitchChanged(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_TransformOriginChanged(This,value,token)	\
    ( (This)->lpVtbl -> add_TransformOriginChanged(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_TransformOriginChanged(This,token)	\
    ( (This)->lpVtbl -> remove_TransformOriginChanged(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_ZoomLevelChanged(This,value,token)	\
    ( (This)->lpVtbl -> add_ZoomLevelChanged(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_ZoomLevelChanged(This,token)	\
    ( (This)->lpVtbl -> remove_ZoomLevelChanged(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_FindMapElementsAtOffset(This,offset,returnValue)	\
    ( (This)->lpVtbl -> FindMapElementsAtOffset(This,offset,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_GetLocationFromOffset(This,offset,location)	\
    ( (This)->lpVtbl -> GetLocationFromOffset(This,offset,location) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_GetOffsetFromLocation(This,location,offset)	\
    ( (This)->lpVtbl -> GetOffsetFromLocation(This,location,offset) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_IsLocationInView(This,location,isInView)	\
    ( (This)->lpVtbl -> IsLocationInView(This,location,isInView) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_TrySetViewBoundsAsync(This,bounds,margin,animation,returnValue)	\
    ( (This)->lpVtbl -> TrySetViewBoundsAsync(This,bounds,margin,animation,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_TrySetViewWithCenterAsync(This,center,returnValue)	\
    ( (This)->lpVtbl -> TrySetViewWithCenterAsync(This,center,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_TrySetViewWithCenterAndZoomAsync(This,center,zoomLevel,returnValue)	\
    ( (This)->lpVtbl -> TrySetViewWithCenterAndZoomAsync(This,center,zoomLevel,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_TrySetViewWithCenterZoomHeadingAndPitchAsync(This,center,zoomLevel,heading,desiredPitch,returnValue)	\
    ( (This)->lpVtbl -> TrySetViewWithCenterZoomHeadingAndPitchAsync(This,center,zoomLevel,heading,desiredPitch,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_TrySetViewWithCenterZoomHeadingPitchAndAnimationAsync(This,center,zoomLevel,heading,desiredPitch,animation,returnValue)	\
    ( (This)->lpVtbl -> TrySetViewWithCenterZoomHeadingPitchAndAnimationAsync(This,center,zoomLevel,heading,desiredPitch,animation,returnValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0186 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0186 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0186_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0186_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapControlStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("C2C61795-2147-4F0A-942A-5493A85DE807")
                            IMapControlStatics : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CenterProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChildrenProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorSchemeProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DesiredPitchProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeadingProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LandmarksVisibleProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LoadingStatusProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MapServiceTokenProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PedestrianFeaturesVisibleProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PitchProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StyleProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrafficFlowVisibleProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TransformOriginProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_WatermarkModeProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZoomLevelProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MapElementsProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RoutesProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TileSourcesProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LocationProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE GetLocation( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::IDependencyObject *element,
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Geolocation::IGeopoint **value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE SetLocation( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::IDependencyObject *element,
                                    /* [in] */ __RPC__in_opt ABI::Windows::Devices::Geolocation::IGeopoint *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NormalizedAnchorPointProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE GetNormalizedAnchorPoint( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::IDependencyObject *element,
                                    /* [out][retval] */ __RPC__out ABI::Windows::Foundation::Point *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE SetNormalizedAnchorPoint( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::IDependencyObject *element,
                                    /* [in] */ ABI::Windows::Foundation::Point value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapControlStatics = __uuidof(IMapControlStatics);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CenterProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChildrenProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorSchemeProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DesiredPitchProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeadingProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LandmarksVisibleProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LoadingStatusProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MapServiceTokenProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PedestrianFeaturesVisibleProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PitchProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StyleProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrafficFlowVisibleProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TransformOriginProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_WatermarkModeProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZoomLevelProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MapElementsProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RoutesProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TileSourcesProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocationProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocation )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyObject *element,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint **value);
        
        HRESULT ( STDMETHODCALLTYPE *SetLocation )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyObject *element,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NormalizedAnchorPointProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        HRESULT ( STDMETHODCALLTYPE *GetNormalizedAnchorPoint )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyObject *element,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CPoint *value);
        
        HRESULT ( STDMETHODCALLTYPE *SetNormalizedAnchorPoint )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyObject *element,
            /* [in] */ __x_ABI_CWindows_CFoundation_CPoint value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStaticsVtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_CenterProperty(This,value)	\
    ( (This)->lpVtbl -> get_CenterProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_ChildrenProperty(This,value)	\
    ( (This)->lpVtbl -> get_ChildrenProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_ColorSchemeProperty(This,value)	\
    ( (This)->lpVtbl -> get_ColorSchemeProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_DesiredPitchProperty(This,value)	\
    ( (This)->lpVtbl -> get_DesiredPitchProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_HeadingProperty(This,value)	\
    ( (This)->lpVtbl -> get_HeadingProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_LandmarksVisibleProperty(This,value)	\
    ( (This)->lpVtbl -> get_LandmarksVisibleProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_LoadingStatusProperty(This,value)	\
    ( (This)->lpVtbl -> get_LoadingStatusProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_MapServiceTokenProperty(This,value)	\
    ( (This)->lpVtbl -> get_MapServiceTokenProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_PedestrianFeaturesVisibleProperty(This,value)	\
    ( (This)->lpVtbl -> get_PedestrianFeaturesVisibleProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_PitchProperty(This,value)	\
    ( (This)->lpVtbl -> get_PitchProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_StyleProperty(This,value)	\
    ( (This)->lpVtbl -> get_StyleProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_TrafficFlowVisibleProperty(This,value)	\
    ( (This)->lpVtbl -> get_TrafficFlowVisibleProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_TransformOriginProperty(This,value)	\
    ( (This)->lpVtbl -> get_TransformOriginProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_WatermarkModeProperty(This,value)	\
    ( (This)->lpVtbl -> get_WatermarkModeProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_ZoomLevelProperty(This,value)	\
    ( (This)->lpVtbl -> get_ZoomLevelProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_MapElementsProperty(This,value)	\
    ( (This)->lpVtbl -> get_MapElementsProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_RoutesProperty(This,value)	\
    ( (This)->lpVtbl -> get_RoutesProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_TileSourcesProperty(This,value)	\
    ( (This)->lpVtbl -> get_TileSourcesProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_LocationProperty(This,value)	\
    ( (This)->lpVtbl -> get_LocationProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_GetLocation(This,element,value)	\
    ( (This)->lpVtbl -> GetLocation(This,element,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_SetLocation(This,element,value)	\
    ( (This)->lpVtbl -> SetLocation(This,element,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_NormalizedAnchorPointProperty(This,value)	\
    ( (This)->lpVtbl -> get_NormalizedAnchorPointProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_GetNormalizedAnchorPoint(This,element,value)	\
    ( (This)->lpVtbl -> GetNormalizedAnchorPoint(This,element,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_SetNormalizedAnchorPoint(This,element,value)	\
    ( (This)->lpVtbl -> SetNormalizedAnchorPoint(This,element,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0187 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl2[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl2";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0187 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0187_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0187_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapControl2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("E1FD644D-96EC-4065-B0F0-75281DA3654D")
                            IMapControl2 : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessLandmarksVisible( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusinessLandmarksVisible( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TransitFeaturesVisible( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TransitFeaturesVisible( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PanInteractionMode( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Xaml::Controls::Maps::MapPanInteractionMode *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PanInteractionMode( 
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapPanInteractionMode value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RotateInteractionMode( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Xaml::Controls::Maps::MapInteractionMode *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RotateInteractionMode( 
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapInteractionMode value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TiltInteractionMode( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Xaml::Controls::Maps::MapInteractionMode *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TiltInteractionMode( 
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapInteractionMode value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZoomInteractionMode( 
                                    /* [out][retval] */ __RPC__out ABI::Windows::UI::Xaml::Controls::Maps::MapInteractionMode *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ZoomInteractionMode( 
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapInteractionMode value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Is3DSupported( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsStreetsideSupported( 
                                    /* [out][retval] */ __RPC__out boolean *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Scene( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapScene **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Scene( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapScene *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ActualCamera( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TargetCamera( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CustomExperience( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapCustomExperience **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CustomExperience( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapCustomExperience *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_MapElementClick( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_MapElementClick( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_MapElementPointerEntered( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_MapElementPointerEntered( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_MapElementPointerExited( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_MapElementPointerExited( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_ActualCameraChanged( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_ActualCameraChanged( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_ActualCameraChanging( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_ActualCameraChanging( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_TargetCameraChanged( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_TargetCameraChanged( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_CustomExperienceChanged( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_CustomExperienceChanged( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE StartContinuousRotate( 
                                    /* [in] */ DOUBLE rateInDegreesPerSecond) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE StopContinuousRotate( void) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE StartContinuousTilt( 
                                    /* [in] */ DOUBLE rateInDegreesPerSecond) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE StopContinuousTilt( void) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE StartContinuousZoom( 
                                    /* [in] */ DOUBLE rateOfChangePerSecond) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE StopContinuousZoom( void) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE TryRotateAsync( 
                                    /* [in] */ DOUBLE degrees,
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE TryRotateToAsync( 
                                    /* [in] */ DOUBLE angleInDegrees,
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE TryTiltAsync( 
                                    /* [in] */ DOUBLE degrees,
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE TryTiltToAsync( 
                                    /* [in] */ DOUBLE angleInDegrees,
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE TryZoomInAsync( 
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE TryZoomOutAsync( 
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE TryZoomToAsync( 
                                    /* [in] */ DOUBLE zoomLevel,
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE TrySetSceneAsync( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapScene *scene,
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE TrySetSceneWithAnimationAsync( 
                                    /* [in] */ __RPC__in_opt ABI::Windows::UI::Xaml::Controls::Maps::IMapScene *scene,
                                    /* [in] */ ABI::Windows::UI::Xaml::Controls::Maps::MapAnimationKind animationKind,
                                    /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapControl2 = __uuidof(IMapControl2);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessLandmarksVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessLandmarksVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TransitFeaturesVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TransitFeaturesVisible )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PanInteractionMode )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PanInteractionMode )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RotateInteractionMode )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RotateInteractionMode )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TiltInteractionMode )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TiltInteractionMode )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZoomInteractionMode )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ZoomInteractionMode )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Is3DSupported )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsStreetsideSupported )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Scene )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Scene )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ActualCamera )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TargetCamera )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomExperience )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomExperience )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_MapElementClick )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_MapElementClick )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_MapElementPointerEntered )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_MapElementPointerEntered )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_MapElementPointerExited )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_MapElementPointerExited )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_ActualCameraChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_ActualCameraChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_ActualCameraChanging )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_ActualCameraChanging )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_TargetCameraChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_TargetCameraChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_CustomExperienceChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_CustomExperienceChanged )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *StartContinuousRotate )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ DOUBLE rateInDegreesPerSecond);
        
        HRESULT ( STDMETHODCALLTYPE *StopContinuousRotate )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartContinuousTilt )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ DOUBLE rateInDegreesPerSecond);
        
        HRESULT ( STDMETHODCALLTYPE *StopContinuousTilt )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartContinuousZoom )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ DOUBLE rateOfChangePerSecond);
        
        HRESULT ( STDMETHODCALLTYPE *StopContinuousZoom )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *TryRotateAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ DOUBLE degrees,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *TryRotateToAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ DOUBLE angleInDegrees,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *TryTiltAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ DOUBLE degrees,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *TryTiltToAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ DOUBLE angleInDegrees,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *TryZoomInAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *TryZoomOutAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *TryZoomToAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ DOUBLE zoomLevel,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *TrySetSceneAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene *scene,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *TrySetSceneWithAnimationAsync )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene *scene,
            /* [in] */ __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind animationKind,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_boolean **returnValue);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_BusinessLandmarksVisible(This,value)	\
    ( (This)->lpVtbl -> get_BusinessLandmarksVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_BusinessLandmarksVisible(This,value)	\
    ( (This)->lpVtbl -> put_BusinessLandmarksVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_TransitFeaturesVisible(This,value)	\
    ( (This)->lpVtbl -> get_TransitFeaturesVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_TransitFeaturesVisible(This,value)	\
    ( (This)->lpVtbl -> put_TransitFeaturesVisible(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_PanInteractionMode(This,value)	\
    ( (This)->lpVtbl -> get_PanInteractionMode(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_PanInteractionMode(This,value)	\
    ( (This)->lpVtbl -> put_PanInteractionMode(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_RotateInteractionMode(This,value)	\
    ( (This)->lpVtbl -> get_RotateInteractionMode(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_RotateInteractionMode(This,value)	\
    ( (This)->lpVtbl -> put_RotateInteractionMode(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_TiltInteractionMode(This,value)	\
    ( (This)->lpVtbl -> get_TiltInteractionMode(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_TiltInteractionMode(This,value)	\
    ( (This)->lpVtbl -> put_TiltInteractionMode(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_ZoomInteractionMode(This,value)	\
    ( (This)->lpVtbl -> get_ZoomInteractionMode(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_ZoomInteractionMode(This,value)	\
    ( (This)->lpVtbl -> put_ZoomInteractionMode(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_Is3DSupported(This,value)	\
    ( (This)->lpVtbl -> get_Is3DSupported(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_IsStreetsideSupported(This,value)	\
    ( (This)->lpVtbl -> get_IsStreetsideSupported(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_Scene(This,value)	\
    ( (This)->lpVtbl -> get_Scene(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_Scene(This,value)	\
    ( (This)->lpVtbl -> put_Scene(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_ActualCamera(This,value)	\
    ( (This)->lpVtbl -> get_ActualCamera(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_TargetCamera(This,value)	\
    ( (This)->lpVtbl -> get_TargetCamera(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_CustomExperience(This,value)	\
    ( (This)->lpVtbl -> get_CustomExperience(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_CustomExperience(This,value)	\
    ( (This)->lpVtbl -> put_CustomExperience(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_add_MapElementClick(This,value,token)	\
    ( (This)->lpVtbl -> add_MapElementClick(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_remove_MapElementClick(This,token)	\
    ( (This)->lpVtbl -> remove_MapElementClick(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_add_MapElementPointerEntered(This,value,token)	\
    ( (This)->lpVtbl -> add_MapElementPointerEntered(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_remove_MapElementPointerEntered(This,token)	\
    ( (This)->lpVtbl -> remove_MapElementPointerEntered(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_add_MapElementPointerExited(This,value,token)	\
    ( (This)->lpVtbl -> add_MapElementPointerExited(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_remove_MapElementPointerExited(This,token)	\
    ( (This)->lpVtbl -> remove_MapElementPointerExited(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_add_ActualCameraChanged(This,value,token)	\
    ( (This)->lpVtbl -> add_ActualCameraChanged(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_remove_ActualCameraChanged(This,token)	\
    ( (This)->lpVtbl -> remove_ActualCameraChanged(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_add_ActualCameraChanging(This,value,token)	\
    ( (This)->lpVtbl -> add_ActualCameraChanging(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_remove_ActualCameraChanging(This,token)	\
    ( (This)->lpVtbl -> remove_ActualCameraChanging(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_add_TargetCameraChanged(This,value,token)	\
    ( (This)->lpVtbl -> add_TargetCameraChanged(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_remove_TargetCameraChanged(This,token)	\
    ( (This)->lpVtbl -> remove_TargetCameraChanged(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_add_CustomExperienceChanged(This,value,token)	\
    ( (This)->lpVtbl -> add_CustomExperienceChanged(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_remove_CustomExperienceChanged(This,token)	\
    ( (This)->lpVtbl -> remove_CustomExperienceChanged(This,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_StartContinuousRotate(This,rateInDegreesPerSecond)	\
    ( (This)->lpVtbl -> StartContinuousRotate(This,rateInDegreesPerSecond) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_StopContinuousRotate(This)	\
    ( (This)->lpVtbl -> StopContinuousRotate(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_StartContinuousTilt(This,rateInDegreesPerSecond)	\
    ( (This)->lpVtbl -> StartContinuousTilt(This,rateInDegreesPerSecond) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_StopContinuousTilt(This)	\
    ( (This)->lpVtbl -> StopContinuousTilt(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_StartContinuousZoom(This,rateOfChangePerSecond)	\
    ( (This)->lpVtbl -> StartContinuousZoom(This,rateOfChangePerSecond) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_StopContinuousZoom(This)	\
    ( (This)->lpVtbl -> StopContinuousZoom(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TryRotateAsync(This,degrees,returnValue)	\
    ( (This)->lpVtbl -> TryRotateAsync(This,degrees,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TryRotateToAsync(This,angleInDegrees,returnValue)	\
    ( (This)->lpVtbl -> TryRotateToAsync(This,angleInDegrees,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TryTiltAsync(This,degrees,returnValue)	\
    ( (This)->lpVtbl -> TryTiltAsync(This,degrees,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TryTiltToAsync(This,angleInDegrees,returnValue)	\
    ( (This)->lpVtbl -> TryTiltToAsync(This,angleInDegrees,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TryZoomInAsync(This,returnValue)	\
    ( (This)->lpVtbl -> TryZoomInAsync(This,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TryZoomOutAsync(This,returnValue)	\
    ( (This)->lpVtbl -> TryZoomOutAsync(This,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TryZoomToAsync(This,zoomLevel,returnValue)	\
    ( (This)->lpVtbl -> TryZoomToAsync(This,zoomLevel,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TrySetSceneAsync(This,scene,returnValue)	\
    ( (This)->lpVtbl -> TrySetSceneAsync(This,scene,returnValue) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TrySetSceneWithAnimationAsync(This,scene,animationKind,returnValue)	\
    ( (This)->lpVtbl -> TrySetSceneWithAnimationAsync(This,scene,animationKind,returnValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0188 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics2[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics2";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0188 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0188_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0188_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapControlStatics2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("04852B93-B446-4D31-9752-1EC69A5996AE")
                            IMapControlStatics2 : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessLandmarksVisibleProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TransitFeaturesVisibleProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PanInteractionModeProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RotateInteractionModeProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TiltInteractionModeProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZoomInteractionModeProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Is3DSupportedProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsStreetsideSupportedProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SceneProperty( 
                                    /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::UI::Xaml::IDependencyProperty **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapControlStatics2 = __uuidof(IMapControlStatics2);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessLandmarksVisibleProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TransitFeaturesVisibleProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PanInteractionModeProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RotateInteractionModeProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TiltInteractionModeProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZoomInteractionModeProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Is3DSupportedProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsStreetsideSupportedProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SceneProperty )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_BusinessLandmarksVisibleProperty(This,value)	\
    ( (This)->lpVtbl -> get_BusinessLandmarksVisibleProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_TransitFeaturesVisibleProperty(This,value)	\
    ( (This)->lpVtbl -> get_TransitFeaturesVisibleProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_PanInteractionModeProperty(This,value)	\
    ( (This)->lpVtbl -> get_PanInteractionModeProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_RotateInteractionModeProperty(This,value)	\
    ( (This)->lpVtbl -> get_RotateInteractionModeProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_TiltInteractionModeProperty(This,value)	\
    ( (This)->lpVtbl -> get_TiltInteractionModeProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_ZoomInteractionModeProperty(This,value)	\
    ( (This)->lpVtbl -> get_ZoomInteractionModeProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_Is3DSupportedProperty(This,value)	\
    ( (This)->lpVtbl -> get_Is3DSupportedProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_IsStreetsideSupportedProperty(This,value)	\
    ( (This)->lpVtbl -> get_IsStreetsideSupportedProperty(This,value) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_SceneProperty(This,value)	\
    ( (This)->lpVtbl -> get_SceneProperty(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0189 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl3[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl3";
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0189 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0189_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0189_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3 */
/* [uuid][object] */ 



/* interface ABI::Windows::UI::Xaml::Controls::Maps::IMapControl3 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace UI {
                namespace Xaml {
                    namespace Controls {
                        namespace Maps {
                            
                            MIDL_INTERFACE("586328F8-8CDD-40AE-9338-AF2A7BE845E5")
                            IMapControl3 : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE add_MapRightTapped( 
                                    /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs *value,
                                    /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_MapRightTapped( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IMapControl3 = __uuidof(IMapControl3);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *add_MapRightTapped )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3 * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs *value,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_MapRightTapped )( 
            __RPC__in __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3 * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3Vtbl;

    interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3
    {
        CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_add_MapRightTapped(This,value,token)	\
    ( (This)->lpVtbl -> add_MapRightTapped(This,value,token) ) 

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_remove_MapRightTapped(This,token)	\
    ( (This)->lpVtbl -> remove_MapRightTapped(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0190 */
/* [local] */ 

#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkClickEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkClickEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkClickEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureClickEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureClickEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkRightTappedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkRightTappedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkRightTappedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureRightTappedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureRightTappedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlDataHelper_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlDataHelper_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlDataHelper[] = L"Windows.UI.Xaml.Controls.Maps.MapControlDataHelper";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangingEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangingEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangingEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCustomExperienceChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCustomExperienceChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapCustomExperienceChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementClickEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementClickEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementPointerEnteredEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementPointerEnteredEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementPointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementPointerExitedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementPointerExitedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementPointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapRightTappedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapRightTappedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTargetCameraChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTargetCameraChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTargetCameraChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestDeferral_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestDeferral_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestDeferral[] = L"Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestDeferral";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequest_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequest_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequest[] = L"Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequest";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestDeferral_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestDeferral_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestDeferral[] = L"Windows.UI.Xaml.Controls.Maps.MapTileUriRequestDeferral";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequest_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequest_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileUriRequest[] = L"Windows.UI.Xaml.Controls.Maps.MapTileUriRequest";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCamera_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCamera_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapCamera[] = L"Windows.UI.Xaml.Controls.Maps.MapCamera";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCustomExperience_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCustomExperience_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapCustomExperience[] = L"Windows.UI.Xaml.Controls.Maps.MapCustomExperience";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElement_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElement_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElement[] = L"Windows.UI.Xaml.Controls.Maps.MapElement";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapInputEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapInputEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapInputEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapInputEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapItemsControl_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapItemsControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapItemsControl[] = L"Windows.UI.Xaml.Controls.Maps.MapItemsControl";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapRouteView_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapRouteView_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapRouteView[] = L"Windows.UI.Xaml.Controls.Maps.MapRouteView";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapScene_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapScene_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapScene[] = L"Windows.UI.Xaml.Controls.Maps.MapScene";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileDataSource_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileDataSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.MapTileDataSource";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileSource_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileSource[] = L"Windows.UI.Xaml.Controls.Maps.MapTileSource";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_StreetsidePanorama_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_StreetsidePanorama_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_StreetsidePanorama[] = L"Windows.UI.Xaml.Controls.Maps.StreetsidePanorama";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_CustomMapTileDataSource_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_CustomMapTileDataSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_CustomMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_HttpMapTileDataSource_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_HttpMapTileDataSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_HttpMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_LocalMapTileDataSource_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_LocalMapTileDataSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_LocalMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapIcon_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapIcon_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapIcon[] = L"Windows.UI.Xaml.Controls.Maps.MapIcon";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapPolygon_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapPolygon_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapPolygon[] = L"Windows.UI.Xaml.Controls.Maps.MapPolygon";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapPolyline_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapPolyline_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapPolyline[] = L"Windows.UI.Xaml.Controls.Maps.MapPolyline";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_StreetsideExperience_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_StreetsideExperience_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_StreetsideExperience[] = L"Windows.UI.Xaml.Controls.Maps.StreetsideExperience";
#endif
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControl_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControl[] = L"Windows.UI.Xaml.Controls.Maps.MapControl";
#endif


/* interface __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0190 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0190_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Eui2Examl2Econtrols2Emaps_0000_0190_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  HSTRING_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out HSTRING * ); 
void                      __RPC_USER  HSTRING_UserFree(     __RPC__in unsigned long *, __RPC__in HSTRING * ); 

unsigned long             __RPC_USER  HSTRING_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out HSTRING * ); 
void                      __RPC_USER  HSTRING_UserFree64(     __RPC__in unsigned long *, __RPC__in HSTRING * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


