//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0014
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Networking.Connectivity.idl";
import "Windows.Security.Credentials.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Enetworking2Econnectivity_h__)")
cpp_quote("#include <Windows.Networking.Connectivity.h>")
cpp_quote("#endif // !defined(__windows2Enetworking2Econnectivity_h__)")
cpp_quote("#if !defined(__windows2Esecurity2Ecredentials_h__)")
cpp_quote("#include <Windows.Security.Credentials.h>")
cpp_quote("#endif // !defined(__windows2Esecurity2Ecredentials_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Foundation
    {
        typedef struct DateTime DateTime;

        interface IAsyncAction;

        typedef struct TimeSpan TimeSpan;
    }
}
namespace Windows
{
    namespace Networking
    {
        namespace Connectivity
        {
            runtimeclass NetworkAdapter;

            runtimeclass NetworkSecuritySettings;
        }
    }
}
namespace Windows
{
    namespace Security
    {
        namespace Credentials
        {
            runtimeclass PasswordCredential;
        }
    }
}
namespace Windows
{
    namespace Devices
    {
        namespace WiFi
        {
            typedef enum WiFiNetworkKind WiFiNetworkKind;

            typedef enum WiFiPhyKind WiFiPhyKind;

            typedef enum WiFiAccessStatus WiFiAccessStatus;

            typedef enum WiFiReconnectionKind WiFiReconnectionKind;

            typedef enum WiFiConnectionStatus WiFiConnectionStatus;

            interface IWiFiAdapterStatics;

            interface IWiFiAdapter;

            interface IWiFiNetworkReport;

            interface IWiFiAvailableNetwork;

            interface IWiFiConnectionResult;

            runtimeclass WiFiAdapter;

            runtimeclass WiFiNetworkReport;

            runtimeclass WiFiAvailableNetwork;

            runtimeclass WiFiConnectionResult;
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace Devices
    {
        namespace WiFi
        {
            declare
            {
                interface Windows.Foundation.Collections.IIterable<Windows.Devices.WiFi.WiFiAdapter*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Devices.WiFi.WiFiAvailableNetwork*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Devices.WiFi.WiFiAdapter*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Devices.WiFi.WiFiAvailableNetwork*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Devices.WiFi.WiFiAdapter*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Devices.WiFi.WiFiAvailableNetwork*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Devices.WiFi.WiFiAccessStatus>;

                interface Windows.Foundation.IAsyncOperation<Windows.Devices.WiFi.WiFiAdapter*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Devices.WiFi.WiFiConnectionResult*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Devices.WiFi.WiFiAdapter*>*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Devices.WiFi.WiFiAdapter*, IInspectable*>;
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace Devices
    {
        namespace WiFi
        {
            [version(0x0A000000)]
            enum WiFiNetworkKind
            {
                Any            = 0,
                Infrastructure = 1,
                Adhoc          = 2
            };

            [version(0x0A000000)]
            enum WiFiPhyKind
            {
                Unknown    = 0,
                Fhss       = 1,
                Dsss       = 2,
                IRBaseband = 3,
                Ofdm       = 4,
                Hrdsss     = 5,
                Erp        = 6,
                HT         = 7,
                Vht        = 8
            };

            [version(0x0A000000)]
            enum WiFiAccessStatus
            {
                Unspecified    = 0,
                Allowed        = 1,
                DeniedByUser   = 2,
                DeniedBySystem = 3
            };

            [version(0x0A000000)]
            enum WiFiReconnectionKind
            {
                Automatic = 0,
                Manual    = 1
            };

            [version(0x0A000000)]
            enum WiFiConnectionStatus
            {
                UnspecifiedFailure                = 0,
                Success                           = 1,
                AccessRevoked                     = 2,
                InvalidCredential                 = 3,
                NetworkNotAvailable               = 4,
                Timeout                           = 5,
                UnsupportedAuthenticationProtocol = 6
            };

            [exclusiveto(Windows.Devices.WiFi.WiFiAdapter)]
            [uuid(DA25FDDD-D24C-43E3-AABD-C4659F730F99)]
            [version(0x0A000000)]
            interface IWiFiAdapterStatics : IInspectable
            {
                HRESULT FindAllAdaptersAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Devices.WiFi.WiFiAdapter*>*>** value);
                HRESULT GetDeviceSelector([out] [retval] HSTRING* deviceSelector);
                [overload("FromIdAsync")] HRESULT FromIdAsync([in] HSTRING deviceId, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Devices.WiFi.WiFiAdapter*>** asyncOp);
                HRESULT RequestAccessAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Devices.WiFi.WiFiAccessStatus>** value);
            }

            [exclusiveto(Windows.Devices.WiFi.WiFiAdapter)]
            [uuid(A6C4E423-3D75-43A4-B9DE-11E26B72D9B0)]
            [version(0x0A000000)]
            interface IWiFiAdapter : IInspectable
            {
                [propget] HRESULT NetworkAdapter([out] [retval] Windows.Networking.Connectivity.NetworkAdapter** value);
                HRESULT ScanAsync([out] [retval] Windows.Foundation.IAsyncAction** value);
                [propget] HRESULT NetworkReport([out] [retval] Windows.Devices.WiFi.WiFiNetworkReport** value);
                [eventadd] HRESULT AvailableNetworksChanged([in] Windows.Foundation.TypedEventHandler<Windows.Devices.WiFi.WiFiAdapter*, IInspectable*>* args, [out] [retval] EventRegistrationToken* eventCookie);
                [eventremove] HRESULT AvailableNetworksChanged([in] EventRegistrationToken eventCookie);
                [overload("ConnectAsync")] HRESULT ConnectAsync([in] Windows.Devices.WiFi.WiFiAvailableNetwork* availableNetwork, [in] Windows.Devices.WiFi.WiFiReconnectionKind reconnectionKind, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Devices.WiFi.WiFiConnectionResult*>** value);
                [overload("ConnectAsync")] HRESULT ConnectWithPasswordCredentialAsync([in] Windows.Devices.WiFi.WiFiAvailableNetwork* availableNetwork, [in] Windows.Devices.WiFi.WiFiReconnectionKind reconnectionKind, [in] Windows.Security.Credentials.PasswordCredential* passwordCredential, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Devices.WiFi.WiFiConnectionResult*>** value);
                [overload("ConnectAsync")] HRESULT ConnectWithPasswordCredentialAndSsidAsync([in] Windows.Devices.WiFi.WiFiAvailableNetwork* availableNetwork, [in] Windows.Devices.WiFi.WiFiReconnectionKind reconnectionKind, [in] Windows.Security.Credentials.PasswordCredential* passwordCredential, [in] HSTRING ssid, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Devices.WiFi.WiFiConnectionResult*>** value);
                HRESULT Disconnect();
            }

            [exclusiveto(Windows.Devices.WiFi.WiFiNetworkReport)]
            [uuid(9524DED2-5911-445E-8194-BE4F1A704895)]
            [version(0x0A000000)]
            interface IWiFiNetworkReport : IInspectable
            {
                [propget] HRESULT Timestamp([out] [retval] Windows.Foundation.DateTime* value);
                [propget] HRESULT AvailableNetworks([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Devices.WiFi.WiFiAvailableNetwork*>** value);
            }

            [exclusiveto(Windows.Devices.WiFi.WiFiAvailableNetwork)]
            [uuid(26E96246-183E-4704-9826-71B4A2F0F668)]
            [version(0x0A000000)]
            interface IWiFiAvailableNetwork : IInspectable
            {
                [propget] HRESULT Uptime([out] [retval] Windows.Foundation.TimeSpan* value);
                [propget] HRESULT Ssid([out] [retval] HSTRING* value);
                [propget] HRESULT Bssid([out] [retval] HSTRING* value);
                [propget] HRESULT ChannelCenterFrequencyInKilohertz([out] [retval] INT32* value);
                [propget] HRESULT NetworkRssiInDecibelMilliwatts([out] [retval] DOUBLE* value);
                [propget] HRESULT SignalBars([out] [retval] BYTE* value);
                [propget] HRESULT NetworkKind([out] [retval] Windows.Devices.WiFi.WiFiNetworkKind* value);
                [propget] HRESULT PhyKind([out] [retval] Windows.Devices.WiFi.WiFiPhyKind* value);
                [propget] HRESULT SecuritySettings([out] [retval] Windows.Networking.Connectivity.NetworkSecuritySettings** value);
                [propget] HRESULT BeaconInterval([out] [retval] Windows.Foundation.TimeSpan* value);
                [propget] HRESULT IsWiFiDirect([out] [retval] boolean* value);
            }

            [exclusiveto(Windows.Devices.WiFi.WiFiConnectionResult)]
            [uuid(143BDFD9-C37D-40BE-A5C8-857BCE85A931)]
            [version(0x0A000000)]
            interface IWiFiConnectionResult : IInspectable
            {
                [propget] HRESULT ConnectionStatus([out] [retval] Windows.Devices.WiFi.WiFiConnectionStatus* value);
            }

            [marshaling_behavior(agile)]
            [static(Windows.Devices.WiFi.IWiFiAdapterStatics, 0x0A000000)]
            [version(0x0A000000)]
            runtimeclass WiFiAdapter
            {
                [default] interface Windows.Devices.WiFi.IWiFiAdapter;
            }

            [marshaling_behavior(agile)]
            [version(0x0A000000)]
            runtimeclass WiFiNetworkReport
            {
                [default] interface Windows.Devices.WiFi.IWiFiNetworkReport;
            }

            [marshaling_behavior(agile)]
            [version(0x0A000000)]
            runtimeclass WiFiAvailableNetwork
            {
                [default] interface Windows.Devices.WiFi.IWiFiAvailableNetwork;
            }

            [marshaling_behavior(agile)]
            [version(0x0A000000)]
            runtimeclass WiFiConnectionResult
            {
                [default] interface Windows.Devices.WiFi.IWiFiConnectionResult;
            }
        }
    }
}
