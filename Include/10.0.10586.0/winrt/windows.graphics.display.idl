//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0014
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Storage.Streams.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#include <Windows.Storage.Streams.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IRandomAccessStream;
        }
    }
}
namespace Windows
{
    namespace Graphics
    {
        namespace Display
        {
            typedef enum DisplayOrientations DisplayOrientations;

            typedef enum ResolutionScale ResolutionScale;

            delegate DisplayPropertiesEventHandler;

            interface IDisplayInformationStatics;

            interface IDisplayInformation;

            interface IDisplayInformation2;

            interface IDisplayInformation3;

            interface IDisplayPropertiesStatics;

            runtimeclass DisplayInformation;

            runtimeclass DisplayProperties;
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace Graphics
    {
        namespace Display
        {
            declare
            {
                interface Windows.Foundation.TypedEventHandler<Windows.Graphics.Display.DisplayInformation*, IInspectable*>;
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace Graphics
    {
        namespace Display
        {
            [flags]
            [version(0x06020000)]
            enum DisplayOrientations
            {
                None             = 0x0,
                Landscape        = 0x1,
                Portrait         = 0x2,
                LandscapeFlipped = 0x4,
                PortraitFlipped  = 0x8
            };

            [deprecated("ResolutionScale is deprecated and might not work on all platforms. For more info, see MSDN.", deprecate, 0x0A000000)]
            [version(0x06020000)]
            enum ResolutionScale
            {
                Invalid         = 0,
                Scale100Percent = 100,
                [version(0x06030000)]
                Scale120Percent = 120,
                [version(0x0A000000)]
                Scale125Percent = 125,
                Scale140Percent = 140,
                [version(0x06030000)]
                Scale150Percent = 150,
                [version(0x06030000)]
                Scale160Percent = 160,
                [version(0x0A000000)]
                Scale175Percent = 175,
                Scale180Percent = 180,
                [version(0x0A000000)]
                Scale200Percent = 200,
                [version(0x06030000)]
                Scale225Percent = 225,
                [version(0x0A000000)]
                Scale250Percent = 250,
                [version(0x0A000000)]
                Scale300Percent = 300,
                [version(0x0A000000)]
                Scale350Percent = 350,
                [version(0x0A000000)]
                Scale400Percent = 400,
                [version(0x0A000000)]
                Scale450Percent = 450,
                [version(0x0A000000)]
                Scale500Percent = 500
            };

            [deprecated("The DisplayProperties type and related event handlers may be altered and or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)]
            [uuid(DBDD8B01-F1A1-46D1-9EE3-543BCC995980)]
            [version(0x06020000)]
            delegate
                HRESULT DisplayPropertiesEventHandler([in] IInspectable* sender);

            [exclusiveto(Windows.Graphics.Display.DisplayInformation)]
            [uuid(C6A02A6C-D452-44DC-BA07-96F3C6ADF9D1)]
            [version(0x06030000)]
            interface IDisplayInformationStatics : IInspectable
            {
                HRESULT GetForCurrentView([out] [retval] Windows.Graphics.Display.DisplayInformation** current);
                [propget] HRESULT AutoRotationPreferences([out] [retval] Windows.Graphics.Display.DisplayOrientations* value);
                [propput] HRESULT AutoRotationPreferences([in] Windows.Graphics.Display.DisplayOrientations value);
                [eventadd] HRESULT DisplayContentsInvalidated([in] Windows.Foundation.TypedEventHandler<Windows.Graphics.Display.DisplayInformation*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DisplayContentsInvalidated([in] EventRegistrationToken token);
            }

            [exclusiveto(Windows.Graphics.Display.DisplayInformation)]
            [uuid(BED112AE-ADC3-4DC9-AE65-851F4D7D4799)]
            [version(0x06030000)]
            interface IDisplayInformation : IInspectable
            {
                [propget] HRESULT CurrentOrientation([out] [retval] Windows.Graphics.Display.DisplayOrientations* value);
                [propget] HRESULT NativeOrientation([out] [retval] Windows.Graphics.Display.DisplayOrientations* value);
                [eventadd] HRESULT OrientationChanged([in] Windows.Foundation.TypedEventHandler<Windows.Graphics.Display.DisplayInformation*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT OrientationChanged([in] EventRegistrationToken token);
                [deprecated("Use RawPixelsPerViewPixel instead of ResolutionScale.  For more info, see MSDN.", deprecate, 0x0A000000)] [propget] HRESULT ResolutionScale([out] [retval] Windows.Graphics.Display.ResolutionScale* value);
                [propget] HRESULT LogicalDpi([out] [retval] FLOAT* value);
                [propget] HRESULT RawDpiX([out] [retval] FLOAT* value);
                [propget] HRESULT RawDpiY([out] [retval] FLOAT* value);
                [eventadd] HRESULT DpiChanged([in] Windows.Foundation.TypedEventHandler<Windows.Graphics.Display.DisplayInformation*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DpiChanged([in] EventRegistrationToken token);
                [propget] HRESULT StereoEnabled([out] [retval] boolean* value);
                [eventadd] HRESULT StereoEnabledChanged([in] Windows.Foundation.TypedEventHandler<Windows.Graphics.Display.DisplayInformation*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT StereoEnabledChanged([in] EventRegistrationToken token);
                HRESULT GetColorProfileAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStream*>** asyncInfo);
                [eventadd] HRESULT ColorProfileChanged([in] Windows.Foundation.TypedEventHandler<Windows.Graphics.Display.DisplayInformation*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ColorProfileChanged([in] EventRegistrationToken token);
            }

            [exclusiveto(Windows.Graphics.Display.DisplayInformation)]
            [uuid(4DCD0021-FAD1-4B8E-8EDF-775887B8BF19)]
            [version(0x0A000000)]
            interface IDisplayInformation2 : IInspectable
                requires
                    Windows.Graphics.Display.IDisplayInformation
            {
                [propget] HRESULT RawPixelsPerViewPixel([out] [retval] DOUBLE* value);
            }

            [exclusiveto(Windows.Graphics.Display.DisplayInformation)]
            [uuid(DB15011D-0F09-4466-8FF3-11DE9A3C929A)]
            [version(0x0A000000)]
            interface IDisplayInformation3 : IInspectable
            {
                [propget] HRESULT DiagonalSizeInInches([out] [retval] Windows.Foundation.IReference<DOUBLE>** value);
            }

            [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)]
            [exclusiveto(Windows.Graphics.Display.DisplayProperties)]
            [uuid(6937ED8D-30EA-4DED-8271-4553FF02F68A)]
            [version(0x06020000)]
            interface IDisplayPropertiesStatics : IInspectable
            {
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [propget] HRESULT CurrentOrientation([out] [retval] Windows.Graphics.Display.DisplayOrientations* value);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [propget] HRESULT NativeOrientation([out] [retval] Windows.Graphics.Display.DisplayOrientations* value);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [propget] HRESULT AutoRotationPreferences([out] [retval] Windows.Graphics.Display.DisplayOrientations* value);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [propput] HRESULT AutoRotationPreferences([in] Windows.Graphics.Display.DisplayOrientations value);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [eventadd] HRESULT OrientationChanged([in] Windows.Graphics.Display.DisplayPropertiesEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [eventremove] HRESULT OrientationChanged([in] EventRegistrationToken token);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [propget] HRESULT ResolutionScale([out] [retval] Windows.Graphics.Display.ResolutionScale* value);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [propget] HRESULT LogicalDpi([out] [retval] FLOAT* value);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [eventadd] HRESULT LogicalDpiChanged([in] Windows.Graphics.Display.DisplayPropertiesEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [eventremove] HRESULT LogicalDpiChanged([in] EventRegistrationToken token);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [propget] HRESULT StereoEnabled([out] [retval] boolean* value);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [eventadd] HRESULT StereoEnabledChanged([in] Windows.Graphics.Display.DisplayPropertiesEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [eventremove] HRESULT StereoEnabledChanged([in] EventRegistrationToken token);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] HRESULT GetColorProfileAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStream*>** asyncInfo);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [eventadd] HRESULT ColorProfileChanged([in] Windows.Graphics.Display.DisplayPropertiesEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [eventremove] HRESULT ColorProfileChanged([in] EventRegistrationToken token);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [eventadd] HRESULT DisplayContentsInvalidated([in] Windows.Graphics.Display.DisplayPropertiesEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)] [eventremove] HRESULT DisplayContentsInvalidated([in] EventRegistrationToken token);
            }

            [marshaling_behavior(agile)]
            [static(Windows.Graphics.Display.IDisplayInformationStatics, 0x06030000)]
            [version(0x06030000)]
            runtimeclass DisplayInformation
            {
                [default] interface Windows.Graphics.Display.IDisplayInformation;
                [version(0x0A000000)] interface Windows.Graphics.Display.IDisplayInformation2;
                [version(0x0A000000)] interface Windows.Graphics.Display.IDisplayInformation3;
            }

            [deprecated("DisplayProperties may be altered or unavailable for releases after Windows 8.1. Instead, use DisplayInformation.", deprecate, 0x06030000)]
            [marshaling_behavior(agile)]
            [static(Windows.Graphics.Display.IDisplayPropertiesStatics, 0x06020000)]
            [version(0x06020000)]
            runtimeclass DisplayProperties
            {
            }
        }
    }
}
