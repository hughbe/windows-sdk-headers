

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 8.00.0613 */
/* @@MIDL_FILE_HEADING(  ) */



/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif /* __RPCNDR_H_VERSION__ */

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __windows2Edevices2Esensors_h__
#define __windows2Edevices2Esensors_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
#define ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
typedef interface __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading;

#endif 	/* ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__ */


#ifndef ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
#define ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
typedef interface __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading;

#endif 	/* ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__ */


#ifndef ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_FWD_DEFINED__
#define ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_FWD_DEFINED__
typedef interface __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport;

#endif 	/* ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_FWD_DEFINED__ */


#ifndef ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_FWD_DEFINED__
#define ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_FWD_DEFINED__
typedef interface __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport;

#endif 	/* ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_FWD_DEFINED__ */


#ifndef ____FIIterator_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__
#define ____FIIterator_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__
typedef interface __FIIterator_1_Windows__CDevices__CSensors__CActivityType __FIIterator_1_Windows__CDevices__CSensors__CActivityType;

#endif 	/* ____FIIterator_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__ */


#ifndef ____FIIterable_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__
#define ____FIIterable_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__
typedef interface __FIIterable_1_Windows__CDevices__CSensors__CActivityType __FIIterable_1_Windows__CDevices__CSensors__CActivityType;

#endif 	/* ____FIIterable_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__ */


#ifndef ____FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define ____FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
typedef interface __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading;

#endif 	/* ____FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__ */


#ifndef ____FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define ____FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
typedef interface __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading;

#endif 	/* ____FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__ */


#ifndef ____FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_FWD_DEFINED__
#define ____FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_FWD_DEFINED__
typedef interface __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading;

#endif 	/* ____FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_FWD_DEFINED__ */


#ifndef ____FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_FWD_DEFINED__
#define ____FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_FWD_DEFINED__
typedef interface __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading;

#endif 	/* ____FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_FWD_DEFINED__ */


#ifndef ____FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define ____FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
typedef interface __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

#endif 	/* ____FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__ */


#ifndef ____FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
typedef interface __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__ */


#ifndef ____FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
typedef interface __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__ */


#ifndef ____FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define ____FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
typedef interface __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

#endif 	/* ____FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__ */


#ifndef ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
#define ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
typedef interface __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading;

#endif 	/* ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__ */


#ifndef ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_FWD_DEFINED__
#define ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_FWD_DEFINED__
typedef interface __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport;

#endif 	/* ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_FWD_DEFINED__ */


#ifndef ____FIVectorView_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__
#define ____FIVectorView_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__
typedef interface __FIVectorView_1_Windows__CDevices__CSensors__CActivityType __FIVectorView_1_Windows__CDevices__CSensors__CActivityType;

#endif 	/* ____FIVectorView_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__ */


#ifndef ____FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define ____FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
typedef interface __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading;

#endif 	/* ____FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__ */


#ifndef ____FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_FWD_DEFINED__
#define ____FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_FWD_DEFINED__
typedef interface __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading;

#endif 	/* ____FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_FWD_DEFINED__ */


#ifndef ____FIVector_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__
#define ____FIVector_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__
typedef interface __FIVector_1_Windows__CDevices__CSensors__CActivityType __FIVector_1_Windows__CDevices__CSensors__CActivityType;

#endif 	/* ____FIVector_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__ */


#ifndef ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_FWD_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_FWD_DEFINED__
typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor;

#endif 	/* ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_FWD_DEFINED__ */


#ifndef ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_FWD_DEFINED__
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_FWD_DEFINED__
typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor;

#endif 	/* ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_FWD_DEFINED__ */


#ifndef ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading;

#endif 	/* ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__ */


#ifndef ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading;

#endif 	/* ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__ */


#ifndef ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_FWD_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_FWD_DEFINED__
typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer;

#endif 	/* ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_FWD_DEFINED__ */


#ifndef ____FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_FWD_DEFINED__
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_FWD_DEFINED__
typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer;

#endif 	/* ____FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_FWD_DEFINED__ */


#ifndef ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
typedef interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading;

#endif 	/* ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__ */


#ifndef ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
#define ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
typedef interface __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading;

#endif 	/* ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__ */


#ifndef ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
typedef interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading;

#endif 	/* ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__ */


#ifndef ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
typedef interface __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading;

#endif 	/* ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISensorDataThreshold;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISensorDataThresholdTriggerDetails;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometerDeviceId;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometerStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometer;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2 __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometer2;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3 __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometer3;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometerReading;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometerReadingChangedEventArgs;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometerShakenEventArgs;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerDeviceId;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2 __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerStatics2;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer __x_ABI_CWindows_CDevices_CSensors_CIInclinometer;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometer;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2 __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometer2;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerReading;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerReadingYawAccuracy;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerReadingChangedEventArgs;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometerDeviceId;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometerStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer __x_ABI_CWindows_CDevices_CSensors_CIGyrometer;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometer;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2 __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometer2;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometerReading;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometerReadingChangedEventArgs;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompassDeviceId;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassStatics __x_ABI_CWindows_CDevices_CSensors_CICompassStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompassStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompass_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompass __x_ABI_CWindows_CDevices_CSensors_CICompass;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompass;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CICompass_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompass2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompass2 __x_ABI_CWindows_CDevices_CSensors_CICompass2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompass2;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CICompass2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassReading __x_ABI_CWindows_CDevices_CSensors_CICompassReading;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompassReading;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompassReadingHeadingAccuracy;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompassReadingChangedEventArgs;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ILightSensorDeviceId;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ILightSensorStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensor __x_ABI_CWindows_CDevices_CSensors_CILightSensor;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ILightSensor;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ILightSensorReading;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ILightSensorReadingChangedEventArgs;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISensorRotationMatrix;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISensorQuaternion;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensorDeviceId;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensorStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2 __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensorStatics2;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensor;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2 __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensor2;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensorReading;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensorReadingYawAccuracy;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensorReadingChangedEventArgs;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISimpleOrientationSensorDeviceId;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISimpleOrientationSensorStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISimpleOrientationSensor;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2 __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISimpleOrientationSensor2;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISimpleOrientationSensorOrientationChangedEventArgs;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometerDeviceId;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometerStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometer;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2 __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometer2;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometerReading;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometerReadingChangedEventArgs;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IActivitySensorStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IActivitySensor;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IActivitySensorReading;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IActivitySensorReadingChangedEventArgs;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IActivitySensorReadingChangeReport;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IActivitySensorTriggerDetails;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IBarometerStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometer __x_ABI_CWindows_CDevices_CSensors_CIBarometer;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IBarometer;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IBarometerReading;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IBarometerReadingChangedEventArgs;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IPedometerReading;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IPedometerReadingChangedEventArgs;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IPedometerStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2 __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IPedometerStatics2;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometer2 __x_ABI_CWindows_CDevices_CSensors_CIPedometer2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IPedometer2;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometer __x_ABI_CWindows_CDevices_CSensors_CIPedometer;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IPedometer;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IPedometerDataThresholdFactory;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IProximitySensorStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IProximitySensor;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IProximitySensorReadingChangedEventArgs;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IProximitySensorReading;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IProximitySensorDataThresholdFactory;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2 __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IProximitySensorStatics2;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAltimeterStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeter __x_ABI_CWindows_CDevices_CSensors_CIAltimeter;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAltimeter;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAltimeterReading;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_FWD_DEFINED__ */


#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAltimeterReadingChangedEventArgs;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_FWD_DEFINED__ */


/* header files for imported files */
#include "inspectable.h"
#include "AsyncInfo.h"
#include "EventToken.h"
#include "Windows.Foundation.h"
#include "Windows.Graphics.Display.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0000 */
/* [local] */ 

#ifdef __cplusplus
} /*extern "C"*/ 
#endif
#include <windows.foundation.collections.h>
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class ActivitySensorReading;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IActivitySensorReading;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0000 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0000_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2455 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2455 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2455_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2455_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0001 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#define DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("d2dab535-0c94-547e-afe3-5527bcbeb9cc"))
IIterator<ABI::Windows::Devices::Sensors::ActivitySensorReading*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReading*, ABI::Windows::Devices::Sensors::IActivitySensorReading*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Devices.Sensors.ActivitySensorReading>"; }
};
typedef IIterator<ABI::Windows::Devices::Sensors::ActivitySensorReading*> __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_t;
#define ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0001 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0001_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2456 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2456 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2456_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2456_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0002 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#define DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("9a34ce03-8c6d-5994-907f-d5c2d19148cb"))
IIterable<ABI::Windows::Devices::Sensors::ActivitySensorReading*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReading*, ABI::Windows::Devices::Sensors::IActivitySensorReading*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Devices.Sensors.ActivitySensorReading>"; }
};
typedef IIterable<ABI::Windows::Devices::Sensors::ActivitySensorReading*> __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_t;
#define ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class ActivitySensorReadingChangeReport;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IActivitySensorReadingChangeReport;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0002 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0002_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2457 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2457 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2457_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2457_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0003 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE
#define DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("9c07034e-8333-59d5-8d60-0e3f0438ac12"))
IIterator<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*, ABI::Windows::Devices::Sensors::IActivitySensorReadingChangeReport*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Devices.Sensors.ActivitySensorReadingChangeReport>"; }
};
typedef IIterator<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*> __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_t;
#define ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_FWD_DEFINED__
#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0003 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0003_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2458 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2458 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2458_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2458_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0004 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE
#define DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("551a4962-9e96-5e6b-8b8a-65ee3d0046f3"))
IIterable<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*, ABI::Windows::Devices::Sensors::IActivitySensorReadingChangeReport*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Devices.Sensors.ActivitySensorReadingChangeReport>"; }
};
typedef IIterable<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*> __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_t;
#define ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_FWD_DEFINED__
#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE */

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
enum ActivityType;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0004 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0004_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2459 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2459 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2459_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2459_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0005 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CDevices__CSensors__CActivityType_USE
#define DEF___FIIterator_1_Windows__CDevices__CSensors__CActivityType_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("40524281-a7c6-50b1-b6f5-0baa95d902c2"))
IIterator<enum ABI::Windows::Devices::Sensors::ActivityType> : IIterator_impl<enum ABI::Windows::Devices::Sensors::ActivityType> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Devices.Sensors.ActivityType>"; }
};
typedef IIterator<enum ABI::Windows::Devices::Sensors::ActivityType> __FIIterator_1_Windows__CDevices__CSensors__CActivityType_t;
#define ____FIIterator_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__
#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CDevices__CSensors__CActivityType_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Windows__CDevices__CSensors__CActivityType_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0005 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0005_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2460 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2460 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2460_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2460_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0006 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CDevices__CSensors__CActivityType_USE
#define DEF___FIIterable_1_Windows__CDevices__CSensors__CActivityType_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("2a04cdfa-5dfd-5178-8731-ade998e4a7f6"))
IIterable<enum ABI::Windows::Devices::Sensors::ActivityType> : IIterable_impl<enum ABI::Windows::Devices::Sensors::ActivityType> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Devices.Sensors.ActivityType>"; }
};
typedef IIterable<enum ABI::Windows::Devices::Sensors::ActivityType> __FIIterable_1_Windows__CDevices__CSensors__CActivityType_t;
#define ____FIIterable_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__
#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CDevices__CSensors__CActivityType_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Windows__CDevices__CSensors__CActivityType_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class PedometerReading;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IPedometerReading;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0006 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0006_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2461 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2461 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2461_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2461_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0007 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("0ac70ed3-8553-5ef3-92f8-438609623087"))
IIterator<ABI::Windows::Devices::Sensors::PedometerReading*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::PedometerReading*, ABI::Windows::Devices::Sensors::IPedometerReading*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Devices.Sensors.PedometerReading>"; }
};
typedef IIterator<ABI::Windows::Devices::Sensors::PedometerReading*> __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_t;
#define ____FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0007 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0007_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2462 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2462 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2462_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2462_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0008 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bbb61a5c-98c3-5718-88fe-5392a7451e2d"))
IIterable<ABI::Windows::Devices::Sensors::PedometerReading*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::PedometerReading*, ABI::Windows::Devices::Sensors::IPedometerReading*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Devices.Sensors.PedometerReading>"; }
};
typedef IIterable<ABI::Windows::Devices::Sensors::PedometerReading*> __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_t;
#define ____FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class ProximitySensorReading;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IProximitySensorReading;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0008 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0008_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2463 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2463 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2463_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2463_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0009 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_USE
#define DEF___FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("1d4f08df-7f49-573b-936a-6d4d4e610930"))
IIterator<ABI::Windows::Devices::Sensors::ProximitySensorReading*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ProximitySensorReading*, ABI::Windows::Devices::Sensors::IProximitySensorReading*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Devices.Sensors.ProximitySensorReading>"; }
};
typedef IIterator<ABI::Windows::Devices::Sensors::ProximitySensorReading*> __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_t;
#define ____FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_FWD_DEFINED__
#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0009 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0009_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2464 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2464 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2464_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2464_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0010 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_USE
#define DEF___FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("301ebccf-11ab-5e90-98ee-bd99c0e3bb76"))
IIterable<ABI::Windows::Devices::Sensors::ProximitySensorReading*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ProximitySensorReading*, ABI::Windows::Devices::Sensors::IProximitySensorReading*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Devices.Sensors.ProximitySensorReading>"; }
};
typedef IIterable<ABI::Windows::Devices::Sensors::ProximitySensorReading*> __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_t;
#define ____FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_FWD_DEFINED__
#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_USE */

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
enum PedometerStepKind;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0010 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0010_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2465 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2465 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2465_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2465_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0011 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("b270d3b8-3dd2-599f-a671-2de5035503da"))
IKeyValuePair<enum ABI::Windows::Devices::Sensors::PedometerStepKind,ABI::Windows::Devices::Sensors::PedometerReading*> : IKeyValuePair_impl<enum ABI::Windows::Devices::Sensors::PedometerStepKind,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::PedometerReading*, ABI::Windows::Devices::Sensors::IPedometerReading*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IKeyValuePair`2<Windows.Devices.Sensors.PedometerStepKind, Windows.Devices.Sensors.PedometerReading>"; }
};
typedef IKeyValuePair<enum ABI::Windows::Devices::Sensors::PedometerStepKind,ABI::Windows::Devices::Sensors::PedometerReading*> __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t;
#define ____FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0011 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0011_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2466 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2466 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2466_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2466_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0012 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("3e88fe66-d4a7-5658-b5cf-1a39e1fc4165"))
IIterator<__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading*> : IIterator_impl<__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Windows.Devices.Sensors.PedometerStepKind, Windows.Devices.Sensors.PedometerReading>>"; }
};
typedef IIterator<__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading*> __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t;
#define ____FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0012 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0012_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2467 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2467 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2467_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2467_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0013 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("098f29cb-bc91-5639-a541-d5a4811ec35b"))
IIterable<__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading*> : IIterable_impl<__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Windows.Devices.Sensors.PedometerStepKind, Windows.Devices.Sensors.PedometerReading>>"; }
};
typedef IIterable<__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading*> __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t;
#define ____FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0013 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0013_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2468 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2468 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2468_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2468_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0014 */
/* [local] */ 

#ifndef DEF___FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("64f0c54c-4865-56bd-ac98-64a98451e362"))
IMapView<enum ABI::Windows::Devices::Sensors::PedometerStepKind,ABI::Windows::Devices::Sensors::PedometerReading*> : IMapView_impl<enum ABI::Windows::Devices::Sensors::PedometerStepKind,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::PedometerReading*, ABI::Windows::Devices::Sensors::IPedometerReading*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IMapView`2<Windows.Devices.Sensors.PedometerStepKind, Windows.Devices.Sensors.PedometerReading>"; }
};
typedef IMapView<enum ABI::Windows::Devices::Sensors::PedometerStepKind,ABI::Windows::Devices::Sensors::PedometerReading*> __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t;
#define ____FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::Collections::__FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0014 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0014_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0014_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2469 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2469 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2469_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2469_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0015 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#define DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("726234a9-7137-55c4-a444-352dcdc30d77"))
IVectorView<ABI::Windows::Devices::Sensors::ActivitySensorReading*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReading*, ABI::Windows::Devices::Sensors::IActivitySensorReading*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.ActivitySensorReading>"; }
};
typedef IVectorView<ABI::Windows::Devices::Sensors::ActivitySensorReading*> __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_t;
#define ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0015 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0015_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2470 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2470 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2470_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2470_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0016 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE
#define DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("10e48a80-dd6a-5704-8f3d-3d46111f391e"))
IVectorView<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*, ABI::Windows::Devices::Sensors::IActivitySensorReadingChangeReport*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.ActivitySensorReadingChangeReport>"; }
};
typedef IVectorView<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*> __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_t;
#define ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_FWD_DEFINED__
#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0016 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0016_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0016_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2471 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2471 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2471_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2471_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0017 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivityType_USE
#define DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivityType_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("fc7a0488-2803-505c-9e62-9200afe416c6"))
IVectorView<enum ABI::Windows::Devices::Sensors::ActivityType> : IVectorView_impl<enum ABI::Windows::Devices::Sensors::ActivityType> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.ActivityType>"; }
};
typedef IVectorView<enum ABI::Windows::Devices::Sensors::ActivityType> __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_t;
#define ____FIVectorView_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__
#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CDevices__CSensors__CActivityType_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivityType_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0017 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0017_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0017_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2472 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2472 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2472_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2472_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0018 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("52076f5c-7838-54d9-9517-5511eb627952"))
IVectorView<ABI::Windows::Devices::Sensors::PedometerReading*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::PedometerReading*, ABI::Windows::Devices::Sensors::IPedometerReading*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.PedometerReading>"; }
};
typedef IVectorView<ABI::Windows::Devices::Sensors::PedometerReading*> __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_t;
#define ____FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0018 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0018_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0018_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2473 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2473 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2473_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2473_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0019 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_USE
#define DEF___FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("7a09d76c-8ced-5e30-b7fe-1ff74d4d9814"))
IVectorView<ABI::Windows::Devices::Sensors::ProximitySensorReading*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ProximitySensorReading*, ABI::Windows::Devices::Sensors::IProximitySensorReading*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.ProximitySensorReading>"; }
};
typedef IVectorView<ABI::Windows::Devices::Sensors::ProximitySensorReading*> __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_t;
#define ____FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_FWD_DEFINED__
#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0019 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0019_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2474 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2474 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2474_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2474_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0020 */
/* [local] */ 

#ifndef DEF___FIVector_1_Windows__CDevices__CSensors__CActivityType_USE
#define DEF___FIVector_1_Windows__CDevices__CSensors__CActivityType_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e3e660d6-d041-5ecd-b18b-fa254e4a860f"))
IVector<enum ABI::Windows::Devices::Sensors::ActivityType> : IVector_impl<enum ABI::Windows::Devices::Sensors::ActivityType> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Windows.Devices.Sensors.ActivityType>"; }
};
typedef IVector<enum ABI::Windows::Devices::Sensors::ActivityType> __FIVector_1_Windows__CDevices__CSensors__CActivityType_t;
#define ____FIVector_1_Windows__CDevices__CSensors__CActivityType_FWD_DEFINED__
#define __FIVector_1_Windows__CDevices__CSensors__CActivityType ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CDevices__CSensors__CActivityType_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1_Windows__CDevices__CSensors__CActivityType_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class ActivitySensor;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IActivitySensor;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0020 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0020_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2475 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2475 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2475_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2475_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0021 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("fb0594f4-93d9-5c2f-b8eb-90f1e9258fdc"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::ActivitySensor*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensor*, ABI::Windows::Devices::Sensors::IActivitySensor*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.ActivitySensor>"; }
};
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::ActivitySensor*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_t;
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_FWD_DEFINED__
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0021 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0021_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2476 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2476 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2476_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2476_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0022 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("c33003ae-e7ae-572b-8d55-7db197356c30"))
IAsyncOperation<ABI::Windows::Devices::Sensors::ActivitySensor*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensor*, ABI::Windows::Devices::Sensors::IActivitySensor*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.ActivitySensor>"; }
};
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::ActivitySensor*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_t;
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_FWD_DEFINED__
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0022 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0022_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2477 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2477 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2477_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2477_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0023 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("adc48d5d-b343-5a58-8454-6e2bc2e0475c"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::ActivitySensorReading*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReading*, ABI::Windows::Devices::Sensors::IActivitySensorReading*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.ActivitySensorReading>"; }
};
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::ActivitySensorReading*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_t;
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0023 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0023_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2478 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2478 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2478_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2478_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0024 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("79a87969-327f-5b7a-a0d3-73eab16de21c"))
IAsyncOperation<ABI::Windows::Devices::Sensors::ActivitySensorReading*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReading*, ABI::Windows::Devices::Sensors::IActivitySensorReading*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.ActivitySensorReading>"; }
};
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::ActivitySensorReading*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_t;
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class Pedometer;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IPedometer;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0024 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0024_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2479 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2479 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2479_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2479_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0025 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a62dbe4e-51de-5a13-ba21-e76df3bc1396"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Pedometer*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Pedometer*, ABI::Windows::Devices::Sensors::IPedometer*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.Pedometer>"; }
};
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Pedometer*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_t;
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_FWD_DEFINED__
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0025 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0025_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2480 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2480 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2480_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2480_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0026 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("9414388f-1b3e-55f5-819b-ab3833646055"))
IAsyncOperation<ABI::Windows::Devices::Sensors::Pedometer*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Pedometer*, ABI::Windows::Devices::Sensors::IPedometer*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.Pedometer>"; }
};
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::Pedometer*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_t;
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_FWD_DEFINED__
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0026 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0026_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2481 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2481 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2481_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2481_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0027 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#define DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("179fb953-2d58-5991-8f5b-ac64219a1101"))
IAsyncOperationCompletedHandler<__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading*> : IAsyncOperationCompletedHandler_impl<__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.ActivitySensorReading>>"; }
};
typedef IAsyncOperationCompletedHandler<__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading*> __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_t;
#define ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0027 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0027_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2482 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2482 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2482_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2482_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0028 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#define DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("cd781b82-7900-51a3-80ce-903e2e0a4f0e"))
IAsyncOperation<__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading*> : IAsyncOperation_impl<__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.ActivitySensorReading>>"; }
};
typedef IAsyncOperation<__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading*> __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_t;
#define ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_FWD_DEFINED__
#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading ABI::Windows::Foundation::__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0028 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0028_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2483 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2483 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2483_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2483_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0029 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("5bbff840-59f2-5108-9205-a0bbf8f9ba68"))
IAsyncOperationCompletedHandler<__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading*> : IAsyncOperationCompletedHandler_impl<__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.PedometerReading>>"; }
};
typedef IAsyncOperationCompletedHandler<__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading*> __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_t;
#define ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0029 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0029_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2484 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2484 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2484_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2484_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0030 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("2aeac503-a3a8-57b3-a8a9-e16b0cd4c0a4"))
IAsyncOperation<__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading*> : IAsyncOperation_impl<__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.PedometerReading>>"; }
};
typedef IAsyncOperation<__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading*> __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_t;
#define ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_FWD_DEFINED__
#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class Accelerometer;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IAccelerometer;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class AccelerometerReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IAccelerometerReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0030 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0030_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0030_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2485 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2485 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2485_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2485_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0031 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a5e83e40-b597-5b83-92f5-5bed3926ca80"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Accelerometer*,ABI::Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Accelerometer*, ABI::Windows::Devices::Sensors::IAccelerometer*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Accelerometer, Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Accelerometer*,ABI::Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class AccelerometerShakenEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IAccelerometerShakenEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0031 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0031_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0031_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2486 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2486 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2486_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2486_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0032 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("3e5d6eaf-f169-5d60-92b0-98cd6bd8f808"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Accelerometer*,ABI::Windows::Devices::Sensors::AccelerometerShakenEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Accelerometer*, ABI::Windows::Devices::Sensors::IAccelerometer*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::AccelerometerShakenEventArgs*, ABI::Windows::Devices::Sensors::IAccelerometerShakenEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Accelerometer, Windows.Devices.Sensors.AccelerometerShakenEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Accelerometer*,ABI::Windows::Devices::Sensors::AccelerometerShakenEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class ActivitySensorReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IActivitySensorReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0032 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0032_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0032_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2487 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2487 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2487_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2487_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0033 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a5b72e01-546c-5fbb-b847-49200aaaaac5"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::ActivitySensor*,ABI::Windows::Devices::Sensors::ActivitySensorReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensor*, ABI::Windows::Devices::Sensors::IActivitySensor*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IActivitySensorReadingChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.ActivitySensor, Windows.Devices.Sensors.ActivitySensorReadingChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::ActivitySensor*,ABI::Windows::Devices::Sensors::ActivitySensorReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class Altimeter;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IAltimeter;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class AltimeterReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IAltimeterReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0033 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0033_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0033_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2488 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2488 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2488_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2488_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0034 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("d775d699-9d74-5473-9c1b-d51a89db6642"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Altimeter*,ABI::Windows::Devices::Sensors::AltimeterReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Altimeter*, ABI::Windows::Devices::Sensors::IAltimeter*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::AltimeterReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IAltimeterReadingChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Altimeter, Windows.Devices.Sensors.AltimeterReadingChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Altimeter*,ABI::Windows::Devices::Sensors::AltimeterReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class Barometer;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IBarometer;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class BarometerReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IBarometerReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0034 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0034_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0034_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2489 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2489 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2489_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2489_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0035 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("e4caf459-d101-5ca5-a4ea-deb0917ae27e"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Barometer*,ABI::Windows::Devices::Sensors::BarometerReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Barometer*, ABI::Windows::Devices::Sensors::IBarometer*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::BarometerReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IBarometerReadingChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Barometer, Windows.Devices.Sensors.BarometerReadingChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Barometer*,ABI::Windows::Devices::Sensors::BarometerReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class Compass;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface ICompass;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class CompassReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface ICompassReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0035 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0035_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0035_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2490 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2490 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2490_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2490_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0036 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("e787d73d-a121-5ae6-b497-ab934837e57f"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Compass*,ABI::Windows::Devices::Sensors::CompassReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Compass*, ABI::Windows::Devices::Sensors::ICompass*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::CompassReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::ICompassReadingChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Compass, Windows.Devices.Sensors.CompassReadingChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Compass*,ABI::Windows::Devices::Sensors::CompassReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class Gyrometer;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IGyrometer;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class GyrometerReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IGyrometerReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0036 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0036_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2491 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2491 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2491_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2491_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0037 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("15171524-5786-59a5-af5b-a01245726c44"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Gyrometer*,ABI::Windows::Devices::Sensors::GyrometerReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Gyrometer*, ABI::Windows::Devices::Sensors::IGyrometer*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::GyrometerReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Gyrometer, Windows.Devices.Sensors.GyrometerReadingChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Gyrometer*,ABI::Windows::Devices::Sensors::GyrometerReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class Inclinometer;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IInclinometer;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class InclinometerReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IInclinometerReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0037 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0037_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2492 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2492 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2492_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2492_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0038 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("6f3b411f-d147-59f1-bbe4-7bec396c7b6e"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Inclinometer*,ABI::Windows::Devices::Sensors::InclinometerReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Inclinometer*, ABI::Windows::Devices::Sensors::IInclinometer*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::InclinometerReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Inclinometer, Windows.Devices.Sensors.InclinometerReadingChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Inclinometer*,ABI::Windows::Devices::Sensors::InclinometerReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class LightSensor;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface ILightSensor;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class LightSensorReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface ILightSensorReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0038 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0038_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2493 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2493 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2493_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2493_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0039 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("1ecf183a-9f0a-5f73-9225-5a33eab5594f"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::LightSensor*,ABI::Windows::Devices::Sensors::LightSensorReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::LightSensor*, ABI::Windows::Devices::Sensors::ILightSensor*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::LightSensorReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.LightSensor, Windows.Devices.Sensors.LightSensorReadingChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::LightSensor*,ABI::Windows::Devices::Sensors::LightSensorReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class Magnetometer;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IMagnetometer;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class MagnetometerReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IMagnetometerReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0039 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0039_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0039_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2494 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2494 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2494_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2494_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0040 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("f9a0da76-c4fd-50ab-98b6-bfd26d6d3d82"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Magnetometer*,ABI::Windows::Devices::Sensors::MagnetometerReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Magnetometer*, ABI::Windows::Devices::Sensors::IMagnetometer*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::MagnetometerReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IMagnetometerReadingChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Magnetometer, Windows.Devices.Sensors.MagnetometerReadingChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Magnetometer*,ABI::Windows::Devices::Sensors::MagnetometerReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class OrientationSensor;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IOrientationSensor;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class OrientationSensorReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IOrientationSensorReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0040 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0040_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0040_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2495 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2495 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2495_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2495_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0041 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("91ae0c43-e1f7-577d-a161-8aaf275eb927"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::OrientationSensor*,ABI::Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::OrientationSensor*, ABI::Windows::Devices::Sensors::IOrientationSensor*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.OrientationSensor, Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::OrientationSensor*,ABI::Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class PedometerReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IPedometerReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0041 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0041_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2496 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2496 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2496_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2496_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0042 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("dcd47693-aad5-5b3c-9c8d-140b8bc2122b"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Pedometer*,ABI::Windows::Devices::Sensors::PedometerReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Pedometer*, ABI::Windows::Devices::Sensors::IPedometer*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::PedometerReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IPedometerReadingChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Pedometer, Windows.Devices.Sensors.PedometerReadingChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Pedometer*,ABI::Windows::Devices::Sensors::PedometerReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class ProximitySensor;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IProximitySensor;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class ProximitySensorReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface IProximitySensorReadingChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0042 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0042_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0042_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2497 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2497 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2497_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2497_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0043 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("9f7e222b-892a-5e68-b08a-10384b5f92b9"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::ProximitySensor*,ABI::Windows::Devices::Sensors::ProximitySensorReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ProximitySensor*, ABI::Windows::Devices::Sensors::IProximitySensor*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ProximitySensorReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IProximitySensorReadingChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.ProximitySensor, Windows.Devices.Sensors.ProximitySensorReadingChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::ProximitySensor*,ABI::Windows::Devices::Sensors::ProximitySensorReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class SimpleOrientationSensor;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface ISimpleOrientationSensor;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class SimpleOrientationSensorOrientationChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
interface ISimpleOrientationSensorOrientationChangedEventArgs;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0043 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0043_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0043_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2498 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2498 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2498_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2498_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0044 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("92437fa7-ea7b-5fc5-8ecf-1b911bea2bfc"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::SimpleOrientationSensor*,ABI::Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::SimpleOrientationSensor*, ABI::Windows::Devices::Sensors::ISimpleOrientationSensor*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs*, ABI::Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.SimpleOrientationSensor, Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::SimpleOrientationSensor*,ABI::Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_t;
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0044 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0044_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0044_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2499 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2499 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2499_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2499_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0045 */
/* [local] */ 

#ifndef DEF___FIReference_1_double_USE
#define DEF___FIReference_1_double_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("2f2d6c29-5473-5f3e-92e7-96572bb990e2"))
IReference<double> : IReference_impl<double> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReference`1<Double>"; }
};
typedef IReference<double> __FIReference_1_double_t;
#define ____FIReference_1_double_FWD_DEFINED__
#define __FIReference_1_double ABI::Windows::Foundation::__FIReference_1_double_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReference_1_double_USE */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0045 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0045_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0045_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2500 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2500 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2500_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2500_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0046 */
/* [local] */ 

#ifndef DEF___FIReference_1_UINT32_USE
#define DEF___FIReference_1_UINT32_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("513ef3af-e784-5325-a91e-97c2b8111cf3"))
IReference<UINT32> : IReference_impl<UINT32> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReference`1<UInt32>"; }
};
typedef IReference<UINT32> __FIReference_1_UINT32_t;
#define ____FIReference_1_UINT32_FWD_DEFINED__
#define __FIReference_1_UINT32 ABI::Windows::Foundation::__FIReference_1_UINT32_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReference_1_UINT32_USE */
#if defined(__cplusplus)
}
#endif // defined(__cplusplus)
#include <Windows.Foundation.h>
#if !defined(__windows2Egraphics2Edisplay_h__)
#include <Windows.Graphics.Display.h>
#endif // !defined(__windows2Egraphics2Edisplay_h__)
#if defined(__cplusplus)
extern "C" {
#endif // defined(__cplusplus)
#if !defined(__cplusplus)
typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

#endif

#if !defined(__cplusplus)
typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CDevices_CSensors_CActivityType __x_ABI_CWindows_CDevices_CSensors_CActivityType;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CDevices_CSensors_CActivitySensorReadingConfidence __x_ABI_CWindows_CDevices_CSensors_CActivitySensorReadingConfidence;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CDevices_CSensors_CSensorType __x_ABI_CWindows_CDevices_CSensors_CSensorType;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind;


#endif /* end if !defined(__cplusplus) */


#endif





















































#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class SensorDataThresholdTriggerDetails;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class AccelerometerReading;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class InclinometerReading;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class GyrometerReading;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class CompassReading;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class LightSensorReading;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class SensorRotationMatrix;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class SensorQuaternion;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class OrientationSensorReading;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class MagnetometerReading;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class ActivitySensorTriggerDetails;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class BarometerReading;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class PedometerDataThreshold;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class ProximitySensorDisplayOnOffController;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class ProximitySensorDataThreshold;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Devices {
namespace Sensors {
class AltimeterReading;
} /*Sensors*/
} /*Devices*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0046 */
/* [local] */ 


#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Foundation {
            
            typedef struct DateTime DateTime;
            
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif


#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Foundation {
            
            typedef struct TimeSpan TimeSpan;
            
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Graphics {
            namespace Display {
                
                typedef enum DisplayOrientations DisplayOrientations;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                
                typedef enum MagnetometerAccuracy MagnetometerAccuracy;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                
                typedef enum ActivityType ActivityType;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                
                typedef enum ActivitySensorReadingConfidence ActivitySensorReadingConfidence;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                
                typedef enum SensorReadingType SensorReadingType;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                
                typedef enum SensorType SensorType;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                
                typedef enum SimpleOrientation SimpleOrientation;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                
                typedef enum PedometerStepKind PedometerStepKind;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif
























































extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0046_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0046_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2501 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2501 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2501_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2501_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0047 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading
#define DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0047 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0047_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0047_v0_0_s_ifspec;

#ifndef ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
#define ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

/* interface __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d2dab535-0c94-547e-afe3-5527bcbeb9cc")
    __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IActivitySensorReading **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::Devices::Sensors::IActivitySensorReading **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl;

    interface __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading
    {
        CONST_VTBL struct __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0048 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0048 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0048_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2502 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2502 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2502_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2502_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0049 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading
#define DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0049 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0049_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0049_v0_0_s_ifspec;

#ifndef ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
#define ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

/* interface __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9a34ce03-8c6d-5994-907f-d5c2d19148cb")
    __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading **first);
        
        END_INTERFACE
    } __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl;

    interface __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading
    {
        CONST_VTBL struct __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0050 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0050 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0050_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0050_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2503 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2503 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2503_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2503_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0051 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport
#define DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0051 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0051_v0_0_s_ifspec;

#ifndef ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__
#define ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__

/* interface __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9c07034e-8333-59d5-8d60-0e3f0438ac12")
    __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IActivitySensorReadingChangeReport **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::Devices::Sensors::IActivitySensorReadingChangeReport **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl;

    interface __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport
    {
        CONST_VTBL struct __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0052 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0052 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0052_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0052_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2504 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2504 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2504_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2504_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0053 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport
#define DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0053 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0053_v0_0_s_ifspec;

#ifndef ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__
#define ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__

/* interface __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("551a4962-9e96-5e6b-8b8a-65ee3d0046f3")
    __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport **first);
        
        END_INTERFACE
    } __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl;

    interface __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport
    {
        CONST_VTBL struct __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0054 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0054 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0054_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0054_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2505 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2505 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2505_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2505_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0055 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CDevices__CSensors__CActivityType
#define DEF___FIIterator_1_Windows__CDevices__CSensors__CActivityType
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0055 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0055_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0055_v0_0_s_ifspec;

#ifndef ____FIIterator_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__
#define ____FIIterator_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__

/* interface __FIIterator_1_Windows__CDevices__CSensors__CActivityType */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1_Windows__CDevices__CSensors__CActivityType */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1_Windows__CDevices__CSensors__CActivityType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("40524281-a7c6-50b1-b6f5-0baa95d902c2")
    __FIIterator_1_Windows__CDevices__CSensors__CActivityType : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __RPC__out enum ABI::Windows::Devices::Sensors::ActivityType *current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) enum ABI::Windows::Devices::Sensors::ActivityType *items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1_Windows__CDevices__CSensors__CActivityTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivityType * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivityType * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [retval][out] */ __RPC__out enum __x_ABI_CWindows_CDevices_CSensors_CActivityType *current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) enum __x_ABI_CWindows_CDevices_CSensors_CActivityType *items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1_Windows__CDevices__CSensors__CActivityTypeVtbl;

    interface __FIIterator_1_Windows__CDevices__CSensors__CActivityType
    {
        CONST_VTBL struct __FIIterator_1_Windows__CDevices__CSensors__CActivityTypeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0056 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1_Windows__CDevices__CSensors__CActivityType */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0056 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0056_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0056_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2506 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2506 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2506_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2506_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0057 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CDevices__CSensors__CActivityType
#define DEF___FIIterable_1_Windows__CDevices__CSensors__CActivityType
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0057 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0057_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0057_v0_0_s_ifspec;

#ifndef ____FIIterable_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__
#define ____FIIterable_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__

/* interface __FIIterable_1_Windows__CDevices__CSensors__CActivityType */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1_Windows__CDevices__CSensors__CActivityType */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1_Windows__CDevices__CSensors__CActivityType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2a04cdfa-5dfd-5178-8731-ade998e4a7f6")
    __FIIterable_1_Windows__CDevices__CSensors__CActivityType : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CDevices__CSensors__CActivityType **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1_Windows__CDevices__CSensors__CActivityTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivityType * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivityType * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CDevices__CSensors__CActivityType **first);
        
        END_INTERFACE
    } __FIIterable_1_Windows__CDevices__CSensors__CActivityTypeVtbl;

    interface __FIIterable_1_Windows__CDevices__CSensors__CActivityType
    {
        CONST_VTBL struct __FIIterable_1_Windows__CDevices__CSensors__CActivityTypeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0058 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1_Windows__CDevices__CSensors__CActivityType */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0058 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0058_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0058_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2507 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2507 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2507_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2507_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0059 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CDevices__CSensors__CPedometerReading
#define DEF___FIIterator_1_Windows__CDevices__CSensors__CPedometerReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0059 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0059_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0059_v0_0_s_ifspec;

#ifndef ____FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#define ____FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

/* interface __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1_Windows__CDevices__CSensors__CPedometerReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0ac70ed3-8553-5ef3-92f8-438609623087")
    __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IPedometerReading **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::Devices::Sensors::IPedometerReading **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1_Windows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1_Windows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __FIIterator_1_Windows__CDevices__CSensors__CPedometerReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0060 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1_Windows__CDevices__CSensors__CPedometerReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0060 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0060_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0060_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2508 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2508 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2508_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2508_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0061 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CDevices__CSensors__CPedometerReading
#define DEF___FIIterable_1_Windows__CDevices__CSensors__CPedometerReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0061 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0061_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0061_v0_0_s_ifspec;

#ifndef ____FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#define ____FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

/* interface __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1_Windows__CDevices__CSensors__CPedometerReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bbb61a5c-98c3-5718-88fe-5392a7451e2d")
    __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1_Windows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading **first);
        
        END_INTERFACE
    } __FIIterable_1_Windows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __FIIterable_1_Windows__CDevices__CSensors__CPedometerReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0062 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1_Windows__CDevices__CSensors__CPedometerReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0062 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0062_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0062_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2509 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2509 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2509_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2509_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0063 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading
#define DEF___FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0063 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0063_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0063_v0_0_s_ifspec;

#ifndef ____FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__
#define ____FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__

/* interface __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1d4f08df-7f49-573b-936a-6d4d4e610930")
    __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IProximitySensorReading **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::Devices::Sensors::IProximitySensorReading **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl;

    interface __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading
    {
        CONST_VTBL struct __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0064 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0064 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0064_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0064_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2510 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2510 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2510_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2510_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0065 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading
#define DEF___FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0065 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0065_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0065_v0_0_s_ifspec;

#ifndef ____FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__
#define ____FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__

/* interface __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("301ebccf-11ab-5e90-98ee-bd99c0e3bb76")
    __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __RPC__in __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading **first);
        
        END_INTERFACE
    } __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl;

    interface __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading
    {
        CONST_VTBL struct __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0066 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0066 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0066_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0066_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2511 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2511 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2511_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2511_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0067 */
/* [local] */ 

#ifndef DEF___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
#define DEF___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0067 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0067_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0067_v0_0_s_ifspec;

#ifndef ____FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#define ____FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

/* interface __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 



/* interface __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b270d3b8-3dd2-599f-a671-2de5035503da")
    __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Key( 
            /* [retval][out] */ __RPC__out enum ABI::Windows::Devices::Sensors::PedometerStepKind *key) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IPedometerReading **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )( 
            __RPC__in __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [retval][out] */ __RPC__out enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind *key);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __RPC__in __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading **value);
        
        END_INTERFACE
    } __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0068 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0068 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0068_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0068_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2512 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2512 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2512_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2512_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0069 */
/* [local] */ 

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
#define DEF___FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0069 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0069_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0069_v0_0_s_ifspec;

#ifndef ____FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#define ____FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

/* interface __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3e88fe66-d4a7-5658-b5cf-1a39e1fc4165")
    __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ __RPC__out boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __RPC__in __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __RPC__in __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __RPC__in __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [retval][out] */ __RPC__out boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0070 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0070 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0070_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0070_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2513 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2513 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2513_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2513_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0071 */
/* [local] */ 

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
#define DEF___FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0071 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0071_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0071_v0_0_s_ifspec;

#ifndef ____FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#define ____FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

/* interface __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("098f29cb-bc91-5639-a541-d5a4811ec35b")
    __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __RPC__in __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading **first);
        
        END_INTERFACE
    } __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0072 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0072 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0072_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0072_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2514 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2514 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2514_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2514_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0073 */
/* [local] */ 

#ifndef DEF___FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
#define DEF___FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0073 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0073_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0073_v0_0_s_ifspec;

#ifndef ____FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#define ____FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

/* interface __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 



/* interface __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("64f0c54c-4865-56bd-ac98-64a98451e362")
    __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Lookup( 
            /* [in] */ enum ABI::Windows::Devices::Sensors::PedometerStepKind key,
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IPedometerReading **value) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ __RPC__out unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HasKey( 
            /* [in] */ enum ABI::Windows::Devices::Sensors::PedometerStepKind key,
            /* [retval][out] */ __RPC__out boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Split( 
            /* [out] */ __RPC__deref_out_opt __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading **firstPartition,
            /* [out] */ __RPC__deref_out_opt __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading **secondPartition) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Lookup )( 
            __RPC__in __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind key,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [retval][out] */ __RPC__out unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *HasKey )( 
            __RPC__in __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind key,
            /* [retval][out] */ __RPC__out boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *Split )( 
            __RPC__in __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__deref_out_opt __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading **firstPartition,
            /* [out] */ __RPC__deref_out_opt __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading **secondPartition);
        
        END_INTERFACE
    } __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_Lookup(This,key,value)	\
    ( (This)->lpVtbl -> Lookup(This,key,value) ) 

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_HasKey(This,key,found)	\
    ( (This)->lpVtbl -> HasKey(This,key,found) ) 

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_Split(This,firstPartition,secondPartition)	\
    ( (This)->lpVtbl -> Split(This,firstPartition,secondPartition) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0074 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0074 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0074_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0074_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2515 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2515 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2515_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2515_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0075 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading
#define DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0075 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0075_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0075_v0_0_s_ifspec;

#ifndef ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
#define ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

/* interface __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("726234a9-7137-55c4-a444-352dcdc30d77")
    __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IActivitySensorReading **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ __RPC__out unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IActivitySensorReading *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::Devices::Sensors::IActivitySensorReading **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [retval][out] */ __RPC__out unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl;

    interface __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading
    {
        CONST_VTBL struct __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0076 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0076 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0076_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0076_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2516 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2516 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2516_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2516_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0077 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport
#define DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0077 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0077_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0077_v0_0_s_ifspec;

#ifndef ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__
#define ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__

/* interface __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10e48a80-dd6a-5704-8f3d-3d46111f391e")
    __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IActivitySensorReadingChangeReport **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ __RPC__out unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IActivitySensorReadingChangeReport *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::Devices::Sensors::IActivitySensorReadingChangeReport **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [retval][out] */ __RPC__out unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl;

    interface __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport
    {
        CONST_VTBL struct __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0078 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0078 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0078_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0078_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2517 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2517 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2517_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2517_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0079 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivityType
#define DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivityType
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0079 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0079_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0079_v0_0_s_ifspec;

#ifndef ____FIVectorView_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__
#define ____FIVectorView_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__

/* interface __FIVectorView_1_Windows__CDevices__CSensors__CActivityType */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1_Windows__CDevices__CSensors__CActivityType */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1_Windows__CDevices__CSensors__CActivityType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fc7a0488-2803-505c-9e62-9200afe416c6")
    __FIVectorView_1_Windows__CDevices__CSensors__CActivityType : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__out enum ABI::Windows::Devices::Sensors::ActivityType *item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ __RPC__out unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ enum ABI::Windows::Devices::Sensors::ActivityType item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) enum ABI::Windows::Devices::Sensors::ActivityType *items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1_Windows__CDevices__CSensors__CActivityTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivityType * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivityType * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__out enum __x_ABI_CWindows_CDevices_CSensors_CActivityType *item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [retval][out] */ __RPC__out unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ enum __x_ABI_CWindows_CDevices_CSensors_CActivityType item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) enum __x_ABI_CWindows_CDevices_CSensors_CActivityType *items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1_Windows__CDevices__CSensors__CActivityTypeVtbl;

    interface __FIVectorView_1_Windows__CDevices__CSensors__CActivityType
    {
        CONST_VTBL struct __FIVectorView_1_Windows__CDevices__CSensors__CActivityTypeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0080 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivityType */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0080 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0080_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0080_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2518 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2518 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2518_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2518_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0081 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading
#define DEF___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0081 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0081_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0081_v0_0_s_ifspec;

#ifndef ____FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#define ____FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

/* interface __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("52076f5c-7838-54d9-9517-5511eb627952")
    __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IPedometerReading **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ __RPC__out unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IPedometerReading *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::Devices::Sensors::IPedometerReading **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [retval][out] */ __RPC__out unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0082 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0082 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0082_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0082_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2519 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2519 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2519_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2519_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0083 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading
#define DEF___FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0083 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0083_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0083_v0_0_s_ifspec;

#ifndef ____FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__
#define ____FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__

/* interface __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7a09d76c-8ced-5e30-b7fe-1ff74d4d9814")
    __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IProximitySensorReading **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ __RPC__out unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IProximitySensorReading *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) ABI::Windows::Devices::Sensors::IProximitySensorReading **items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [retval][out] */ __RPC__out unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading *item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading **items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl;

    interface __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading
    {
        CONST_VTBL struct __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0084 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0084 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0084_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0084_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2520 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2520 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2520_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2520_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0085 */
/* [local] */ 

#ifndef DEF___FIVector_1_Windows__CDevices__CSensors__CActivityType
#define DEF___FIVector_1_Windows__CDevices__CSensors__CActivityType
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0085 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0085_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0085_v0_0_s_ifspec;

#ifndef ____FIVector_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__
#define ____FIVector_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__

/* interface __FIVector_1_Windows__CDevices__CSensors__CActivityType */
/* [unique][uuid][object] */ 



/* interface __FIVector_1_Windows__CDevices__CSensors__CActivityType */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1_Windows__CDevices__CSensors__CActivityType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e3e660d6-d041-5ecd-b18b-fa254e4a860f")
    __FIVector_1_Windows__CDevices__CSensors__CActivityType : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__out enum ABI::Windows::Devices::Sensors::ActivityType *item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ __RPC__out unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CDevices__CSensors__CActivityType **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ enum ABI::Windows::Devices::Sensors::ActivityType item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ enum ABI::Windows::Devices::Sensors::ActivityType item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ enum ABI::Windows::Devices::Sensors::ActivityType item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ enum ABI::Windows::Devices::Sensors::ActivityType item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) enum ABI::Windows::Devices::Sensors::ActivityType *items,
            /* [retval][out] */ __RPC__out unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __RPC__in_ecount_full(count) enum ABI::Windows::Devices::Sensors::ActivityType *value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1_Windows__CDevices__CSensors__CActivityTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __RPC__out enum __x_ABI_CWindows_CDevices_CSensors_CActivityType *item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [retval][out] */ __RPC__out unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CDevices__CSensors__CActivityType **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ enum __x_ABI_CWindows_CDevices_CSensors_CActivityType item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ unsigned int index,
            /* [in] */ enum __x_ABI_CWindows_CDevices_CSensors_CActivityType item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ unsigned int index,
            /* [in] */ enum __x_ABI_CWindows_CDevices_CSensors_CActivityType item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ enum __x_ABI_CWindows_CDevices_CSensors_CActivityType item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) enum __x_ABI_CWindows_CDevices_CSensors_CActivityType *items,
            /* [retval][out] */ __RPC__out unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __RPC__in __FIVector_1_Windows__CDevices__CSensors__CActivityType * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __RPC__in_ecount_full(count) enum __x_ABI_CWindows_CDevices_CSensors_CActivityType *value);
        
        END_INTERFACE
    } __FIVector_1_Windows__CDevices__CSensors__CActivityTypeVtbl;

    interface __FIVector_1_Windows__CDevices__CSensors__CActivityType
    {
        CONST_VTBL struct __FIVector_1_Windows__CDevices__CSensors__CActivityTypeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0086 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1_Windows__CDevices__CSensors__CActivityType */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0086 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0086_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0086_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2521 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2521 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2521_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2521_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0087 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)



/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0087 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0087_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0087_v0_0_s_ifspec;

#ifndef ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__

/* interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fb0594f4-93d9-5c2f-b8eb-90f1e9258fdc")
    __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor *asyncInfo,
            /* [in] */ AsyncStatus status) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor * This,
            /* [in] */ __RPC__in_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor *asyncInfo,
            /* [in] */ AsyncStatus status);
        
        END_INTERFACE
    } __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorVtbl;

    interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor
    {
        CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_Invoke(This,asyncInfo,status)	\
    ( (This)->lpVtbl -> Invoke(This,asyncInfo,status) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0088 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0088 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0088_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0088_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2522 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2522 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2522_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2522_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0089 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0089 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0089_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0089_v0_0_s_ifspec;

#ifndef ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__

/* interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c33003ae-e7ae-572b-8d55-7db197356c30")
    __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor : public IInspectable
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Completed( 
            /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor *handler) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Completed( 
            /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor **handler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetResults( 
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IActivitySensor **results) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Completed )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor * This,
            /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor *handler);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Completed )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor **handler);
        
        HRESULT ( STDMETHODCALLTYPE *GetResults )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor * This,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor **results);
        
        END_INTERFACE
    } __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorVtbl;

    interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor
    {
        CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_put_Completed(This,handler)	\
    ( (This)->lpVtbl -> put_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_get_Completed(This,handler)	\
    ( (This)->lpVtbl -> get_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_GetResults(This,results)	\
    ( (This)->lpVtbl -> GetResults(This,results) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0090 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0090 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0090_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0090_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2523 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2523 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2523_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2523_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0091 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)



/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0091 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0091_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0091_v0_0_s_ifspec;

#ifndef ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

/* interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("adc48d5d-b343-5a58-8454-6e2bc2e0475c")
    __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading *asyncInfo,
            /* [in] */ AsyncStatus status) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [in] */ __RPC__in_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading *asyncInfo,
            /* [in] */ AsyncStatus status);
        
        END_INTERFACE
    } __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl;

    interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading
    {
        CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_Invoke(This,asyncInfo,status)	\
    ( (This)->lpVtbl -> Invoke(This,asyncInfo,status) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0092 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0092 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0092_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0092_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2524 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2524 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2524_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2524_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0093 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0093 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0093_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0093_v0_0_s_ifspec;

#ifndef ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

/* interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("79a87969-327f-5b7a-a0d3-73eab16de21c")
    __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading : public IInspectable
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Completed( 
            /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading *handler) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Completed( 
            /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading **handler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetResults( 
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IActivitySensorReading **results) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Completed )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading *handler);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Completed )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading **handler);
        
        HRESULT ( STDMETHODCALLTYPE *GetResults )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading **results);
        
        END_INTERFACE
    } __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl;

    interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading
    {
        CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_put_Completed(This,handler)	\
    ( (This)->lpVtbl -> put_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_get_Completed(This,handler)	\
    ( (This)->lpVtbl -> get_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_GetResults(This,results)	\
    ( (This)->lpVtbl -> GetResults(This,results) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0094 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0094 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0094_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0094_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2525 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2525 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2525_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2525_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0095 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)



/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0095 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0095_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0095_v0_0_s_ifspec;

#ifndef ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__

/* interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a62dbe4e-51de-5a13-ba21-e76df3bc1396")
    __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer *asyncInfo,
            /* [in] */ AsyncStatus status) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer * This,
            /* [in] */ __RPC__in_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer *asyncInfo,
            /* [in] */ AsyncStatus status);
        
        END_INTERFACE
    } __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometerVtbl;

    interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer
    {
        CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_Invoke(This,asyncInfo,status)	\
    ( (This)->lpVtbl -> Invoke(This,asyncInfo,status) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0096 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0096 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0096_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0096_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2526 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2526 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2526_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2526_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0097 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0097 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0097_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0097_v0_0_s_ifspec;

#ifndef ____FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__

/* interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9414388f-1b3e-55f5-819b-ab3833646055")
    __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer : public IInspectable
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Completed( 
            /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer *handler) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Completed( 
            /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer **handler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetResults( 
            /* [retval][out] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IPedometer **results) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Completed )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer * This,
            /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer *handler);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Completed )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer **handler);
        
        HRESULT ( STDMETHODCALLTYPE *GetResults )( 
            __RPC__in __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer * This,
            /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIPedometer **results);
        
        END_INTERFACE
    } __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometerVtbl;

    interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer
    {
        CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_put_Completed(This,handler)	\
    ( (This)->lpVtbl -> put_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_get_Completed(This,handler)	\
    ( (This)->lpVtbl -> get_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_GetResults(This,results)	\
    ( (This)->lpVtbl -> GetResults(This,results) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0098 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0098 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0098_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0098_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2527 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2527 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2527_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2527_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0099 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading
#define DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)



/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0099 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0099_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0099_v0_0_s_ifspec;

#ifndef ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

/* interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("179fb953-2d58-5991-8f5b-ac64219a1101")
    __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading *asyncInfo,
            /* [in] */ AsyncStatus status) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [in] */ __RPC__in_opt __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading *asyncInfo,
            /* [in] */ AsyncStatus status);
        
        END_INTERFACE
    } __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl;

    interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading
    {
        CONST_VTBL struct __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_Invoke(This,asyncInfo,status)	\
    ( (This)->lpVtbl -> Invoke(This,asyncInfo,status) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0100 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0100 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0100_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0100_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2528 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2528 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2528_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2528_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0101 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading
#define DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0101 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0101_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0101_v0_0_s_ifspec;

#ifndef ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
#define ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

/* interface __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("cd781b82-7900-51a3-80ce-903e2e0a4f0e")
    __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading : public IInspectable
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Completed( 
            /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading *handler) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Completed( 
            /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading **handler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetResults( 
            /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading **results) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Completed )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading *handler);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Completed )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading **handler);
        
        HRESULT ( STDMETHODCALLTYPE *GetResults )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading **results);
        
        END_INTERFACE
    } __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl;

    interface __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading
    {
        CONST_VTBL struct __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_put_Completed(This,handler)	\
    ( (This)->lpVtbl -> put_Completed(This,handler) ) 

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_get_Completed(This,handler)	\
    ( (This)->lpVtbl -> get_Completed(This,handler) ) 

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetResults(This,results)	\
    ( (This)->lpVtbl -> GetResults(This,results) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0102 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0102 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0102_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0102_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2529 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2529 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2529_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2529_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0103 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading
#define DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)



/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0103 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0103_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0103_v0_0_s_ifspec;

#ifndef ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

/* interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5bbff840-59f2-5108-9205-a0bbf8f9ba68")
    __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading *asyncInfo,
            /* [in] */ AsyncStatus status) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ __RPC__in_opt __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading *asyncInfo,
            /* [in] */ AsyncStatus status);
        
        END_INTERFACE
    } __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_Invoke(This,asyncInfo,status)	\
    ( (This)->lpVtbl -> Invoke(This,asyncInfo,status) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0104 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0104 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0104_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0104_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2530 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2530 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2530_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2530_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0105 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading
#define DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0105 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0105_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0105_v0_0_s_ifspec;

#ifndef ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#define ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

/* interface __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2aeac503-a3a8-57b3-a8a9-e16b0cd4c0a4")
    __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading : public IInspectable
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Completed( 
            /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading *handler) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Completed( 
            /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading **handler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetResults( 
            /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading **results) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Completed )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading *handler);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Completed )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading **handler);
        
        HRESULT ( STDMETHODCALLTYPE *GetResults )( 
            __RPC__in __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading * This,
            /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading **results);
        
        END_INTERFACE
    } __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl;

    interface __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading
    {
        CONST_VTBL struct __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_put_Completed(This,handler)	\
    ( (This)->lpVtbl -> put_Completed(This,handler) ) 

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_get_Completed(This,handler)	\
    ( (This)->lpVtbl -> get_Completed(This,handler) ) 

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetResults(This,results)	\
    ( (This)->lpVtbl -> GetResults(This,results) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0106 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0106 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0106_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0106_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2531 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2531 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2531_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2531_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0107 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0107 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0107_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0107_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a5e83e40-b597-5b83-92f5-5bed3926ca80")
    __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IAccelerometer *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0108 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0108 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0108_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0108_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2532 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2532 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2532_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2532_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0109 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0109 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0109_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0109_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3e5d6eaf-f169-5d60-92b0-98cd6bd8f808")
    __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IAccelerometer *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IAccelerometerShakenEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0110 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0110 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0110_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0110_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2533 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2533 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2533_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2533_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0111 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0111 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0111_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0111_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a5b72e01-546c-5fbb-b847-49200aaaaac5")
    __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IActivitySensor *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IActivitySensorReadingChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0112 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0112 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0112_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0112_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2534 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2534 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2534_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2534_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0113 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0113 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0113_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0113_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d775d699-9d74-5473-9c1b-d51a89db6642")
    __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IAltimeter *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IAltimeterReadingChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIAltimeter *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0114 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0114 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0114_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0114_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2535 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2535 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2535_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2535_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0115 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0115 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0115_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0115_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e4caf459-d101-5ca5-a4ea-deb0917ae27e")
    __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IBarometer *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IBarometerReadingChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIBarometer *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0116 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0116 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0116_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0116_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2536 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2536 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2536_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2536_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0117 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0117 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0117_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0117_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e787d73d-a121-5ae6-b497-ab934837e57f")
    __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::ICompass *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::ICompassReadingChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CICompass *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0118 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0118 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0118_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0118_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2537 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2537 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2537_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2537_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0119 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0119 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0119_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0119_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("15171524-5786-59a5-af5b-a01245726c44")
    __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IGyrometer *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIGyrometer *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0120 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0120 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0120_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0120_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2538 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2538 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2538_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2538_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0121 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0121 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0121_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0121_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6f3b411f-d147-59f1-bbe4-7bec396c7b6e")
    __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IInclinometer *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIInclinometer *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0122 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0122 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0122_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0122_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2539 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2539 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2539_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2539_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0123 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0123 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0123_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0123_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1ecf183a-9f0a-5f73-9225-5a33eab5594f")
    __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::ILightSensor *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CILightSensor *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0124 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0124 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0124_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0124_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2540 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2540 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2540_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2540_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0125 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0125 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0125_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0125_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f9a0da76-c4fd-50ab-98b6-bfd26d6d3d82")
    __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IMagnetometer *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IMagnetometerReadingChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0126 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0126 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0126_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0126_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2541 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2541 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2541_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2541_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0127 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0127 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0127_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0127_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91ae0c43-e1f7-577d-a161-8aaf275eb927")
    __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IOrientationSensor *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0128 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0128 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0128_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0128_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2542 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2542 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2542_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2542_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0129 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0129 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0129_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0129_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("dcd47693-aad5-5b3c-9c8d-140b8bc2122b")
    __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IPedometer *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IPedometerReadingChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIPedometer *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0130 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0130 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0130_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0130_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2543 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2543 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2543_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2543_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0131 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0131 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0131_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0131_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9f7e222b-892a-5e68-b08a-10384b5f92b9")
    __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IProximitySensor *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IProximitySensorReadingChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0132 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0132 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0132_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0132_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2544 */




/* interface __MIDL_itf_windows2Edevices2Esensors_0000_2544 */




extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2544_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_2544_v0_0_s_ifspec;

/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0133 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0133 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0133_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0133_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92437fa7-ea7b-5fc5-8ecf-1b911bea2bfc")
    __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::ISimpleOrientationSensor *sender,
            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __RPC__in __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor *sender,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgsVtbl;

    interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0134 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs */
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy
    {
        MagnetometerAccuracy_Unknown	= 0,
        MagnetometerAccuracy_Unreliable	= 1,
        MagnetometerAccuracy_Approximate	= 2,
        MagnetometerAccuracy_High	= 3
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CDevices_CSensors_CActivityType
    {
        ActivityType_Unknown	= 0,
        ActivityType_Idle	= 1,
        ActivityType_Stationary	= 2,
        ActivityType_Fidgeting	= 3,
        ActivityType_Walking	= 4,
        ActivityType_Running	= 5,
        ActivityType_InVehicle	= 6,
        ActivityType_Biking	= 7
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CDevices_CSensors_CActivitySensorReadingConfidence
    {
        ActivitySensorReadingConfidence_High	= 0,
        ActivitySensorReadingConfidence_Low	= 1
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType
    {
        SensorReadingType_Absolute	= 0,
        SensorReadingType_Relative	= 1
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CDevices_CSensors_CSensorType
    {
        SensorType_Accelerometer	= 0,
        SensorType_ActivitySensor	= 1,
        SensorType_Barometer	= 2,
        SensorType_Compass	= 3,
        SensorType_CustomSensor	= 4,
        SensorType_Gyroscope	= 5,
        SensorType_ProximitySensor	= 6,
        SensorType_Inclinometer	= 7,
        SensorType_LightSensor	= 8,
        SensorType_OrientationSensor	= 9,
        SensorType_Pedometer	= 10,
        SensorType_RelativeInclinometer	= 11,
        SensorType_RelativeOrientationSensor	= 12,
        SensorType_SimpleOrientationSensor	= 13
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation
    {
        SimpleOrientation_NotRotated	= 0,
        SimpleOrientation_Rotated90DegreesCounterclockwise	= 1,
        SimpleOrientation_Rotated180DegreesCounterclockwise	= 2,
        SimpleOrientation_Rotated270DegreesCounterclockwise	= 3,
        SimpleOrientation_Faceup	= 4,
        SimpleOrientation_Facedown	= 5
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(__cplusplus)

#if !defined(__cplusplus)
/* [v1_enum] */ 
enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind
    {
        PedometerStepKind_Unknown	= 0,
        PedometerStepKind_Walking	= 1,
        PedometerStepKind_Running	= 2
    } ;
#endif /* end if !defined(__cplusplus) */

#endif
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISensorDataThreshold[] = L"Windows.Devices.Sensors.ISensorDataThreshold";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0134 */
/* [local] */ 

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                
                /* [v1_enum] */ 
                enum MagnetometerAccuracy
                    {
                        MagnetometerAccuracy_Unknown	= 0,
                        MagnetometerAccuracy_Unreliable	= 1,
                        MagnetometerAccuracy_Approximate	= 2,
                        MagnetometerAccuracy_High	= 3
                    } ;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                
                /* [v1_enum] */ 
                enum ActivityType
                    {
                        ActivityType_Unknown	= 0,
                        ActivityType_Idle	= 1,
                        ActivityType_Stationary	= 2,
                        ActivityType_Fidgeting	= 3,
                        ActivityType_Walking	= 4,
                        ActivityType_Running	= 5,
                        ActivityType_InVehicle	= 6,
                        ActivityType_Biking	= 7
                    } ;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                
                /* [v1_enum] */ 
                enum ActivitySensorReadingConfidence
                    {
                        ActivitySensorReadingConfidence_High	= 0,
                        ActivitySensorReadingConfidence_Low	= 1
                    } ;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                
                /* [v1_enum] */ 
                enum SensorReadingType
                    {
                        SensorReadingType_Absolute	= 0,
                        SensorReadingType_Relative	= 1
                    } ;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                
                /* [v1_enum] */ 
                enum SensorType
                    {
                        SensorType_Accelerometer	= 0,
                        SensorType_ActivitySensor	= 1,
                        SensorType_Barometer	= 2,
                        SensorType_Compass	= 3,
                        SensorType_CustomSensor	= 4,
                        SensorType_Gyroscope	= 5,
                        SensorType_ProximitySensor	= 6,
                        SensorType_Inclinometer	= 7,
                        SensorType_LightSensor	= 8,
                        SensorType_OrientationSensor	= 9,
                        SensorType_Pedometer	= 10,
                        SensorType_RelativeInclinometer	= 11,
                        SensorType_RelativeOrientationSensor	= 12,
                        SensorType_SimpleOrientationSensor	= 13
                    } ;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                
                /* [v1_enum] */ 
                enum SimpleOrientation
                    {
                        SimpleOrientation_NotRotated	= 0,
                        SimpleOrientation_Rotated90DegreesCounterclockwise	= 1,
                        SimpleOrientation_Rotated180DegreesCounterclockwise	= 2,
                        SimpleOrientation_Rotated270DegreesCounterclockwise	= 3,
                        SimpleOrientation_Faceup	= 4,
                        SimpleOrientation_Facedown	= 5
                    } ;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus
} /* end extern "C" */
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                
                /* [v1_enum] */ 
                enum PedometerStepKind
                    {
                        PedometerStepKind_Unknown	= 0,
                        PedometerStepKind_Walking	= 1,
                        PedometerStepKind_Running	= 2
                    } ;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0134_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0134_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ISensorDataThreshold */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("54DAEC61-FE4B-4E07-B260-3A4CDFBE396E")
                    ISensorDataThreshold : public IInspectable
                    {
                    public:
                    };

                    extern const __declspec(selectany) IID & IID_ISensorDataThreshold = __uuidof(ISensorDataThreshold);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0135 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISensorDataThresholdTriggerDetails[] = L"Windows.Devices.Sensors.ISensorDataThresholdTriggerDetails";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0135 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0135_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0135_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ISensorDataThresholdTriggerDetails */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("9106F1B7-E88D-48B1-BC90-619C7B349391")
                    ISensorDataThresholdTriggerDetails : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceId( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SensorType( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Devices::Sensors::SensorType *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ISensorDataThresholdTriggerDetails = __uuidof(ISensorDataThresholdTriggerDetails);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetailsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceId )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SensorType )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CDevices_CSensors_CSensorType *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetailsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetailsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_get_DeviceId(This,value)	\
    ( (This)->lpVtbl -> get_DeviceId(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_get_SensorType(This,value)	\
    ( (This)->lpVtbl -> get_SensorType(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0136 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerDeviceId[] = L"Windows.Devices.Sensors.IAccelerometerDeviceId";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0136 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0136_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0136_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IAccelerometerDeviceId */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("7EAC64A9-97D5-446D-AB5A-917DF9B96A2C")
                    IAccelerometerDeviceId : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceId( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IAccelerometerDeviceId = __uuidof(IAccelerometerDeviceId);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceIdVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceId )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceIdVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_get_DeviceId(This,value)	\
    ( (This)->lpVtbl -> get_DeviceId(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0137 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerStatics[] = L"Windows.Devices.Sensors.IAccelerometerStatics";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0137 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0137_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0137_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IAccelerometerStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("A5E28B74-5A87-4A2D-BECC-0F906EA061DD")
                    IAccelerometerStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetDefault( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IAccelerometer **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IAccelerometerStatics = __uuidof(IAccelerometerStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefault )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_GetDefault(This,result)	\
    ( (This)->lpVtbl -> GetDefault(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0138 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometer[] = L"Windows.Devices.Sensors.IAccelerometer";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0138 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0138_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0138_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IAccelerometer */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("DF184548-2711-4DA7-8098-4B82205D3C7D")
                    IAccelerometer : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetCurrentReading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IAccelerometerReading **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinimumReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReportInterval( 
                            /* [in] */ UINT32 value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged( 
                            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs *handler,
                            /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_Shaken( 
                            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs *handler,
                            /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_Shaken( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IAccelerometer = __uuidof(IAccelerometer);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentReading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer * This,
            /* [in] */ UINT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs *handler,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_Shaken )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs *handler,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_Shaken )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_GetCurrentReading(This,value)	\
    ( (This)->lpVtbl -> GetCurrentReading(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_get_MinimumReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_MinimumReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_put_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> put_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_get_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_add_ReadingChanged(This,handler,token)	\
    ( (This)->lpVtbl -> add_ReadingChanged(This,handler,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_remove_ReadingChanged(This,token)	\
    ( (This)->lpVtbl -> remove_ReadingChanged(This,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_add_Shaken(This,handler,token)	\
    ( (This)->lpVtbl -> add_Shaken(This,handler,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_remove_Shaken(This,token)	\
    ( (This)->lpVtbl -> remove_Shaken(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0139 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometer2[] = L"Windows.Devices.Sensors.IAccelerometer2";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0139 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0139_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0139_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2 */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IAccelerometer2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("E8F092EE-4964-401A-B602-220D7153C60A")
                    IAccelerometer2 : public IInspectable
                    {
                    public:
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReadingTransform( 
                            /* [in] */ ABI::Windows::Graphics::Display::DisplayOrientations value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReadingTransform( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Graphics::Display::DisplayOrientations *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IAccelerometer2 = __uuidof(IAccelerometer2);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingTransform )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2 * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingTransform )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_put_ReadingTransform(This,value)	\
    ( (This)->lpVtbl -> put_ReadingTransform(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_get_ReadingTransform(This,value)	\
    ( (This)->lpVtbl -> get_ReadingTransform(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0140 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometer3[] = L"Windows.Devices.Sensors.IAccelerometer3";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0140 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0140_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0140_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3 */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IAccelerometer3 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("87E0022A-ED80-49EB-BF8A-A4EA31E5CD84")
                    IAccelerometer3 : public IInspectable
                    {
                    public:
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReportLatency( 
                            /* [in] */ UINT32 value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReportLatency( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MaxBatchSize( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IAccelerometer3 = __uuidof(IAccelerometer3);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReportLatency )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3 * This,
            /* [in] */ UINT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReportLatency )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3 * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxBatchSize )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3 * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_put_ReportLatency(This,value)	\
    ( (This)->lpVtbl -> put_ReportLatency(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_get_ReportLatency(This,value)	\
    ( (This)->lpVtbl -> get_ReportLatency(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_get_MaxBatchSize(This,value)	\
    ( (This)->lpVtbl -> get_MaxBatchSize(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0141 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerReading[] = L"Windows.Devices.Sensors.IAccelerometerReading";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0141 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0141_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0141_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IAccelerometerReading */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("B9FE7ACB-D351-40AF-8BB6-7AA9AE641FB7")
                    IAccelerometerReading : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timestamp( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Foundation::DateTime *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AccelerationX( 
                            /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AccelerationY( 
                            /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AccelerationZ( 
                            /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IAccelerometerReading = __uuidof(IAccelerometerReading);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timestamp )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CDateTime *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AccelerationX )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AccelerationY )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AccelerationZ )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_get_Timestamp(This,value)	\
    ( (This)->lpVtbl -> get_Timestamp(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_get_AccelerationX(This,value)	\
    ( (This)->lpVtbl -> get_AccelerationX(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_get_AccelerationY(This,value)	\
    ( (This)->lpVtbl -> get_AccelerationY(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_get_AccelerationZ(This,value)	\
    ( (This)->lpVtbl -> get_AccelerationZ(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0142 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IAccelerometerReadingChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0142 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0142_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0142_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("0095C65B-B6AC-475A-9F44-8B32D35A3F25")
                    IAccelerometerReadingChangedEventArgs : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Reading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IAccelerometerReading **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IAccelerometerReadingChangedEventArgs = __uuidof(IAccelerometerReadingChangedEventArgs);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_get_Reading(This,value)	\
    ( (This)->lpVtbl -> get_Reading(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0143 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerShakenEventArgs[] = L"Windows.Devices.Sensors.IAccelerometerShakenEventArgs";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0143 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0143_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0143_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IAccelerometerShakenEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("95FF01D1-4A28-4F35-98E8-8178AAE4084A")
                    IAccelerometerShakenEventArgs : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timestamp( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Foundation::DateTime *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IAccelerometerShakenEventArgs = __uuidof(IAccelerometerShakenEventArgs);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timestamp )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CDateTime *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_get_Timestamp(This,value)	\
    ( (This)->lpVtbl -> get_Timestamp(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0144 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerDeviceId[] = L"Windows.Devices.Sensors.IInclinometerDeviceId";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0144 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0144_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0144_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IInclinometerDeviceId */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("01E91982-41FF-4406-AE83-62210FF16FE3")
                    IInclinometerDeviceId : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceId( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IInclinometerDeviceId = __uuidof(IInclinometerDeviceId);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceIdVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceId )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceIdVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_get_DeviceId(This,value)	\
    ( (This)->lpVtbl -> get_DeviceId(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0145 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerStatics[] = L"Windows.Devices.Sensors.IInclinometerStatics";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0145 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0145_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0145_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IInclinometerStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("F22EC551-9C30-453A-8B49-3C3EEB33CB61")
                    IInclinometerStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetDefault( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IInclinometer **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IInclinometerStatics = __uuidof(IInclinometerStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefault )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIInclinometer **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_GetDefault(This,result)	\
    ( (This)->lpVtbl -> GetDefault(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0146 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerStatics2[] = L"Windows.Devices.Sensors.IInclinometerStatics2";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0146 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0146_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0146_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2 */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IInclinometerStatics2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("043F9775-6A1E-499C-86E0-638C1A864B00")
                    IInclinometerStatics2 : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetDefaultForRelativeReadings( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IInclinometer **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IInclinometerStatics2 = __uuidof(IInclinometerStatics2);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefaultForRelativeReadings )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIInclinometer **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_GetDefaultForRelativeReadings(This,result)	\
    ( (This)->lpVtbl -> GetDefaultForRelativeReadings(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0147 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometer[] = L"Windows.Devices.Sensors.IInclinometer";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0147 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0147_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0147_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IInclinometer */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("2648CA6F-2286-406F-9161-F0C4BD806EBF")
                    IInclinometer : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetCurrentReading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IInclinometerReading **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinimumReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReportInterval( 
                            /* [in] */ UINT32 value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged( 
                            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs *handler,
                            /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IInclinometer = __uuidof(IInclinometer);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentReading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer * This,
            /* [in] */ UINT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs *handler,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_GetCurrentReading(This,value)	\
    ( (This)->lpVtbl -> GetCurrentReading(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_get_MinimumReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_MinimumReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_put_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> put_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_get_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_add_ReadingChanged(This,handler,token)	\
    ( (This)->lpVtbl -> add_ReadingChanged(This,handler,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_remove_ReadingChanged(This,token)	\
    ( (This)->lpVtbl -> remove_ReadingChanged(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0148 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometer2[] = L"Windows.Devices.Sensors.IInclinometer2";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0148 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0148_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0148_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2 */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IInclinometer2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometer2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("029F3393-28B2-45F8-BB16-61E86A7FAE6E")
                    IInclinometer2 : public IInspectable
                    {
                    public:
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReadingTransform( 
                            /* [in] */ ABI::Windows::Graphics::Display::DisplayOrientations value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReadingTransform( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Graphics::Display::DisplayOrientations *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReadingType( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Devices::Sensors::SensorReadingType *type) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IInclinometer2 = __uuidof(IInclinometer2);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingTransform )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2 * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingTransform )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingType )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType *type);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_put_ReadingTransform(This,value)	\
    ( (This)->lpVtbl -> put_ReadingTransform(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_get_ReadingTransform(This,value)	\
    ( (This)->lpVtbl -> get_ReadingTransform(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_get_ReadingType(This,type)	\
    ( (This)->lpVtbl -> get_ReadingType(This,type) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0149 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerReading[] = L"Windows.Devices.Sensors.IInclinometerReading";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0149 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0149_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0149_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IInclinometerReading */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("9F44F055-B6F6-497F-B127-1A775E501458")
                    IInclinometerReading : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timestamp( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Foundation::DateTime *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PitchDegrees( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RollDegrees( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_YawDegrees( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IInclinometerReading = __uuidof(IInclinometerReading);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timestamp )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CDateTime *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PitchDegrees )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RollDegrees )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YawDegrees )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_get_Timestamp(This,value)	\
    ( (This)->lpVtbl -> get_Timestamp(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_get_PitchDegrees(This,value)	\
    ( (This)->lpVtbl -> get_PitchDegrees(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_get_RollDegrees(This,value)	\
    ( (This)->lpVtbl -> get_RollDegrees(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_get_YawDegrees(This,value)	\
    ( (This)->lpVtbl -> get_YawDegrees(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0150 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerReadingYawAccuracy[] = L"Windows.Devices.Sensors.IInclinometerReadingYawAccuracy";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0150 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0150_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0150_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IInclinometerReadingYawAccuracy */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("B453E880-1FE3-4986-A257-E6ECE2723949")
                    IInclinometerReadingYawAccuracy : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_YawAccuracy( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Devices::Sensors::MagnetometerAccuracy *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IInclinometerReadingYawAccuracy = __uuidof(IInclinometerReadingYawAccuracy);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YawAccuracy )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracyVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_get_YawAccuracy(This,value)	\
    ( (This)->lpVtbl -> get_YawAccuracy(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0151 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IInclinometerReadingChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0151 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0151_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0151_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("4AE91DC1-E7EB-4938-8511-AE0D6B440438")
                    IInclinometerReadingChangedEventArgs : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Reading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IInclinometerReading **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IInclinometerReadingChangedEventArgs = __uuidof(IInclinometerReadingChangedEventArgs);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_get_Reading(This,value)	\
    ( (This)->lpVtbl -> get_Reading(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0152 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerDeviceId[] = L"Windows.Devices.Sensors.IGyrometerDeviceId";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0152 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0152_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0152_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IGyrometerDeviceId */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("1EE5E978-89A2-4275-9E95-7126F4708760")
                    IGyrometerDeviceId : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceId( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IGyrometerDeviceId = __uuidof(IGyrometerDeviceId);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceIdVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceId )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceIdVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_get_DeviceId(This,value)	\
    ( (This)->lpVtbl -> get_DeviceId(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0153 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerStatics[] = L"Windows.Devices.Sensors.IGyrometerStatics";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0153 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0153_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0153_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IGyrometerStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("83B6E7C9-E49D-4B39-86E6-CD554BE4C5C1")
                    IGyrometerStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetDefault( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IGyrometer **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IGyrometerStatics = __uuidof(IGyrometerStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefault )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIGyrometer **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_GetDefault(This,result)	\
    ( (This)->lpVtbl -> GetDefault(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0154 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometer[] = L"Windows.Devices.Sensors.IGyrometer";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0154 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0154_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0154_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IGyrometer */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("FDB9A9C4-84B1-4CA2-9763-9B589506C70C")
                    IGyrometer : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetCurrentReading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IGyrometerReading **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinimumReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReportInterval( 
                            /* [in] */ UINT32 value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged( 
                            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs *handler,
                            /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IGyrometer = __uuidof(IGyrometer);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentReading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer * This,
            /* [in] */ UINT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs *handler,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIGyrometerVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_GetCurrentReading(This,value)	\
    ( (This)->lpVtbl -> GetCurrentReading(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_get_MinimumReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_MinimumReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_put_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> put_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_get_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_add_ReadingChanged(This,handler,token)	\
    ( (This)->lpVtbl -> add_ReadingChanged(This,handler,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_remove_ReadingChanged(This,token)	\
    ( (This)->lpVtbl -> remove_ReadingChanged(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0155 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometer2[] = L"Windows.Devices.Sensors.IGyrometer2";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0155 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0155_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0155_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2 */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IGyrometer2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometer2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("63DF2443-8CE8-41C3-AC44-8698810B557F")
                    IGyrometer2 : public IInspectable
                    {
                    public:
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReadingTransform( 
                            /* [in] */ ABI::Windows::Graphics::Display::DisplayOrientations value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReadingTransform( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Graphics::Display::DisplayOrientations *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IGyrometer2 = __uuidof(IGyrometer2);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingTransform )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2 * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingTransform )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_put_ReadingTransform(This,value)	\
    ( (This)->lpVtbl -> put_ReadingTransform(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_get_ReadingTransform(This,value)	\
    ( (This)->lpVtbl -> get_ReadingTransform(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0156 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerReading[] = L"Windows.Devices.Sensors.IGyrometerReading";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0156 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0156_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0156_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IGyrometerReading */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("B3D6DE5C-1EE4-456F-9DE7-E2493B5C8E03")
                    IGyrometerReading : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timestamp( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Foundation::DateTime *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AngularVelocityX( 
                            /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AngularVelocityY( 
                            /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AngularVelocityZ( 
                            /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IGyrometerReading = __uuidof(IGyrometerReading);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timestamp )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CDateTime *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AngularVelocityX )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AngularVelocityY )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AngularVelocityZ )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_get_Timestamp(This,value)	\
    ( (This)->lpVtbl -> get_Timestamp(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_get_AngularVelocityX(This,value)	\
    ( (This)->lpVtbl -> get_AngularVelocityX(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_get_AngularVelocityY(This,value)	\
    ( (This)->lpVtbl -> get_AngularVelocityY(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_get_AngularVelocityZ(This,value)	\
    ( (This)->lpVtbl -> get_AngularVelocityZ(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0157 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IGyrometerReadingChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0157 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0157_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0157_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("0FDF1895-6F9E-42CE-8D58-388C0AB8356D")
                    IGyrometerReadingChangedEventArgs : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Reading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IGyrometerReading **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IGyrometerReadingChangedEventArgs = __uuidof(IGyrometerReadingChangedEventArgs);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_get_Reading(This,value)	\
    ( (This)->lpVtbl -> get_Reading(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0158 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassDeviceId[] = L"Windows.Devices.Sensors.ICompassDeviceId";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0158 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0158_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0158_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ICompassDeviceId */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("D181CA29-B085-4B1D-870A-4FF57BA74FD4")
                    ICompassDeviceId : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceId( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICompassDeviceId = __uuidof(ICompassDeviceId);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceIdVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceId )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceIdVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_get_DeviceId(This,value)	\
    ( (This)->lpVtbl -> get_DeviceId(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0159 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassStatics[] = L"Windows.Devices.Sensors.ICompassStatics";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0159 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0159_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0159_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CICompassStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ICompassStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("9ABC97DF-56EC-4C25-B54D-40A68BB5B269")
                    ICompassStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetDefault( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::ICompass **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICompassStatics = __uuidof(ICompassStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefault )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CICompass **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompassStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompassStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics_GetDefault(This,result)	\
    ( (This)->lpVtbl -> GetDefault(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0160 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompass[] = L"Windows.Devices.Sensors.ICompass";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0160 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0160_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0160_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompass_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CICompass */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ICompass */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompass;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("292FFA94-1B45-403C-BA06-B106DBA69A64")
                    ICompass : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetCurrentReading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::ICompassReading **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinimumReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReportInterval( 
                            /* [in] */ UINT32 value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged( 
                            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs *handler,
                            /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICompass = __uuidof(ICompass);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentReading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CICompassReading **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass * This,
            /* [in] */ UINT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs *handler,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompassVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompass
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CICompass_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CICompass_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CICompass_GetCurrentReading(This,value)	\
    ( (This)->lpVtbl -> GetCurrentReading(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_get_MinimumReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_MinimumReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_put_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> put_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_get_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_add_ReadingChanged(This,handler,token)	\
    ( (This)->lpVtbl -> add_ReadingChanged(This,handler,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_remove_ReadingChanged(This,token)	\
    ( (This)->lpVtbl -> remove_ReadingChanged(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CICompass_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0161 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompass2[] = L"Windows.Devices.Sensors.ICompass2";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0161 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0161_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0161_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompass2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CICompass2 */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ICompass2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompass2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("36F26D09-C7D7-434F-B461-979DDFC2322F")
                    ICompass2 : public IInspectable
                    {
                    public:
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReadingTransform( 
                            /* [in] */ ABI::Windows::Graphics::Display::DisplayOrientations value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReadingTransform( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Graphics::Display::DisplayOrientations *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICompass2 = __uuidof(ICompass2);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompass2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingTransform )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass2 * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingTransform )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompass2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompass2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompass2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompass2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_put_ReadingTransform(This,value)	\
    ( (This)->lpVtbl -> put_ReadingTransform(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_get_ReadingTransform(This,value)	\
    ( (This)->lpVtbl -> get_ReadingTransform(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CICompass2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0162 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReading_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassReading[] = L"Windows.Devices.Sensors.ICompassReading";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReading_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0162 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0162_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0162_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CICompassReading */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ICompassReading */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("82911128-513D-4DC9-B781-5EEDFBF02D0C")
                    ICompassReading : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timestamp( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Foundation::DateTime *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeadingMagneticNorth( 
                            /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeadingTrueNorth( 
                            /* [out][retval] */ __RPC__deref_out_opt __FIReference_1_double **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICompassReading = __uuidof(ICompassReading);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timestamp )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CDateTime *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeadingMagneticNorth )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReading * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeadingTrueNorth )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReading * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIReference_1_double **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompassReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompassReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_get_Timestamp(This,value)	\
    ( (This)->lpVtbl -> get_Timestamp(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_get_HeadingMagneticNorth(This,value)	\
    ( (This)->lpVtbl -> get_HeadingMagneticNorth(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_get_HeadingTrueNorth(This,value)	\
    ( (This)->lpVtbl -> get_HeadingTrueNorth(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0163 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassReadingHeadingAccuracy[] = L"Windows.Devices.Sensors.ICompassReadingHeadingAccuracy";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0163 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0163_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0163_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ICompassReadingHeadingAccuracy */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("E761354E-8911-40F7-9E16-6ECC7DAEC5DE")
                    ICompassReadingHeadingAccuracy : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeadingAccuracy( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Devices::Sensors::MagnetometerAccuracy *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICompassReadingHeadingAccuracy = __uuidof(ICompassReadingHeadingAccuracy);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeadingAccuracy )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracyVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_get_HeadingAccuracy(This,value)	\
    ( (This)->lpVtbl -> get_HeadingAccuracy(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0164 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassReadingChangedEventArgs[] = L"Windows.Devices.Sensors.ICompassReadingChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0164 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0164_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0164_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ICompassReadingChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("8F1549B0-E8BC-4C7E-B009-4E41DF137072")
                    ICompassReadingChangedEventArgs : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Reading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::ICompassReading **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICompassReadingChangedEventArgs = __uuidof(ICompassReadingChangedEventArgs);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CICompassReading **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_get_Reading(This,value)	\
    ( (This)->lpVtbl -> get_Reading(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0165 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorDeviceId[] = L"Windows.Devices.Sensors.ILightSensorDeviceId";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0165 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0165_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0165_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ILightSensorDeviceId */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("7FEE49F8-0AFB-4F51-87F0-6C26375CE94F")
                    ILightSensorDeviceId : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceId( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ILightSensorDeviceId = __uuidof(ILightSensorDeviceId);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceIdVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceId )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceIdVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_get_DeviceId(This,value)	\
    ( (This)->lpVtbl -> get_DeviceId(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0166 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorStatics[] = L"Windows.Devices.Sensors.ILightSensorStatics";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0166 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0166_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0166_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ILightSensorStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("45DB8C84-C3A8-471E-9A53-6457FAD87C0E")
                    ILightSensorStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetDefault( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::ILightSensor **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ILightSensorStatics = __uuidof(ILightSensorStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefault )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CILightSensor **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CILightSensorStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_GetDefault(This,result)	\
    ( (This)->lpVtbl -> GetDefault(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0167 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensor[] = L"Windows.Devices.Sensors.ILightSensor";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0167 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0167_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0167_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CILightSensor */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ILightSensor */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("F84C0718-0C54-47AE-922E-789F57FB03A0")
                    ILightSensor : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetCurrentReading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::ILightSensorReading **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinimumReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReportInterval( 
                            /* [in] */ UINT32 value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged( 
                            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs *handler,
                            /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ILightSensor = __uuidof(ILightSensor);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensor * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensor * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensor * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensor * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentReading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensor * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensor * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensor * This,
            /* [in] */ UINT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensor * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensor * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs *handler,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensor * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CILightSensorVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CILightSensor
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_GetCurrentReading(This,value)	\
    ( (This)->lpVtbl -> GetCurrentReading(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_get_MinimumReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_MinimumReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_put_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> put_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_get_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_add_ReadingChanged(This,handler,token)	\
    ( (This)->lpVtbl -> add_ReadingChanged(This,handler,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_remove_ReadingChanged(This,token)	\
    ( (This)->lpVtbl -> remove_ReadingChanged(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0168 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorReading[] = L"Windows.Devices.Sensors.ILightSensorReading";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0168 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0168_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0168_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ILightSensorReading */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("FFDF6300-227C-4D2B-B302-FC0142485C68")
                    ILightSensorReading : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timestamp( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Foundation::DateTime *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IlluminanceInLux( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ILightSensorReading = __uuidof(ILightSensorReading);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timestamp )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CDateTime *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IlluminanceInLux )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_get_Timestamp(This,value)	\
    ( (This)->lpVtbl -> get_Timestamp(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_get_IlluminanceInLux(This,value)	\
    ( (This)->lpVtbl -> get_IlluminanceInLux(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0169 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.ILightSensorReadingChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0169 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0169_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0169_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("A3A2F4CF-258B-420C-B8AB-8EDD601ECF50")
                    ILightSensorReadingChangedEventArgs : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Reading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::ILightSensorReading **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ILightSensorReadingChangedEventArgs = __uuidof(ILightSensorReadingChangedEventArgs);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_get_Reading(This,value)	\
    ( (This)->lpVtbl -> get_Reading(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0170 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISensorRotationMatrix[] = L"Windows.Devices.Sensors.ISensorRotationMatrix";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0170 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0170_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0170_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ISensorRotationMatrix */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("0A3D5A67-22F4-4392-9538-65D0BD064AA6")
                    ISensorRotationMatrix : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_M11( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_M12( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_M13( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_M21( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_M22( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_M23( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_M31( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_M32( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_M33( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ISensorRotationMatrix = __uuidof(ISensorRotationMatrix);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrixVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_M11 )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_M12 )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_M13 )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_M21 )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_M22 )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_M23 )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_M31 )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_M32 )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_M33 )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrixVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrixVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M11(This,value)	\
    ( (This)->lpVtbl -> get_M11(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M12(This,value)	\
    ( (This)->lpVtbl -> get_M12(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M13(This,value)	\
    ( (This)->lpVtbl -> get_M13(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M21(This,value)	\
    ( (This)->lpVtbl -> get_M21(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M22(This,value)	\
    ( (This)->lpVtbl -> get_M22(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M23(This,value)	\
    ( (This)->lpVtbl -> get_M23(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M31(This,value)	\
    ( (This)->lpVtbl -> get_M31(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M32(This,value)	\
    ( (This)->lpVtbl -> get_M32(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M33(This,value)	\
    ( (This)->lpVtbl -> get_M33(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0171 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISensorQuaternion[] = L"Windows.Devices.Sensors.ISensorQuaternion";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0171 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0171_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0171_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ISensorQuaternion */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("C9C5C827-C71C-46E7-9DA3-36A193B232BC")
                    ISensorQuaternion : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_W( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_X( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Y( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Z( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ISensorQuaternion = __uuidof(ISensorQuaternion);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_W )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_X )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Y )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Z )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternionVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_get_W(This,value)	\
    ( (This)->lpVtbl -> get_W(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_get_X(This,value)	\
    ( (This)->lpVtbl -> get_X(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_get_Y(This,value)	\
    ( (This)->lpVtbl -> get_Y(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_get_Z(This,value)	\
    ( (This)->lpVtbl -> get_Z(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0172 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorDeviceId[] = L"Windows.Devices.Sensors.IOrientationSensorDeviceId";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0172 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0172_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0172_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IOrientationSensorDeviceId */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("5A69B648-4C29-49EC-B28F-EA1D117B66F0")
                    IOrientationSensorDeviceId : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceId( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IOrientationSensorDeviceId = __uuidof(IOrientationSensorDeviceId);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceIdVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceId )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceIdVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_get_DeviceId(This,value)	\
    ( (This)->lpVtbl -> get_DeviceId(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0173 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorStatics[] = L"Windows.Devices.Sensors.IOrientationSensorStatics";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0173 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0173_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0173_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IOrientationSensorStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("10EF8712-FB4C-428A-898B-2765E409E669")
                    IOrientationSensorStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetDefault( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IOrientationSensor **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IOrientationSensorStatics = __uuidof(IOrientationSensorStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefault )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_GetDefault(This,result)	\
    ( (This)->lpVtbl -> GetDefault(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0174 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorStatics2[] = L"Windows.Devices.Sensors.IOrientationSensorStatics2";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0174 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0174_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0174_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2 */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IOrientationSensorStatics2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("59DA0D0B-D40A-4C71-9276-8A272A0A6619")
                    IOrientationSensorStatics2 : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetDefaultForRelativeReadings( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IOrientationSensor **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IOrientationSensorStatics2 = __uuidof(IOrientationSensorStatics2);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefaultForRelativeReadings )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_GetDefaultForRelativeReadings(This,result)	\
    ( (This)->lpVtbl -> GetDefaultForRelativeReadings(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0175 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensor[] = L"Windows.Devices.Sensors.IOrientationSensor";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0175 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0175_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0175_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IOrientationSensor */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("5E354635-CF6B-4C63-ABD8-10252B0BF6EC")
                    IOrientationSensor : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetCurrentReading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IOrientationSensorReading **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinimumReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReportInterval( 
                            /* [in] */ UINT32 value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged( 
                            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs *handler,
                            /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IOrientationSensor = __uuidof(IOrientationSensor);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentReading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor * This,
            /* [in] */ UINT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs *handler,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_GetCurrentReading(This,value)	\
    ( (This)->lpVtbl -> GetCurrentReading(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_get_MinimumReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_MinimumReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_put_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> put_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_get_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_add_ReadingChanged(This,handler,token)	\
    ( (This)->lpVtbl -> add_ReadingChanged(This,handler,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_remove_ReadingChanged(This,token)	\
    ( (This)->lpVtbl -> remove_ReadingChanged(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0176 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensor2[] = L"Windows.Devices.Sensors.IOrientationSensor2";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0176 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0176_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0176_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2 */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IOrientationSensor2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("0D924CF9-2F1F-49C9-8042-4A1813D67760")
                    IOrientationSensor2 : public IInspectable
                    {
                    public:
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReadingTransform( 
                            /* [in] */ ABI::Windows::Graphics::Display::DisplayOrientations value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReadingTransform( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Graphics::Display::DisplayOrientations *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReadingType( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Devices::Sensors::SensorReadingType *type) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IOrientationSensor2 = __uuidof(IOrientationSensor2);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingTransform )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2 * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingTransform )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingType )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType *type);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_put_ReadingTransform(This,value)	\
    ( (This)->lpVtbl -> put_ReadingTransform(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_get_ReadingTransform(This,value)	\
    ( (This)->lpVtbl -> get_ReadingTransform(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_get_ReadingType(This,type)	\
    ( (This)->lpVtbl -> get_ReadingType(This,type) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0177 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorReading[] = L"Windows.Devices.Sensors.IOrientationSensorReading";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0177 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0177_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0177_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IOrientationSensorReading */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("4756C993-6595-4897-BCC6-D537EE757564")
                    IOrientationSensorReading : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timestamp( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Foundation::DateTime *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RotationMatrix( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::ISensorRotationMatrix **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Quaternion( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::ISensorQuaternion **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IOrientationSensorReading = __uuidof(IOrientationSensorReading);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timestamp )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CDateTime *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RotationMatrix )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Quaternion )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_get_Timestamp(This,value)	\
    ( (This)->lpVtbl -> get_Timestamp(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_get_RotationMatrix(This,value)	\
    ( (This)->lpVtbl -> get_RotationMatrix(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_get_Quaternion(This,value)	\
    ( (This)->lpVtbl -> get_Quaternion(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0178 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorReadingYawAccuracy[] = L"Windows.Devices.Sensors.IOrientationSensorReadingYawAccuracy";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0178 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0178_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0178_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IOrientationSensorReadingYawAccuracy */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("D1AC9824-3F5A-49A2-BC7B-1180BC38CD2B")
                    IOrientationSensorReadingYawAccuracy : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_YawAccuracy( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Devices::Sensors::MagnetometerAccuracy *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IOrientationSensorReadingYawAccuracy = __uuidof(IOrientationSensorReadingYawAccuracy);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YawAccuracy )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracyVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_get_YawAccuracy(This,value)	\
    ( (This)->lpVtbl -> get_YawAccuracy(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0179 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IOrientationSensorReadingChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0179 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0179_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0179_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("012C1186-C3BA-46BC-AE65-7A98996CBFB8")
                    IOrientationSensorReadingChangedEventArgs : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Reading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IOrientationSensorReading **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IOrientationSensorReadingChangedEventArgs = __uuidof(IOrientationSensorReadingChangedEventArgs);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_get_Reading(This,value)	\
    ( (This)->lpVtbl -> get_Reading(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0180 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensorDeviceId[] = L"Windows.Devices.Sensors.ISimpleOrientationSensorDeviceId";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0180 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0180_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0180_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ISimpleOrientationSensorDeviceId */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("FBC00ACB-3B76-41F6-8091-30EFE646D3CF")
                    ISimpleOrientationSensorDeviceId : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceId( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ISimpleOrientationSensorDeviceId = __uuidof(ISimpleOrientationSensorDeviceId);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceIdVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceId )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceIdVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_get_DeviceId(This,value)	\
    ( (This)->lpVtbl -> get_DeviceId(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0181 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensorStatics[] = L"Windows.Devices.Sensors.ISimpleOrientationSensorStatics";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0181 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0181_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0181_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ISimpleOrientationSensorStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("72ED066F-70AA-40C6-9B1B-3433F7459B4E")
                    ISimpleOrientationSensorStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetDefault( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::ISimpleOrientationSensor **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ISimpleOrientationSensorStatics = __uuidof(ISimpleOrientationSensorStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefault )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_GetDefault(This,result)	\
    ( (This)->lpVtbl -> GetDefault(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0182 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensor[] = L"Windows.Devices.Sensors.ISimpleOrientationSensor";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0182 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0182_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0182_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ISimpleOrientationSensor */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("5FF53856-214A-4DEE-A3F9-616F1AB06FFD")
                    ISimpleOrientationSensor : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetCurrentOrientation( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Devices::Sensors::SimpleOrientation *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_OrientationChanged( 
                            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs *handler,
                            /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_OrientationChanged( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ISimpleOrientationSensor = __uuidof(ISimpleOrientationSensor);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentOrientation )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_OrientationChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs *handler,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_OrientationChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_GetCurrentOrientation(This,value)	\
    ( (This)->lpVtbl -> GetCurrentOrientation(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_add_OrientationChanged(This,handler,token)	\
    ( (This)->lpVtbl -> add_OrientationChanged(This,handler,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_remove_OrientationChanged(This,token)	\
    ( (This)->lpVtbl -> remove_OrientationChanged(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0183 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensor2[] = L"Windows.Devices.Sensors.ISimpleOrientationSensor2";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0183 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0183_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0183_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2 */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ISimpleOrientationSensor2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("A277A798-8870-453E-8BD6-B8F5D8D7941B")
                    ISimpleOrientationSensor2 : public IInspectable
                    {
                    public:
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReadingTransform( 
                            /* [in] */ ABI::Windows::Graphics::Display::DisplayOrientations value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReadingTransform( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Graphics::Display::DisplayOrientations *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ISimpleOrientationSensor2 = __uuidof(ISimpleOrientationSensor2);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingTransform )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2 * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingTransform )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_put_ReadingTransform(This,value)	\
    ( (This)->lpVtbl -> put_ReadingTransform(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_get_ReadingTransform(This,value)	\
    ( (This)->lpVtbl -> get_ReadingTransform(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0184 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensorOrientationChangedEventArgs[] = L"Windows.Devices.Sensors.ISimpleOrientationSensorOrientationChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0184 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0184_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0184_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("BCD5C660-23D4-4B4C-A22E-BA81ADE0C601")
                    ISimpleOrientationSensorOrientationChangedEventArgs : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timestamp( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Foundation::DateTime *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Devices::Sensors::SimpleOrientation *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ISimpleOrientationSensorOrientationChangedEventArgs = __uuidof(ISimpleOrientationSensorOrientationChangedEventArgs);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timestamp )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CDateTime *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_get_Timestamp(This,value)	\
    ( (This)->lpVtbl -> get_Timestamp(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_get_Orientation(This,value)	\
    ( (This)->lpVtbl -> get_Orientation(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0185 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerDeviceId[] = L"Windows.Devices.Sensors.IMagnetometerDeviceId";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0185 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0185_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0185_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IMagnetometerDeviceId */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("58B498C2-7E4B-404C-9FC5-5DE8B40EBAE3")
                    IMagnetometerDeviceId : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceId( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IMagnetometerDeviceId = __uuidof(IMagnetometerDeviceId);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceIdVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceId )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceIdVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceIdVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_get_DeviceId(This,value)	\
    ( (This)->lpVtbl -> get_DeviceId(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0186 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerStatics[] = L"Windows.Devices.Sensors.IMagnetometerStatics";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0186 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0186_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0186_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IMagnetometerStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("853C64CC-0698-4DDA-A6DF-9CB9CC4AB40A")
                    IMagnetometerStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetDefault( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IMagnetometer **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IMagnetometerStatics = __uuidof(IMagnetometerStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefault )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_GetDefault(This,result)	\
    ( (This)->lpVtbl -> GetDefault(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0187 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometer[] = L"Windows.Devices.Sensors.IMagnetometer";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0187 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0187_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0187_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IMagnetometer */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("484F626E-D3C9-4111-B3F6-2CF1FAA418D5")
                    IMagnetometer : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetCurrentReading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IMagnetometerReading **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinimumReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReportInterval( 
                            /* [in] */ UINT32 value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged( 
                            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs *handler,
                            /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IMagnetometer = __uuidof(IMagnetometer);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentReading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer * This,
            /* [in] */ UINT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs *handler,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_GetCurrentReading(This,value)	\
    ( (This)->lpVtbl -> GetCurrentReading(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_get_MinimumReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_MinimumReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_put_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> put_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_get_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_add_ReadingChanged(This,handler,token)	\
    ( (This)->lpVtbl -> add_ReadingChanged(This,handler,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_remove_ReadingChanged(This,token)	\
    ( (This)->lpVtbl -> remove_ReadingChanged(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0188 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometer2[] = L"Windows.Devices.Sensors.IMagnetometer2";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0188 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0188_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0188_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2 */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IMagnetometer2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("B4656C85-26F6-444B-A9E2-A23F966CD368")
                    IMagnetometer2 : public IInspectable
                    {
                    public:
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReadingTransform( 
                            /* [in] */ ABI::Windows::Graphics::Display::DisplayOrientations value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReadingTransform( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Graphics::Display::DisplayOrientations *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IMagnetometer2 = __uuidof(IMagnetometer2);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingTransform )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2 * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingTransform )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2 * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_put_ReadingTransform(This,value)	\
    ( (This)->lpVtbl -> put_ReadingTransform(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_get_ReadingTransform(This,value)	\
    ( (This)->lpVtbl -> get_ReadingTransform(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0189 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerReading[] = L"Windows.Devices.Sensors.IMagnetometerReading";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0189 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0189_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0189_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IMagnetometerReading */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("0C2CC40D-EBFD-4E5C-BB11-AFC29B3CAE61")
                    IMagnetometerReading : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timestamp( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Foundation::DateTime *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MagneticFieldX( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MagneticFieldY( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MagneticFieldZ( 
                            /* [out][retval] */ __RPC__out FLOAT *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DirectionalAccuracy( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Devices::Sensors::MagnetometerAccuracy *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IMagnetometerReading = __uuidof(IMagnetometerReading);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timestamp )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CDateTime *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MagneticFieldX )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MagneticFieldY )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MagneticFieldZ )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading * This,
            /* [out][retval] */ __RPC__out FLOAT *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DirectionalAccuracy )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_get_Timestamp(This,value)	\
    ( (This)->lpVtbl -> get_Timestamp(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_get_MagneticFieldX(This,value)	\
    ( (This)->lpVtbl -> get_MagneticFieldX(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_get_MagneticFieldY(This,value)	\
    ( (This)->lpVtbl -> get_MagneticFieldY(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_get_MagneticFieldZ(This,value)	\
    ( (This)->lpVtbl -> get_MagneticFieldZ(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_get_DirectionalAccuracy(This,value)	\
    ( (This)->lpVtbl -> get_DirectionalAccuracy(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0190 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IMagnetometerReadingChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0190 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0190_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0190_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IMagnetometerReadingChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("17EAE872-2EB9-4EE7-8AD0-3127537D949B")
                    IMagnetometerReadingChangedEventArgs : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Reading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IMagnetometerReading **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IMagnetometerReadingChangedEventArgs = __uuidof(IMagnetometerReadingChangedEventArgs);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_get_Reading(This,value)	\
    ( (This)->lpVtbl -> get_Reading(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0191 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensorStatics[] = L"Windows.Devices.Sensors.IActivitySensorStatics";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0191 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0191_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0191_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IActivitySensorStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("A71E0E9D-EE8B-45D1-B25B-08CC0DF92AB6")
                    IActivitySensorStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetDefaultAsync( 
                            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor **result) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FromIdAsync( 
                            /* [in] */ __RPC__in HSTRING deviceId,
                            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor **result) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetSystemHistoryAsync( 
                            /* [in] */ ABI::Windows::Foundation::DateTime fromTime,
                            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading **result) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetSystemHistoryWithDurationAsync( 
                            /* [in] */ ABI::Windows::Foundation::DateTime fromTime,
                            /* [in] */ ABI::Windows::Foundation::TimeSpan duration,
                            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IActivitySensorStatics = __uuidof(IActivitySensorStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefaultAsync )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor **result);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceSelector )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        HRESULT ( STDMETHODCALLTYPE *FromIdAsync )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics * This,
            /* [in] */ __RPC__in HSTRING deviceId,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor **result);
        
        HRESULT ( STDMETHODCALLTYPE *GetSystemHistoryAsync )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CDateTime fromTime,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading **result);
        
        HRESULT ( STDMETHODCALLTYPE *GetSystemHistoryWithDurationAsync )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CDateTime fromTime,
            /* [in] */ __x_ABI_CWindows_CFoundation_CTimeSpan duration,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_GetDefaultAsync(This,result)	\
    ( (This)->lpVtbl -> GetDefaultAsync(This,result) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_GetDeviceSelector(This,value)	\
    ( (This)->lpVtbl -> GetDeviceSelector(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_FromIdAsync(This,deviceId,result)	\
    ( (This)->lpVtbl -> FromIdAsync(This,deviceId,result) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_GetSystemHistoryAsync(This,fromTime,result)	\
    ( (This)->lpVtbl -> GetSystemHistoryAsync(This,fromTime,result) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_GetSystemHistoryWithDurationAsync(This,fromTime,duration,result)	\
    ( (This)->lpVtbl -> GetSystemHistoryWithDurationAsync(This,fromTime,duration,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0192 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensor[] = L"Windows.Devices.Sensors.IActivitySensor";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0192 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0192_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0192_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IActivitySensor */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("CD7A630C-FB5F-48EB-B09B-A2708D1C61EF")
                    IActivitySensor : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetCurrentReadingAsync( 
                            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading **result) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SubscribedActivities( 
                            /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CDevices__CSensors__CActivityType **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PowerInMilliwatts( 
                            /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceId( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SupportedActivities( 
                            /* [out][retval] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CDevices__CSensors__CActivityType **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinimumReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged( 
                            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs *handler,
                            /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IActivitySensor = __uuidof(IActivitySensor);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentReadingAsync )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading **result);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SubscribedActivities )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIVector_1_Windows__CDevices__CSensors__CActivityType **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PowerInMilliwatts )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceId )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SupportedActivities )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CDevices__CSensors__CActivityType **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs *handler,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_GetCurrentReadingAsync(This,result)	\
    ( (This)->lpVtbl -> GetCurrentReadingAsync(This,result) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_get_SubscribedActivities(This,value)	\
    ( (This)->lpVtbl -> get_SubscribedActivities(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_get_PowerInMilliwatts(This,value)	\
    ( (This)->lpVtbl -> get_PowerInMilliwatts(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_get_DeviceId(This,value)	\
    ( (This)->lpVtbl -> get_DeviceId(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_get_SupportedActivities(This,value)	\
    ( (This)->lpVtbl -> get_SupportedActivities(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_get_MinimumReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_MinimumReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_add_ReadingChanged(This,handler,token)	\
    ( (This)->lpVtbl -> add_ReadingChanged(This,handler,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_remove_ReadingChanged(This,token)	\
    ( (This)->lpVtbl -> remove_ReadingChanged(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0193 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensorReading[] = L"Windows.Devices.Sensors.IActivitySensorReading";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0193 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0193_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0193_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IActivitySensorReading */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("85125A96-1472-40A2-B2AE-E1EF29226C78")
                    IActivitySensorReading : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timestamp( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Foundation::DateTime *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Activity( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Devices::Sensors::ActivityType *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Confidence( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Devices::Sensors::ActivitySensorReadingConfidence *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IActivitySensorReading = __uuidof(IActivitySensorReading);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timestamp )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CDateTime *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Activity )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CDevices_CSensors_CActivityType *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Confidence )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CDevices_CSensors_CActivitySensorReadingConfidence *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_get_Timestamp(This,value)	\
    ( (This)->lpVtbl -> get_Timestamp(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_get_Activity(This,value)	\
    ( (This)->lpVtbl -> get_Activity(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_get_Confidence(This,value)	\
    ( (This)->lpVtbl -> get_Confidence(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0194 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IActivitySensorReadingChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0194 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0194_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0194_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IActivitySensorReadingChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("DE386717-AEB6-4EC7-946A-D9CC19B951EC")
                    IActivitySensorReadingChangedEventArgs : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Reading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IActivitySensorReading **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IActivitySensorReadingChangedEventArgs = __uuidof(IActivitySensorReadingChangedEventArgs);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_get_Reading(This,value)	\
    ( (This)->lpVtbl -> get_Reading(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0195 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensorReadingChangeReport[] = L"Windows.Devices.Sensors.IActivitySensorReadingChangeReport";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0195 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0195_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0195_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IActivitySensorReadingChangeReport */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("4F3C2915-D93B-47BD-960A-F20FB2F322B9")
                    IActivitySensorReadingChangeReport : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Reading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IActivitySensorReading **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IActivitySensorReadingChangeReport = __uuidof(IActivitySensorReadingChangeReport);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReportVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReportVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReportVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_get_Reading(This,value)	\
    ( (This)->lpVtbl -> get_Reading(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0196 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensorTriggerDetails[] = L"Windows.Devices.Sensors.IActivitySensorTriggerDetails";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0196 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0196_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0196_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IActivitySensorTriggerDetails */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("2C9E6612-B9CA-4677-B263-243297F79D3A")
                    IActivitySensorTriggerDetails : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE ReadReports( 
                            /* [out][retval] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IActivitySensorTriggerDetails = __uuidof(IActivitySensorTriggerDetails);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetailsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *ReadReports )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetailsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetailsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_ReadReports(This,value)	\
    ( (This)->lpVtbl -> ReadReports(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0197 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometerStatics[] = L"Windows.Devices.Sensors.IBarometerStatics";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0197 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0197_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0197_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IBarometerStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("286B270A-02E3-4F86-84FC-FDD892B5940F")
                    IBarometerStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetDefault( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IBarometer **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IBarometerStatics = __uuidof(IBarometerStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefault )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIBarometer **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIBarometerStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_GetDefault(This,result)	\
    ( (This)->lpVtbl -> GetDefault(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0198 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometer[] = L"Windows.Devices.Sensors.IBarometer";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0198 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0198_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0198_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIBarometer */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IBarometer */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("934475A8-78BF-452F-B017-F0209CE6DAB4")
                    IBarometer : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetCurrentReading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IBarometerReading **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceId( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinimumReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReportInterval( 
                            /* [in] */ UINT32 value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged( 
                            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs *handler,
                            /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IBarometer = __uuidof(IBarometer);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometer * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometer * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometer * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentReading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometer * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceId )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometer * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometer * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometer * This,
            /* [in] */ UINT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometer * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometer * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs *handler,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometer * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIBarometerVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIBarometer
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_GetCurrentReading(This,value)	\
    ( (This)->lpVtbl -> GetCurrentReading(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_get_DeviceId(This,value)	\
    ( (This)->lpVtbl -> get_DeviceId(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_get_MinimumReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_MinimumReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_put_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> put_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_get_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_add_ReadingChanged(This,handler,token)	\
    ( (This)->lpVtbl -> add_ReadingChanged(This,handler,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_remove_ReadingChanged(This,token)	\
    ( (This)->lpVtbl -> remove_ReadingChanged(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0199 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometerReading[] = L"Windows.Devices.Sensors.IBarometerReading";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0199 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0199_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0199_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IBarometerReading */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("F5B9D2E6-1DF6-4A1A-A7AD-321D4F5DB247")
                    IBarometerReading : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timestamp( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Foundation::DateTime *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StationPressureInHectopascals( 
                            /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IBarometerReading = __uuidof(IBarometerReading);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timestamp )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CDateTime *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StationPressureInHectopascals )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_get_Timestamp(This,value)	\
    ( (This)->lpVtbl -> get_Timestamp(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_get_StationPressureInHectopascals(This,value)	\
    ( (This)->lpVtbl -> get_StationPressureInHectopascals(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0200 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IBarometerReadingChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0200 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0200_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0200_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IBarometerReadingChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("3D84945F-037B-404F-9BBB-6232D69543C3")
                    IBarometerReadingChangedEventArgs : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Reading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IBarometerReading **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IBarometerReadingChangedEventArgs = __uuidof(IBarometerReadingChangedEventArgs);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_get_Reading(This,value)	\
    ( (This)->lpVtbl -> get_Reading(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0201 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometerReading[] = L"Windows.Devices.Sensors.IPedometerReading";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0201 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0201_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0201_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IPedometerReading */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("2245DCF4-A8E1-432F-896A-BE0DD9B02D24")
                    IPedometerReading : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StepKind( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Devices::Sensors::PedometerStepKind *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CumulativeSteps( 
                            /* [out][retval] */ __RPC__out INT32 *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timestamp( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Foundation::DateTime *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CumulativeStepsDuration( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Foundation::TimeSpan *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IPedometerReading = __uuidof(IPedometerReading);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StepKind )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CumulativeSteps )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading * This,
            /* [out][retval] */ __RPC__out INT32 *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timestamp )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CDateTime *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CumulativeStepsDuration )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CTimeSpan *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_get_StepKind(This,value)	\
    ( (This)->lpVtbl -> get_StepKind(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_get_CumulativeSteps(This,value)	\
    ( (This)->lpVtbl -> get_CumulativeSteps(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_get_Timestamp(This,value)	\
    ( (This)->lpVtbl -> get_Timestamp(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_get_CumulativeStepsDuration(This,value)	\
    ( (This)->lpVtbl -> get_CumulativeStepsDuration(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0202 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IPedometerReadingChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0202 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0202_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0202_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IPedometerReadingChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("F855E47E-ABBC-4456-86A8-25CF2B333742")
                    IPedometerReadingChangedEventArgs : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Reading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IPedometerReading **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IPedometerReadingChangedEventArgs = __uuidof(IPedometerReadingChangedEventArgs);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_get_Reading(This,value)	\
    ( (This)->lpVtbl -> get_Reading(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0203 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometerStatics[] = L"Windows.Devices.Sensors.IPedometerStatics";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0203 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0203_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0203_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IPedometerStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("82980A2F-4083-4DFB-B411-938EA0F4B946")
                    IPedometerStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE FromIdAsync( 
                            /* [in] */ __RPC__in HSTRING deviceId,
                            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer **operation) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetDefaultAsync( 
                            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer **operation) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *result) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetSystemHistoryAsync( 
                            /* [in] */ ABI::Windows::Foundation::DateTime fromTime,
                            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading **operation) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetSystemHistoryWithDurationAsync( 
                            /* [in] */ ABI::Windows::Foundation::DateTime fromTime,
                            /* [in] */ ABI::Windows::Foundation::TimeSpan duration,
                            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading **operation) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IPedometerStatics = __uuidof(IPedometerStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *FromIdAsync )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics * This,
            /* [in] */ __RPC__in HSTRING deviceId,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer **operation);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefaultAsync )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer **operation);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceSelector )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *result);
        
        HRESULT ( STDMETHODCALLTYPE *GetSystemHistoryAsync )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CDateTime fromTime,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading **operation);
        
        HRESULT ( STDMETHODCALLTYPE *GetSystemHistoryWithDurationAsync )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CDateTime fromTime,
            /* [in] */ __x_ABI_CWindows_CFoundation_CTimeSpan duration,
            /* [out][retval] */ __RPC__deref_out_opt __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading **operation);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIPedometerStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_FromIdAsync(This,deviceId,operation)	\
    ( (This)->lpVtbl -> FromIdAsync(This,deviceId,operation) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_GetDefaultAsync(This,operation)	\
    ( (This)->lpVtbl -> GetDefaultAsync(This,operation) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_GetDeviceSelector(This,result)	\
    ( (This)->lpVtbl -> GetDeviceSelector(This,result) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_GetSystemHistoryAsync(This,fromTime,operation)	\
    ( (This)->lpVtbl -> GetSystemHistoryAsync(This,fromTime,operation) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_GetSystemHistoryWithDurationAsync(This,fromTime,duration,operation)	\
    ( (This)->lpVtbl -> GetSystemHistoryWithDurationAsync(This,fromTime,duration,operation) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0204 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometerStatics2[] = L"Windows.Devices.Sensors.IPedometerStatics2";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0204 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0204_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0204_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2 */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IPedometerStatics2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("79F5C6BB-CE0E-4133-B47E-8627EA72F677")
                    IPedometerStatics2 : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetReadingsFromTriggerDetails( 
                            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::ISensorDataThresholdTriggerDetails *triggerDetails,
                            /* [out][retval] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IPedometerStatics2 = __uuidof(IPedometerStatics2);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetReadingsFromTriggerDetails )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2 * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails *triggerDetails,
            /* [out][retval] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_GetReadingsFromTriggerDetails(This,triggerDetails,result)	\
    ( (This)->lpVtbl -> GetReadingsFromTriggerDetails(This,triggerDetails,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0205 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometer2[] = L"Windows.Devices.Sensors.IPedometer2";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0205 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0205_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0205_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIPedometer2 */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IPedometer2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometer2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("E5A406DF-2B81-4ADD-B2FF-77AB6C98BA19")
                    IPedometer2 : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetCurrentReadings( 
                            /* [out][retval] */ __RPC__deref_out_opt __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IPedometer2 = __uuidof(IPedometer2);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometer2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentReadings )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer2 * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIPedometer2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIPedometer2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometer2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer2_GetCurrentReadings(This,value)	\
    ( (This)->lpVtbl -> GetCurrentReadings(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0206 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometer[] = L"Windows.Devices.Sensors.IPedometer";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0206 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0206_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0206_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIPedometer */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IPedometer */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("9A1E013D-3D98-45F8-8920-8E4ECACA5F97")
                    IPedometer : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceId( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PowerInMilliwatts( 
                            /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinimumReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReportInterval( 
                            /* [in] */ UINT32 value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged( 
                            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs *handler,
                            /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IPedometer = __uuidof(IPedometer);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceId )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PowerInMilliwatts )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer * This,
            /* [in] */ UINT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs *handler,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometer * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIPedometerVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIPedometer
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_get_DeviceId(This,value)	\
    ( (This)->lpVtbl -> get_DeviceId(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_get_PowerInMilliwatts(This,value)	\
    ( (This)->lpVtbl -> get_PowerInMilliwatts(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_get_MinimumReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_MinimumReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_put_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> put_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_get_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_add_ReadingChanged(This,handler,token)	\
    ( (This)->lpVtbl -> add_ReadingChanged(This,handler,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_remove_ReadingChanged(This,token)	\
    ( (This)->lpVtbl -> remove_ReadingChanged(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0207 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometerDataThresholdFactory[] = L"Windows.Devices.Sensors.IPedometerDataThresholdFactory";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0207 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0207_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0207_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IPedometerDataThresholdFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("CBAD8F50-7A54-466B-9010-77A162FCA5D7")
                    IPedometerDataThresholdFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create( 
                            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IPedometer *sensor,
                            /* [in] */ INT32 stepGoal,
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::ISensorDataThreshold **threshold) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IPedometerDataThresholdFactory = __uuidof(IPedometerDataThresholdFactory);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIPedometer *sensor,
            /* [in] */ INT32 stepGoal,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold **threshold);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactoryVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_Create(This,sensor,stepGoal,threshold)	\
    ( (This)->lpVtbl -> Create(This,sensor,stepGoal,threshold) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0208 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensorStatics[] = L"Windows.Devices.Sensors.IProximitySensorStatics";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0208 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0208_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0208_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IProximitySensorStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("29186649-6269-4E57-A5AD-82BE80813392")
                    IProximitySensorStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FromId( 
                            /* [in] */ __RPC__in HSTRING sensorId,
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IProximitySensor **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IProximitySensorStatics = __uuidof(IProximitySensorStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceSelector )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        HRESULT ( STDMETHODCALLTYPE *FromId )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics * This,
            /* [in] */ __RPC__in HSTRING sensorId,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_GetDeviceSelector(This,value)	\
    ( (This)->lpVtbl -> GetDeviceSelector(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_FromId(This,sensorId,result)	\
    ( (This)->lpVtbl -> FromId(This,sensorId,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0209 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensor[] = L"Windows.Devices.Sensors.IProximitySensor";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0209 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0209_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0209_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IProximitySensor */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("54C076B8-ECFB-4944-B928-74FC504D47EE")
                    IProximitySensor : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceId( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MaxDistanceInMillimeters( 
                            /* [out][retval] */ __RPC__deref_out_opt __FIReference_1_UINT32 **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinDistanceInMillimeters( 
                            /* [out][retval] */ __RPC__deref_out_opt __FIReference_1_UINT32 **value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetCurrentReading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IProximitySensorReading **value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged( 
                            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs *handler,
                            /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateDisplayOnOffController( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Foundation::IClosable **controller) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IProximitySensor = __uuidof(IProximitySensor);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceId )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxDistanceInMillimeters )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIReference_1_UINT32 **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinDistanceInMillimeters )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIReference_1_UINT32 **value);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentReading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading **value);
        
        HRESULT ( STDMETHODCALLTYPE *add_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs *handler,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDisplayOnOffController )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CFoundation_CIClosable **controller);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_get_DeviceId(This,value)	\
    ( (This)->lpVtbl -> get_DeviceId(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_get_MaxDistanceInMillimeters(This,value)	\
    ( (This)->lpVtbl -> get_MaxDistanceInMillimeters(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_get_MinDistanceInMillimeters(This,value)	\
    ( (This)->lpVtbl -> get_MinDistanceInMillimeters(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_GetCurrentReading(This,value)	\
    ( (This)->lpVtbl -> GetCurrentReading(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_add_ReadingChanged(This,handler,token)	\
    ( (This)->lpVtbl -> add_ReadingChanged(This,handler,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_remove_ReadingChanged(This,token)	\
    ( (This)->lpVtbl -> remove_ReadingChanged(This,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_CreateDisplayOnOffController(This,controller)	\
    ( (This)->lpVtbl -> CreateDisplayOnOffController(This,controller) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0210 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IProximitySensorReadingChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0210 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0210_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0210_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IProximitySensorReadingChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("CFC2F366-C3E8-40FD-8CC3-67E289004938")
                    IProximitySensorReadingChangedEventArgs : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Reading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IProximitySensorReading **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IProximitySensorReadingChangedEventArgs = __uuidof(IProximitySensorReadingChangedEventArgs);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_get_Reading(This,value)	\
    ( (This)->lpVtbl -> get_Reading(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0211 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensorReading[] = L"Windows.Devices.Sensors.IProximitySensorReading";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0211 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0211_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0211_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IProximitySensorReading */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("71228D59-132D-4D5F-8FF9-2F0DB8751CED")
                    IProximitySensorReading : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timestamp( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Foundation::DateTime *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsDetected( 
                            /* [out][retval] */ __RPC__out boolean *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DistanceInMillimeters( 
                            /* [out][retval] */ __RPC__deref_out_opt __FIReference_1_UINT32 **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IProximitySensorReading = __uuidof(IProximitySensorReading);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timestamp )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CDateTime *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDetected )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading * This,
            /* [out][retval] */ __RPC__out boolean *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceInMillimeters )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading * This,
            /* [out][retval] */ __RPC__deref_out_opt __FIReference_1_UINT32 **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_get_Timestamp(This,value)	\
    ( (This)->lpVtbl -> get_Timestamp(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_get_IsDetected(This,value)	\
    ( (This)->lpVtbl -> get_IsDetected(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_get_DistanceInMillimeters(This,value)	\
    ( (This)->lpVtbl -> get_DistanceInMillimeters(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0212 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensorDataThresholdFactory[] = L"Windows.Devices.Sensors.IProximitySensorDataThresholdFactory";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0212 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0212_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0212_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IProximitySensorDataThresholdFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("905AC121-6D27-4AD3-9DB5-6467F2A5AD9D")
                    IProximitySensorDataThresholdFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create( 
                            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::IProximitySensor *sensor,
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::ISensorDataThreshold **threshold) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IProximitySensorDataThresholdFactory = __uuidof(IProximitySensorDataThresholdFactory);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor *sensor,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold **threshold);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactoryVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_Create(This,sensor,threshold)	\
    ( (This)->lpVtbl -> Create(This,sensor,threshold) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0213 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensorStatics2[] = L"Windows.Devices.Sensors.IProximitySensorStatics2";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0213 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0213_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0213_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2 */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IProximitySensorStatics2 */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("CBF473AE-E9CA-422F-AD67-4C3D25DF350C")
                    IProximitySensorStatics2 : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetReadingsFromTriggerDetails( 
                            /* [in] */ __RPC__in_opt ABI::Windows::Devices::Sensors::ISensorDataThresholdTriggerDetails *triggerDetails,
                            /* [out][retval] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IProximitySensorStatics2 = __uuidof(IProximitySensorStatics2);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2 * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2 * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2 * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetReadingsFromTriggerDetails )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2 * This,
            /* [in] */ __RPC__in_opt __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails *triggerDetails,
            /* [out][retval] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2Vtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_GetReadingsFromTriggerDetails(This,triggerDetails,result)	\
    ( (This)->lpVtbl -> GetReadingsFromTriggerDetails(This,triggerDetails,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0214 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeterStatics[] = L"Windows.Devices.Sensors.IAltimeterStatics";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0214 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0214_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0214_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IAltimeterStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("9EB4D7C3-E5AC-47CE-8EEF-D3718168C01F")
                    IAltimeterStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetDefault( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IAltimeter **result) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IAltimeterStatics = __uuidof(IAltimeterStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefault )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIAltimeter **result);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_GetDefault(This,result)	\
    ( (This)->lpVtbl -> GetDefault(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0215 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeter[] = L"Windows.Devices.Sensors.IAltimeter";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0215 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0215_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0215_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeter */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IAltimeter */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("72F057FD-8F04-49F1-B4A7-F4E363B701A2")
                    IAltimeter : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetCurrentReading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IAltimeterReading **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceId( 
                            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinimumReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReportInterval( 
                            /* [in] */ UINT32 value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReportInterval( 
                            /* [out][retval] */ __RPC__out UINT32 *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged( 
                            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs *handler,
                            /* [out][retval] */ __RPC__out EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IAltimeter = __uuidof(IAltimeter);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeter * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeter * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeter * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeter * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentReading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeter * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceId )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeter * This,
            /* [out][retval] */ __RPC__deref_out_opt HSTRING *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeter * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeter * This,
            /* [in] */ UINT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReportInterval )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeter * This,
            /* [out][retval] */ __RPC__out UINT32 *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeter * This,
            /* [in] */ __RPC__in_opt __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs *handler,
            /* [out][retval] */ __RPC__out EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_ReadingChanged )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeter * This,
            /* [in] */ EventRegistrationToken token);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAltimeterVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeter
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_GetCurrentReading(This,value)	\
    ( (This)->lpVtbl -> GetCurrentReading(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_get_DeviceId(This,value)	\
    ( (This)->lpVtbl -> get_DeviceId(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_get_MinimumReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_MinimumReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_put_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> put_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_get_ReportInterval(This,value)	\
    ( (This)->lpVtbl -> get_ReportInterval(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_add_ReadingChanged(This,handler,token)	\
    ( (This)->lpVtbl -> add_ReadingChanged(This,handler,token) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_remove_ReadingChanged(This,token)	\
    ( (This)->lpVtbl -> remove_ReadingChanged(This,token) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0216 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeterReading[] = L"Windows.Devices.Sensors.IAltimeterReading";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0216 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0216_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0216_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IAltimeterReading */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("FBE8EF73-7F5E-48C8-AA1A-F1F3BEFC1144")
                    IAltimeterReading : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timestamp( 
                            /* [out][retval] */ __RPC__out ABI::Windows::Foundation::DateTime *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AltitudeChangeInMeters( 
                            /* [out][retval] */ __RPC__out DOUBLE *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IAltimeterReading = __uuidof(IAltimeterReading);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timestamp )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading * This,
            /* [out][retval] */ __RPC__out __x_ABI_CWindows_CFoundation_CDateTime *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AltitudeChangeInMeters )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading * This,
            /* [out][retval] */ __RPC__out DOUBLE *value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_get_Timestamp(This,value)	\
    ( (This)->lpVtbl -> get_Timestamp(This,value) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_get_AltitudeChangeInMeters(This,value)	\
    ( (This)->lpVtbl -> get_AltitudeChangeInMeters(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0217 */
/* [local] */ 

#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeterReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IAltimeterReadingChangedEventArgs";
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0217 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0217_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0217_v0_0_s_ifspec;

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Windows::Devices::Sensors::IAltimeterReadingChangedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Windows {
            namespace Devices {
                namespace Sensors {
                    
                    MIDL_INTERFACE("7069D077-446D-47F7-998C-EBC23B45E4A2")
                    IAltimeterReadingChangedEventArgs : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Reading( 
                            /* [out][retval] */ __RPC__deref_out_opt ABI::Windows::Devices::Sensors::IAltimeterReading **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_IAltimeterReadingChangedEventArgs = __uuidof(IAltimeterReadingChangedEventArgs);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reading )( 
            __RPC__in __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs * This,
            /* [out][retval] */ __RPC__deref_out_opt __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading **value);
        
        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgsVtbl;

    interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_get_Reading(This,value)	\
    ( (This)->lpVtbl -> get_Reading(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0218 */
/* [local] */ 

#ifndef RUNTIMECLASS_Windows_Devices_Sensors_SensorDataThresholdTriggerDetails_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_SensorDataThresholdTriggerDetails_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_SensorDataThresholdTriggerDetails[] = L"Windows.Devices.Sensors.SensorDataThresholdTriggerDetails";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Accelerometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Accelerometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Accelerometer[] = L"Windows.Devices.Sensors.Accelerometer";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AccelerometerReading[] = L"Windows.Devices.Sensors.AccelerometerReading";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AccelerometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerShakenEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerShakenEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AccelerometerShakenEventArgs[] = L"Windows.Devices.Sensors.AccelerometerShakenEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Inclinometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Inclinometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Inclinometer[] = L"Windows.Devices.Sensors.Inclinometer";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_InclinometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_InclinometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_InclinometerReading[] = L"Windows.Devices.Sensors.InclinometerReading";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_InclinometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_InclinometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_InclinometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.InclinometerReadingChangedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Gyrometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Gyrometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Gyrometer[] = L"Windows.Devices.Sensors.Gyrometer";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_GyrometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_GyrometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_GyrometerReading[] = L"Windows.Devices.Sensors.GyrometerReading";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_GyrometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_GyrometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_GyrometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.GyrometerReadingChangedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Compass_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Compass_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Compass[] = L"Windows.Devices.Sensors.Compass";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_CompassReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_CompassReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_CompassReading[] = L"Windows.Devices.Sensors.CompassReading";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_CompassReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_CompassReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_CompassReadingChangedEventArgs[] = L"Windows.Devices.Sensors.CompassReadingChangedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_LightSensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_LightSensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_LightSensor[] = L"Windows.Devices.Sensors.LightSensor";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_LightSensorReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_LightSensorReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_LightSensorReading[] = L"Windows.Devices.Sensors.LightSensorReading";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_LightSensorReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_LightSensorReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_LightSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.LightSensorReadingChangedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_SensorRotationMatrix_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_SensorRotationMatrix_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_SensorRotationMatrix[] = L"Windows.Devices.Sensors.SensorRotationMatrix";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_SensorQuaternion_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_SensorQuaternion_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_SensorQuaternion[] = L"Windows.Devices.Sensors.SensorQuaternion";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_OrientationSensor[] = L"Windows.Devices.Sensors.OrientationSensor";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensorReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensorReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_OrientationSensorReading[] = L"Windows.Devices.Sensors.OrientationSensorReading";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensorReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensorReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_OrientationSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_SimpleOrientationSensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_SimpleOrientationSensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_SimpleOrientationSensor[] = L"Windows.Devices.Sensors.SimpleOrientationSensor";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_SimpleOrientationSensorOrientationChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_SimpleOrientationSensorOrientationChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_SimpleOrientationSensorOrientationChangedEventArgs[] = L"Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Magnetometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Magnetometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Magnetometer[] = L"Windows.Devices.Sensors.Magnetometer";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_MagnetometerReading[] = L"Windows.Devices.Sensors.MagnetometerReading";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_MagnetometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.MagnetometerReadingChangedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ActivitySensor[] = L"Windows.Devices.Sensors.ActivitySensor";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ActivitySensorReading[] = L"Windows.Devices.Sensors.ActivitySensorReading";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ActivitySensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.ActivitySensorReadingChangedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReadingChangeReport_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReadingChangeReport_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ActivitySensorReadingChangeReport[] = L"Windows.Devices.Sensors.ActivitySensorReadingChangeReport";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorTriggerDetails_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorTriggerDetails_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ActivitySensorTriggerDetails[] = L"Windows.Devices.Sensors.ActivitySensorTriggerDetails";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Barometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Barometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Barometer[] = L"Windows.Devices.Sensors.Barometer";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_BarometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_BarometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_BarometerReading[] = L"Windows.Devices.Sensors.BarometerReading";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_BarometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_BarometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_BarometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.BarometerReadingChangedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_PedometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_PedometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_PedometerReading[] = L"Windows.Devices.Sensors.PedometerReading";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Pedometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Pedometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Pedometer[] = L"Windows.Devices.Sensors.Pedometer";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_PedometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_PedometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_PedometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.PedometerReadingChangedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_PedometerDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_PedometerDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_PedometerDataThreshold[] = L"Windows.Devices.Sensors.PedometerDataThreshold";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ProximitySensor[] = L"Windows.Devices.Sensors.ProximitySensor";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ProximitySensorReading[] = L"Windows.Devices.Sensors.ProximitySensorReading";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ProximitySensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.ProximitySensorReadingChangedEventArgs";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorDisplayOnOffController_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorDisplayOnOffController_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ProximitySensorDisplayOnOffController[] = L"Windows.Devices.Sensors.ProximitySensorDisplayOnOffController";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ProximitySensorDataThreshold[] = L"Windows.Devices.Sensors.ProximitySensorDataThreshold";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Altimeter_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Altimeter_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Altimeter[] = L"Windows.Devices.Sensors.Altimeter";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AltimeterReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AltimeterReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AltimeterReading[] = L"Windows.Devices.Sensors.AltimeterReading";
#endif
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AltimeterReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AltimeterReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AltimeterReadingChangedEventArgs[] = L"Windows.Devices.Sensors.AltimeterReadingChangedEventArgs";
#endif


/* interface __MIDL_itf_windows2Edevices2Esensors_0000_0218 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0218_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_windows2Edevices2Esensors_0000_0218_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  HSTRING_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out HSTRING * ); 
void                      __RPC_USER  HSTRING_UserFree(     __RPC__in unsigned long *, __RPC__in HSTRING * ); 

unsigned long             __RPC_USER  HSTRING_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out HSTRING * ); 
void                      __RPC_USER  HSTRING_UserFree64(     __RPC__in unsigned long *, __RPC__in HSTRING * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


