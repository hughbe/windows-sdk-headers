//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0014
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Devices.Enumeration.idl";
import "Windows.UI.idl";
import "Windows.UI.Core.idl";
import "Windows.UI.Popups.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Edevices2Eenumeration_h__)")
cpp_quote("#include <Windows.Devices.Enumeration.h>")
cpp_quote("#endif // !defined(__windows2Edevices2Eenumeration_h__)")
cpp_quote("#if !defined(__windows2Eui_h__)")
cpp_quote("#include <Windows.UI.h>")
cpp_quote("#endif // !defined(__windows2Eui_h__)")
cpp_quote("#if !defined(__windows2Eui2Ecore_h__)")
cpp_quote("#include <Windows.UI.Core.h>")
cpp_quote("#endif // !defined(__windows2Eui2Ecore_h__)")
cpp_quote("#if !defined(__windows2Eui2Epopups_h__)")
cpp_quote("#include <Windows.UI.Popups.h>")
cpp_quote("#endif // !defined(__windows2Eui2Epopups_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Devices
    {
        namespace Enumeration
        {
            runtimeclass DeviceInformation;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IAsyncAction;

        typedef struct Rect Rect;

        typedef struct Size Size;
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Core
        {
            interface ICoreWindow;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Popups
        {
            typedef enum Placement Placement;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace ViewManagement
        {
            typedef enum ApplicationViewState ApplicationViewState;

            typedef enum ApplicationViewOrientation ApplicationViewOrientation;

            typedef enum ApplicationViewSwitchingOptions ApplicationViewSwitchingOptions;

            typedef enum ViewSizePreference ViewSizePreference;

            typedef enum ApplicationViewBoundsMode ApplicationViewBoundsMode;

            typedef enum FullScreenSystemOverlayMode FullScreenSystemOverlayMode;

            typedef enum ApplicationViewWindowingMode ApplicationViewWindowingMode;

            typedef enum UserInteractionMode UserInteractionMode;

            typedef enum HandPreference HandPreference;

            typedef enum UIColorType UIColorType;

            typedef enum UIElementType UIElementType;

            interface IApplicationViewSwitcherStatics;

            interface IApplicationViewSwitcherStatics2;

            interface IApplicationViewInteropStatics;

            interface IApplicationViewStatics;

            interface IApplicationViewStatics2;

            interface IApplicationViewStatics3;

            interface IApplicationView;

            interface IApplicationView2;

            interface IApplicationViewTitleBar;

            interface IApplicationView3;

            interface IApplicationViewFullscreenStatics;

            interface IApplicationViewConsolidatedEventArgs;

            interface IActivationViewSwitcher;

            interface IApplicationViewTransferContext;

            interface IApplicationViewTransferContextStatics;

            interface IInputPaneVisibilityEventArgs;

            interface IInputPane;

            interface IInputPane2;

            interface IInputPaneControl;

            interface IInputPaneStatics;

            interface IProjectionManagerStatics;

            interface IProjectionManagerStatics2;

            interface IUIViewSettings;

            interface IUIViewSettingsStatics;

            interface IAccessibilitySettings;

            interface IUISettings;

            interface IUISettings2;

            interface IUISettings3;

            interface IApplicationViewScaling;

            interface IApplicationViewScalingStatics;

            runtimeclass ApplicationView;

            runtimeclass ApplicationViewConsolidatedEventArgs;

            runtimeclass ApplicationViewTitleBar;

            runtimeclass ApplicationViewSwitcher;

            runtimeclass ActivationViewSwitcher;

            runtimeclass ApplicationViewTransferContext;

            runtimeclass InputPaneVisibilityEventArgs;

            runtimeclass InputPane;

            runtimeclass ProjectionManager;

            runtimeclass UIViewSettings;

            runtimeclass AccessibilitySettings;

            runtimeclass UISettings;

            runtimeclass ApplicationViewScaling;
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace UI
    {
        namespace ViewManagement
        {
            declare
            {
                interface Windows.Foundation.IReference<Windows.UI.ViewManagement.UIElementType>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.ViewManagement.AccessibilitySettings*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.ViewManagement.ApplicationView*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.ViewManagement.ApplicationView*, Windows.UI.ViewManagement.ApplicationViewConsolidatedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.ViewManagement.InputPane*, Windows.UI.ViewManagement.InputPaneVisibilityEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.ViewManagement.UISettings*, IInspectable*>;
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace UI
    {
        namespace ViewManagement
        {
            [deprecated("ApplicationViewState may be altered or unavailable for releases after Windows 8.1. Instead, query for window layout sizes directly.", deprecate, 0x06030000)]
            [version(0x06020000)]
            enum ApplicationViewState
            {
                FullScreenLandscape = 0,
                Filled              = 1,
                Snapped             = 2,
                FullScreenPortrait  = 3
            };

            [version(0x06030000)]
            enum ApplicationViewOrientation
            {
                Landscape = 0,
                Portrait  = 1
            };

            [flags]
            [version(0x06030000)]
            enum ApplicationViewSwitchingOptions
            {
                Default          = 0x0,
                SkipAnimation    = 0x1,
                ConsolidateViews = 0x2
            };

            [version(0x06030000)]
            enum ViewSizePreference
            {
                Default    = 0,
                UseLess    = 1,
                UseHalf    = 2,
                UseMore    = 3,
                UseMinimum = 4,
                UseNone    = 5
            };

            [version(0x0A000000)]
            enum ApplicationViewBoundsMode
            {
                UseVisible    = 0,
                UseCoreWindow = 1
            };

            [version(0x0A000000)]
            enum FullScreenSystemOverlayMode
            {
                Standard = 0,
                Minimal  = 1
            };

            [version(0x0A000000)]
            enum ApplicationViewWindowingMode
            {
                Auto                    = 0,
                PreferredLaunchViewSize = 1,
                FullScreen              = 2
            };

            [version(0x0A000000)]
            enum UserInteractionMode
            {
                Mouse = 0,
                Touch = 1
            };

            [version(0x06020000)]
            enum HandPreference
            {
                LeftHanded  = 0,
                RightHanded = 1
            };

            [version(0x0A000000)]
            enum UIColorType
            {
                Background   = 0,
                Foreground   = 1,
                AccentDark3  = 2,
                AccentDark2  = 3,
                AccentDark1  = 4,
                Accent       = 5,
                AccentLight1 = 6,
                AccentLight2 = 7,
                AccentLight3 = 8,
                Complement   = 9
            };

            [version(0x06020000)]
            enum UIElementType
            {
                ActiveCaption        = 0,
                Background           = 1,
                ButtonFace           = 2,
                ButtonText           = 3,
                CaptionText          = 4,
                GrayText             = 5,
                Highlight            = 6,
                HighlightText        = 7,
                Hotlight             = 8,
                InactiveCaption      = 9,
                InactiveCaptionText  = 10,
                Window               = 11,
                WindowText           = 12,
                [version(0x0A000000)]
                AccentColor          = 1000,
                [version(0x0A000000)]
                TextHigh             = 1001,
                [version(0x0A000000)]
                TextMedium           = 1002,
                [version(0x0A000000)]
                TextLow              = 1003,
                [version(0x0A000000)]
                TextContrastWithHigh = 1004,
                [version(0x0A000000)]
                NonTextHigh          = 1005,
                [version(0x0A000000)]
                NonTextMediumHigh    = 1006,
                [version(0x0A000000)]
                NonTextMedium        = 1007,
                [version(0x0A000000)]
                NonTextMediumLow     = 1008,
                [version(0x0A000000)]
                NonTextLow           = 1009,
                [version(0x0A000000)]
                PageBackground       = 1010,
                [version(0x0A000000)]
                PopupBackground      = 1011,
                [version(0x0A000000)]
                OverlayOutsidePopup  = 1012
            };

            [exclusiveto(Windows.UI.ViewManagement.ApplicationViewSwitcher)]
            [uuid(975F2F1E-E656-4C5E-A0A1-717C6FFA7D64)]
            [version(0x06030000)]
            interface IApplicationViewSwitcherStatics : IInspectable
            {
                HRESULT DisableShowingMainViewOnActivation();
                [overload("TryShowAsStandaloneAsync")] HRESULT TryShowAsStandaloneAsync([in] INT32 viewId, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                [overload("TryShowAsStandaloneAsync")] HRESULT TryShowAsStandaloneWithSizePreferenceAsync([in] INT32 viewId, [in] Windows.UI.ViewManagement.ViewSizePreference sizePreference, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                [overload("TryShowAsStandaloneAsync")] HRESULT TryShowAsStandaloneWithAnchorViewAndSizePreferenceAsync([in] INT32 viewId, [in] Windows.UI.ViewManagement.ViewSizePreference sizePreference, [in] INT32 anchorViewId, [in] Windows.UI.ViewManagement.ViewSizePreference anchorSizePreference, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                [overload("SwitchAsync")] HRESULT SwitchAsync([in] INT32 viewId, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                [overload("SwitchAsync")] HRESULT SwitchFromViewAsync([in] INT32 toViewId, [in] INT32 fromViewId, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                [overload("SwitchAsync")] HRESULT SwitchFromViewWithOptionsAsync([in] INT32 toViewId, [in] INT32 fromViewId, [in] Windows.UI.ViewManagement.ApplicationViewSwitchingOptions options, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                HRESULT PrepareForCustomAnimatedSwitchAsync([in] INT32 toViewId, [in] INT32 fromViewId, [in] Windows.UI.ViewManagement.ApplicationViewSwitchingOptions options, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
            }

            [exclusiveto(Windows.UI.ViewManagement.ApplicationViewSwitcher)]
            [uuid(60E995CD-4FC2-48C4-B8E3-395F2B9F0FC1)]
            [version(0x0A000000)]
            interface IApplicationViewSwitcherStatics2 : IInspectable
            {
                HRESULT DisableSystemViewActivationPolicy();
            }

            [exclusiveto(Windows.UI.ViewManagement.ApplicationView)]
            [uuid(C446FB5D-4793-4896-A8E2-BE57A8BB0F50)]
            [version(0x06030000)]
            interface IApplicationViewInteropStatics : IInspectable
            {
                HRESULT GetApplicationViewIdForWindow([in] Windows.UI.Core.ICoreWindow* window, [out] [retval] INT32* id);
            }

            [deprecated("ApplicationView static methods may be altered or unavailable for releases after Windows 8.1. Instead, use ApplicationView.GetForCurrentView to get an instance of ApplicationView.", deprecate, 0x06030000)]
            [exclusiveto(Windows.UI.ViewManagement.ApplicationView)]
            [uuid(010A6306-C433-44E5-A9F2-BD84D4030A95)]
            [version(0x06020000)]
            interface IApplicationViewStatics : IInspectable
            {
                [deprecated("Value may be altered or unavailable for releases after Windows 8.1. Instead, query for window layout sizes directly.", deprecate, 0x06030000)] [propget] HRESULT Value([out] [retval] Windows.UI.ViewManagement.ApplicationViewState* value);
                [deprecated("TryUnsnap may be altered or unavailable for releases after Windows 8.1. Apps can be continuously resized, but cannot be snapped, starting in Windows 8.1.", deprecate, 0x06030000)] HRESULT TryUnsnap([out] [retval] boolean* success);
            }

            [exclusiveto(Windows.UI.ViewManagement.ApplicationView)]
            [uuid(AF338AE5-CF64-423C-85E5-F3E72448FB23)]
            [version(0x06030000)]
            interface IApplicationViewStatics2 : IInspectable
            {
                HRESULT GetForCurrentView([out] [retval] Windows.UI.ViewManagement.ApplicationView** current);
                [propget] HRESULT TerminateAppOnFinalViewClose([out] [retval] boolean* value);
                [propput] HRESULT TerminateAppOnFinalViewClose([in] boolean value);
            }

            [exclusiveto(Windows.UI.ViewManagement.ApplicationView)]
            [uuid(A28D7594-8C41-4E13-9719-5164796FE4C7)]
            [version(0x0A000000)]
            interface IApplicationViewStatics3 : IInspectable
            {
                [propget] HRESULT PreferredLaunchWindowingMode([out] [retval] Windows.UI.ViewManagement.ApplicationViewWindowingMode* value);
                [propput] HRESULT PreferredLaunchWindowingMode([in] Windows.UI.ViewManagement.ApplicationViewWindowingMode value);
                [propget] HRESULT PreferredLaunchViewSize([out] [retval] Windows.Foundation.Size* value);
                [propput] HRESULT PreferredLaunchViewSize([in] Windows.Foundation.Size value);
            }

            [exclusiveto(Windows.UI.ViewManagement.ApplicationView)]
            [uuid(D222D519-4361-451E-96C4-60F4F9742DB0)]
            [version(0x06030000)]
            interface IApplicationView : IInspectable
            {
                [propget] HRESULT Orientation([out] [retval] Windows.UI.ViewManagement.ApplicationViewOrientation* value);
                [propget] HRESULT AdjacentToLeftDisplayEdge([out] [retval] boolean* value);
                [propget] HRESULT AdjacentToRightDisplayEdge([out] [retval] boolean* value);
                [deprecated("To check full screen mode, use IsFullScreenMode. To check if the view is adjacent to both edges, use AdjacentToLeftDisplayEdge and AdjacentToRightDisplayEdge. For more info, see MSDN.", deprecate, 0x0A000000)] [propget] HRESULT IsFullScreen([out] [retval] boolean* value);
                [propget] HRESULT IsOnLockScreen([out] [retval] boolean* value);
                [propget] HRESULT IsScreenCaptureEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsScreenCaptureEnabled([in] boolean value);
                [propput] HRESULT Title([in] HSTRING value);
                [propget] HRESULT Title([out] [retval] HSTRING* value);
                [propget] HRESULT Id([out] [retval] INT32* value);
                [eventadd] HRESULT Consolidated([in] Windows.Foundation.TypedEventHandler<Windows.UI.ViewManagement.ApplicationView*, Windows.UI.ViewManagement.ApplicationViewConsolidatedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Consolidated([in] EventRegistrationToken token);
            }

            [exclusiveto(Windows.UI.ViewManagement.ApplicationView)]
            [uuid(E876B196-A545-40DC-B594-450CBA68CC00)]
            [version(0x0A000000)]
            interface IApplicationView2 : IInspectable
            {
                [deprecated("Use the TryEnterFullScreen method and IsFullScreenMode property instead of SuppressSystemOverlays. For more info, see MSDN.", deprecate, 0x0A000000)] [propget] HRESULT SuppressSystemOverlays([out] [retval] boolean* value);
                [deprecated("Use the TryEnterFullScreen method and IsFullScreenMode property instead of SuppressSystemOverlays. For more info, see MSDN.", deprecate, 0x0A000000)] [propput] HRESULT SuppressSystemOverlays([in] boolean value);
                [propget] HRESULT VisibleBounds([out] [retval] Windows.Foundation.Rect* value);
                [eventadd] HRESULT VisibleBoundsChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.ViewManagement.ApplicationView*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT VisibleBoundsChanged([in] EventRegistrationToken token);
                HRESULT SetDesiredBoundsMode([in] Windows.UI.ViewManagement.ApplicationViewBoundsMode boundsMode, [out] [retval] boolean* success);
                [propget] HRESULT DesiredBoundsMode([out] [retval] Windows.UI.ViewManagement.ApplicationViewBoundsMode* value);
            }

            [exclusiveto(Windows.UI.ViewManagement.ApplicationViewTitleBar)]
            [uuid(00924AC0-932B-4A6B-9C4B-DC38C82478CE)]
            [version(0x0A000000)]
            interface IApplicationViewTitleBar : IInspectable
            {
                [propput] HRESULT ForegroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ForegroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT BackgroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT BackgroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonForegroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonForegroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonBackgroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonBackgroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonHoverForegroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonHoverForegroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonHoverBackgroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonHoverBackgroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonPressedForegroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonPressedForegroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonPressedBackgroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonPressedBackgroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT InactiveForegroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT InactiveForegroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT InactiveBackgroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT InactiveBackgroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonInactiveForegroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonInactiveForegroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ButtonInactiveBackgroundColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ButtonInactiveBackgroundColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
            }

            [exclusiveto(Windows.UI.ViewManagement.ApplicationView)]
            [uuid(903C9CE5-793A-4FDF-A2B2-AF1AC21E3108)]
            [version(0x0A000000)]
            interface IApplicationView3 : IInspectable
            {
                [propget] HRESULT TitleBar([out] [retval] Windows.UI.ViewManagement.ApplicationViewTitleBar** value);
                [propget] HRESULT FullScreenSystemOverlayMode([out] [retval] Windows.UI.ViewManagement.FullScreenSystemOverlayMode* value);
                [propput] HRESULT FullScreenSystemOverlayMode([in] Windows.UI.ViewManagement.FullScreenSystemOverlayMode value);
                [propget] HRESULT IsFullScreenMode([out] [retval] boolean* value);
                HRESULT TryEnterFullScreenMode([out] [retval] boolean* success);
                HRESULT ExitFullScreenMode();
                HRESULT ShowStandardSystemOverlays();
                HRESULT TryResizeView([in] Windows.Foundation.Size value, [out] [retval] boolean* success);
                HRESULT SetPreferredMinSize([in] Windows.Foundation.Size minSize);
            }

            [deprecated("IApplicationViewFullscreenStatics is deprecated after Windows 8. Please use other resize APIs.", deprecate, 0x06030000)]
            [exclusiveto(Windows.UI.ViewManagement.ApplicationView)]
            [uuid(BC792EBD-64FE-4B65-A0C0-901CE2B68636)]
            [version(0x06020000)]
            interface IApplicationViewFullscreenStatics : IInspectable
            {
                [deprecated("IApplicationViewFullscreenStatics is deprecated after Windows 8. Please use other resize APIs.", deprecate, 0x06030000)] HRESULT TryUnsnapToFullscreen([out] [retval] boolean* success);
            }

            [exclusiveto(Windows.UI.ViewManagement.ApplicationViewConsolidatedEventArgs)]
            [uuid(514449EC-7EA2-4DE7-A6A6-7DFBAAEBB6FB)]
            [version(0x06030000)]
            interface IApplicationViewConsolidatedEventArgs : IInspectable
            {
                [propget] HRESULT IsUserInitiated([out] [retval] boolean* value);
            }

            [exclusiveto(Windows.UI.ViewManagement.ActivationViewSwitcher)]
            [uuid(DCA71BB6-7350-492B-AAC7-C8A13D7224AD)]
            [version(0x0A000000)]
            interface IActivationViewSwitcher : IInspectable
            {
                [overload("ShowAsStandaloneAsync")] HRESULT ShowAsStandaloneAsync([in] INT32 viewId, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                [overload("ShowAsStandaloneAsync")] HRESULT ShowAsStandaloneWithSizePreferenceAsync([in] INT32 viewId, [in] Windows.UI.ViewManagement.ViewSizePreference sizePreference, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                HRESULT IsViewPresentedOnActivationVirtualDesktop([in] INT32 viewId, [out] [retval] boolean* value);
            }

            [exclusiveto(Windows.UI.ViewManagement.ApplicationViewTransferContext)]
            [uuid(8574BC63-3C17-408E-9408-8A1A9EA81BFA)]
            [version(0x0A000000)]
            interface IApplicationViewTransferContext : IInspectable
            {
                [propget] HRESULT ViewId([out] [retval] INT32* value);
                [propput] HRESULT ViewId([in] INT32 value);
            }

            [exclusiveto(Windows.UI.ViewManagement.ApplicationViewTransferContext)]
            [uuid(15A89D92-DD79-4B0B-BC47-D5F195F14661)]
            [version(0x0A000000)]
            interface IApplicationViewTransferContextStatics : IInspectable
            {
                [propget] HRESULT DataPackageFormatId([out] [retval] HSTRING* value);
            }

            [exclusiveto(Windows.UI.ViewManagement.InputPaneVisibilityEventArgs)]
            [uuid(D243E016-D907-4FCC-BB8D-F77BAA5028F1)]
            [version(0x06020000)]
            interface IInputPaneVisibilityEventArgs : IInspectable
            {
                [propget] HRESULT OccludedRect([out] [retval] Windows.Foundation.Rect* value);
                [propput] HRESULT EnsuredFocusedElementInView([in] boolean value);
                [propget] HRESULT EnsuredFocusedElementInView([out] [retval] boolean* value);
            }

            [exclusiveto(Windows.UI.ViewManagement.InputPane)]
            [uuid(640ADA70-06F3-4C87-A678-9829C9127C28)]
            [version(0x06020000)]
            interface IInputPane : IInspectable
            {
                [eventadd] HRESULT Showing([in] Windows.Foundation.TypedEventHandler<Windows.UI.ViewManagement.InputPane*, Windows.UI.ViewManagement.InputPaneVisibilityEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Showing([in] EventRegistrationToken token);
                [eventadd] HRESULT Hiding([in] Windows.Foundation.TypedEventHandler<Windows.UI.ViewManagement.InputPane*, Windows.UI.ViewManagement.InputPaneVisibilityEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Hiding([in] EventRegistrationToken token);
                [propget] HRESULT OccludedRect([out] [retval] Windows.Foundation.Rect* value);
            }

            [exclusiveto(Windows.UI.ViewManagement.InputPane)]
            [uuid(8A6B3F26-7090-4793-944C-C3F2CDE26276)]
            [version(0x0A000000)]
            interface IInputPane2 : IInspectable
            {
                HRESULT TryShow([out] [retval] boolean* result);
                HRESULT TryHide([out] [retval] boolean* result);
            }

            [exclusiveto(Windows.UI.ViewManagement.InputPane)]
            [uuid(088BB24F-962F-489D-AA6E-C6BE1A0A6E52)]
            [version(0x06020000)]
            interface IInputPaneControl : IInspectable
            {
                [deprecated("Visible is deprecated and might not work on all platforms. For more info, see MSDN.", deprecate, 0x0A000000)] [propget] HRESULT Visible([out] [retval] boolean* value);
                [deprecated("Use TryShow/TryHide instead of Visible.  For more info, see MSDN.", deprecate, 0x0A000000)] [propput] HRESULT Visible([in] boolean value);
            }

            [exclusiveto(Windows.UI.ViewManagement.InputPane)]
            [uuid(95F4AF3A-EF47-424A-9741-FD2815EBA2BD)]
            [version(0x06020000)]
            interface IInputPaneStatics : IInspectable
            {
                HRESULT GetForCurrentView([out] [retval] Windows.UI.ViewManagement.InputPane** inputPane);
            }

            [exclusiveto(Windows.UI.ViewManagement.ProjectionManager)]
            [uuid(B65F913D-E2F0-4FFD-BA95-34241647E45C)]
            [version(0x06030000)]
            interface IProjectionManagerStatics : IInspectable
            {
                [overload("StartProjectingAsync")] HRESULT StartProjectingAsync([in] INT32 projectionViewId, [in] INT32 anchorViewId, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                HRESULT SwapDisplaysForViewsAsync([in] INT32 projectionViewId, [in] INT32 anchorViewId, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                HRESULT StopProjectingAsync([in] INT32 projectionViewId, [in] INT32 anchorViewId, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                [propget] HRESULT ProjectionDisplayAvailable([out] [retval] boolean* value);
                [eventadd] HRESULT ProjectionDisplayAvailableChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ProjectionDisplayAvailableChanged([in] EventRegistrationToken token);
            }

            [exclusiveto(Windows.UI.ViewManagement.ProjectionManager)]
            [uuid(F33D2F43-2749-4CDE-B977-C0C41E7415D1)]
            [version(0x0A000000)]
            interface IProjectionManagerStatics2 : IInspectable
            {
                [overload("StartProjectingAsync")] HRESULT StartProjectingWithDeviceInfoAsync([in] INT32 projectionViewId, [in] INT32 anchorViewId, [in] Windows.Devices.Enumeration.DeviceInformation* displayDeviceInfo, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                [overload("RequestStartProjectingAsync")] HRESULT RequestStartProjectingAsync([in] INT32 projectionViewId, [in] INT32 anchorViewId, [in] Windows.Foundation.Rect selection, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                [overload("RequestStartProjectingAsync")] HRESULT RequestStartProjectingWithPlacementAsync([in] INT32 projectionViewId, [in] INT32 anchorViewId, [in] Windows.Foundation.Rect selection, [in] Windows.UI.Popups.Placement prefferedPlacement, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                HRESULT GetDeviceSelector([out] [retval] HSTRING* selector);
            }

            [exclusiveto(Windows.UI.ViewManagement.UIViewSettings)]
            [uuid(C63657F6-8850-470D-88F8-455E16EA2C26)]
            [version(0x0A000000)]
            interface IUIViewSettings : IInspectable
            {
                [propget] HRESULT UserInteractionMode([out] [retval] Windows.UI.ViewManagement.UserInteractionMode* value);
            }

            [exclusiveto(Windows.UI.ViewManagement.UIViewSettings)]
            [uuid(595C97A5-F8F6-41CF-B0FB-AACDB81FD5F6)]
            [version(0x0A000000)]
            interface IUIViewSettingsStatics : IInspectable
            {
                HRESULT GetForCurrentView([out] [retval] Windows.UI.ViewManagement.UIViewSettings** current);
            }

            [exclusiveto(Windows.UI.ViewManagement.AccessibilitySettings)]
            [uuid(FE0E8147-C4C0-4562-B962-1327B52AD5B9)]
            [version(0x06020000)]
            interface IAccessibilitySettings : IInspectable
            {
                [propget] HRESULT HighContrast([out] [retval] boolean* value);
                [propget] HRESULT HighContrastScheme([out] [retval] HSTRING* value);
                [eventadd] HRESULT HighContrastChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.ViewManagement.AccessibilitySettings*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
                [eventremove] HRESULT HighContrastChanged([in] EventRegistrationToken cookie);
            }

            [exclusiveto(Windows.UI.ViewManagement.UISettings)]
            [uuid(85361600-1C63-4627-BCB1-3A89E0BC9C55)]
            [version(0x06020000)]
            interface IUISettings : IInspectable
            {
                [propget] HRESULT HandPreference([out] [retval] Windows.UI.ViewManagement.HandPreference* value);
                [propget] HRESULT CursorSize([out] [retval] Windows.Foundation.Size* value);
                [propget] HRESULT ScrollBarSize([out] [retval] Windows.Foundation.Size* value);
                [propget] HRESULT ScrollBarArrowSize([out] [retval] Windows.Foundation.Size* value);
                [propget] HRESULT ScrollBarThumbBoxSize([out] [retval] Windows.Foundation.Size* value);
                [propget] HRESULT MessageDuration([out] [retval] UINT32* value);
                [propget] HRESULT AnimationsEnabled([out] [retval] boolean* value);
                [propget] HRESULT CaretBrowsingEnabled([out] [retval] boolean* value);
                [propget] HRESULT CaretBlinkRate([out] [retval] UINT32* value);
                [propget] HRESULT CaretWidth([out] [retval] UINT32* value);
                [propget] HRESULT DoubleClickTime([out] [retval] UINT32* value);
                [propget] HRESULT MouseHoverTime([out] [retval] UINT32* value);
                HRESULT UIElementColor([in] Windows.UI.ViewManagement.UIElementType desiredElement, [out] [retval] Windows.UI.Color* value);
            }

            [exclusiveto(Windows.UI.ViewManagement.UISettings)]
            [uuid(BAD82401-2721-44F9-BB91-2BB228BE442F)]
            [version(0x0A000000)]
            interface IUISettings2 : IInspectable
            {
                [propget] HRESULT TextScaleFactor([out] [retval] DOUBLE* value);
                [eventadd] HRESULT TextScaleFactorChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.ViewManagement.UISettings*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
                [eventremove] HRESULT TextScaleFactorChanged([in] EventRegistrationToken cookie);
            }

            [exclusiveto(Windows.UI.ViewManagement.UISettings)]
            [uuid(03021BE4-5254-4781-8194-5168F7D06D7B)]
            [version(0x0A000000)]
            interface IUISettings3 : IInspectable
            {
                HRESULT GetColorValue([in] Windows.UI.ViewManagement.UIColorType desiredColor, [out] [retval] Windows.UI.Color* value);
                [eventadd] HRESULT ColorValuesChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.ViewManagement.UISettings*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
                [eventremove] HRESULT ColorValuesChanged([in] EventRegistrationToken cookie);
            }

            [exclusiveto(Windows.UI.ViewManagement.ApplicationViewScaling)]
            [uuid(1D0DDC23-23F3-4B2D-84FE-74BF37B48B66)]
            [version(0x0A000000)]
            interface IApplicationViewScaling : IInspectable
            {
            }

            [exclusiveto(Windows.UI.ViewManagement.ApplicationViewScaling)]
            [uuid(B08FECF0-B946-45C8-A5E3-71F5AA78F861)]
            [version(0x0A000000)]
            interface IApplicationViewScalingStatics : IInspectable
            {
                [propget] HRESULT DisableLayoutScaling([out] [retval] boolean* value);
                HRESULT TrySetDisableLayoutScaling([in] boolean disableLayoutScaling, [out] [retval] boolean* success);
            }

            [marshaling_behavior(agile)]
            [static(Windows.UI.ViewManagement.IApplicationViewInteropStatics, 0x06030000)]
            [static(Windows.UI.ViewManagement.IApplicationViewStatics2, 0x06030000)]
            [static(Windows.UI.ViewManagement.IApplicationViewFullscreenStatics, 0x06020000)]
            [static(Windows.UI.ViewManagement.IApplicationViewStatics3, 0x0A000000)]
            [static(Windows.UI.ViewManagement.IApplicationViewStatics, 0x06020000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass ApplicationView
            {
                [default] [version(0x06030000)] interface Windows.UI.ViewManagement.IApplicationView;
                [version(0x0A000000)] interface Windows.UI.ViewManagement.IApplicationView2;
                [version(0x0A000000)] interface Windows.UI.ViewManagement.IApplicationView3;
            }

            [marshaling_behavior(agile)]
            [version(0x06030000)]
            runtimeclass ApplicationViewConsolidatedEventArgs
            {
                [default] interface Windows.UI.ViewManagement.IApplicationViewConsolidatedEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass ApplicationViewTitleBar
            {
                [default] [version(0x0A000000)] interface Windows.UI.ViewManagement.IApplicationViewTitleBar;
            }

            [marshaling_behavior(agile)]
            [static(Windows.UI.ViewManagement.IApplicationViewSwitcherStatics2, 0x0A000000)]
            [static(Windows.UI.ViewManagement.IApplicationViewSwitcherStatics, 0x06030000)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass ApplicationViewSwitcher
            {
            }

            [marshaling_behavior(agile)]
            [version(0x0A000000)]
            runtimeclass ActivationViewSwitcher
            {
                [default] interface Windows.UI.ViewManagement.IActivationViewSwitcher;
            }

            [activatable(0x0A000000)]
            [static(Windows.UI.ViewManagement.IApplicationViewTransferContextStatics, 0x0A000000)]
            [version(0x0A000000)]
            runtimeclass ApplicationViewTransferContext
            {
                [default] [version(0x0A000000)] interface Windows.UI.ViewManagement.IApplicationViewTransferContext;
            }

            [marshaling_behavior(standard)]
            [version(0x06020000)]
            runtimeclass InputPaneVisibilityEventArgs
            {
                [default] interface Windows.UI.ViewManagement.IInputPaneVisibilityEventArgs;
            }

            [marshaling_behavior(standard)]
            [static(Windows.UI.ViewManagement.IInputPaneStatics, 0x06020000)]
            [version(0x06020000)]
            runtimeclass InputPane
            {
                [default] interface Windows.UI.ViewManagement.IInputPane;
                [version(0x0A000000)] interface Windows.UI.ViewManagement.IInputPane2;
                [version(0x0A000000)] interface Windows.UI.ViewManagement.IInputPaneControl;
            }

            [marshaling_behavior(agile)]
            [static(Windows.UI.ViewManagement.IProjectionManagerStatics2, 0x0A000000)]
            [static(Windows.UI.ViewManagement.IProjectionManagerStatics, 0x06030000)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass ProjectionManager
            {
            }

            [marshaling_behavior(agile)]
            [static(Windows.UI.ViewManagement.IUIViewSettingsStatics, 0x0A000000)]
            [version(0x0A000000)]
            runtimeclass UIViewSettings
            {
                [default] interface Windows.UI.ViewManagement.IUIViewSettings;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass AccessibilitySettings
            {
                [default] interface Windows.UI.ViewManagement.IAccessibilitySettings;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [version(0x06020000)]
            runtimeclass UISettings
            {
                [default] interface Windows.UI.ViewManagement.IUISettings;
                [version(0x0A000000)] interface Windows.UI.ViewManagement.IUISettings2;
                [version(0x0A000000)] interface Windows.UI.ViewManagement.IUISettings3;
            }

            [static(Windows.UI.ViewManagement.IApplicationViewScalingStatics, 0x0A000000)]
            [version(0x0A000000)]
            runtimeclass ApplicationViewScaling
            {
                [default] interface Windows.UI.ViewManagement.IApplicationViewScaling;
            }
        }
    }
}
