//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0014
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Media.Core.idl";
import "Windows.Media.MediaProperties.idl";
import "Windows.Storage.idl";
import "Windows.Storage.Streams.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Emedia2Ecore_h__)")
cpp_quote("#include <Windows.Media.Core.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Ecore_h__)")
cpp_quote("#if !defined(__windows2Emedia2Emediaproperties_h__)")
cpp_quote("#include <Windows.Media.MediaProperties.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Emediaproperties_h__)")
cpp_quote("#if !defined(__windows2Estorage_h__)")
cpp_quote("#include <Windows.Storage.h>")
cpp_quote("#endif // !defined(__windows2Estorage_h__)")
cpp_quote("#if !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#include <Windows.Storage.Streams.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Foundation
    {
        namespace Collections
        {
            interface IPropertySet;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct TimeSpan TimeSpan;
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Core
        {
            interface IMediaSource;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace MediaProperties
        {
            runtimeclass MediaEncodingProfile;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        interface IStorageFile;
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IRandomAccessStream;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Transcoding
        {
            typedef enum MediaVideoProcessingAlgorithm MediaVideoProcessingAlgorithm;

            typedef enum TranscodeFailureReason TranscodeFailureReason;

            interface IMediaTranscoder2;

            interface IMediaTranscoder;

            interface IPrepareTranscodeResult;

            runtimeclass PrepareTranscodeResult;

            runtimeclass MediaTranscoder;
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace Media
    {
        namespace Transcoding
        {
            declare
            {
                interface Windows.Foundation.IAsyncOperationWithProgress<Windows.Media.Transcoding.TranscodeFailureReason, DOUBLE>;

                interface Windows.Foundation.IAsyncOperation<Windows.Media.Transcoding.PrepareTranscodeResult*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Media.Transcoding.TranscodeFailureReason>;
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace Media
    {
        namespace Transcoding
        {
            [version(0x06030000)]
            enum MediaVideoProcessingAlgorithm
            {
                Default   = 0,
                MrfCrf444 = 1
            };

            [version(0x06020000)]
            enum TranscodeFailureReason
            {
                None           = 0,
                Unknown        = 1,
                InvalidProfile = 2,
                CodecNotFound  = 3
            };

            [exclusiveto(Windows.Media.Transcoding.MediaTranscoder)]
            [uuid(40531D74-35E0-4F04-8574-CA8BC4E5A082)]
            [version(0x06030000)]
            interface IMediaTranscoder2 : IInspectable
            {
                HRESULT PrepareMediaStreamSourceTranscodeAsync([in] Windows.Media.Core.IMediaSource* source, [in] Windows.Storage.Streams.IRandomAccessStream* destination, [in] Windows.Media.MediaProperties.MediaEncodingProfile* profile, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Transcoding.PrepareTranscodeResult*>** operation);
                [propput] HRESULT VideoProcessingAlgorithm([in] Windows.Media.Transcoding.MediaVideoProcessingAlgorithm value);
                [propget] HRESULT VideoProcessingAlgorithm([out] [retval] Windows.Media.Transcoding.MediaVideoProcessingAlgorithm* value);
            }

            [exclusiveto(Windows.Media.Transcoding.MediaTranscoder)]
            [uuid(190C99D2-A0AA-4D34-86BC-EED1B12C2F5B)]
            [version(0x06020000)]
            interface IMediaTranscoder : IInspectable
            {
                [propput] HRESULT TrimStartTime([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT TrimStartTime([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT TrimStopTime([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT TrimStopTime([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT AlwaysReencode([in] boolean value);
                [propget] HRESULT AlwaysReencode([out] [retval] boolean* value);
                [propput] HRESULT HardwareAccelerationEnabled([in] boolean value);
                [propget] HRESULT HardwareAccelerationEnabled([out] [retval] boolean* value);
                [overload("AddAudioEffect")] HRESULT AddAudioEffect([in] HSTRING activatableClassId);
                [overload("AddAudioEffect")] HRESULT AddAudioEffectWithSettings([in] HSTRING activatableClassId, [in] boolean effectRequired, [in] Windows.Foundation.Collections.IPropertySet* configuration);
                [overload("AddVideoEffect")] HRESULT AddVideoEffect([in] HSTRING activatableClassId);
                [overload("AddVideoEffect")] HRESULT AddVideoEffectWithSettings([in] HSTRING activatableClassId, [in] boolean effectRequired, [in] Windows.Foundation.Collections.IPropertySet* configuration);
                HRESULT ClearEffects();
                HRESULT PrepareFileTranscodeAsync([in] Windows.Storage.IStorageFile* source, [in] Windows.Storage.IStorageFile* destination, [in] Windows.Media.MediaProperties.MediaEncodingProfile* profile, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Transcoding.PrepareTranscodeResult*>** operation);
                HRESULT PrepareStreamTranscodeAsync([in] Windows.Storage.Streams.IRandomAccessStream* source, [in] Windows.Storage.Streams.IRandomAccessStream* destination, [in] Windows.Media.MediaProperties.MediaEncodingProfile* profile, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Transcoding.PrepareTranscodeResult*>** operation);
            }

            [exclusiveto(Windows.Media.Transcoding.PrepareTranscodeResult)]
            [uuid(05F25DCE-994F-4A34-9D68-97CCCE1730D6)]
            [version(0x06020000)]
            interface IPrepareTranscodeResult : IInspectable
            {
                [propget] HRESULT CanTranscode([out] [retval] boolean* value);
                [propget] HRESULT FailureReason([out] [retval] Windows.Media.Transcoding.TranscodeFailureReason* value);
                HRESULT TranscodeAsync([out] [retval] Windows.Foundation.IAsyncActionWithProgress<DOUBLE>** operation);
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass PrepareTranscodeResult
            {
                [default] interface Windows.Media.Transcoding.IPrepareTranscodeResult;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass MediaTranscoder
            {
                [default] interface Windows.Media.Transcoding.IMediaTranscoder;
                [version(0x06030000)] interface Windows.Media.Transcoding.IMediaTranscoder2;
            }
        }
    }
}
