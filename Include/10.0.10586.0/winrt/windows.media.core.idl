//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0014
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Media.idl";
import "Windows.Media.Capture.idl";
import "Windows.Media.Devices.idl";
import "Windows.Media.Devices.Core.idl";
import "Windows.Media.Effects.idl";
import "Windows.Media.FaceAnalysis.idl";
import "Windows.Media.MediaProperties.idl";
import "Windows.Media.Playback.idl";
import "Windows.Media.Protection.idl";
import "Windows.Media.Streaming.Adaptive.idl";
import "Windows.Storage.idl";
import "Windows.Storage.FileProperties.idl";
import "Windows.Storage.Streams.idl";
import "Windows.UI.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Emedia_h__)")
cpp_quote("#include <Windows.Media.h>")
cpp_quote("#endif // !defined(__windows2Emedia_h__)")
cpp_quote("#if !defined(__windows2Emedia2Ecapture_h__)")
cpp_quote("#include <Windows.Media.Capture.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Ecapture_h__)")
cpp_quote("#if !defined(__windows2Emedia2Edevices_h__)")
cpp_quote("#include <Windows.Media.Devices.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Edevices_h__)")
cpp_quote("#if !defined(__windows2Emedia2Edevices2Ecore_h__)")
cpp_quote("#include <Windows.Media.Devices.Core.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Edevices2Ecore_h__)")
cpp_quote("#if !defined(__windows2Emedia2Eeffects_h__)")
cpp_quote("#include <Windows.Media.Effects.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Eeffects_h__)")
cpp_quote("#if !defined(__windows2Emedia2Efaceanalysis_h__)")
cpp_quote("#include <Windows.Media.FaceAnalysis.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Efaceanalysis_h__)")
cpp_quote("#if !defined(__windows2Emedia2Emediaproperties_h__)")
cpp_quote("#include <Windows.Media.MediaProperties.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Emediaproperties_h__)")
cpp_quote("#if !defined(__windows2Emedia2Eplayback_h__)")
cpp_quote("#include <Windows.Media.Playback.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Eplayback_h__)")
cpp_quote("#if !defined(__windows2Emedia2Eprotection_h__)")
cpp_quote("#include <Windows.Media.Protection.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Eprotection_h__)")
cpp_quote("#if !defined(__windows2Emedia2Estreaming2Eadaptive_h__)")
cpp_quote("#include <Windows.Media.Streaming.Adaptive.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Estreaming2Eadaptive_h__)")
cpp_quote("#if !defined(__windows2Estorage_h__)")
cpp_quote("#include <Windows.Storage.h>")
cpp_quote("#endif // !defined(__windows2Estorage_h__)")
cpp_quote("#if !defined(__windows2Estorage2Efileproperties_h__)")
cpp_quote("#include <Windows.Storage.FileProperties.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Efileproperties_h__)")
cpp_quote("#if !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#include <Windows.Storage.Streams.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#if !defined(__windows2Eui_h__)")
cpp_quote("#include <Windows.UI.h>")
cpp_quote("#endif // !defined(__windows2Eui_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Foundation
    {
        namespace Collections
        {
            runtimeclass ValueSet;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        runtimeclass Deferral;

        interface IClosable;

        typedef struct TimeSpan TimeSpan;

        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Capture
        {
            runtimeclass CapturedFrameControlValues;

            runtimeclass VideoStreamConfiguration;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Devices
        {
            namespace Core
            {
                runtimeclass FrameController;
            }
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Devices
        {
            runtimeclass VideoDeviceController;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Effects
        {
            interface IVideoEffectDefinition;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace FaceAnalysis
        {
            runtimeclass DetectedFace;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        interface IMediaExtension;

        interface IMediaFrame;
    }
}
namespace Windows
{
    namespace Media
    {
        namespace MediaProperties
        {
            runtimeclass AudioEncodingProperties;

            runtimeclass VideoEncodingProperties;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Playback
        {
            interface IMediaPlaybackSource;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Protection
        {
            runtimeclass MediaProtectionManager;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Streaming
        {
            namespace Adaptive
            {
                runtimeclass AdaptiveMediaSource;
            }
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace FileProperties
        {
            runtimeclass MusicProperties;

            runtimeclass VideoProperties;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        interface IStorageFile;
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            runtimeclass Buffer;

            interface IBuffer;

            interface IInputStream;

            interface IRandomAccessStream;

            interface IRandomAccessStreamReference;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Core
        {
            typedef enum MediaStreamSourceClosedReason MediaStreamSourceClosedReason;

            typedef enum MediaStreamSourceErrorStatus MediaStreamSourceErrorStatus;

            typedef enum MseReadyState MseReadyState;

            typedef enum MseEndOfStreamStatus MseEndOfStreamStatus;

            typedef enum MseAppendMode MseAppendMode;

            typedef enum FaceDetectionMode FaceDetectionMode;

            typedef enum VideoStabilizationEffectEnabledChangedReason VideoStabilizationEffectEnabledChangedReason;

            typedef enum MediaTrackKind MediaTrackKind;

            typedef enum TimedMetadataKind TimedMetadataKind;

            typedef enum TimedMetadataTrackErrorCode TimedMetadataTrackErrorCode;

            typedef enum TimedTextScrollMode TimedTextScrollMode;

            typedef enum TimedTextUnit TimedTextUnit;

            typedef enum TimedTextWritingMode TimedTextWritingMode;

            typedef enum TimedTextDisplayAlignment TimedTextDisplayAlignment;

            typedef enum TimedTextLineAlignment TimedTextLineAlignment;

            typedef enum TimedTextWrapping TimedTextWrapping;

            typedef enum TimedTextWeight TimedTextWeight;

            typedef enum TimedTextFlowDirection TimedTextFlowDirection;

            typedef enum MediaSourceState MediaSourceState;

            typedef struct MseTimeRange MseTimeRange;

            typedef struct TimedTextPadding TimedTextPadding;

            typedef struct TimedTextSize TimedTextSize;

            typedef struct TimedTextDouble TimedTextDouble;

            typedef struct TimedTextPoint TimedTextPoint;

            interface IMediaSource;

            interface IMediaStreamDescriptor;

            interface IAudioStreamDescriptor;

            interface IAudioStreamDescriptorFactory;

            interface IVideoStreamDescriptor;

            interface IVideoStreamDescriptorFactory;

            interface IMediaStreamSource;

            interface IMediaStreamSourceFactory;

            interface IMediaStreamSample;

            interface IMediaStreamSampleStatics;

            interface IMediaStreamSampleProtectionProperties;

            interface IMediaStreamSourceClosedRequest;

            interface IMediaStreamSourceClosedEventArgs;

            interface IMediaStreamSourceStartingRequestDeferral;

            interface IMediaStreamSourceStartingRequest;

            interface IMediaStreamSourceStartingEventArgs;

            interface IMediaStreamSourceSampleRequestDeferral;

            interface IMediaStreamSourceSampleRequest;

            interface IMediaStreamSourceSampleRequestedEventArgs;

            interface IMediaStreamSourceSwitchStreamsRequestDeferral;

            interface IMediaStreamSourceSwitchStreamsRequest;

            interface IMediaStreamSourceSwitchStreamsRequestedEventArgs;

            interface IMseStreamSourceStatics;

            interface IMseStreamSource;

            interface IMseSourceBuffer;

            interface IMseSourceBufferList;

            interface IHighDynamicRangeControl;

            interface ISceneAnalysisEffect;

            interface IHighDynamicRangeOutput;

            interface ISceneAnalysisEffectFrame;

            interface ISceneAnalyzedEventArgs;

            interface IFaceDetectionEffectFrame;

            interface IFaceDetectedEventArgs;

            interface IFaceDetectionEffect;

            interface IFaceDetectionEffectDefinition;

            interface IVideoStabilizationEffectEnabledChangedEventArgs;

            interface IVideoStabilizationEffect;

            interface IMediaSourceError;

            interface IMediaSourceOpenOperationCompletedEventArgs;

            interface IMediaSourceStateChangedEventArgs;

            interface IMediaSourceStatics;

            interface IMediaSourceStatics2;

            interface IMediaBinder;

            interface IMediaBindingEventArgs;

            interface IMediaSource2;

            interface IMediaSource3;

            interface IMediaCue;

            interface ITimedTextCue;

            interface ITimedTextRegion;

            interface ITimedTextStyle;

            interface ITimedTextSubformat;

            interface ITimedTextLine;

            interface ISingleSelectMediaTrackList;

            interface IMediaTrack;

            interface ITimedMetadataTrackError;

            interface IMediaCueEventArgs;

            interface ITimedMetadataTrackFailedEventArgs;

            interface IDataCue;

            interface ITimedMetadataTrackFactory;

            interface ITimedMetadataTrack;

            interface ITimedTextSourceResolveResultEventArgs;

            interface ITimedTextSource;

            interface ITimedTextSourceStatics;

            runtimeclass AudioStreamDescriptor;

            runtimeclass VideoStreamDescriptor;

            runtimeclass MediaStreamSource;

            runtimeclass MediaStreamSourceClosedEventArgs;

            runtimeclass MediaStreamSourceStartingEventArgs;

            runtimeclass MediaStreamSourceSampleRequestedEventArgs;

            runtimeclass MediaStreamSourceSwitchStreamsRequestedEventArgs;

            runtimeclass MediaStreamSamplePropertySet;

            runtimeclass MediaStreamSample;

            runtimeclass MediaStreamSampleProtectionProperties;

            runtimeclass MediaStreamSourceClosedRequest;

            runtimeclass MediaStreamSourceStartingRequestDeferral;

            runtimeclass MediaStreamSourceStartingRequest;

            runtimeclass MediaStreamSourceSampleRequestDeferral;

            runtimeclass MediaStreamSourceSampleRequest;

            runtimeclass MediaStreamSourceSwitchStreamsRequestDeferral;

            runtimeclass MediaStreamSourceSwitchStreamsRequest;

            runtimeclass MseStreamSource;

            runtimeclass MseSourceBufferList;

            runtimeclass MseSourceBuffer;

            runtimeclass HighDynamicRangeControl;

            runtimeclass SceneAnalysisEffect;

            runtimeclass SceneAnalyzedEventArgs;

            runtimeclass HighDynamicRangeOutput;

            runtimeclass SceneAnalysisEffectFrame;

            runtimeclass SceneAnalysisEffectDefinition;

            runtimeclass FaceDetectionEffectFrame;

            runtimeclass FaceDetectedEventArgs;

            runtimeclass FaceDetectionEffect;

            runtimeclass FaceDetectionEffectDefinition;

            runtimeclass VideoStabilizationEffectEnabledChangedEventArgs;

            runtimeclass VideoStabilizationEffect;

            runtimeclass VideoStabilizationEffectDefinition;

            runtimeclass MediaSourceError;

            runtimeclass MediaSource;

            runtimeclass MediaBinder;

            runtimeclass MediaBindingEventArgs;

            runtimeclass MediaSourceOpenOperationCompletedEventArgs;

            runtimeclass TimedTextSource;

            runtimeclass TimedMetadataTrack;

            runtimeclass MediaSourceStateChangedEventArgs;

            runtimeclass TimedTextRegion;

            runtimeclass TimedTextStyle;

            runtimeclass TimedTextLine;

            runtimeclass TimedTextSubformat;

            runtimeclass TimedMetadataTrackError;

            runtimeclass MediaCueEventArgs;

            runtimeclass TimedMetadataTrackFailedEventArgs;

            runtimeclass TimedTextSourceResolveResultEventArgs;

            runtimeclass TimedTextCue;

            runtimeclass DataCue;

            runtimeclass VideoTrack;

            runtimeclass AudioTrack;
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace Media
    {
        namespace Core
        {
            declare
            {
                interface Windows.Foundation.Collections.IIterable<Windows.Media.Core.AudioStreamDescriptor*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Media.Core.AudioTrack*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Media.Core.IMediaCue*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Media.Core.MseSourceBuffer*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Media.Core.MseTimeRange>;

                interface Windows.Foundation.Collections.IIterable<Windows.Media.Core.TimedMetadataTrack*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Media.Core.TimedTextLine*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Media.Core.TimedTextSource*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Media.Core.TimedTextSubformat*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Media.Core.VideoStreamDescriptor*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Media.Core.VideoTrack*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Media.Core.AudioStreamDescriptor*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Media.Core.AudioTrack*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Media.Core.IMediaCue*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Media.Core.MseSourceBuffer*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Media.Core.MseTimeRange>;

                interface Windows.Foundation.Collections.IIterator<Windows.Media.Core.TimedMetadataTrack*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Media.Core.TimedTextLine*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Media.Core.TimedTextSource*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Media.Core.TimedTextSubformat*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Media.Core.VideoStreamDescriptor*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Media.Core.VideoTrack*>;

                interface Windows.Foundation.Collections.IObservableVector<Windows.Media.Core.TimedMetadataTrack*>;

                interface Windows.Foundation.Collections.IObservableVector<Windows.Media.Core.TimedTextSource*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Media.Core.AudioStreamDescriptor*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Media.Core.AudioTrack*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Media.Core.IMediaCue*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Media.Core.MseSourceBuffer*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Media.Core.MseTimeRange>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Media.Core.TimedMetadataTrack*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Media.Core.TimedTextLine*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Media.Core.TimedTextSource*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Media.Core.TimedTextSubformat*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Media.Core.VideoStreamDescriptor*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.Media.Core.VideoTrack*>;

                interface Windows.Foundation.Collections.IVector<Windows.Media.Core.AudioStreamDescriptor*>;

                interface Windows.Foundation.Collections.IVector<Windows.Media.Core.TimedMetadataTrack*>;

                interface Windows.Foundation.Collections.IVector<Windows.Media.Core.TimedTextLine*>;

                interface Windows.Foundation.Collections.IVector<Windows.Media.Core.TimedTextSource*>;

                interface Windows.Foundation.Collections.IVector<Windows.Media.Core.TimedTextSubformat*>;

                interface Windows.Foundation.Collections.IVector<Windows.Media.Core.VideoStreamDescriptor*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Media.Core.MediaStreamSample*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.FaceDetectionEffect*, Windows.Media.Core.FaceDetectedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.ISingleSelectMediaTrackList*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaBinder*, Windows.Media.Core.MediaBindingEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaBindingEventArgs*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaSource*, Windows.Media.Core.MediaSourceOpenOperationCompletedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaSource*, Windows.Media.Core.MediaSourceStateChangedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaStreamSample*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaStreamSource*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaStreamSource*, Windows.Media.Core.MediaStreamSourceClosedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaStreamSource*, Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaStreamSource*, Windows.Media.Core.MediaStreamSourceStartingEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaStreamSource*, Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.MseSourceBuffer*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.MseSourceBufferList*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.MseStreamSource*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.SceneAnalysisEffect*, Windows.Media.Core.SceneAnalyzedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.TimedMetadataTrack*, Windows.Media.Core.MediaCueEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.TimedMetadataTrack*, Windows.Media.Core.TimedMetadataTrackFailedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.TimedTextSource*, Windows.Media.Core.TimedTextSourceResolveResultEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.Media.Core.VideoStabilizationEffect*, Windows.Media.Core.VideoStabilizationEffectEnabledChangedEventArgs*>;
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace Media
    {
        namespace Core
        {
            [version(0x06030000)]
            enum MediaStreamSourceClosedReason
            {
                Done                               = 0,
                UnknownError                       = 1,
                AppReportedError                   = 2,
                UnsupportedProtectionSystem        = 3,
                ProtectionSystemFailure            = 4,
                UnsupportedEncodingFormat          = 5,
                MissingSampleRequestedEventHandler = 6
            };

            [version(0x06030000)]
            enum MediaStreamSourceErrorStatus
            {
                Other                   = 0,
                OutOfMemory             = 1,
                FailedToOpenFile        = 2,
                FailedToConnectToServer = 3,
                ConnectionToServerLost  = 4,
                UnspecifiedNetworkError = 5,
                DecodeError             = 6,
                UnsupportedMediaFormat  = 7
            };

            [version(0x0A000000)]
            enum MseReadyState
            {
                Closed = 0,
                Open   = 1,
                Ended  = 2
            };

            [version(0x0A000000)]
            enum MseEndOfStreamStatus
            {
                Success      = 0,
                NetworkError = 1,
                DecodeError  = 2,
                UnknownError = 3
            };

            [version(0x0A000000)]
            enum MseAppendMode
            {
                Segments = 0,
                Sequence = 1
            };

            [version(0x0A000000)]
            enum FaceDetectionMode
            {
                HighPerformance = 0,
                Balanced        = 1,
                HighQuality     = 2
            };

            [version(0x0A000000)]
            enum VideoStabilizationEffectEnabledChangedReason
            {
                Programmatic     = 0,
                PixelRateTooHigh = 1,
                RunningSlowly    = 2
            };

            [version(0x0A000000)]
            enum MediaTrackKind
            {
                Audio         = 0,
                Video         = 1,
                TimedMetadata = 2
            };

            [version(0x0A000000)]
            enum TimedMetadataKind
            {
                Caption     = 0,
                Chapter     = 1,
                Custom      = 2,
                Data        = 3,
                Description = 4,
                Subtitle    = 5
            };

            [version(0x0A000000)]
            enum TimedMetadataTrackErrorCode
            {
                None            = 0,
                DataFormatError = 1,
                NetworkError    = 2,
                InternalError   = 3
            };

            [version(0x0A000000)]
            enum TimedTextScrollMode
            {
                Popon  = 0,
                Rollup = 1
            };

            [version(0x0A000000)]
            enum TimedTextUnit
            {
                Pixels     = 0,
                Percentage = 1
            };

            [version(0x0A000000)]
            enum TimedTextWritingMode
            {
                LeftRightTopBottom = 0,
                RightLeftTopBottom = 1,
                TopBottomRightLeft = 2,
                TopBottomLeftRight = 3,
                LeftRight          = 4,
                RightLeft          = 5,
                TopBottom          = 6
            };

            [version(0x0A000000)]
            enum TimedTextDisplayAlignment
            {
                Before = 0,
                After  = 1,
                Center = 2
            };

            [version(0x0A000000)]
            enum TimedTextLineAlignment
            {
                Start  = 0,
                End    = 1,
                Center = 2
            };

            [version(0x0A000000)]
            enum TimedTextWrapping
            {
                NoWrap = 0,
                Wrap   = 1
            };

            [version(0x0A000000)]
            enum TimedTextWeight
            {
                Normal = 400,
                Bold   = 700
            };

            [version(0x0A000000)]
            enum TimedTextFlowDirection
            {
                LeftToRight = 0,
                RightToLeft = 1
            };

            [version(0x0A000000)]
            enum MediaSourceState
            {
                Initial = 0,
                Opening = 1,
                Opened  = 2,
                Failed  = 3,
                Closed  = 4
            };

            [version(0x0A000000)]
            struct MseTimeRange
            {
                Windows.Foundation.TimeSpan Start;
                Windows.Foundation.TimeSpan End;
            };

            [version(0x0A000000)]
            struct TimedTextPadding
            {
                DOUBLE Before;
                DOUBLE After;
                DOUBLE Start;
                DOUBLE End;
                Windows.Media.Core.TimedTextUnit Unit;
            };

            [version(0x0A000000)]
            struct TimedTextSize
            {
                DOUBLE Height;
                DOUBLE Width;
                Windows.Media.Core.TimedTextUnit Unit;
            };

            [version(0x0A000000)]
            struct TimedTextDouble
            {
                DOUBLE Value;
                Windows.Media.Core.TimedTextUnit Unit;
            };

            [version(0x0A000000)]
            struct TimedTextPoint
            {
                DOUBLE X;
                DOUBLE Y;
                Windows.Media.Core.TimedTextUnit Unit;
            };

            [uuid(E7BFB599-A09D-4C21-BCDF-20AF4F86B3D9)]
            [version(0x06030000)]
            interface IMediaSource : IInspectable
            {
            }

            [uuid(80F16E6E-92F7-451E-97D2-AFD80742DA70)]
            [version(0x06030000)]
            interface IMediaStreamDescriptor : IInspectable
            {
                [propget] HRESULT IsSelected([out] [retval] boolean* selected);
                [propput] HRESULT Name([in] HSTRING value);
                [propget] HRESULT Name([out] [retval] HSTRING* value);
                [propput] HRESULT Language([in] HSTRING value);
                [propget] HRESULT Language([out] [retval] HSTRING* value);
            }

            [exclusiveto(Windows.Media.Core.AudioStreamDescriptor)]
            [uuid(1E3692E4-4027-4847-A70B-DF1D9A2A7B04)]
            [version(0x06030000)]
            interface IAudioStreamDescriptor : IInspectable
                requires
                    Windows.Media.Core.IMediaStreamDescriptor
            {
                [propget] HRESULT EncodingProperties([out] [retval] Windows.Media.MediaProperties.AudioEncodingProperties** encodingProperties);
            }

            [exclusiveto(Windows.Media.Core.AudioStreamDescriptor)]
            [uuid(4A86CE9E-4CB1-4380-8E0C-83504B7F5BF3)]
            [version(0x06030000)]
            interface IAudioStreamDescriptorFactory : IInspectable
            {
                HRESULT Create([in] Windows.Media.MediaProperties.AudioEncodingProperties* encodingProperties, [out] [retval] Windows.Media.Core.AudioStreamDescriptor** result);
            }

            [exclusiveto(Windows.Media.Core.VideoStreamDescriptor)]
            [uuid(12EE0D55-9C2B-4440-8057-2C7A90F0CBEC)]
            [version(0x06030000)]
            interface IVideoStreamDescriptor : IInspectable
                requires
                    Windows.Media.Core.IMediaStreamDescriptor
            {
                [propget] HRESULT EncodingProperties([out] [retval] Windows.Media.MediaProperties.VideoEncodingProperties** encodingProperties);
            }

            [exclusiveto(Windows.Media.Core.VideoStreamDescriptor)]
            [uuid(494EF6D1-BB75-43D2-9E5E-7B79A3AFCED4)]
            [version(0x06030000)]
            interface IVideoStreamDescriptorFactory : IInspectable
            {
                HRESULT Create([in] Windows.Media.MediaProperties.VideoEncodingProperties* encodingProperties, [out] [retval] Windows.Media.Core.VideoStreamDescriptor** result);
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSource)]
            [uuid(3712D543-45EB-4138-AA62-C01E26F3843F)]
            [version(0x06030000)]
            interface IMediaStreamSource : IInspectable
                requires
                    Windows.Media.Core.IMediaSource
            {
                [eventadd] HRESULT Closed([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaStreamSource*, Windows.Media.Core.MediaStreamSourceClosedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Closed([in] EventRegistrationToken token);
                [eventadd] HRESULT Starting([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaStreamSource*, Windows.Media.Core.MediaStreamSourceStartingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Starting([in] EventRegistrationToken token);
                [eventadd] HRESULT Paused([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaStreamSource*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Paused([in] EventRegistrationToken token);
                [eventadd] HRESULT SampleRequested([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaStreamSource*, Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT SampleRequested([in] EventRegistrationToken token);
                [eventadd] HRESULT SwitchStreamsRequested([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaStreamSource*, Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT SwitchStreamsRequested([in] EventRegistrationToken token);
                HRESULT NotifyError([in] Windows.Media.Core.MediaStreamSourceErrorStatus errorStatus);
                HRESULT AddStreamDescriptor([in] Windows.Media.Core.IMediaStreamDescriptor* descriptor);
                [propput] HRESULT MediaProtectionManager([in] Windows.Media.Protection.MediaProtectionManager* value);
                [propget] HRESULT MediaProtectionManager([out] [retval] Windows.Media.Protection.MediaProtectionManager** value);
                [propput] HRESULT Duration([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT Duration([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT CanSeek([in] boolean value);
                [propget] HRESULT CanSeek([out] [retval] boolean* value);
                [propput] HRESULT BufferTime([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT BufferTime([out] [retval] Windows.Foundation.TimeSpan* value);
                HRESULT SetBufferedRange([in] Windows.Foundation.TimeSpan startOffset, [in] Windows.Foundation.TimeSpan endOffset);
                [propget] HRESULT MusicProperties([out] [retval] Windows.Storage.FileProperties.MusicProperties** value);
                [propget] HRESULT VideoProperties([out] [retval] Windows.Storage.FileProperties.VideoProperties** value);
                [propput] HRESULT Thumbnail([in] Windows.Storage.Streams.IRandomAccessStreamReference* value);
                [propget] HRESULT Thumbnail([out] [retval] Windows.Storage.Streams.IRandomAccessStreamReference** value);
                HRESULT AddProtectionKey([in] Windows.Media.Core.IMediaStreamDescriptor* streamDescriptor, [in] UINT32 __keyIdentifierSize, [in] [size_is(__keyIdentifierSize)] BYTE* keyIdentifier, [in] UINT32 __licenseDataSize, [in] [size_is(__licenseDataSize)] BYTE* licenseData);
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSource)]
            [uuid(EF77E0D9-D158-4B7A-863F-203342FBFD41)]
            [version(0x06030000)]
            interface IMediaStreamSourceFactory : IInspectable
            {
                HRESULT CreateFromDescriptor([in] Windows.Media.Core.IMediaStreamDescriptor* descriptor, [out] [retval] Windows.Media.Core.MediaStreamSource** result);
                HRESULT CreateFromDescriptors([in] Windows.Media.Core.IMediaStreamDescriptor* descriptor, [in] Windows.Media.Core.IMediaStreamDescriptor* descriptor2, [out] [retval] Windows.Media.Core.MediaStreamSource** result);
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSample)]
            [uuid(5C8DB627-4B80-4361-9837-6CB7481AD9D6)]
            [version(0x06030000)]
            interface IMediaStreamSample : IInspectable
            {
                [eventadd] HRESULT Processed([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaStreamSample*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Processed([in] EventRegistrationToken token);
                [propget] HRESULT Buffer([out] [retval] Windows.Storage.Streams.Buffer** value);
                [propget] HRESULT Timestamp([out] [retval] Windows.Foundation.TimeSpan* value);
                [propget] HRESULT ExtendedProperties([out] [retval] Windows.Media.Core.MediaStreamSamplePropertySet** value);
                [propget] HRESULT Protection([out] [retval] Windows.Media.Core.MediaStreamSampleProtectionProperties** value);
                [propput] HRESULT DecodeTimestamp([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT DecodeTimestamp([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT Duration([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT Duration([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT KeyFrame([in] boolean value);
                [propget] HRESULT KeyFrame([out] [retval] boolean* value);
                [propput] HRESULT Discontinuous([in] boolean value);
                [propget] HRESULT Discontinuous([out] [retval] boolean* value);
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSample)]
            [uuid(DFDF218F-A6CF-4579-BE41-73DD941AD972)]
            [version(0x06030000)]
            interface IMediaStreamSampleStatics : IInspectable
            {
                HRESULT CreateFromBuffer([in] Windows.Storage.Streams.IBuffer* buffer, [in] Windows.Foundation.TimeSpan timestamp, [out] [retval] Windows.Media.Core.MediaStreamSample** value);
                HRESULT CreateFromStreamAsync([in] Windows.Storage.Streams.IInputStream* stream, [in] UINT32 count, [in] Windows.Foundation.TimeSpan timestamp, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Core.MediaStreamSample*>** value);
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSampleProtectionProperties)]
            [uuid(4EB88292-ECDF-493E-841D-DD4ADD7CACA2)]
            [version(0x06030000)]
            interface IMediaStreamSampleProtectionProperties : IInspectable
            {
                HRESULT SetKeyIdentifier([in] UINT32 __valueSize, [in] [size_is(__valueSize)] BYTE* value);
                HRESULT GetKeyIdentifier([out] UINT32* __valueSize, [out] [size_is(, *__valueSize)] BYTE** value);
                HRESULT SetInitializationVector([in] UINT32 __valueSize, [in] [size_is(__valueSize)] BYTE* value);
                HRESULT GetInitializationVector([out] UINT32* __valueSize, [out] [size_is(, *__valueSize)] BYTE** value);
                HRESULT SetSubSampleMapping([in] UINT32 __valueSize, [in] [size_is(__valueSize)] BYTE* value);
                HRESULT GetSubSampleMapping([out] UINT32* __valueSize, [out] [size_is(, *__valueSize)] BYTE** value);
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSourceClosedRequest)]
            [uuid(907C00E9-18A3-4951-887A-2C1EEBD5C69E)]
            [version(0x06030000)]
            interface IMediaStreamSourceClosedRequest : IInspectable
            {
                [propget] HRESULT Reason([out] [retval] Windows.Media.Core.MediaStreamSourceClosedReason* value);
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSourceClosedEventArgs)]
            [uuid(CD8C7EB2-4816-4E24-88F0-491EF7386406)]
            [version(0x06030000)]
            interface IMediaStreamSourceClosedEventArgs : IInspectable
            {
                [propget] HRESULT Request([out] [retval] Windows.Media.Core.MediaStreamSourceClosedRequest** value);
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSourceStartingRequestDeferral)]
            [uuid(3F1356A5-6340-4DC4-9910-068ED9F598F8)]
            [version(0x06030000)]
            interface IMediaStreamSourceStartingRequestDeferral : IInspectable
            {
                HRESULT Complete();
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSourceStartingRequest)]
            [uuid(2A9093E4-35C4-4B1B-A791-0D99DB56DD1D)]
            [version(0x06030000)]
            interface IMediaStreamSourceStartingRequest : IInspectable
            {
                [propget] HRESULT StartPosition([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                HRESULT GetDeferral([out] [retval] Windows.Media.Core.MediaStreamSourceStartingRequestDeferral** deferral);
                HRESULT SetActualStartPosition([in] Windows.Foundation.TimeSpan position);
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSourceStartingEventArgs)]
            [uuid(F41468F2-C274-4940-A5BB-28A572452FA7)]
            [version(0x06030000)]
            interface IMediaStreamSourceStartingEventArgs : IInspectable
            {
                [propget] HRESULT Request([out] [retval] Windows.Media.Core.MediaStreamSourceStartingRequest** value);
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSourceSampleRequestDeferral)]
            [uuid(7895CC02-F982-43C8-9D16-C62D999319BE)]
            [version(0x06030000)]
            interface IMediaStreamSourceSampleRequestDeferral : IInspectable
            {
                HRESULT Complete();
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSourceSampleRequest)]
            [uuid(4DB341A9-3501-4D9B-83F9-8F235C822532)]
            [version(0x06030000)]
            interface IMediaStreamSourceSampleRequest : IInspectable
            {
                [propget] HRESULT StreamDescriptor([out] [retval] Windows.Media.Core.IMediaStreamDescriptor** value);
                HRESULT GetDeferral([out] [retval] Windows.Media.Core.MediaStreamSourceSampleRequestDeferral** deferral);
                [propput] HRESULT Sample([in] Windows.Media.Core.MediaStreamSample* value);
                [propget] HRESULT Sample([out] [retval] Windows.Media.Core.MediaStreamSample** value);
                HRESULT ReportSampleProgress([in] UINT32 progress);
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs)]
            [uuid(10F9BB9E-71C5-492F-847F-0DA1F35E81F8)]
            [version(0x06030000)]
            interface IMediaStreamSourceSampleRequestedEventArgs : IInspectable
            {
                [propget] HRESULT Request([out] [retval] Windows.Media.Core.MediaStreamSourceSampleRequest** value);
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestDeferral)]
            [uuid(BEE3D835-A505-4F9A-B943-2B8CB1B4BBD9)]
            [version(0x06030000)]
            interface IMediaStreamSourceSwitchStreamsRequestDeferral : IInspectable
            {
                HRESULT Complete();
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSourceSwitchStreamsRequest)]
            [uuid(41B8808E-38A9-4EC3-9BA0-B69B85501E90)]
            [version(0x06030000)]
            interface IMediaStreamSourceSwitchStreamsRequest : IInspectable
            {
                [propget] HRESULT OldStreamDescriptor([out] [retval] Windows.Media.Core.IMediaStreamDescriptor** value);
                [propget] HRESULT NewStreamDescriptor([out] [retval] Windows.Media.Core.IMediaStreamDescriptor** value);
                HRESULT GetDeferral([out] [retval] Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestDeferral** deferral);
            }

            [exclusiveto(Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs)]
            [uuid(42202B72-6EA1-4677-981E-350A0DA412AA)]
            [version(0x06030000)]
            interface IMediaStreamSourceSwitchStreamsRequestedEventArgs : IInspectable
            {
                [propget] HRESULT Request([out] [retval] Windows.Media.Core.MediaStreamSourceSwitchStreamsRequest** value);
            }

            [exclusiveto(Windows.Media.Core.MseStreamSource)]
            [uuid(465C679D-D570-43CE-BA21-0BFF5F3FBD0A)]
            [version(0x0A000000)]
            interface IMseStreamSourceStatics : IInspectable
            {
                HRESULT IsContentTypeSupported([in] HSTRING contentType, [out] [retval] boolean* value);
            }

            [exclusiveto(Windows.Media.Core.MseStreamSource)]
            [uuid(B0B4198D-02F4-4923-88DD-81BC3F360FFA)]
            [version(0x0A000000)]
            interface IMseStreamSource : IInspectable
                requires
                    Windows.Media.Core.IMediaSource
            {
                [eventadd] HRESULT Opened([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MseStreamSource*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Opened([in] EventRegistrationToken token);
                [eventadd] HRESULT Ended([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MseStreamSource*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Ended([in] EventRegistrationToken token);
                [eventadd] HRESULT Closed([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MseStreamSource*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Closed([in] EventRegistrationToken token);
                [propget] HRESULT SourceBuffers([out] [retval] Windows.Media.Core.MseSourceBufferList** value);
                [propget] HRESULT ActiveSourceBuffers([out] [retval] Windows.Media.Core.MseSourceBufferList** value);
                [propget] HRESULT ReadyState([out] [retval] Windows.Media.Core.MseReadyState* value);
                [propget] HRESULT Duration([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                [propput] HRESULT Duration([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>* value);
                HRESULT AddSourceBuffer([in] HSTRING mimeType, [out] [retval] Windows.Media.Core.MseSourceBuffer** buffer);
                HRESULT RemoveSourceBuffer([in] Windows.Media.Core.MseSourceBuffer* buffer);
                HRESULT EndOfStream([in] Windows.Media.Core.MseEndOfStreamStatus status);
            }

            [exclusiveto(Windows.Media.Core.MseSourceBuffer)]
            [uuid(0C1AA3E3-DF8D-4079-A3FE-6849184B4E2F)]
            [version(0x0A000000)]
            interface IMseSourceBuffer : IInspectable
            {
                [eventadd] HRESULT UpdateStarting([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MseSourceBuffer*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT UpdateStarting([in] EventRegistrationToken token);
                [eventadd] HRESULT Updated([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MseSourceBuffer*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Updated([in] EventRegistrationToken token);
                [eventadd] HRESULT UpdateEnded([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MseSourceBuffer*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT UpdateEnded([in] EventRegistrationToken token);
                [eventadd] HRESULT ErrorOccurred([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MseSourceBuffer*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ErrorOccurred([in] EventRegistrationToken token);
                [eventadd] HRESULT Aborted([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MseSourceBuffer*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Aborted([in] EventRegistrationToken token);
                [propget] HRESULT Mode([out] [retval] Windows.Media.Core.MseAppendMode* value);
                [propput] HRESULT Mode([in] Windows.Media.Core.MseAppendMode value);
                [propget] HRESULT IsUpdating([out] [retval] boolean* value);
                [propget] HRESULT Buffered([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.Core.MseTimeRange>** value);
                [propget] HRESULT TimestampOffset([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT TimestampOffset([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT AppendWindowStart([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT AppendWindowStart([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT AppendWindowEnd([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                [propput] HRESULT AppendWindowEnd([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>* value);
                HRESULT AppendBuffer([in] Windows.Storage.Streams.IBuffer* buffer);
                [overload("AppendStream")] HRESULT AppendStream([in] Windows.Storage.Streams.IInputStream* stream);
                [overload("AppendStream")] HRESULT AppendStreamMaxSize([in] Windows.Storage.Streams.IInputStream* stream, [in] UINT64 maxSize);
                HRESULT Abort();
                HRESULT Remove([in] Windows.Foundation.TimeSpan start, [in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>* end);
            }

            [exclusiveto(Windows.Media.Core.MseSourceBufferList)]
            [uuid(95FAE8E7-A8E7-4EBF-8927-145E940BA511)]
            [version(0x0A000000)]
            interface IMseSourceBufferList : IInspectable
            {
                [eventadd] HRESULT SourceBufferAdded([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MseSourceBufferList*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT SourceBufferAdded([in] EventRegistrationToken token);
                [eventadd] HRESULT SourceBufferRemoved([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MseSourceBufferList*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT SourceBufferRemoved([in] EventRegistrationToken token);
                [propget] HRESULT Buffers([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.Core.MseSourceBuffer*>** value);
            }

            [exclusiveto(Windows.Media.Core.HighDynamicRangeControl)]
            [uuid(55F1A7AE-D957-4DC9-9D1C-8553A82A7D99)]
            [version(0x0A000000)]
            interface IHighDynamicRangeControl : IInspectable
            {
                [propput] HRESULT Enabled([in] boolean value);
                [propget] HRESULT Enabled([out] [retval] boolean* value);
            }

            [exclusiveto(Windows.Media.Core.SceneAnalysisEffect)]
            [uuid(C04BA319-CA41-4813-BFFD-7B08B0ED2557)]
            [version(0x0A000000)]
            interface ISceneAnalysisEffect : IInspectable
                requires
                    Windows.Media.IMediaExtension
            {
                [propget] HRESULT HighDynamicRangeAnalyzer([out] [retval] Windows.Media.Core.HighDynamicRangeControl** value);
                [propput] HRESULT DesiredAnalysisInterval([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT DesiredAnalysisInterval([out] [retval] Windows.Foundation.TimeSpan* value);
                [eventadd] HRESULT SceneAnalyzed([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.SceneAnalysisEffect*, Windows.Media.Core.SceneAnalyzedEventArgs*>* handler, [out] [retval] EventRegistrationToken* cookie);
                [eventremove] HRESULT SceneAnalyzed([in] EventRegistrationToken cookie);
            }

            [exclusiveto(Windows.Media.Core.HighDynamicRangeOutput)]
            [uuid(0F57806B-253B-4119-BB40-3A90E51384F7)]
            [version(0x0A000000)]
            interface IHighDynamicRangeOutput : IInspectable
            {
                [propget] HRESULT Certainty([out] [retval] DOUBLE* value);
                [propget] HRESULT FrameControllers([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.Devices.Core.FrameController*>** value);
            }

            [exclusiveto(Windows.Media.Core.SceneAnalysisEffectFrame)]
            [uuid(D8B10E4C-7FD9-42E1-85EB-6572C297C987)]
            [version(0x0A000000)]
            interface ISceneAnalysisEffectFrame : IInspectable
                requires
                    Windows.Media.IMediaFrame,
                    Windows.Foundation.IClosable
            {
                [propget] HRESULT FrameControlValues([out] [retval] Windows.Media.Capture.CapturedFrameControlValues** value);
                [propget] HRESULT HighDynamicRange([out] [retval] Windows.Media.Core.HighDynamicRangeOutput** value);
            }

            [exclusiveto(Windows.Media.Core.SceneAnalyzedEventArgs)]
            [uuid(146B9588-2851-45E4-AD55-44CF8DF8DB4D)]
            [version(0x0A000000)]
            interface ISceneAnalyzedEventArgs : IInspectable
            {
                [propget] HRESULT ResultFrame([out] [retval] Windows.Media.Core.SceneAnalysisEffectFrame** value);
            }

            [exclusiveto(Windows.Media.Core.FaceDetectionEffectFrame)]
            [uuid(8AB08993-5DC8-447B-A247-5270BD802ECE)]
            [version(0x0A000000)]
            interface IFaceDetectionEffectFrame : IInspectable
                requires
                    Windows.Media.IMediaFrame,
                    Windows.Foundation.IClosable
            {
                [propget] HRESULT DetectedFaces([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.FaceAnalysis.DetectedFace*>** value);
            }

            [exclusiveto(Windows.Media.Core.FaceDetectedEventArgs)]
            [uuid(19918426-C65B-46BA-85F8-13880576C90A)]
            [version(0x0A000000)]
            interface IFaceDetectedEventArgs : IInspectable
            {
                [propget] HRESULT ResultFrame([out] [retval] Windows.Media.Core.FaceDetectionEffectFrame** value);
            }

            [exclusiveto(Windows.Media.Core.FaceDetectionEffect)]
            [uuid(AE15EBD2-0542-42A9-BC90-F283A29F46C1)]
            [version(0x0A000000)]
            interface IFaceDetectionEffect : IInspectable
                requires
                    Windows.Media.IMediaExtension
            {
                [propput] HRESULT Enabled([in] boolean value);
                [propget] HRESULT Enabled([out] [retval] boolean* value);
                [propput] HRESULT DesiredDetectionInterval([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT DesiredDetectionInterval([out] [retval] Windows.Foundation.TimeSpan* value);
                [eventadd] HRESULT FaceDetected([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.FaceDetectionEffect*, Windows.Media.Core.FaceDetectedEventArgs*>* handler, [out] [retval] EventRegistrationToken* cookie);
                [eventremove] HRESULT FaceDetected([in] EventRegistrationToken cookie);
            }

            [exclusiveto(Windows.Media.Core.FaceDetectionEffectDefinition)]
            [uuid(43DCA081-B848-4F33-B702-1FD2624FB016)]
            [version(0x0A000000)]
            interface IFaceDetectionEffectDefinition : IInspectable
                requires
                    Windows.Media.Effects.IVideoEffectDefinition
            {
                [propput] HRESULT DetectionMode([in] Windows.Media.Core.FaceDetectionMode value);
                [propget] HRESULT DetectionMode([out] [retval] Windows.Media.Core.FaceDetectionMode* value);
                [propput] HRESULT SynchronousDetectionEnabled([in] boolean value);
                [propget] HRESULT SynchronousDetectionEnabled([out] [retval] boolean* value);
            }

            [exclusiveto(Windows.Media.Core.VideoStabilizationEffectEnabledChangedEventArgs)]
            [uuid(187EFF28-67BB-4713-B900-4168DA164529)]
            [version(0x0A000000)]
            interface IVideoStabilizationEffectEnabledChangedEventArgs : IInspectable
            {
                [propget] HRESULT Reason([out] [retval] Windows.Media.Core.VideoStabilizationEffectEnabledChangedReason* value);
            }

            [exclusiveto(Windows.Media.Core.VideoStabilizationEffect)]
            [uuid(0808A650-9698-4E57-877B-BD7CB2EE0F8A)]
            [version(0x0A000000)]
            interface IVideoStabilizationEffect : IInspectable
                requires
                    Windows.Media.IMediaExtension
            {
                [propput] HRESULT Enabled([in] boolean value);
                [propget] HRESULT Enabled([out] [retval] boolean* value);
                [eventadd] HRESULT EnabledChanged([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.VideoStabilizationEffect*, Windows.Media.Core.VideoStabilizationEffectEnabledChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* cookie);
                [eventremove] HRESULT EnabledChanged([in] EventRegistrationToken cookie);
                HRESULT GetRecommendedStreamConfiguration([in] Windows.Media.Devices.VideoDeviceController* controller, [in] Windows.Media.MediaProperties.VideoEncodingProperties* desiredProperties, [out] [retval] Windows.Media.Capture.VideoStreamConfiguration** value);
            }

            [exclusiveto(Windows.Media.Core.MediaSourceError)]
            [uuid(5C0A8965-37C5-4E9D-8D21-1CDEE90CECC6)]
            [version(0x0A000000)]
            interface IMediaSourceError : IInspectable
            {
                [propget] HRESULT ExtendedError([out] [retval] HRESULT* value);
            }

            [exclusiveto(Windows.Media.Core.MediaSourceOpenOperationCompletedEventArgs)]
            [uuid(FC682CEB-E281-477C-A8E0-1ACD654114C8)]
            [version(0x0A000000)]
            interface IMediaSourceOpenOperationCompletedEventArgs : IInspectable
            {
                [propget] HRESULT Error([out] [retval] Windows.Media.Core.MediaSourceError** value);
            }

            [exclusiveto(Windows.Media.Core.MediaSourceStateChangedEventArgs)]
            [uuid(0A30AF82-9071-4BAC-BC39-CA2A93B717A9)]
            [version(0x0A000000)]
            interface IMediaSourceStateChangedEventArgs : IInspectable
            {
                [propget] HRESULT OldState([out] [retval] Windows.Media.Core.MediaSourceState* value);
                [propget] HRESULT NewState([out] [retval] Windows.Media.Core.MediaSourceState* value);
            }

            [exclusiveto(Windows.Media.Core.MediaSource)]
            [uuid(F77D6FA4-4652-410E-B1D8-E9A5E245A45C)]
            [version(0x0A000000)]
            interface IMediaSourceStatics : IInspectable
            {
                HRESULT CreateFromAdaptiveMediaSource([in] Windows.Media.Streaming.Adaptive.AdaptiveMediaSource* mediaSource, [out] [retval] Windows.Media.Core.MediaSource** result);
                HRESULT CreateFromMediaStreamSource([in] Windows.Media.Core.MediaStreamSource* mediaSource, [out] [retval] Windows.Media.Core.MediaSource** result);
                HRESULT CreateFromMseStreamSource([in] Windows.Media.Core.MseStreamSource* mediaSource, [out] [retval] Windows.Media.Core.MediaSource** result);
                HRESULT CreateFromIMediaSource([in] Windows.Media.Core.IMediaSource* mediaSource, [out] [retval] Windows.Media.Core.MediaSource** result);
                HRESULT CreateFromStorageFile([in] Windows.Storage.IStorageFile* file, [out] [retval] Windows.Media.Core.MediaSource** result);
                HRESULT CreateFromStream([in] Windows.Storage.Streams.IRandomAccessStream* stream, [in] HSTRING contentType, [out] [retval] Windows.Media.Core.MediaSource** result);
                HRESULT CreateFromStreamReference([in] Windows.Storage.Streams.IRandomAccessStreamReference* stream, [in] HSTRING contentType, [out] [retval] Windows.Media.Core.MediaSource** result);
                HRESULT CreateFromUri([in] Windows.Foundation.Uri* uri, [out] [retval] Windows.Media.Core.MediaSource** result);
            }

            [exclusiveto(Windows.Media.Core.MediaSource)]
            [uuid(EEE161A4-7F13-4896-B8CB-DF0DE5BCB9F1)]
            [version(0x0A000000)]
            interface IMediaSourceStatics2 : IInspectable
            {
                HRESULT CreateFromMediaBinder([in] Windows.Media.Core.MediaBinder* binder, [out] [retval] Windows.Media.Core.MediaSource** result);
            }

            [exclusiveto(Windows.Media.Core.MediaBinder)]
            [uuid(2B7E40AA-DE07-424F-83F1-F1DE46C4FA2E)]
            [version(0x0A000000)]
            interface IMediaBinder : IInspectable
            {
                [eventadd] HRESULT Binding([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaBinder*, Windows.Media.Core.MediaBindingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Binding([in] EventRegistrationToken token);
                [propget] HRESULT Token([out] [retval] HSTRING* value);
                [propput] HRESULT Token([in] HSTRING value);
                [propget] HRESULT Source([out] [retval] Windows.Media.Core.MediaSource** value);
            }

            [exclusiveto(Windows.Media.Core.MediaBindingEventArgs)]
            [uuid(B61CB25A-1B6D-4630-A86D-2F0837F712E5)]
            [version(0x0A000000)]
            interface IMediaBindingEventArgs : IInspectable
            {
                [eventadd] HRESULT Canceled([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaBindingEventArgs*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Canceled([in] EventRegistrationToken token);
                [propget] HRESULT MediaBinder([out] [retval] Windows.Media.Core.MediaBinder** value);
                HRESULT GetDeferral([out] [retval] Windows.Foundation.Deferral** deferral);
                HRESULT SetUri([in] Windows.Foundation.Uri* uri);
                HRESULT SetStream([in] Windows.Storage.Streams.IRandomAccessStream* stream, [in] HSTRING contentType);
                HRESULT SetStreamReference([in] Windows.Storage.Streams.IRandomAccessStreamReference* stream, [in] HSTRING contentType);
            }

            [exclusiveto(Windows.Media.Core.MediaSource)]
            [uuid(2EB61048-655F-4C37-B813-B4E45DFA0ABE)]
            [version(0x0A000000)]
            interface IMediaSource2 : IInspectable
                requires
                    Windows.Media.Playback.IMediaPlaybackSource,
                    Windows.Foundation.IClosable
            {
                [eventadd] HRESULT OpenOperationCompleted([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaSource*, Windows.Media.Core.MediaSourceOpenOperationCompletedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT OpenOperationCompleted([in] EventRegistrationToken token);
                [propget] HRESULT CustomProperties([out] [retval] Windows.Foundation.Collections.ValueSet** value);
                [propget] HRESULT Duration([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                [propget] HRESULT IsOpen([out] [retval] boolean* value);
                [propget] HRESULT ExternalTimedTextSources([out] [retval] Windows.Foundation.Collections.IObservableVector<Windows.Media.Core.TimedTextSource*>** value);
                [propget] HRESULT ExternalTimedMetadataTracks([out] [retval] Windows.Foundation.Collections.IObservableVector<Windows.Media.Core.TimedMetadataTrack*>** value);
            }

            [exclusiveto(Windows.Media.Core.MediaSource)]
            [uuid(B59F0D9B-4B6E-41ED-BBB4-7C7509A994AD)]
            [version(0x0A000000)]
            interface IMediaSource3 : IInspectable
                requires
                    Windows.Media.Core.IMediaSource2,
                    Windows.Media.Playback.IMediaPlaybackSource,
                    Windows.Foundation.IClosable
            {
                [eventadd] HRESULT StateChanged([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.MediaSource*, Windows.Media.Core.MediaSourceStateChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT StateChanged([in] EventRegistrationToken token);
                [propget] HRESULT State([out] [retval] Windows.Media.Core.MediaSourceState* value);
                HRESULT Reset();
            }

            [uuid(C7D15E5D-59DC-431F-A0EE-27744323B36D)]
            [version(0x0A000000)]
            interface IMediaCue : IInspectable
            {
                [propput] HRESULT StartTime([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT StartTime([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT Duration([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT Duration([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT Id([in] HSTRING value);
                [propget] HRESULT Id([out] [retval] HSTRING* value);
            }

            [exclusiveto(Windows.Media.Core.TimedTextCue)]
            [uuid(51C79E51-3B86-494D-B359-BB2EA7ACA9A9)]
            [version(0x0A000000)]
            interface ITimedTextCue : IInspectable
                requires
                    Windows.Media.Core.IMediaCue
            {
                [propget] HRESULT CueRegion([out] [retval] Windows.Media.Core.TimedTextRegion** value);
                [propput] HRESULT CueRegion([in] Windows.Media.Core.TimedTextRegion* value);
                [propget] HRESULT CueStyle([out] [retval] Windows.Media.Core.TimedTextStyle** value);
                [propput] HRESULT CueStyle([in] Windows.Media.Core.TimedTextStyle* value);
                [propget] HRESULT Lines([out] [retval] Windows.Foundation.Collections.IVector<Windows.Media.Core.TimedTextLine*>** value);
            }

            [exclusiveto(Windows.Media.Core.TimedTextRegion)]
            [uuid(1ED0881F-8A06-4222-9F59-B21BF40124B4)]
            [version(0x0A000000)]
            interface ITimedTextRegion : IInspectable
            {
                [propget] HRESULT Name([out] [retval] HSTRING* value);
                [propput] HRESULT Name([in] HSTRING value);
                [propget] HRESULT Position([out] [retval] Windows.Media.Core.TimedTextPoint* value);
                [propput] HRESULT Position([in] Windows.Media.Core.TimedTextPoint value);
                [propget] HRESULT Extent([out] [retval] Windows.Media.Core.TimedTextSize* value);
                [propput] HRESULT Extent([in] Windows.Media.Core.TimedTextSize value);
                [propget] HRESULT Background([out] [retval] Windows.UI.Color* value);
                [propput] HRESULT Background([in] Windows.UI.Color value);
                [propget] HRESULT WritingMode([out] [retval] Windows.Media.Core.TimedTextWritingMode* value);
                [propput] HRESULT WritingMode([in] Windows.Media.Core.TimedTextWritingMode value);
                [propget] HRESULT DisplayAlignment([out] [retval] Windows.Media.Core.TimedTextDisplayAlignment* value);
                [propput] HRESULT DisplayAlignment([in] Windows.Media.Core.TimedTextDisplayAlignment value);
                [propget] HRESULT LineHeight([out] [retval] Windows.Media.Core.TimedTextDouble* value);
                [propput] HRESULT LineHeight([in] Windows.Media.Core.TimedTextDouble value);
                [propget] HRESULT IsOverflowClipped([out] [retval] boolean* value);
                [propput] HRESULT IsOverflowClipped([in] boolean value);
                [propget] HRESULT Padding([out] [retval] Windows.Media.Core.TimedTextPadding* value);
                [propput] HRESULT Padding([in] Windows.Media.Core.TimedTextPadding value);
                [propget] HRESULT TextWrapping([out] [retval] Windows.Media.Core.TimedTextWrapping* value);
                [propput] HRESULT TextWrapping([in] Windows.Media.Core.TimedTextWrapping value);
                [propget] HRESULT ZIndex([out] [retval] INT32* value);
                [propput] HRESULT ZIndex([in] INT32 value);
                [propget] HRESULT ScrollMode([out] [retval] Windows.Media.Core.TimedTextScrollMode* value);
                [propput] HRESULT ScrollMode([in] Windows.Media.Core.TimedTextScrollMode value);
            }

            [exclusiveto(Windows.Media.Core.TimedTextStyle)]
            [uuid(1BB2384D-A825-40C2-A7F5-281EAEDF3B55)]
            [version(0x0A000000)]
            interface ITimedTextStyle : IInspectable
            {
                [propget] HRESULT Name([out] [retval] HSTRING* value);
                [propput] HRESULT Name([in] HSTRING value);
                [propget] HRESULT FontFamily([out] [retval] HSTRING* value);
                [propput] HRESULT FontFamily([in] HSTRING value);
                [propget] HRESULT FontSize([out] [retval] Windows.Media.Core.TimedTextDouble* value);
                [propput] HRESULT FontSize([in] Windows.Media.Core.TimedTextDouble value);
                [propget] HRESULT FontWeight([out] [retval] Windows.Media.Core.TimedTextWeight* value);
                [propput] HRESULT FontWeight([in] Windows.Media.Core.TimedTextWeight value);
                [propget] HRESULT Foreground([out] [retval] Windows.UI.Color* value);
                [propput] HRESULT Foreground([in] Windows.UI.Color value);
                [propget] HRESULT Background([out] [retval] Windows.UI.Color* value);
                [propput] HRESULT Background([in] Windows.UI.Color value);
                [propget] HRESULT IsBackgroundAlwaysShown([out] [retval] boolean* value);
                [propput] HRESULT IsBackgroundAlwaysShown([in] boolean value);
                [propget] HRESULT FlowDirection([out] [retval] Windows.Media.Core.TimedTextFlowDirection* value);
                [propput] HRESULT FlowDirection([in] Windows.Media.Core.TimedTextFlowDirection value);
                [propget] HRESULT LineAlignment([out] [retval] Windows.Media.Core.TimedTextLineAlignment* value);
                [propput] HRESULT LineAlignment([in] Windows.Media.Core.TimedTextLineAlignment value);
                [propget] HRESULT OutlineColor([out] [retval] Windows.UI.Color* value);
                [propput] HRESULT OutlineColor([in] Windows.UI.Color value);
                [propget] HRESULT OutlineThickness([out] [retval] Windows.Media.Core.TimedTextDouble* value);
                [propput] HRESULT OutlineThickness([in] Windows.Media.Core.TimedTextDouble value);
                [propget] HRESULT OutlineRadius([out] [retval] Windows.Media.Core.TimedTextDouble* value);
                [propput] HRESULT OutlineRadius([in] Windows.Media.Core.TimedTextDouble value);
            }

            [exclusiveto(Windows.Media.Core.TimedTextSubformat)]
            [uuid(D713502F-3261-4722-A0C2-B937B2390F14)]
            [version(0x0A000000)]
            interface ITimedTextSubformat : IInspectable
            {
                [propget] HRESULT StartIndex([out] [retval] INT32* value);
                [propput] HRESULT StartIndex([in] INT32 value);
                [propget] HRESULT Length([out] [retval] INT32* value);
                [propput] HRESULT Length([in] INT32 value);
                [propget] HRESULT SubformatStyle([out] [retval] Windows.Media.Core.TimedTextStyle** value);
                [propput] HRESULT SubformatStyle([in] Windows.Media.Core.TimedTextStyle* value);
            }

            [exclusiveto(Windows.Media.Core.TimedTextLine)]
            [uuid(978D7CE2-7308-4C66-BE50-65777289F5DF)]
            [version(0x0A000000)]
            interface ITimedTextLine : IInspectable
            {
                [propget] HRESULT Text([out] [retval] HSTRING* value);
                [propput] HRESULT Text([in] HSTRING value);
                [propget] HRESULT Subformats([out] [retval] Windows.Foundation.Collections.IVector<Windows.Media.Core.TimedTextSubformat*>** value);
            }

            [uuid(77206F1F-C34F-494F-8077-2BAD9FF4ECF1)]
            [version(0x0A000000)]
            interface ISingleSelectMediaTrackList : IInspectable
            {
                [eventadd] HRESULT SelectedIndexChanged([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.ISingleSelectMediaTrackList*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT SelectedIndexChanged([in] EventRegistrationToken token);
                [propput] HRESULT SelectedIndex([in] INT32 value);
                [propget] HRESULT SelectedIndex([out] [retval] INT32* value);
            }

            [uuid(03E1FAFC-C931-491A-B46B-C10EE8C256B7)]
            [version(0x0A000000)]
            interface IMediaTrack : IInspectable
            {
                [propget] HRESULT Id([out] [retval] HSTRING* value);
                [propget] HRESULT Language([out] [retval] HSTRING* value);
                [propget] HRESULT TrackKind([out] [retval] Windows.Media.Core.MediaTrackKind* value);
                [propput] HRESULT Label([in] HSTRING value);
                [propget] HRESULT Label([out] [retval] HSTRING* value);
            }

            [exclusiveto(Windows.Media.Core.TimedMetadataTrackError)]
            [uuid(B3767915-4114-4819-B9D9-DD76089E72F8)]
            [version(0x0A000000)]
            interface ITimedMetadataTrackError : IInspectable
            {
                [propget] HRESULT ErrorCode([out] [retval] Windows.Media.Core.TimedMetadataTrackErrorCode* value);
                [propget] HRESULT ExtendedError([out] [retval] HRESULT* value);
            }

            [exclusiveto(Windows.Media.Core.MediaCueEventArgs)]
            [uuid(D12F47F7-5FA4-4E68-9FE5-32160DCEE57E)]
            [version(0x0A000000)]
            interface IMediaCueEventArgs : IInspectable
            {
                [propget] HRESULT Cue([out] [retval] Windows.Media.Core.IMediaCue** value);
            }

            [exclusiveto(Windows.Media.Core.TimedMetadataTrackFailedEventArgs)]
            [uuid(A57FC9D1-6789-4D4D-B07F-84B4F31ACB70)]
            [version(0x0A000000)]
            interface ITimedMetadataTrackFailedEventArgs : IInspectable
            {
                [propget] HRESULT Error([out] [retval] Windows.Media.Core.TimedMetadataTrackError** value);
            }

            [exclusiveto(Windows.Media.Core.DataCue)]
            [uuid(7C7F676D-1FBC-4E2D-9A87-EE38BD1DC637)]
            [version(0x0A000000)]
            interface IDataCue : IInspectable
                requires
                    Windows.Media.Core.IMediaCue
            {
                [propput] HRESULT Data([in] Windows.Storage.Streams.IBuffer* value);
                [propget] HRESULT Data([out] [retval] Windows.Storage.Streams.IBuffer** value);
            }

            [exclusiveto(Windows.Media.Core.TimedMetadataTrack)]
            [uuid(8DD57611-97B3-4E1F-852C-0F482C81AD26)]
            [version(0x0A000000)]
            interface ITimedMetadataTrackFactory : IInspectable
            {
                HRESULT Create([in] HSTRING id, [in] HSTRING language, [in] Windows.Media.Core.TimedMetadataKind kind, [out] [retval] Windows.Media.Core.TimedMetadataTrack** value);
            }

            [exclusiveto(Windows.Media.Core.TimedMetadataTrack)]
            [uuid(9E6AED9E-F67A-49A9-B330-CF03B0E9CF07)]
            [version(0x0A000000)]
            interface ITimedMetadataTrack : IInspectable
                requires
                    Windows.Media.Core.IMediaTrack
            {
                [eventadd] HRESULT CueEntered([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.TimedMetadataTrack*, Windows.Media.Core.MediaCueEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT CueEntered([in] EventRegistrationToken token);
                [eventadd] HRESULT CueExited([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.TimedMetadataTrack*, Windows.Media.Core.MediaCueEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT CueExited([in] EventRegistrationToken token);
                [eventadd] HRESULT TrackFailed([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.TimedMetadataTrack*, Windows.Media.Core.TimedMetadataTrackFailedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT TrackFailed([in] EventRegistrationToken token);
                [propget] HRESULT Cues([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.Core.IMediaCue*>** value);
                [propget] HRESULT ActiveCues([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.Core.IMediaCue*>** value);
                [propget] HRESULT TimedMetadataKind([out] [retval] Windows.Media.Core.TimedMetadataKind* value);
                [propget] HRESULT DispatchType([out] [retval] HSTRING* value);
                HRESULT AddCue([in] Windows.Media.Core.IMediaCue* cue);
                HRESULT RemoveCue([in] Windows.Media.Core.IMediaCue* cue);
            }

            [exclusiveto(Windows.Media.Core.TimedTextSourceResolveResultEventArgs)]
            [uuid(48907C9C-DCD8-4C33-9AD3-6CDCE7B1C566)]
            [version(0x0A000000)]
            interface ITimedTextSourceResolveResultEventArgs : IInspectable
            {
                [propget] HRESULT Error([out] [retval] Windows.Media.Core.TimedMetadataTrackError** value);
                [propget] HRESULT Tracks([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.Core.TimedMetadataTrack*>** value);
            }

            [exclusiveto(Windows.Media.Core.TimedTextSource)]
            [uuid(C4ED9BA6-101F-404D-A949-82F33FCD93B7)]
            [version(0x0A000000)]
            interface ITimedTextSource : IInspectable
            {
                [eventadd] HRESULT Resolved([in] Windows.Foundation.TypedEventHandler<Windows.Media.Core.TimedTextSource*, Windows.Media.Core.TimedTextSourceResolveResultEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Resolved([in] EventRegistrationToken token);
            }

            [exclusiveto(Windows.Media.Core.TimedTextSource)]
            [uuid(7E311853-9ABA-4AC4-BB98-2FB176C3BFDD)]
            [version(0x0A000000)]
            interface ITimedTextSourceStatics : IInspectable
            {
                [overload("CreateFromStream")] HRESULT CreateFromStream([in] Windows.Storage.Streams.IRandomAccessStream* stream, [out] [retval] Windows.Media.Core.TimedTextSource** value);
                [overload("CreateFromUri")] HRESULT CreateFromUri([in] Windows.Foundation.Uri* uri, [out] [retval] Windows.Media.Core.TimedTextSource** value);
                [overload("CreateFromStream")] HRESULT CreateFromStreamWithLanguage([in] Windows.Storage.Streams.IRandomAccessStream* stream, [in] HSTRING defaultLanguage, [out] [retval] Windows.Media.Core.TimedTextSource** value);
                [overload("CreateFromUri")] HRESULT CreateFromUriWithLanguage([in] Windows.Foundation.Uri* uri, [in] HSTRING defaultLanguage, [out] [retval] Windows.Media.Core.TimedTextSource** value);
            }

            [activatable(Windows.Media.Core.IAudioStreamDescriptorFactory, 0x06030000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass AudioStreamDescriptor
            {
                [default] interface Windows.Media.Core.IAudioStreamDescriptor;
                interface Windows.Media.Core.IMediaStreamDescriptor;
            }

            [activatable(Windows.Media.Core.IVideoStreamDescriptorFactory, 0x06030000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass VideoStreamDescriptor
            {
                [default] interface Windows.Media.Core.IVideoStreamDescriptor;
                interface Windows.Media.Core.IMediaStreamDescriptor;
            }

            [activatable(Windows.Media.Core.IMediaStreamSourceFactory, 0x06030000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass MediaStreamSource
            {
                [default] interface Windows.Media.Core.IMediaStreamSource;
                interface Windows.Media.Core.IMediaSource;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass MediaStreamSourceClosedEventArgs
            {
                [default] interface Windows.Media.Core.IMediaStreamSourceClosedEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass MediaStreamSourceStartingEventArgs
            {
                [default] interface Windows.Media.Core.IMediaStreamSourceStartingEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass MediaStreamSourceSampleRequestedEventArgs
            {
                [default] interface Windows.Media.Core.IMediaStreamSourceSampleRequestedEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass MediaStreamSourceSwitchStreamsRequestedEventArgs
            {
                [default] interface Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestedEventArgs;
            }

            [marshaling_behavior(agile)]
            [version(0x06030000)]
            runtimeclass MediaStreamSamplePropertySet
            {
                [default] interface Windows.Foundation.Collections.IMap<GUID, IInspectable*>;
                interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<GUID, IInspectable*>*>;
            }

            [marshaling_behavior(agile)]
            [static(Windows.Media.Core.IMediaStreamSampleStatics, 0x06030000)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass MediaStreamSample
            {
                [default] interface Windows.Media.Core.IMediaStreamSample;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass MediaStreamSampleProtectionProperties
            {
                [default] interface Windows.Media.Core.IMediaStreamSampleProtectionProperties;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass MediaStreamSourceClosedRequest
            {
                [default] interface Windows.Media.Core.IMediaStreamSourceClosedRequest;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass MediaStreamSourceStartingRequestDeferral
            {
                [default] interface Windows.Media.Core.IMediaStreamSourceStartingRequestDeferral;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass MediaStreamSourceStartingRequest
            {
                [default] interface Windows.Media.Core.IMediaStreamSourceStartingRequest;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass MediaStreamSourceSampleRequestDeferral
            {
                [default] interface Windows.Media.Core.IMediaStreamSourceSampleRequestDeferral;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass MediaStreamSourceSampleRequest
            {
                [default] interface Windows.Media.Core.IMediaStreamSourceSampleRequest;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass MediaStreamSourceSwitchStreamsRequestDeferral
            {
                [default] interface Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestDeferral;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass MediaStreamSourceSwitchStreamsRequest
            {
                [default] interface Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequest;
            }

            [activatable(0x0A000000)]
            [marshaling_behavior(agile)]
            [static(Windows.Media.Core.IMseStreamSourceStatics, 0x0A000000)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass MseStreamSource
            {
                [default] interface Windows.Media.Core.IMseStreamSource;
                interface Windows.Media.Core.IMediaSource;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass MseSourceBufferList
            {
                [default] interface Windows.Media.Core.IMseSourceBufferList;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass MseSourceBuffer
            {
                [default] interface Windows.Media.Core.IMseSourceBuffer;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass HighDynamicRangeControl
            {
                [default] interface Windows.Media.Core.IHighDynamicRangeControl;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass SceneAnalysisEffect
            {
                [default] interface Windows.Media.Core.ISceneAnalysisEffect;
                interface Windows.Media.IMediaExtension;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass SceneAnalyzedEventArgs
            {
                [default] interface Windows.Media.Core.ISceneAnalyzedEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass HighDynamicRangeOutput
            {
                [default] interface Windows.Media.Core.IHighDynamicRangeOutput;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass SceneAnalysisEffectFrame
            {
                [default] interface Windows.Media.Core.ISceneAnalysisEffectFrame;
                interface Windows.Media.IMediaFrame;
                interface Windows.Foundation.IClosable;
            }

            [activatable(0x0A000000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass SceneAnalysisEffectDefinition
            {
                [default] interface Windows.Media.Effects.IVideoEffectDefinition;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass FaceDetectionEffectFrame
            {
                [default] interface Windows.Media.Core.IFaceDetectionEffectFrame;
                interface Windows.Media.IMediaFrame;
                interface Windows.Foundation.IClosable;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass FaceDetectedEventArgs
            {
                [default] interface Windows.Media.Core.IFaceDetectedEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass FaceDetectionEffect
            {
                [default] interface Windows.Media.Core.IFaceDetectionEffect;
                interface Windows.Media.IMediaExtension;
            }

            [activatable(0x0A000000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass FaceDetectionEffectDefinition
            {
                [default] interface Windows.Media.Effects.IVideoEffectDefinition;
                interface Windows.Media.Core.IFaceDetectionEffectDefinition;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass VideoStabilizationEffectEnabledChangedEventArgs
            {
                [default] interface Windows.Media.Core.IVideoStabilizationEffectEnabledChangedEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass VideoStabilizationEffect
            {
                [default] interface Windows.Media.Core.IVideoStabilizationEffect;
                interface Windows.Media.IMediaExtension;
            }

            [activatable(0x0A000000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass VideoStabilizationEffectDefinition
            {
                [default] interface Windows.Media.Effects.IVideoEffectDefinition;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass MediaSourceError
            {
                [default] interface Windows.Media.Core.IMediaSourceError;
            }

            [marshaling_behavior(agile)]
            [static(Windows.Media.Core.IMediaSourceStatics2, 0x0A000000)]
            [static(Windows.Media.Core.IMediaSourceStatics, 0x0A000000)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass MediaSource
            {
                [default] interface Windows.Media.Core.IMediaSource2;
                interface Windows.Foundation.IClosable;
                interface Windows.Media.Playback.IMediaPlaybackSource;
                [version(0x0A000000)] interface Windows.Media.Core.IMediaSource3;
            }

            [activatable(0x0A000000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass MediaBinder
            {
                [default] interface Windows.Media.Core.IMediaBinder;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass MediaBindingEventArgs
            {
                [default] interface Windows.Media.Core.IMediaBindingEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass MediaSourceOpenOperationCompletedEventArgs
            {
                [default] interface Windows.Media.Core.IMediaSourceOpenOperationCompletedEventArgs;
            }

            [marshaling_behavior(agile)]
            [static(Windows.Media.Core.ITimedTextSourceStatics, 0x0A000000)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass TimedTextSource
            {
                [default] interface Windows.Media.Core.ITimedTextSource;
            }

            [activatable(Windows.Media.Core.ITimedMetadataTrackFactory, 0x0A000000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass TimedMetadataTrack
            {
                [default] interface Windows.Media.Core.ITimedMetadataTrack;
                interface Windows.Media.Core.IMediaTrack;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass MediaSourceStateChangedEventArgs
            {
                [default] interface Windows.Media.Core.IMediaSourceStateChangedEventArgs;
            }

            [activatable(0x0A000000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass TimedTextRegion
            {
                [default] interface Windows.Media.Core.ITimedTextRegion;
            }

            [activatable(0x0A000000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass TimedTextStyle
            {
                [default] interface Windows.Media.Core.ITimedTextStyle;
            }

            [activatable(0x0A000000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass TimedTextLine
            {
                [default] interface Windows.Media.Core.ITimedTextLine;
            }

            [activatable(0x0A000000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass TimedTextSubformat
            {
                [default] interface Windows.Media.Core.ITimedTextSubformat;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass TimedMetadataTrackError
            {
                [default] interface Windows.Media.Core.ITimedMetadataTrackError;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass MediaCueEventArgs
            {
                [default] interface Windows.Media.Core.IMediaCueEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass TimedMetadataTrackFailedEventArgs
            {
                [default] interface Windows.Media.Core.ITimedMetadataTrackFailedEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass TimedTextSourceResolveResultEventArgs
            {
                [default] interface Windows.Media.Core.ITimedTextSourceResolveResultEventArgs;
            }

            [activatable(0x0A000000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass TimedTextCue
            {
                [default] interface Windows.Media.Core.ITimedTextCue;
                interface Windows.Media.Core.IMediaCue;
            }

            [activatable(0x0A000000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass DataCue
            {
                [default] interface Windows.Media.Core.IDataCue;
                interface Windows.Media.Core.IMediaCue;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass VideoTrack
            {
                [default] interface Windows.Media.Core.IMediaTrack;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass AudioTrack
            {
                [default] interface Windows.Media.Core.IMediaTrack;
            }
        }
    }
}
