//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0014
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Graphics.DirectX.Direct3D11.idl";
import "Windows.Graphics.Imaging.idl";
import "Windows.Storage.idl";
import "Windows.Storage.Streams.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Egraphics2Edirectx2Edirect3d11_h__)")
cpp_quote("#include <Windows.Graphics.DirectX.Direct3D11.h>")
cpp_quote("#endif // !defined(__windows2Egraphics2Edirectx2Edirect3d11_h__)")
cpp_quote("#if !defined(__windows2Egraphics2Eimaging_h__)")
cpp_quote("#include <Windows.Graphics.Imaging.h>")
cpp_quote("#endif // !defined(__windows2Egraphics2Eimaging_h__)")
cpp_quote("#if !defined(__windows2Estorage_h__)")
cpp_quote("#include <Windows.Storage.h>")
cpp_quote("#endif // !defined(__windows2Estorage_h__)")
cpp_quote("#if !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#include <Windows.Storage.Streams.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Foundation
    {
        namespace Collections
        {
            interface IPropertySet;

            runtimeclass ValueSet;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IAsyncAction;

        interface IClosable;

        interface IMemoryBuffer;

        typedef struct TimeSpan TimeSpan;

        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace Graphics
    {
        namespace DirectX
        {
            namespace Direct3D11
            {
                interface IDirect3DSurface;
            }
        }
    }
}
namespace Windows
{
    namespace Graphics
    {
        namespace Imaging
        {
            typedef enum BitmapAlphaMode BitmapAlphaMode;

            typedef enum BitmapPixelFormat BitmapPixelFormat;

            runtimeclass SoftwareBitmap;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        runtimeclass StorageFile;
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            runtimeclass RandomAccessStreamReference;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        typedef enum AudioBufferAccessMode AudioBufferAccessMode;

        typedef enum SoundLevel SoundLevel;

        typedef enum MediaPlaybackType MediaPlaybackType;

        typedef enum MediaPlaybackAutoRepeatMode MediaPlaybackAutoRepeatMode;

        typedef enum MediaPlaybackStatus MediaPlaybackStatus;

        typedef enum SystemMediaTransportControlsButton SystemMediaTransportControlsButton;

        typedef enum SystemMediaTransportControlsProperty SystemMediaTransportControlsProperty;

        typedef enum AudioProcessing AudioProcessing;

        interface IMediaProcessingTriggerDetails;

        interface IVideoFrameFactory;

        interface IAudioFrameFactory;

        interface IMediaFrame;

        interface IVideoFrame;

        interface IAudioFrame;

        interface IAudioBuffer;

        interface IMediaControl;

        interface IMediaMarker;

        interface IMediaMarkers;

        interface IMediaMarkerTypesStatics;

        interface ISystemMediaTransportControlsTimelineProperties;

        interface IMusicDisplayProperties;

        interface IMusicDisplayProperties2;

        interface IVideoDisplayProperties;

        interface IVideoDisplayProperties2;

        interface IImageDisplayProperties;

        interface ISystemMediaTransportControlsDisplayUpdater;

        interface ISystemMediaTransportControlsButtonPressedEventArgs;

        interface ISystemMediaTransportControlsPropertyChangedEventArgs;

        interface IPlaybackPositionChangeRequestedEventArgs;

        interface IPlaybackRateChangeRequestedEventArgs;

        interface IShuffleEnabledChangeRequestedEventArgs;

        interface IAutoRepeatModeChangeRequestedEventArgs;

        interface ISystemMediaTransportControls;

        interface ISystemMediaTransportControls2;

        interface ISystemMediaTransportControlsStatics;

        interface IMediaExtension;

        interface IMediaExtensionManager;

        interface IVideoEffectsStatics;

        runtimeclass MediaProcessingTriggerDetails;

        runtimeclass VideoFrame;

        runtimeclass AudioBuffer;

        runtimeclass AudioFrame;

        runtimeclass MediaControl;

        runtimeclass MediaMarkerTypes;

        runtimeclass SystemMediaTransportControlsTimelineProperties;

        runtimeclass MusicDisplayProperties;

        runtimeclass VideoDisplayProperties;

        runtimeclass ImageDisplayProperties;

        runtimeclass SystemMediaTransportControlsDisplayUpdater;

        runtimeclass SystemMediaTransportControlsButtonPressedEventArgs;

        runtimeclass SystemMediaTransportControlsPropertyChangedEventArgs;

        runtimeclass PlaybackPositionChangeRequestedEventArgs;

        runtimeclass PlaybackRateChangeRequestedEventArgs;

        runtimeclass ShuffleEnabledChangeRequestedEventArgs;

        runtimeclass AutoRepeatModeChangeRequestedEventArgs;

        runtimeclass SystemMediaTransportControls;

        runtimeclass MediaExtensionManager;

        runtimeclass VideoEffects;
    }
}

// Generic instantiations
namespace Windows
{
    namespace Media
    {
        declare
        {
            interface Windows.Foundation.Collections.IIterable<Windows.Media.IMediaMarker*>;

            interface Windows.Foundation.Collections.IIterator<Windows.Media.IMediaMarker*>;

            interface Windows.Foundation.Collections.IVectorView<Windows.Media.IMediaMarker*>;

            interface Windows.Foundation.IAsyncOperation<Windows.Media.IMediaExtension*>;

            interface Windows.Foundation.IAsyncOperation<Windows.Media.VideoFrame*>;

            interface Windows.Foundation.TypedEventHandler<Windows.Media.SystemMediaTransportControls*, Windows.Media.AutoRepeatModeChangeRequestedEventArgs*>;

            interface Windows.Foundation.TypedEventHandler<Windows.Media.SystemMediaTransportControls*, Windows.Media.PlaybackPositionChangeRequestedEventArgs*>;

            interface Windows.Foundation.TypedEventHandler<Windows.Media.SystemMediaTransportControls*, Windows.Media.PlaybackRateChangeRequestedEventArgs*>;

            interface Windows.Foundation.TypedEventHandler<Windows.Media.SystemMediaTransportControls*, Windows.Media.ShuffleEnabledChangeRequestedEventArgs*>;

            interface Windows.Foundation.TypedEventHandler<Windows.Media.SystemMediaTransportControls*, Windows.Media.SystemMediaTransportControlsButtonPressedEventArgs*>;

            interface Windows.Foundation.TypedEventHandler<Windows.Media.SystemMediaTransportControls*, Windows.Media.SystemMediaTransportControlsPropertyChangedEventArgs*>;
        }
    }
}

// Type definition
namespace Windows
{
    namespace Media
    {
        [version(0x0A000000)]
        enum AudioBufferAccessMode
        {
            Read      = 0,
            ReadWrite = 1,
            Write     = 2
        };

        [version(0x06020000)]
        enum SoundLevel
        {
            Muted = 0,
            Low   = 1,
            Full  = 2
        };

        [version(0x06030000)]
        enum MediaPlaybackType
        {
            Unknown = 0,
            Music   = 1,
            Video   = 2,
            Image   = 3
        };

        [version(0x0A000000)]
        enum MediaPlaybackAutoRepeatMode
        {
            None  = 0,
            Track = 1,
            List  = 2
        };

        [version(0x06030000)]
        enum MediaPlaybackStatus
        {
            Closed   = 0,
            Changing = 1,
            Stopped  = 2,
            Playing  = 3,
            Paused   = 4
        };

        [version(0x06030000)]
        enum SystemMediaTransportControlsButton
        {
            Play        = 0,
            Pause       = 1,
            Stop        = 2,
            Record      = 3,
            FastForward = 4,
            Rewind      = 5,
            Next        = 6,
            Previous    = 7,
            ChannelUp   = 8,
            ChannelDown = 9
        };

        [version(0x06030000)]
        enum SystemMediaTransportControlsProperty
        {
            SoundLevel = 0
        };

        [version(0x06030000)]
        enum AudioProcessing
        {
            Default = 0,
            Raw     = 1
        };

        [exclusiveto(Windows.Media.MediaProcessingTriggerDetails)]
        [uuid(EB8564AC-A351-4F4E-B4F0-9BF2408993DB)]
        [version(0x0A000000)]
        interface IMediaProcessingTriggerDetails : IInspectable
        {
            [propget] HRESULT Arguments([out] [retval] Windows.Foundation.Collections.ValueSet** value);
        }

        [exclusiveto(Windows.Media.VideoFrame)]
        [uuid(014B6D69-2228-4C92-92FF-50C380D3E776)]
        [version(0x0A000000)]
        interface IVideoFrameFactory : IInspectable
        {
            HRESULT Create([in] Windows.Graphics.Imaging.BitmapPixelFormat format, [in] INT32 width, [in] INT32 height, [out] [retval] Windows.Media.VideoFrame** value);
            HRESULT CreateWithAlpha([in] Windows.Graphics.Imaging.BitmapPixelFormat format, [in] INT32 width, [in] INT32 height, [in] Windows.Graphics.Imaging.BitmapAlphaMode alpha, [out] [retval] Windows.Media.VideoFrame** value);
        }

        [exclusiveto(Windows.Media.AudioFrame)]
        [uuid(91A90ADE-2422-40A6-B9AD-30D02404317D)]
        [version(0x0A000000)]
        interface IAudioFrameFactory : IInspectable
        {
            HRESULT Create([in] [range(0x00000000, 0x7FFFFFFF)] UINT32 capacity, [out] [retval] Windows.Media.AudioFrame** value);
        }

        [uuid(BFB52F8C-5943-47D8-8E10-05308AA5FBD0)]
        [version(0x0A000000)]
        interface IMediaFrame : IInspectable
            requires
                Windows.Foundation.IClosable
        {
            [propget] HRESULT Type([out] [retval] HSTRING* value);
            [propget] HRESULT IsReadOnly([out] [retval] boolean* value);
            [propput] HRESULT RelativeTime([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>* value);
            [propget] HRESULT RelativeTime([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
            [propput] HRESULT SystemRelativeTime([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>* value);
            [propget] HRESULT SystemRelativeTime([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
            [propput] HRESULT Duration([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>* value);
            [propget] HRESULT Duration([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
            [propput] HRESULT IsDiscontinuous([in] boolean value);
            [propget] HRESULT IsDiscontinuous([out] [retval] boolean* value);
            [propget] HRESULT ExtendedProperties([out] [retval] Windows.Foundation.Collections.IPropertySet** value);
        }

        [exclusiveto(Windows.Media.VideoFrame)]
        [uuid(0CC06625-90FC-4C92-BD95-7DED21819D1C)]
        [version(0x0A000000)]
        interface IVideoFrame : IInspectable
            requires
                Windows.Media.IMediaFrame,
                Windows.Foundation.IClosable
        {
            [propget] HRESULT SoftwareBitmap([out] [retval] Windows.Graphics.Imaging.SoftwareBitmap** value);
            HRESULT CopyToAsync([in] Windows.Media.VideoFrame* frame, [out] [retval] Windows.Foundation.IAsyncAction** value);
            [propget] HRESULT Direct3DSurface([out] [retval] Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface** value);
        }

        [exclusiveto(Windows.Media.AudioFrame)]
        [uuid(E36AC304-AAB2-4277-9ED0-43CEDF8E29C6)]
        [version(0x0A000000)]
        interface IAudioFrame : IInspectable
            requires
                Windows.Media.IMediaFrame,
                Windows.Foundation.IClosable
        {
            HRESULT LockBuffer([in] Windows.Media.AudioBufferAccessMode mode, [out] [retval] Windows.Media.AudioBuffer** value);
        }

        [exclusiveto(Windows.Media.AudioBuffer)]
        [uuid(35175827-724B-4C6A-B130-F6537F9AE0D0)]
        [version(0x0A000000)]
        interface IAudioBuffer : IInspectable
            requires
                Windows.Foundation.IMemoryBuffer,
                Windows.Foundation.IClosable
        {
            [propget] HRESULT Capacity([out] [retval] UINT32* value);
            [propget] HRESULT Length([out] [retval] UINT32* value);
            [propput] HRESULT Length([in] UINT32 value);
        }

        [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)]
        [exclusiveto(Windows.Media.MediaControl)]
        [uuid(98F1FBE1-7A8D-42CB-B6FE-8FE698264F13)]
        [version(0x06020000)]
        interface IMediaControl : IInspectable
        {
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventadd] HRESULT SoundLevelChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventremove] HRESULT SoundLevelChanged([in] EventRegistrationToken cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventadd] HRESULT PlayPressed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventremove] HRESULT PlayPressed([in] EventRegistrationToken cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventadd] HRESULT PausePressed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventremove] HRESULT PausePressed([in] EventRegistrationToken cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventadd] HRESULT StopPressed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventremove] HRESULT StopPressed([in] EventRegistrationToken cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventadd] HRESULT PlayPauseTogglePressed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventremove] HRESULT PlayPauseTogglePressed([in] EventRegistrationToken cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventadd] HRESULT RecordPressed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventremove] HRESULT RecordPressed([in] EventRegistrationToken cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventadd] HRESULT NextTrackPressed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventremove] HRESULT NextTrackPressed([in] EventRegistrationToken cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventadd] HRESULT PreviousTrackPressed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventremove] HRESULT PreviousTrackPressed([in] EventRegistrationToken cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventadd] HRESULT FastForwardPressed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventremove] HRESULT FastForwardPressed([in] EventRegistrationToken cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventadd] HRESULT RewindPressed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventremove] HRESULT RewindPressed([in] EventRegistrationToken cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventadd] HRESULT ChannelUpPressed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventremove] HRESULT ChannelUpPressed([in] EventRegistrationToken cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventadd] HRESULT ChannelDownPressed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [eventremove] HRESULT ChannelDownPressed([in] EventRegistrationToken cookie);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [propget] HRESULT SoundLevel([out] [retval] Windows.Media.SoundLevel* value);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [propput] HRESULT TrackName([in] HSTRING value);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [propget] HRESULT TrackName([out] [retval] HSTRING* value);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [propput] HRESULT ArtistName([in] HSTRING value);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [propget] HRESULT ArtistName([out] [retval] HSTRING* value);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [propput] HRESULT IsPlaying([in] boolean value);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [propget] HRESULT IsPlaying([out] [retval] boolean* value);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [propput] HRESULT AlbumArt([in] Windows.Foundation.Uri* value);
            [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)] [propget] HRESULT AlbumArt([out] [retval] Windows.Foundation.Uri** value);
        }

        [uuid(1803DEF8-DCA5-4B6F-9C20-E3D3C0643625)]
        [version(0x06030000)]
        interface IMediaMarker : IInspectable
        {
            [propget] HRESULT Time([out] [retval] Windows.Foundation.TimeSpan* value);
            [propget] HRESULT MediaMarkerType([out] [retval] HSTRING* value);
            [propget] HRESULT Text([out] [retval] HSTRING* value);
        }

        [uuid(AFEAB189-F8DD-466E-AA10-920B52353FDF)]
        [version(0x06030000)]
        interface IMediaMarkers : IInspectable
        {
            [propget] HRESULT Markers([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.IMediaMarker*>** value);
        }

        [exclusiveto(Windows.Media.MediaMarkerTypes)]
        [uuid(BB198040-482F-4743-8832-45853821ECE0)]
        [version(0x06030000)]
        interface IMediaMarkerTypesStatics : IInspectable
        {
            [propget] HRESULT Bookmark([out] [retval] HSTRING* value);
        }

        [exclusiveto(Windows.Media.SystemMediaTransportControlsTimelineProperties)]
        [uuid(5125316A-C3A2-475B-8507-93534DC88F15)]
        [version(0x0A000000)]
        interface ISystemMediaTransportControlsTimelineProperties : IInspectable
        {
            [propget] HRESULT StartTime([out] [retval] Windows.Foundation.TimeSpan* value);
            [propput] HRESULT StartTime([in] Windows.Foundation.TimeSpan value);
            [propget] HRESULT EndTime([out] [retval] Windows.Foundation.TimeSpan* value);
            [propput] HRESULT EndTime([in] Windows.Foundation.TimeSpan value);
            [propget] HRESULT MinSeekTime([out] [retval] Windows.Foundation.TimeSpan* value);
            [propput] HRESULT MinSeekTime([in] Windows.Foundation.TimeSpan value);
            [propget] HRESULT MaxSeekTime([out] [retval] Windows.Foundation.TimeSpan* value);
            [propput] HRESULT MaxSeekTime([in] Windows.Foundation.TimeSpan value);
            [propget] HRESULT Position([out] [retval] Windows.Foundation.TimeSpan* value);
            [propput] HRESULT Position([in] Windows.Foundation.TimeSpan value);
        }

        [exclusiveto(Windows.Media.MusicDisplayProperties)]
        [uuid(6BBF0C59-D0A0-4D26-92A0-F978E1D18E7B)]
        [version(0x06030000)]
        interface IMusicDisplayProperties : IInspectable
        {
            [propget] HRESULT Title([out] [retval] HSTRING* value);
            [propput] HRESULT Title([in] HSTRING value);
            [propget] HRESULT AlbumArtist([out] [retval] HSTRING* value);
            [propput] HRESULT AlbumArtist([in] HSTRING value);
            [propget] HRESULT Artist([out] [retval] HSTRING* value);
            [propput] HRESULT Artist([in] HSTRING value);
        }

        [exclusiveto(Windows.Media.MusicDisplayProperties)]
        [uuid(00368462-97D3-44B9-B00F-008AFCEFAF18)]
        [version(0x0A000000)]
        interface IMusicDisplayProperties2 : IInspectable
        {
            [propget] HRESULT AlbumTitle([out] [retval] HSTRING* value);
            [propput] HRESULT AlbumTitle([in] HSTRING value);
            [propget] HRESULT TrackNumber([out] [retval] UINT32* value);
            [propput] HRESULT TrackNumber([in] UINT32 value);
            [propget] HRESULT Genres([out] [retval] Windows.Foundation.Collections.IVector<HSTRING>** value);
        }

        [exclusiveto(Windows.Media.VideoDisplayProperties)]
        [uuid(5609FDB1-5D2D-4872-8170-45DEE5BC2F5C)]
        [version(0x06030000)]
        interface IVideoDisplayProperties : IInspectable
        {
            [propget] HRESULT Title([out] [retval] HSTRING* value);
            [propput] HRESULT Title([in] HSTRING value);
            [propget] HRESULT Subtitle([out] [retval] HSTRING* value);
            [propput] HRESULT Subtitle([in] HSTRING value);
        }

        [exclusiveto(Windows.Media.VideoDisplayProperties)]
        [uuid(B410E1CE-AB52-41AB-A486-CC10FAB152F9)]
        [version(0x0A000000)]
        interface IVideoDisplayProperties2 : IInspectable
        {
            [propget] HRESULT Genres([out] [retval] Windows.Foundation.Collections.IVector<HSTRING>** value);
        }

        [exclusiveto(Windows.Media.ImageDisplayProperties)]
        [uuid(CD0BC7EF-54E7-411F-9933-F0E98B0A96D2)]
        [version(0x06030000)]
        interface IImageDisplayProperties : IInspectable
        {
            [propget] HRESULT Title([out] [retval] HSTRING* value);
            [propput] HRESULT Title([in] HSTRING value);
            [propget] HRESULT Subtitle([out] [retval] HSTRING* value);
            [propput] HRESULT Subtitle([in] HSTRING value);
        }

        [exclusiveto(Windows.Media.SystemMediaTransportControlsDisplayUpdater)]
        [uuid(8ABBC53E-FA55-4ECF-AD8E-C984E5DD1550)]
        [version(0x06030000)]
        interface ISystemMediaTransportControlsDisplayUpdater : IInspectable
        {
            [propget] HRESULT Type([out] [retval] Windows.Media.MediaPlaybackType* value);
            [propput] HRESULT Type([in] Windows.Media.MediaPlaybackType value);
            [propget] HRESULT AppMediaId([out] [retval] HSTRING* value);
            [propput] HRESULT AppMediaId([in] HSTRING value);
            [propget] HRESULT Thumbnail([out] [retval] Windows.Storage.Streams.RandomAccessStreamReference** value);
            [propput] HRESULT Thumbnail([in] Windows.Storage.Streams.RandomAccessStreamReference* value);
            [propget] HRESULT MusicProperties([out] [retval] Windows.Media.MusicDisplayProperties** value);
            [propget] HRESULT VideoProperties([out] [retval] Windows.Media.VideoDisplayProperties** value);
            [propget] HRESULT ImageProperties([out] [retval] Windows.Media.ImageDisplayProperties** value);
            HRESULT CopyFromFileAsync([in] Windows.Media.MediaPlaybackType type, [in] Windows.Storage.StorageFile* source, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
            HRESULT ClearAll();
            HRESULT Update();
        }

        [exclusiveto(Windows.Media.SystemMediaTransportControlsButtonPressedEventArgs)]
        [uuid(B7F47116-A56F-4DC8-9E11-92031F4A87C2)]
        [version(0x06030000)]
        interface ISystemMediaTransportControlsButtonPressedEventArgs : IInspectable
        {
            [propget] HRESULT Button([out] [retval] Windows.Media.SystemMediaTransportControlsButton* value);
        }

        [exclusiveto(Windows.Media.SystemMediaTransportControlsPropertyChangedEventArgs)]
        [uuid(D0CA0936-339B-4CB3-8EEB-737607F56E08)]
        [version(0x06030000)]
        interface ISystemMediaTransportControlsPropertyChangedEventArgs : IInspectable
        {
            [propget] HRESULT Property([out] [retval] Windows.Media.SystemMediaTransportControlsProperty* value);
        }

        [exclusiveto(Windows.Media.PlaybackPositionChangeRequestedEventArgs)]
        [uuid(B4493F88-EB28-4961-9C14-335E44F3E125)]
        [version(0x0A000000)]
        interface IPlaybackPositionChangeRequestedEventArgs : IInspectable
        {
            [propget] HRESULT RequestedPlaybackPosition([out] [retval] Windows.Foundation.TimeSpan* value);
        }

        [exclusiveto(Windows.Media.PlaybackRateChangeRequestedEventArgs)]
        [uuid(2CE2C41F-3CD6-4F77-9BA7-EB27C26A2140)]
        [version(0x0A000000)]
        interface IPlaybackRateChangeRequestedEventArgs : IInspectable
        {
            [propget] HRESULT RequestedPlaybackRate([out] [retval] DOUBLE* value);
        }

        [exclusiveto(Windows.Media.ShuffleEnabledChangeRequestedEventArgs)]
        [uuid(49B593FE-4FD0-4666-A314-C0E01940D302)]
        [version(0x0A000000)]
        interface IShuffleEnabledChangeRequestedEventArgs : IInspectable
        {
            [propget] HRESULT RequestedShuffleEnabled([out] [retval] boolean* value);
        }

        [exclusiveto(Windows.Media.AutoRepeatModeChangeRequestedEventArgs)]
        [uuid(EA137EFA-D852-438E-882B-C990109A78F4)]
        [version(0x0A000000)]
        interface IAutoRepeatModeChangeRequestedEventArgs : IInspectable
        {
            [propget] HRESULT RequestedAutoRepeatMode([out] [retval] Windows.Media.MediaPlaybackAutoRepeatMode* value);
        }

        [exclusiveto(Windows.Media.SystemMediaTransportControls)]
        [uuid(99FA3FF4-1742-42A6-902E-087D41F965EC)]
        [version(0x06030000)]
        interface ISystemMediaTransportControls : IInspectable
        {
            [propget] HRESULT PlaybackStatus([out] [retval] Windows.Media.MediaPlaybackStatus* value);
            [propput] HRESULT PlaybackStatus([in] Windows.Media.MediaPlaybackStatus value);
            [propget] HRESULT DisplayUpdater([out] [retval] Windows.Media.SystemMediaTransportControlsDisplayUpdater** value);
            [propget] HRESULT SoundLevel([out] [retval] Windows.Media.SoundLevel* value);
            [propget] HRESULT IsEnabled([out] [retval] boolean* value);
            [propput] HRESULT IsEnabled([in] boolean value);
            [propget] HRESULT IsPlayEnabled([out] [retval] boolean* value);
            [propput] HRESULT IsPlayEnabled([in] boolean value);
            [propget] HRESULT IsStopEnabled([out] [retval] boolean* value);
            [propput] HRESULT IsStopEnabled([in] boolean value);
            [propget] HRESULT IsPauseEnabled([out] [retval] boolean* value);
            [propput] HRESULT IsPauseEnabled([in] boolean value);
            [propget] HRESULT IsRecordEnabled([out] [retval] boolean* value);
            [propput] HRESULT IsRecordEnabled([in] boolean value);
            [propget] HRESULT IsFastForwardEnabled([out] [retval] boolean* value);
            [propput] HRESULT IsFastForwardEnabled([in] boolean value);
            [propget] HRESULT IsRewindEnabled([out] [retval] boolean* value);
            [propput] HRESULT IsRewindEnabled([in] boolean value);
            [propget] HRESULT IsPreviousEnabled([out] [retval] boolean* value);
            [propput] HRESULT IsPreviousEnabled([in] boolean value);
            [propget] HRESULT IsNextEnabled([out] [retval] boolean* value);
            [propput] HRESULT IsNextEnabled([in] boolean value);
            [propget] HRESULT IsChannelUpEnabled([out] [retval] boolean* value);
            [propput] HRESULT IsChannelUpEnabled([in] boolean value);
            [propget] HRESULT IsChannelDownEnabled([out] [retval] boolean* value);
            [propput] HRESULT IsChannelDownEnabled([in] boolean value);
            [eventadd] HRESULT ButtonPressed([in] Windows.Foundation.TypedEventHandler<Windows.Media.SystemMediaTransportControls*, Windows.Media.SystemMediaTransportControlsButtonPressedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
            [eventremove] HRESULT ButtonPressed([in] EventRegistrationToken token);
            [eventadd] HRESULT PropertyChanged([in] Windows.Foundation.TypedEventHandler<Windows.Media.SystemMediaTransportControls*, Windows.Media.SystemMediaTransportControlsPropertyChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
            [eventremove] HRESULT PropertyChanged([in] EventRegistrationToken token);
        }

        [exclusiveto(Windows.Media.SystemMediaTransportControls)]
        [uuid(EA98D2F6-7F3C-4AF2-A586-72889808EFB1)]
        [version(0x0A000000)]
        interface ISystemMediaTransportControls2 : IInspectable
        {
            [propget] HRESULT AutoRepeatMode([out] [retval] Windows.Media.MediaPlaybackAutoRepeatMode* value);
            [propput] HRESULT AutoRepeatMode([in] Windows.Media.MediaPlaybackAutoRepeatMode value);
            [propget] HRESULT ShuffleEnabled([out] [retval] boolean* value);
            [propput] HRESULT ShuffleEnabled([in] boolean value);
            [propget] HRESULT PlaybackRate([out] [retval] DOUBLE* value);
            [propput] HRESULT PlaybackRate([in] DOUBLE value);
            HRESULT UpdateTimelineProperties([in] Windows.Media.SystemMediaTransportControlsTimelineProperties* timelineProperties);
            [eventadd] HRESULT PlaybackPositionChangeRequested([in] Windows.Foundation.TypedEventHandler<Windows.Media.SystemMediaTransportControls*, Windows.Media.PlaybackPositionChangeRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
            [eventremove] HRESULT PlaybackPositionChangeRequested([in] EventRegistrationToken token);
            [eventadd] HRESULT PlaybackRateChangeRequested([in] Windows.Foundation.TypedEventHandler<Windows.Media.SystemMediaTransportControls*, Windows.Media.PlaybackRateChangeRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
            [eventremove] HRESULT PlaybackRateChangeRequested([in] EventRegistrationToken token);
            [eventadd] HRESULT ShuffleEnabledChangeRequested([in] Windows.Foundation.TypedEventHandler<Windows.Media.SystemMediaTransportControls*, Windows.Media.ShuffleEnabledChangeRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
            [eventremove] HRESULT ShuffleEnabledChangeRequested([in] EventRegistrationToken token);
            [eventadd] HRESULT AutoRepeatModeChangeRequested([in] Windows.Foundation.TypedEventHandler<Windows.Media.SystemMediaTransportControls*, Windows.Media.AutoRepeatModeChangeRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
            [eventremove] HRESULT AutoRepeatModeChangeRequested([in] EventRegistrationToken token);
        }

        [exclusiveto(Windows.Media.SystemMediaTransportControls)]
        [uuid(43BA380A-ECA4-4832-91AB-D415FAE484C6)]
        [version(0x06030000)]
        interface ISystemMediaTransportControlsStatics : IInspectable
        {
            HRESULT GetForCurrentView([out] [retval] Windows.Media.SystemMediaTransportControls** mediaControl);
        }

        [uuid(07915118-45DF-442B-8A3F-F7826A6370AB)]
        [version(0x06020000)]
        interface IMediaExtension : IInspectable
        {
            HRESULT SetProperties([in] Windows.Foundation.Collections.IPropertySet* configuration);
        }

        [exclusiveto(Windows.Media.MediaExtensionManager)]
        [uuid(4A25EAF5-242D-4DFB-97F4-69B7C42576FF)]
        [version(0x06020000)]
        interface IMediaExtensionManager : IInspectable
        {
            [overload("RegisterSchemeHandler")] HRESULT RegisterSchemeHandler([in] HSTRING activatableClassId, [in] HSTRING scheme);
            [overload("RegisterSchemeHandler")] HRESULT RegisterSchemeHandlerWithSettings([in] HSTRING activatableClassId, [in] HSTRING scheme, [in] Windows.Foundation.Collections.IPropertySet* configuration);
            [overload("RegisterByteStreamHandler")] HRESULT RegisterByteStreamHandler([in] HSTRING activatableClassId, [in] HSTRING fileExtension, [in] HSTRING mimeType);
            [overload("RegisterByteStreamHandler")] HRESULT RegisterByteStreamHandlerWithSettings([in] HSTRING activatableClassId, [in] HSTRING fileExtension, [in] HSTRING mimeType, [in] Windows.Foundation.Collections.IPropertySet* configuration);
            [overload("RegisterAudioDecoder")] HRESULT RegisterAudioDecoder([in] HSTRING activatableClassId, [in] GUID inputSubtype, [in] GUID outputSubtype);
            [overload("RegisterAudioDecoder")] HRESULT RegisterAudioDecoderWithSettings([in] HSTRING activatableClassId, [in] GUID inputSubtype, [in] GUID outputSubtype, [in] Windows.Foundation.Collections.IPropertySet* configuration);
            [overload("RegisterAudioEncoder")] HRESULT RegisterAudioEncoder([in] HSTRING activatableClassId, [in] GUID inputSubtype, [in] GUID outputSubtype);
            [overload("RegisterAudioEncoder")] HRESULT RegisterAudioEncoderWithSettings([in] HSTRING activatableClassId, [in] GUID inputSubtype, [in] GUID outputSubtype, [in] Windows.Foundation.Collections.IPropertySet* configuration);
            [overload("RegisterVideoDecoder")] HRESULT RegisterVideoDecoder([in] HSTRING activatableClassId, [in] GUID inputSubtype, [in] GUID outputSubtype);
            [overload("RegisterVideoDecoder")] HRESULT RegisterVideoDecoderWithSettings([in] HSTRING activatableClassId, [in] GUID inputSubtype, [in] GUID outputSubtype, [in] Windows.Foundation.Collections.IPropertySet* configuration);
            [overload("RegisterVideoEncoder")] HRESULT RegisterVideoEncoder([in] HSTRING activatableClassId, [in] GUID inputSubtype, [in] GUID outputSubtype);
            [overload("RegisterVideoEncoder")] HRESULT RegisterVideoEncoderWithSettings([in] HSTRING activatableClassId, [in] GUID inputSubtype, [in] GUID outputSubtype, [in] Windows.Foundation.Collections.IPropertySet* configuration);
        }

        [exclusiveto(Windows.Media.VideoEffects)]
        [uuid(1FCDA5E8-BAF1-4521-980C-3BCEBB44CF38)]
        [version(0x06020000)]
        interface IVideoEffectsStatics : IInspectable
        {
            [propget] HRESULT VideoStabilization([out] [retval] HSTRING* value);
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x0A000000)]
        runtimeclass MediaProcessingTriggerDetails
        {
            [default] interface Windows.Media.IMediaProcessingTriggerDetails;
        }

        [activatable(Windows.Media.IVideoFrameFactory, 0x0A000000)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x0A000000)]
        runtimeclass VideoFrame
        {
            [default] interface Windows.Media.IVideoFrame;
            interface Windows.Media.IMediaFrame;
            interface Windows.Foundation.IClosable;
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x0A000000)]
        runtimeclass AudioBuffer
        {
            [default] interface Windows.Media.IAudioBuffer;
            interface Windows.Foundation.IMemoryBuffer;
            interface Windows.Foundation.IClosable;
        }

        [activatable(Windows.Media.IAudioFrameFactory, 0x0A000000)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x0A000000)]
        runtimeclass AudioFrame
        {
            [default] interface Windows.Media.IAudioFrame;
            interface Windows.Media.IMediaFrame;
            interface Windows.Foundation.IClosable;
        }

        [deprecated("MediaControl may be altered or unavailable for releases after Windows 8.1. Instead, use SystemMediaTransportControls.", deprecate, 0x06030000)]
        [marshaling_behavior(agile)]
        [static(Windows.Media.IMediaControl, 0x06020000)]
        [threading(mta)]
        [version(0x06020000)]
        runtimeclass MediaControl
        {
        }

        [marshaling_behavior(agile)]
        [static(Windows.Media.IMediaMarkerTypesStatics, 0x06030000)]
        [version(0x06030000)]
        runtimeclass MediaMarkerTypes
        {
        }

        [activatable(0x0A000000)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x0A000000)]
        runtimeclass SystemMediaTransportControlsTimelineProperties
        {
            [default] interface Windows.Media.ISystemMediaTransportControlsTimelineProperties;
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x06030000)]
        runtimeclass MusicDisplayProperties
        {
            [default] interface Windows.Media.IMusicDisplayProperties;
            [version(0x0A000000)] interface Windows.Media.IMusicDisplayProperties2;
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x06030000)]
        runtimeclass VideoDisplayProperties
        {
            [default] interface Windows.Media.IVideoDisplayProperties;
            [version(0x0A000000)] interface Windows.Media.IVideoDisplayProperties2;
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x06030000)]
        runtimeclass ImageDisplayProperties
        {
            [default] interface Windows.Media.IImageDisplayProperties;
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x06030000)]
        runtimeclass SystemMediaTransportControlsDisplayUpdater
        {
            [default] interface Windows.Media.ISystemMediaTransportControlsDisplayUpdater;
        }

        [marshaling_behavior(agile)]
        [version(0x06030000)]
        runtimeclass SystemMediaTransportControlsButtonPressedEventArgs
        {
            [default] interface Windows.Media.ISystemMediaTransportControlsButtonPressedEventArgs;
        }

        [marshaling_behavior(agile)]
        [version(0x06030000)]
        runtimeclass SystemMediaTransportControlsPropertyChangedEventArgs
        {
            [default] interface Windows.Media.ISystemMediaTransportControlsPropertyChangedEventArgs;
        }

        [marshaling_behavior(agile)]
        [version(0x0A000000)]
        runtimeclass PlaybackPositionChangeRequestedEventArgs
        {
            [default] interface Windows.Media.IPlaybackPositionChangeRequestedEventArgs;
        }

        [marshaling_behavior(agile)]
        [version(0x0A000000)]
        runtimeclass PlaybackRateChangeRequestedEventArgs
        {
            [default] interface Windows.Media.IPlaybackRateChangeRequestedEventArgs;
        }

        [marshaling_behavior(agile)]
        [version(0x0A000000)]
        runtimeclass ShuffleEnabledChangeRequestedEventArgs
        {
            [default] interface Windows.Media.IShuffleEnabledChangeRequestedEventArgs;
        }

        [marshaling_behavior(agile)]
        [version(0x0A000000)]
        runtimeclass AutoRepeatModeChangeRequestedEventArgs
        {
            [default] interface Windows.Media.IAutoRepeatModeChangeRequestedEventArgs;
        }

        [marshaling_behavior(agile)]
        [static(Windows.Media.ISystemMediaTransportControlsStatics, 0x06030000)]
        [threading(mta)]
        [version(0x06030000)]
        runtimeclass SystemMediaTransportControls
        {
            [default] interface Windows.Media.ISystemMediaTransportControls;
            [version(0x0A000000)] interface Windows.Media.ISystemMediaTransportControls2;
        }

        [activatable(0x06020000)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x06020000)]
        runtimeclass MediaExtensionManager
        {
            [default] interface Windows.Media.IMediaExtensionManager;
        }

        [marshaling_behavior(agile)]
        [static(Windows.Media.IVideoEffectsStatics, 0x06020000)]
        [threading(both)]
        [version(0x06020000)]
        runtimeclass VideoEffects
        {
        }
    }
}
