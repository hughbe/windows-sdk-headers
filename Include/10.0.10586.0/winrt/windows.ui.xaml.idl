//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0014
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.ApplicationModel.idl";
import "Windows.ApplicationModel.Activation.idl";
import "Windows.ApplicationModel.Core.idl";
import "Windows.ApplicationModel.DataTransfer.idl";
import "Windows.ApplicationModel.DataTransfer.DragDrop.idl";
import "Windows.Graphics.Imaging.idl";
import "Windows.UI.Core.idl";
import "Windows.UI.Input.idl";
import "Windows.UI.Xaml.Automation.Peers.idl";
import "Windows.UI.Xaml.Controls.idl";
import "Windows.UI.Xaml.Controls.Primitives.idl";
import "Windows.UI.Xaml.Data.idl";
import "Windows.UI.Xaml.Input.idl";
import "Windows.UI.Xaml.Interop.idl";
import "Windows.UI.Xaml.Media.idl";
import "Windows.UI.Xaml.Media.Animation.idl";
import "Windows.UI.Xaml.Media.Imaging.idl";
import "Windows.UI.Xaml.Media.Media3D.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Eapplicationmodel_h__)")
cpp_quote("#include <Windows.ApplicationModel.h>")
cpp_quote("#endif // !defined(__windows2Eapplicationmodel_h__)")
cpp_quote("#if !defined(__windows2Eapplicationmodel2Eactivation_h__)")
cpp_quote("#include <Windows.ApplicationModel.Activation.h>")
cpp_quote("#endif // !defined(__windows2Eapplicationmodel2Eactivation_h__)")
cpp_quote("#if !defined(__windows2Eapplicationmodel2Ecore_h__)")
cpp_quote("#include <Windows.ApplicationModel.Core.h>")
cpp_quote("#endif // !defined(__windows2Eapplicationmodel2Ecore_h__)")
cpp_quote("#if !defined(__windows2Eapplicationmodel2Edatatransfer_h__)")
cpp_quote("#include <Windows.ApplicationModel.DataTransfer.h>")
cpp_quote("#endif // !defined(__windows2Eapplicationmodel2Edatatransfer_h__)")
cpp_quote("#if !defined(__windows2Eapplicationmodel2Edatatransfer2Edragdrop_h__)")
cpp_quote("#include <Windows.ApplicationModel.DataTransfer.DragDrop.h>")
cpp_quote("#endif // !defined(__windows2Eapplicationmodel2Edatatransfer2Edragdrop_h__)")
cpp_quote("#if !defined(__windows2Egraphics2Eimaging_h__)")
cpp_quote("#include <Windows.Graphics.Imaging.h>")
cpp_quote("#endif // !defined(__windows2Egraphics2Eimaging_h__)")
cpp_quote("#if !defined(__windows2Eui2Ecore_h__)")
cpp_quote("#include <Windows.UI.Core.h>")
cpp_quote("#endif // !defined(__windows2Eui2Ecore_h__)")
cpp_quote("#if !defined(__windows2Eui2Einput_h__)")
cpp_quote("#include <Windows.UI.Input.h>")
cpp_quote("#endif // !defined(__windows2Eui2Einput_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl2Eautomation2Epeers_h__)")
cpp_quote("#include <Windows.UI.Xaml.Automation.Peers.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl2Eautomation2Epeers_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl2Econtrols_h__)")
cpp_quote("#include <Windows.UI.Xaml.Controls.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl2Econtrols_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl2Econtrols2Eprimitives_h__)")
cpp_quote("#include <Windows.UI.Xaml.Controls.Primitives.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl2Econtrols2Eprimitives_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl2Edata_h__)")
cpp_quote("#include <Windows.UI.Xaml.Data.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl2Edata_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl2Einput_h__)")
cpp_quote("#include <Windows.UI.Xaml.Input.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl2Einput_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl2Einterop_h__)")
cpp_quote("#include <Windows.UI.Xaml.Interop.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl2Einterop_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl2Emedia_h__)")
cpp_quote("#include <Windows.UI.Xaml.Media.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl2Emedia_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl2Emedia2Eanimation_h__)")
cpp_quote("#include <Windows.UI.Xaml.Media.Animation.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl2Emedia2Eanimation_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl2Emedia2Eimaging_h__)")
cpp_quote("#include <Windows.UI.Xaml.Media.Imaging.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl2Emedia2Eimaging_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl2Emedia2Emedia3d_h__)")
cpp_quote("#include <Windows.UI.Xaml.Media.Media3D.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl2Emedia2Emedia3d_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace ApplicationModel
    {
        namespace Activation
        {
            runtimeclass CachedFileUpdaterActivatedEventArgs;

            runtimeclass FileActivatedEventArgs;

            runtimeclass FileOpenPickerActivatedEventArgs;

            runtimeclass FileSavePickerActivatedEventArgs;

            interface IActivatedEventArgs;

            runtimeclass LaunchActivatedEventArgs;

            runtimeclass SearchActivatedEventArgs;

            runtimeclass ShareTargetActivatedEventArgs;
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        namespace Core
        {
            interface IFrameworkView;

            interface IFrameworkViewSource;
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        namespace DataTransfer
        {
            runtimeclass DataPackage;

            typedef enum DataPackageOperation DataPackageOperation;

            runtimeclass DataPackageView;
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        namespace DataTransfer
        {
            namespace DragDrop
            {
                typedef enum DragDropModifiers DragDropModifiers;
            }
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        runtimeclass SuspendingEventArgs;
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct Point Point;

        typedef struct Rect Rect;

        typedef struct Size Size;

        typedef struct TimeSpan TimeSpan;

        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace Graphics
    {
        namespace Imaging
        {
            runtimeclass SoftwareBitmap;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Core
        {
            runtimeclass CoreDispatcher;

            runtimeclass CoreWindow;

            runtimeclass CoreWindowEventArgs;

            runtimeclass VisibilityChangedEventArgs;

            runtimeclass WindowActivatedEventArgs;

            runtimeclass WindowSizeChangedEventArgs;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Input
        {
            runtimeclass PointerPoint;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Automation
            {
                namespace Peers
                {
                    runtimeclass AutomationPeer;
                }
            }
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                runtimeclass ContainerContentChangingEventArgs;

                runtimeclass Control;
            }
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                namespace Primitives
                {
                    typedef enum ComponentResourceLocation ComponentResourceLocation;
                }
            }
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                runtimeclass SearchBox;
            }
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Data
            {
                runtimeclass BindingBase;

                runtimeclass BindingExpression;
            }
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Input
            {
                delegate DoubleTappedEventHandler;

                delegate HoldingEventHandler;

                delegate KeyEventHandler;

                delegate ManipulationCompletedEventHandler;

                delegate ManipulationDeltaEventHandler;

                delegate ManipulationInertiaStartingEventHandler;

                typedef enum ManipulationModes ManipulationModes;

                delegate ManipulationStartedEventHandler;

                delegate ManipulationStartingEventHandler;

                runtimeclass Pointer;

                delegate PointerEventHandler;

                delegate RightTappedEventHandler;

                delegate TappedEventHandler;
            }
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Interop
            {
                typedef struct TypeName TypeName;
            }
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                namespace Animation
                {
                    runtimeclass EasingFunctionBase;

                    runtimeclass Storyboard;

                    runtimeclass TransitionCollection;
                }
            }
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                runtimeclass CacheMode;

                typedef enum ElementCompositeMode ElementCompositeMode;

                runtimeclass GeneralTransform;
            }
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                namespace Imaging
                {
                    runtimeclass BitmapImage;
                }
            }
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                namespace Media3D
                {
                    runtimeclass Transform3D;
                }
            }
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                runtimeclass Projection;

                runtimeclass RectangleGeometry;

                runtimeclass Transform;
            }
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            typedef enum DurationType DurationType;

            typedef enum ElementTheme ElementTheme;

            typedef enum FlowDirection FlowDirection;

            typedef enum FocusState FocusState;

            typedef enum HorizontalAlignment HorizontalAlignment;

            typedef enum VerticalAlignment VerticalAlignment;

            typedef enum Visibility Visibility;

            typedef enum ApplicationTheme ApplicationTheme;

            typedef enum AutomationTextAttributesEnum AutomationTextAttributesEnum;

            typedef enum FontCapitals FontCapitals;

            typedef enum FontEastAsianLanguage FontEastAsianLanguage;

            typedef enum FontEastAsianWidths FontEastAsianWidths;

            typedef enum FontFraction FontFraction;

            typedef enum FontNumeralAlignment FontNumeralAlignment;

            typedef enum FontNumeralStyle FontNumeralStyle;

            typedef enum FontVariants FontVariants;

            typedef enum GridUnitType GridUnitType;

            typedef enum LineStackingStrategy LineStackingStrategy;

            typedef enum OpticalMarginAlignment OpticalMarginAlignment;

            typedef enum TextAlignment TextAlignment;

            typedef enum TextLineBounds TextLineBounds;

            typedef enum TextReadingOrder TextReadingOrder;

            typedef enum TextTrimming TextTrimming;

            typedef enum TextWrapping TextWrapping;

            typedef struct CornerRadius CornerRadius;

            typedef struct Duration Duration;

            typedef struct Thickness Thickness;

            typedef struct GridLength GridLength;

            delegate ApplicationInitializationCallback;

            delegate CreateDefaultValueCallback;

            delegate DependencyPropertyChangedCallback;

            delegate DependencyPropertyChangedEventHandler;

            delegate DragEventHandler;

            delegate ExceptionRoutedEventHandler;

            delegate PropertyChangedCallback;

            delegate RoutedEventHandler;

            delegate SizeChangedEventHandler;

            delegate SuspendingEventHandler;

            delegate UnhandledExceptionEventHandler;

            delegate VisualStateChangedEventHandler;

            delegate WindowActivatedEventHandler;

            delegate WindowClosedEventHandler;

            delegate WindowSizeChangedEventHandler;

            delegate WindowVisibilityChangedEventHandler;

            delegate BindingFailedEventHandler;

            interface IDataTemplateExtension;

            interface IDataTemplate;

            interface IDataTemplateFactory;

            interface IDataTemplateStatics2;

            interface IDispatcherTimer;

            interface IDispatcherTimerFactory;

            interface ICornerRadiusHelper;

            interface ICornerRadiusHelperStatics;

            interface IDurationHelper;

            interface IDurationHelperStatics;

            interface IThicknessHelper;

            interface IThicknessHelperStatics;

            interface IApplicationInitializationCallbackParams;

            interface IDataContextChangedEventArgs;

            interface IDataTemplateKey;

            interface IDataTemplateKeyFactory;

            interface IDependencyObject;

            interface IDependencyObjectFactory;

            interface IDependencyObject2;

            interface IDependencyProperty;

            interface IDependencyPropertyStatics;

            interface IDependencyPropertyChangedEventArgs;

            interface IDragOperationDeferral;

            interface IDragUI;

            interface IDragUIOverride;

            interface IFrameworkView;

            interface IPropertyMetadata;

            interface IPropertyMetadataStatics;

            interface IPropertyMetadataFactory;

            interface IRoutedEvent;

            interface IRoutedEventArgs;

            interface IRoutedEventArgsFactory;

            interface ISetterBaseCollection;

            interface ITargetPropertyPath;

            interface ITargetPropertyPathFactory;

            interface IUnhandledExceptionEventArgs;

            interface IVisualStateChangedEventArgs;

            interface IWindow;

            interface IWindowStatics;

            interface IWindow2;

            interface IWindowCreatedEventArgs;

            interface IDependencyObjectCollectionFactory;

            interface IDragEventArgs;

            interface IDragEventArgs2;

            interface IDragStartingEventArgs;

            interface IDropCompletedEventArgs;

            interface IExceptionRoutedEventArgs;

            interface IExceptionRoutedEventArgsFactory;

            interface IFrameworkTemplate;

            interface IFrameworkTemplateFactory;

            interface IPropertyPath;

            interface IPropertyPathFactory;

            interface IResourceDictionary;

            interface IResourceDictionaryFactory;

            interface ISetterBase;

            interface ISetterBaseFactory;

            interface ISizeChangedEventArgs;

            interface IStateTriggerBase;

            interface IStateTriggerBaseProtected;

            interface IStateTriggerBaseFactory;

            interface IStyle;

            interface IStyleFactory;

            interface ITriggerAction;

            interface ITriggerActionFactory;

            interface ITriggerBase;

            interface ITriggerBaseFactory;

            interface IUIElement;

            interface IUIElementOverrides;

            interface IUIElementStatics;

            interface IUIElementFactory;

            interface IUIElement2;

            interface IUIElementStatics2;

            interface IUIElement3;

            interface IUIElementStatics3;

            interface IVisualState;

            interface IVisualState2;

            interface IVisualStateGroup;

            interface IVisualStateManager;

            interface IVisualStateManagerOverrides;

            interface IVisualStateManagerProtected;

            interface IVisualStateManagerStatics;

            interface IVisualStateManagerFactory;

            interface IVisualTransition;

            interface IVisualTransitionFactory;

            interface IAdaptiveTrigger;

            interface IAdaptiveTriggerStatics;

            interface IAdaptiveTriggerFactory;

            interface IEventTrigger;

            interface IFrameworkElement;

            interface IFrameworkElementOverrides;

            interface IFrameworkElementStatics;

            interface IFrameworkElementFactory;

            interface IFrameworkElement2;

            interface IFrameworkElementOverrides2;

            interface IFrameworkElementStatics2;

            interface IFrameworkElement3;

            interface IMediaFailedRoutedEventArgs;

            interface ISetter;

            interface ISetterFactory;

            interface ISetter2;

            interface IStateTrigger;

            interface IStateTriggerStatics;

            interface IGridLengthHelper;

            interface IGridLengthHelperStatics;

            interface IBindingFailedEventArgs;

            interface IDebugSettings;

            interface IDebugSettings2;

            interface IDebugSettings3;

            interface IApplication;

            interface IApplicationOverrides;

            interface IApplicationStatics;

            interface IApplicationFactory;

            interface IFrameworkViewSource;

            interface IPointHelper;

            interface IPointHelperStatics;

            interface IRectHelper;

            interface IRectHelperStatics;

            interface ISizeHelper;

            interface ISizeHelperStatics;

            runtimeclass DispatcherTimer;

            runtimeclass CornerRadiusHelper;

            runtimeclass DurationHelper;

            runtimeclass ThicknessHelper;

            runtimeclass ApplicationInitializationCallbackParams;

            runtimeclass DependencyObject;

            runtimeclass DependencyProperty;

            runtimeclass DependencyPropertyChangedEventArgs;

            runtimeclass RoutedEventArgs;

            runtimeclass UnhandledExceptionEventArgs;

            runtimeclass VisualStateChangedEventArgs;

            runtimeclass DataContextChangedEventArgs;

            runtimeclass DataTemplateKey;

            runtimeclass PropertyMetadata;

            runtimeclass DragOperationDeferral;

            runtimeclass DragUI;

            runtimeclass DragUIOverride;

            runtimeclass FrameworkView;

            runtimeclass RoutedEvent;

            runtimeclass SetterBaseCollection;

            runtimeclass TargetPropertyPath;

            runtimeclass TriggerActionCollection;

            runtimeclass TriggerCollection;

            runtimeclass Window;

            runtimeclass WindowCreatedEventArgs;

            runtimeclass DependencyObjectCollection;

            runtimeclass DragEventArgs;

            runtimeclass DragStartingEventArgs;

            runtimeclass DropCompletedEventArgs;

            runtimeclass ExceptionRoutedEventArgs;

            runtimeclass FrameworkTemplate;

            runtimeclass DataTemplate;

            runtimeclass PropertyPath;

            runtimeclass ResourceDictionary;

            runtimeclass SetterBase;

            runtimeclass SizeChangedEventArgs;

            runtimeclass StateTriggerBase;

            runtimeclass Style;

            runtimeclass TriggerAction;

            runtimeclass TriggerBase;

            runtimeclass UIElement;

            runtimeclass VisualState;

            runtimeclass VisualStateGroup;

            runtimeclass VisualStateManager;

            runtimeclass VisualTransition;

            runtimeclass AdaptiveTrigger;

            runtimeclass EventTrigger;

            runtimeclass FrameworkElement;

            runtimeclass MediaFailedRoutedEventArgs;

            runtimeclass Setter;

            runtimeclass StateTrigger;

            runtimeclass GridLengthHelper;

            runtimeclass BindingFailedEventArgs;

            runtimeclass DebugSettings;

            runtimeclass Application;

            runtimeclass FrameworkViewSource;

            runtimeclass PointHelper;

            runtimeclass RectHelper;

            runtimeclass SizeHelper;
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            declare
            {
                interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.DependencyObject*>;

                interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.ResourceDictionary*>;

                interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.SetterBase*>;

                interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.StateTriggerBase*>;

                interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.TriggerAction*>;

                interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.TriggerBase*>;

                interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.UIElement*>;

                interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.VisualState*>;

                interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.VisualStateGroup*>;

                interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.VisualTransition*>;

                interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.DependencyObject*>;

                interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.ResourceDictionary*>;

                interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.SetterBase*>;

                interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.StateTriggerBase*>;

                interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.TriggerAction*>;

                interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.TriggerBase*>;

                interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.UIElement*>;

                interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.VisualState*>;

                interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.VisualStateGroup*>;

                interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.VisualTransition*>;

                interface Windows.Foundation.Collections.IObservableVector<Windows.UI.Xaml.DependencyObject*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.DependencyObject*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.ResourceDictionary*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.SetterBase*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.StateTriggerBase*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.TriggerAction*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.TriggerBase*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.UIElement*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.VisualState*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.VisualStateGroup*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.VisualTransition*>;

                interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.DependencyObject*>;

                interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.ResourceDictionary*>;

                interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.SetterBase*>;

                interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.StateTriggerBase*>;

                interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.TriggerAction*>;

                interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.TriggerBase*>;

                interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.UIElement*>;

                interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.VisualState*>;

                interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.VisualStateGroup*>;

                interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.VisualTransition*>;

                interface Windows.Foundation.IReference<Windows.UI.Xaml.Thickness>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.SearchBox*, Windows.UI.Xaml.RoutedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.FrameworkElement*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.FrameworkElement*, Windows.UI.Xaml.DataContextChangedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.UIElement*, Windows.UI.Xaml.DragStartingEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.UIElement*, Windows.UI.Xaml.DropCompletedEventArgs*>;
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            [version(0x06020000)]
            enum DurationType
            {
                Automatic = 0,
                TimeSpan  = 1,
                Forever   = 2
            };

            [version(0x06030000)]
            enum ElementTheme
            {
                Default = 0,
                Light   = 1,
                Dark    = 2
            };

            [version(0x06020000)]
            enum FlowDirection
            {
                LeftToRight = 0,
                RightToLeft = 1
            };

            [version(0x06020000)]
            enum FocusState
            {
                Unfocused    = 0,
                Pointer      = 1,
                Keyboard     = 2,
                Programmatic = 3
            };

            [version(0x06020000)]
            enum HorizontalAlignment
            {
                Left    = 0,
                Center  = 1,
                Right   = 2,
                Stretch = 3
            };

            [version(0x06020000)]
            enum VerticalAlignment
            {
                Top     = 0,
                Center  = 1,
                Bottom  = 2,
                Stretch = 3
            };

            [version(0x06020000)]
            enum Visibility
            {
                Visible   = 0,
                Collapsed = 1
            };

            [version(0x06020000)]
            enum ApplicationTheme
            {
                Light = 0,
                Dark  = 1
            };

            [version(0x0A000000)]
            enum AutomationTextAttributesEnum
            {
                AnimationStyleAttribute          = 40000,
                BackgroundColorAttribute         = 40001,
                BulletStyleAttribute             = 40002,
                CapStyleAttribute                = 40003,
                CultureAttribute                 = 40004,
                FontNameAttribute                = 40005,
                FontSizeAttribute                = 40006,
                FontWeightAttribute              = 40007,
                ForegroundColorAttribute         = 40008,
                HorizontalTextAlignmentAttribute = 40009,
                IndentationFirstLineAttribute    = 40010,
                IndentationLeadingAttribute      = 40011,
                IndentationTrailingAttribute     = 40012,
                IsHiddenAttribute                = 40013,
                IsItalicAttribute                = 40014,
                IsReadOnlyAttribute              = 40015,
                IsSubscriptAttribute             = 40016,
                IsSuperscriptAttribute           = 40017,
                MarginBottomAttribute            = 40018,
                MarginLeadingAttribute           = 40019,
                MarginTopAttribute               = 40020,
                MarginTrailingAttribute          = 40021,
                OutlineStylesAttribute           = 40022,
                OverlineColorAttribute           = 40023,
                OverlineStyleAttribute           = 40024,
                StrikethroughColorAttribute      = 40025,
                StrikethroughStyleAttribute      = 40026,
                TabsAttribute                    = 40027,
                TextFlowDirectionsAttribute      = 40028,
                UnderlineColorAttribute          = 40029,
                UnderlineStyleAttribute          = 40030,
                AnnotationTypesAttribute         = 40031,
                AnnotationObjectsAttribute       = 40032,
                StyleNameAttribute               = 40033,
                StyleIdAttribute                 = 40034,
                LinkAttribute                    = 40035,
                IsActiveAttribute                = 40036,
                SelectionActiveEndAttribute      = 40037,
                CaretPositionAttribute           = 40038,
                CaretBidiModeAttribute           = 40039
            };

            [version(0x06020000)]
            enum FontCapitals
            {
                Normal        = 0,
                AllSmallCaps  = 1,
                SmallCaps     = 2,
                AllPetiteCaps = 3,
                PetiteCaps    = 4,
                Unicase       = 5,
                Titling       = 6
            };

            [version(0x06020000)]
            enum FontEastAsianLanguage
            {
                Normal           = 0,
                HojoKanji        = 1,
                Jis04            = 2,
                Jis78            = 3,
                Jis83            = 4,
                Jis90            = 5,
                NlcKanji         = 6,
                Simplified       = 7,
                Traditional      = 8,
                TraditionalNames = 9
            };

            [version(0x06020000)]
            enum FontEastAsianWidths
            {
                Normal       = 0,
                Full         = 1,
                Half         = 2,
                Proportional = 3,
                Quarter      = 4,
                Third        = 5
            };

            [version(0x06020000)]
            enum FontFraction
            {
                Normal  = 0,
                Stacked = 1,
                Slashed = 2
            };

            [version(0x06020000)]
            enum FontNumeralAlignment
            {
                Normal       = 0,
                Proportional = 1,
                Tabular      = 2
            };

            [version(0x06020000)]
            enum FontNumeralStyle
            {
                Normal   = 0,
                Lining   = 1,
                OldStyle = 2
            };

            [version(0x06020000)]
            enum FontVariants
            {
                Normal      = 0,
                Superscript = 1,
                Subscript   = 2,
                Ordinal     = 3,
                Inferior    = 4,
                Ruby        = 5
            };

            [version(0x06020000)]
            enum GridUnitType
            {
                Auto  = 0,
                Pixel = 1,
                Star  = 2
            };

            [version(0x06020000)]
            enum LineStackingStrategy
            {
                MaxHeight          = 0,
                BlockLineHeight    = 1,
                BaselineToBaseline = 2
            };

            [version(0x06030000)]
            enum OpticalMarginAlignment
            {
                None             = 0,
                TrimSideBearings = 1
            };

            [version(0x06020000)]
            enum TextAlignment
            {
                Center            = 0,
                Left              = 1,
                Right             = 2,
                Justify           = 3,
                DetectFromContent = 4
            };

            [version(0x06030000)]
            enum TextLineBounds
            {
                Full            = 0,
                TrimToCapHeight = 1,
                TrimToBaseline  = 2,
                Tight           = 3
            };

            [version(0x06030000)]
            enum TextReadingOrder
            {
                [deprecated("Consider using UseFlowDirection, which is an improved version of Default. For more info, see MSDN.", deprecate, 0x0A000000)]
                Default           = 0,
                UseFlowDirection  = 0,
                DetectFromContent = 1
            };

            [version(0x06020000)]
            enum TextTrimming
            {
                None              = 0,
                [version(0x06030000)]
                CharacterEllipsis = 1,
                WordEllipsis      = 2,
                [version(0x06030000)]
                Clip              = 3
            };

            [version(0x06020000)]
            enum TextWrapping
            {
                NoWrap         = 1,
                Wrap           = 2,
                [version(0x06030000)]
                WrapWholeWords = 3
            };

            [version(0x06020000)]
            struct CornerRadius
            {
                DOUBLE TopLeft;
                DOUBLE TopRight;
                DOUBLE BottomRight;
                DOUBLE BottomLeft;
            };

            [version(0x06020000)]
            struct Duration
            {
                Windows.Foundation.TimeSpan TimeSpan;
                Windows.UI.Xaml.DurationType Type;
            };

            [version(0x06020000)]
            struct Thickness
            {
                DOUBLE Left;
                DOUBLE Top;
                DOUBLE Right;
                DOUBLE Bottom;
            };

            [version(0x06020000)]
            struct GridLength
            {
                DOUBLE Value;
                Windows.UI.Xaml.GridUnitType GridUnitType;
            };

            [uuid(B6351C55-C284-46E4-8310-FB0967FAB76F)]
            [version(0x06020000)]
            delegate
                HRESULT ApplicationInitializationCallback([in] Windows.UI.Xaml.ApplicationInitializationCallbackParams* p);

            [uuid(D6ECB12C-15B5-4EC8-B95C-CDD208F08153)]
            [version(0x06020000)]
            delegate
                HRESULT CreateDefaultValueCallback([out] [retval] IInspectable** value);

            [uuid(45883D16-27BF-4BC1-AC26-94C1601F3A49)]
            [version(0x06020000)]
            delegate
                HRESULT DependencyPropertyChangedCallback([in] Windows.UI.Xaml.DependencyObject* sender, [in] Windows.UI.Xaml.DependencyProperty* dp);

            [uuid(09223E5A-75BE-4499-8180-1DDC005421C0)]
            [version(0x06020000)]
            delegate
                HRESULT DependencyPropertyChangedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.DependencyPropertyChangedEventArgs* e);

            [uuid(2AB1A205-1E73-4BCF-AABC-57B97E21961D)]
            [version(0x06020000)]
            delegate
                HRESULT DragEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.DragEventArgs* e);

            [uuid(68E0E810-F6EA-42BC-855B-5D9B67E6A262)]
            [version(0x06020000)]
            delegate
                HRESULT ExceptionRoutedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.ExceptionRoutedEventArgs* e);

            [uuid(5A9F8A25-D142-44A4-8231-FD676724F29B)]
            [version(0x06020000)]
            delegate
                HRESULT PropertyChangedCallback([in] Windows.UI.Xaml.DependencyObject* d, [in] Windows.UI.Xaml.DependencyPropertyChangedEventArgs* e);

            [uuid(A856E674-B0B6-4BC3-BBA8-1BA06E40D4B5)]
            [version(0x06020000)]
            delegate
                HRESULT RoutedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.RoutedEventArgs* e);

            [uuid(1115B13C-25D2-480B-89DC-EB3DCBD6B7FA)]
            [version(0x06020000)]
            delegate
                HRESULT SizeChangedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.SizeChangedEventArgs* e);

            [uuid(23429465-E36A-40E2-B139-A4704602A6E1)]
            [version(0x06020000)]
            delegate
                HRESULT SuspendingEventHandler([in] IInspectable* sender, [in] Windows.ApplicationModel.SuspendingEventArgs* e);

            [uuid(9274E6BD-49A1-4958-BEEE-D0E19587B6E3)]
            [version(0x06020000)]
            delegate
                HRESULT UnhandledExceptionEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.UnhandledExceptionEventArgs* e);

            [uuid(E6D5BBD5-E029-43A6-B36D-84A81042D774)]
            [version(0x06020000)]
            delegate
                HRESULT VisualStateChangedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.VisualStateChangedEventArgs* e);

            [uuid(18026348-8619-4C7B-B534-CED45D9DE219)]
            [version(0x06020000)]
            delegate
                HRESULT WindowActivatedEventHandler([in] IInspectable* sender, [in] Windows.UI.Core.WindowActivatedEventArgs* e);

            [uuid(0DB89161-20D7-45DF-9122-BA89576703BA)]
            [version(0x06020000)]
            delegate
                HRESULT WindowClosedEventHandler([in] IInspectable* sender, [in] Windows.UI.Core.CoreWindowEventArgs* e);

            [uuid(5C21C742-2CED-4FD9-BA38-7118D40E966B)]
            [version(0x06020000)]
            delegate
                HRESULT WindowSizeChangedEventHandler([in] IInspectable* sender, [in] Windows.UI.Core.WindowSizeChangedEventArgs* e);

            [uuid(10406AD6-B090-4A4A-B2AD-D682DF27130F)]
            [version(0x06020000)]
            delegate
                HRESULT WindowVisibilityChangedEventHandler([in] IInspectable* sender, [in] Windows.UI.Core.VisibilityChangedEventArgs* e);

            [uuid(136B1782-54BA-420D-A1AA-82828721CDE6)]
            [version(0x06020000)]
            delegate
                HRESULT BindingFailedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.BindingFailedEventArgs* e);

            [uuid(595E9547-CDFF-4B92-B773-AB396878F353)]
            [version(0x0A000000)]
            interface IDataTemplateExtension : IInspectable
            {
                HRESULT ResetTemplate();
                HRESULT ProcessBinding([in] UINT32 phase, [out] [retval] boolean* returnValue);
                HRESULT ProcessBindings([in] Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs* arg, [out] [retval] INT32* returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.DataTemplate)]
            [uuid(9910AEC7-8AB5-4118-9BC6-09F45A35073D)]
            [version(0x06020000)]
            interface IDataTemplate : IInspectable
            {
                HRESULT LoadContent([out] [retval] Windows.UI.Xaml.DependencyObject** returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.DataTemplate)]
            [uuid(51ED9D7E-2B53-475B-9C88-0C1832C8351A)]
            [version(0x06020000)]
            interface IDataTemplateFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.DataTemplate** instance);
            }

            [exclusiveto(Windows.UI.Xaml.DataTemplate)]
            [uuid(8AF77D73-AA01-471E-BEDD-8BAD86219B77)]
            [version(0x0A000000)]
            interface IDataTemplateStatics2 : IInspectable
            {
                [propget] HRESULT ExtensionInstanceProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                HRESULT GetExtensionInstance([in] Windows.UI.Xaml.FrameworkElement* element, [out] [retval] Windows.UI.Xaml.IDataTemplateExtension** value);
                HRESULT SetExtensionInstance([in] Windows.UI.Xaml.FrameworkElement* element, [in] Windows.UI.Xaml.IDataTemplateExtension* value);
            }

            [exclusiveto(Windows.UI.Xaml.DispatcherTimer)]
            [uuid(D160CE46-CD22-4F5F-8C97-40E61DA3E2DC)]
            [version(0x06020000)]
            interface IDispatcherTimer : IInspectable
            {
                [propget] HRESULT Interval([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT Interval([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT IsEnabled([out] [retval] boolean* value);
                [eventadd] HRESULT Tick([in] Windows.Foundation.EventHandler<IInspectable*>* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Tick([in] EventRegistrationToken token);
                HRESULT Start();
                HRESULT Stop();
            }

            [exclusiveto(Windows.UI.Xaml.DispatcherTimer)]
            [uuid(E9961E6E-3626-403A-AFE0-040D58165632)]
            [version(0x06020000)]
            interface IDispatcherTimerFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.DispatcherTimer** instance);
            }

            [exclusiveto(Windows.UI.Xaml.CornerRadiusHelper)]
            [uuid(FD7BE182-1CDB-4288-B8C8-85EE79297BFC)]
            [version(0x06020000)]
            interface ICornerRadiusHelper : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.CornerRadiusHelper)]
            [uuid(F4A1F659-D4D4-451F-A387-D6BF4B2451D4)]
            [version(0x06020000)]
            interface ICornerRadiusHelperStatics : IInspectable
            {
                HRESULT FromRadii([in] DOUBLE topLeft, [in] DOUBLE topRight, [in] DOUBLE bottomRight, [in] DOUBLE bottomLeft, [out] [retval] Windows.UI.Xaml.CornerRadius* returnValue);
                HRESULT FromUniformRadius([in] DOUBLE uniformRadius, [out] [retval] Windows.UI.Xaml.CornerRadius* returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.DurationHelper)]
            [uuid(25C1659F-4497-4135-940F-EE96F4D6E934)]
            [version(0x06020000)]
            interface IDurationHelper : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.DurationHelper)]
            [uuid(BC88093E-3547-4EC0-B519-FFA8F9C4838C)]
            [version(0x06020000)]
            interface IDurationHelperStatics : IInspectable
            {
                [propget] HRESULT Automatic([out] [retval] Windows.UI.Xaml.Duration* value);
                [propget] HRESULT Forever([out] [retval] Windows.UI.Xaml.Duration* value);
                HRESULT Compare([in] Windows.UI.Xaml.Duration duration1, [in] Windows.UI.Xaml.Duration duration2, [out] [retval] INT32* returnValue);
                HRESULT FromTimeSpan([in] Windows.Foundation.TimeSpan timeSpan, [out] [retval] Windows.UI.Xaml.Duration* returnValue);
                HRESULT GetHasTimeSpan([in] Windows.UI.Xaml.Duration target, [out] [retval] boolean* value);
                HRESULT Add([in] Windows.UI.Xaml.Duration target, [in] Windows.UI.Xaml.Duration duration, [out] [retval] Windows.UI.Xaml.Duration* returnValue);
                HRESULT Equals([in] Windows.UI.Xaml.Duration target, [in] Windows.UI.Xaml.Duration value, [out] [retval] boolean* returnValue);
                HRESULT Subtract([in] Windows.UI.Xaml.Duration target, [in] Windows.UI.Xaml.Duration duration, [out] [retval] Windows.UI.Xaml.Duration* returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.ThicknessHelper)]
            [uuid(A86BAE4B-1E8F-4EEB-9013-0B2838A97B34)]
            [version(0x06020000)]
            interface IThicknessHelper : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.ThicknessHelper)]
            [uuid(C0991A7C-070C-4DA6-8784-01CA800EB73A)]
            [version(0x06020000)]
            interface IThicknessHelperStatics : IInspectable
            {
                HRESULT FromLengths([in] DOUBLE left, [in] DOUBLE top, [in] DOUBLE right, [in] DOUBLE bottom, [out] [retval] Windows.UI.Xaml.Thickness* returnValue);
                HRESULT FromUniformLength([in] DOUBLE uniformLength, [out] [retval] Windows.UI.Xaml.Thickness* returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.ApplicationInitializationCallbackParams)]
            [uuid(751B792E-5772-4488-8B87-F547FAA64474)]
            [version(0x06020000)]
            interface IApplicationInitializationCallbackParams : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.DataContextChangedEventArgs)]
            [uuid(7DA68E21-0B8F-4F9F-A143-F8E7780136A2)]
            [version(0x06030000)]
            interface IDataContextChangedEventArgs : IInspectable
            {
                [propget] HRESULT NewValue([out] [retval] IInspectable** value);
                [propget] HRESULT Handled([out] [retval] boolean* value);
                [propput] HRESULT Handled([in] boolean value);
            }

            [exclusiveto(Windows.UI.Xaml.DataTemplateKey)]
            [uuid(873B6C28-CCEB-4B61-86FA-B2CEC39CC2FA)]
            [version(0x06020000)]
            interface IDataTemplateKey : IInspectable
            {
                [propget] HRESULT DataType([out] [retval] IInspectable** value);
                [propput] HRESULT DataType([in] IInspectable* value);
            }

            [exclusiveto(Windows.UI.Xaml.DataTemplateKey)]
            [uuid(E96B2959-D982-4152-91CB-DE0E4DFD7693)]
            [version(0x06020000)]
            interface IDataTemplateKeyFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.DataTemplateKey** instance);
                HRESULT CreateInstanceWithType([in] IInspectable* dataType, [in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.DataTemplateKey** instance);
            }

            [exclusiveto(Windows.UI.Xaml.DependencyObject)]
            [uuid(5C526665-F60E-4912-AF59-5FE0680F089D)]
            [version(0x06020000)]
            interface IDependencyObject : IInspectable
            {
                HRESULT GetValue([in] Windows.UI.Xaml.DependencyProperty* dp, [out] [retval] IInspectable** returnValue);
                HRESULT SetValue([in] Windows.UI.Xaml.DependencyProperty* dp, [in] IInspectable* value);
                HRESULT ClearValue([in] Windows.UI.Xaml.DependencyProperty* dp);
                HRESULT ReadLocalValue([in] Windows.UI.Xaml.DependencyProperty* dp, [out] [retval] IInspectable** returnValue);
                HRESULT GetAnimationBaseValue([in] Windows.UI.Xaml.DependencyProperty* dp, [out] [retval] IInspectable** returnValue);
                [propget] HRESULT Dispatcher([out] [retval] Windows.UI.Core.CoreDispatcher** value);
            }

            [exclusiveto(Windows.UI.Xaml.DependencyObject)]
            [uuid(9A03AF92-7D8A-4937-884F-ECF34FE02ACB)]
            [version(0x06020000)]
            interface IDependencyObjectFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.DependencyObject** instance);
            }

            [exclusiveto(Windows.UI.Xaml.DependencyObject)]
            [uuid(29FED85D-3D22-43A1-ADD0-17027C08B212)]
            [version(0x0A000000)]
            interface IDependencyObject2 : IInspectable
            {
                HRESULT RegisterPropertyChangedCallback([in] Windows.UI.Xaml.DependencyProperty* dp, [in] Windows.UI.Xaml.DependencyPropertyChangedCallback* callback, [out] [retval] INT64* returnValue);
                HRESULT UnregisterPropertyChangedCallback([in] Windows.UI.Xaml.DependencyProperty* dp, [in] INT64 token);
            }

            [exclusiveto(Windows.UI.Xaml.DependencyProperty)]
            [uuid(85B13970-9BC4-4E96-ACF1-30C8FD3D55C8)]
            [version(0x06020000)]
            interface IDependencyProperty : IInspectable
            {
                HRESULT GetMetadata([in] Windows.UI.Xaml.Interop.TypeName forType, [out] [retval] Windows.UI.Xaml.PropertyMetadata** returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.DependencyProperty)]
            [uuid(49E5F28F-8259-4D5C-AAE0-83D56DBB68D9)]
            [version(0x06020000)]
            interface IDependencyPropertyStatics : IInspectable
            {
                [propget] HRESULT UnsetValue([out] [retval] IInspectable** value);
                HRESULT Register([in] HSTRING name, [in] Windows.UI.Xaml.Interop.TypeName propertyType, [in] Windows.UI.Xaml.Interop.TypeName ownerType, [in] Windows.UI.Xaml.PropertyMetadata* typeMetadata, [out] [retval] Windows.UI.Xaml.DependencyProperty** returnValue);
                HRESULT RegisterAttached([in] HSTRING name, [in] Windows.UI.Xaml.Interop.TypeName propertyType, [in] Windows.UI.Xaml.Interop.TypeName ownerType, [in] Windows.UI.Xaml.PropertyMetadata* defaultMetadata, [out] [retval] Windows.UI.Xaml.DependencyProperty** returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)]
            [uuid(81212C2B-24D0-4957-ABC3-224470A93A4E)]
            [version(0x06020000)]
            interface IDependencyPropertyChangedEventArgs : IInspectable
            {
                [propget] HRESULT Property([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT OldValue([out] [retval] IInspectable** value);
                [propget] HRESULT NewValue([out] [retval] IInspectable** value);
            }

            [exclusiveto(Windows.UI.Xaml.DragOperationDeferral)]
            [uuid(BA73ECBA-1B73-4086-B3D3-C223BEEA1633)]
            [version(0x0A000000)]
            interface IDragOperationDeferral : IInspectable
            {
                HRESULT Complete();
            }

            [exclusiveto(Windows.UI.Xaml.DragUI)]
            [uuid(2D9BD838-7C60-4842-9170-346FE10A226A)]
            [version(0x0A000000)]
            interface IDragUI : IInspectable
            {
                [overload("SetContentFromBitmapImage")] HRESULT SetContentFromBitmapImage([in] Windows.UI.Xaml.Media.Imaging.BitmapImage* bitmapImage);
                [overload("SetContentFromBitmapImage")] HRESULT SetContentFromBitmapImageWithAnchorPoint([in] Windows.UI.Xaml.Media.Imaging.BitmapImage* bitmapImage, [in] Windows.Foundation.Point anchorPoint);
                [overload("SetContentFromSoftwareBitmap")] HRESULT SetContentFromSoftwareBitmap([in] Windows.Graphics.Imaging.SoftwareBitmap* softwareBitmap);
                [overload("SetContentFromSoftwareBitmap")] HRESULT SetContentFromSoftwareBitmapWithAnchorPoint([in] Windows.Graphics.Imaging.SoftwareBitmap* softwareBitmap, [in] Windows.Foundation.Point anchorPoint);
                HRESULT SetContentFromDataPackage();
            }

            [exclusiveto(Windows.UI.Xaml.DragUIOverride)]
            [uuid(BD6C9DFA-C961-4861-B7A5-BF4FE4A8A6EF)]
            [version(0x0A000000)]
            interface IDragUIOverride : IInspectable
            {
                [propget] HRESULT Caption([out] [retval] HSTRING* value);
                [propput] HRESULT Caption([in] HSTRING value);
                [propget] HRESULT IsContentVisible([out] [retval] boolean* value);
                [propput] HRESULT IsContentVisible([in] boolean value);
                [propget] HRESULT IsCaptionVisible([out] [retval] boolean* value);
                [propput] HRESULT IsCaptionVisible([in] boolean value);
                [propget] HRESULT IsGlyphVisible([out] [retval] boolean* value);
                [propput] HRESULT IsGlyphVisible([in] boolean value);
                HRESULT Clear();
                [overload("SetContentFromBitmapImage")] HRESULT SetContentFromBitmapImage([in] Windows.UI.Xaml.Media.Imaging.BitmapImage* bitmapImage);
                [overload("SetContentFromBitmapImage")] HRESULT SetContentFromBitmapImageWithAnchorPoint([in] Windows.UI.Xaml.Media.Imaging.BitmapImage* bitmapImage, [in] Windows.Foundation.Point anchorPoint);
                [overload("SetContentFromSoftwareBitmap")] HRESULT SetContentFromSoftwareBitmap([in] Windows.Graphics.Imaging.SoftwareBitmap* softwareBitmap);
                [overload("SetContentFromSoftwareBitmap")] HRESULT SetContentFromSoftwareBitmapWithAnchorPoint([in] Windows.Graphics.Imaging.SoftwareBitmap* softwareBitmap, [in] Windows.Foundation.Point anchorPoint);
            }

            [exclusiveto(Windows.UI.Xaml.FrameworkView)]
            [uuid(DDBA664B-B603-47AA-942D-3833174F0D80)]
            [version(0x06020000)]
            interface IFrameworkView : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.PropertyMetadata)]
            [uuid(814EF30D-8D18-448A-8644-F2CB51E70380)]
            [version(0x06020000)]
            interface IPropertyMetadata : IInspectable
            {
                [propget] HRESULT DefaultValue([out] [retval] IInspectable** value);
                [propget] HRESULT CreateDefaultValueCallback([out] [retval] Windows.UI.Xaml.CreateDefaultValueCallback** value);
            }

            [exclusiveto(Windows.UI.Xaml.PropertyMetadata)]
            [uuid(3B01077A-6E06-45E9-8B5C-AF243458C062)]
            [version(0x06020000)]
            interface IPropertyMetadataStatics : IInspectable
            {
                [default_overload] [overload("Create")] HRESULT CreateWithDefaultValue([in] IInspectable* defaultValue, [out] [retval] Windows.UI.Xaml.PropertyMetadata** returnValue);
                [default_overload] [overload("Create")] HRESULT CreateWithDefaultValueAndCallback([in] IInspectable* defaultValue, [in] Windows.UI.Xaml.PropertyChangedCallback* propertyChangedCallback, [out] [retval] Windows.UI.Xaml.PropertyMetadata** returnValue);
                [overload("Create")] HRESULT CreateWithFactory([in] Windows.UI.Xaml.CreateDefaultValueCallback* createDefaultValueCallback, [out] [retval] Windows.UI.Xaml.PropertyMetadata** returnValue);
                [overload("Create")] HRESULT CreateWithFactoryAndCallback([in] Windows.UI.Xaml.CreateDefaultValueCallback* createDefaultValueCallback, [in] Windows.UI.Xaml.PropertyChangedCallback* propertyChangedCallback, [out] [retval] Windows.UI.Xaml.PropertyMetadata** returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.PropertyMetadata)]
            [uuid(C1B81CC0-57CD-4F2F-B0A9-E1801B28F76B)]
            [version(0x06020000)]
            interface IPropertyMetadataFactory : IInspectable
            {
                HRESULT CreateInstanceWithDefaultValue([in] IInspectable* defaultValue, [in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.PropertyMetadata** instance);
                HRESULT CreateInstanceWithDefaultValueAndCallback([in] IInspectable* defaultValue, [in] Windows.UI.Xaml.PropertyChangedCallback* propertyChangedCallback, [in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.PropertyMetadata** instance);
            }

            [exclusiveto(Windows.UI.Xaml.RoutedEvent)]
            [uuid(A6B25818-43C1-4C70-865C-7BDD5A32E327)]
            [version(0x06020000)]
            interface IRoutedEvent : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.RoutedEventArgs)]
            [uuid(5C985AC6-D802-4B38-A223-BF070C43FEDF)]
            [version(0x06020000)]
            interface IRoutedEventArgs : IInspectable
            {
                [propget] HRESULT OriginalSource([out] [retval] IInspectable** value);
            }

            [exclusiveto(Windows.UI.Xaml.RoutedEventArgs)]
            [uuid(B61C4D87-70E5-412E-B520-1A41EE76BBF4)]
            [version(0x06020000)]
            interface IRoutedEventArgsFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.RoutedEventArgs** instance);
            }

            [exclusiveto(Windows.UI.Xaml.SetterBaseCollection)]
            [uuid(03C40CA8-909E-4117-811C-A4529496BDF1)]
            [version(0x06020000)]
            interface ISetterBaseCollection : IInspectable
                requires
                    Windows.Foundation.Collections.IVector<Windows.UI.Xaml.SetterBase*>,
                    Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.SetterBase*>
            {
                [propget] HRESULT IsSealed([out] [retval] boolean* value);
            }

            [exclusiveto(Windows.UI.Xaml.TargetPropertyPath)]
            [uuid(40740F8E-085F-4CED-BE70-6F47ACF15AD0)]
            [version(0x0A000000)]
            interface ITargetPropertyPath : IInspectable
            {
                [propget] HRESULT Path([out] [retval] Windows.UI.Xaml.PropertyPath** value);
                [propput] HRESULT Path([in] Windows.UI.Xaml.PropertyPath* value);
                [propget] HRESULT Target([out] [retval] IInspectable** value);
                [propput] HRESULT Target([in] IInspectable* value);
            }

            [exclusiveto(Windows.UI.Xaml.TargetPropertyPath)]
            [uuid(88EECCC8-99E2-4A44-9907-B44BC86E2BBE)]
            [version(0x0A000000)]
            interface ITargetPropertyPathFactory : IInspectable
            {
                HRESULT CreateInstance([in] Windows.UI.Xaml.DependencyProperty* targetProperty, [out] [retval] Windows.UI.Xaml.TargetPropertyPath** instance);
            }

            [exclusiveto(Windows.UI.Xaml.UnhandledExceptionEventArgs)]
            [uuid(7230269C-054E-4CF3-86C5-BE90EB6863D5)]
            [version(0x06020000)]
            interface IUnhandledExceptionEventArgs : IInspectable
            {
                [propget] HRESULT Exception([out] [retval] HRESULT* value);
                [propget] HRESULT Message([out] [retval] HSTRING* value);
                [propget] HRESULT Handled([out] [retval] boolean* value);
                [propput] HRESULT Handled([in] boolean value);
            }

            [exclusiveto(Windows.UI.Xaml.VisualStateChangedEventArgs)]
            [uuid(FE216AB1-F31F-4791-8989-C70E1D9B59FF)]
            [version(0x06020000)]
            interface IVisualStateChangedEventArgs : IInspectable
            {
                [propget] HRESULT OldState([out] [retval] Windows.UI.Xaml.VisualState** value);
                [propput] HRESULT OldState([in] Windows.UI.Xaml.VisualState* value);
                [propget] HRESULT NewState([out] [retval] Windows.UI.Xaml.VisualState** value);
                [propput] HRESULT NewState([in] Windows.UI.Xaml.VisualState* value);
                [propget] HRESULT Control([out] [retval] Windows.UI.Xaml.Controls.Control** value);
                [propput] HRESULT Control([in] Windows.UI.Xaml.Controls.Control* value);
            }

            [exclusiveto(Windows.UI.Xaml.Window)]
            [uuid(3276167D-C9F6-462D-9DE2-AE4C1FD8C2E5)]
            [version(0x06020000)]
            interface IWindow : IInspectable
            {
                [propget] HRESULT Bounds([out] [retval] Windows.Foundation.Rect* value);
                [propget] HRESULT Visible([out] [retval] boolean* value);
                [propget] HRESULT Content([out] [retval] Windows.UI.Xaml.UIElement** value);
                [propput] HRESULT Content([in] Windows.UI.Xaml.UIElement* value);
                [propget] HRESULT CoreWindow([out] [retval] Windows.UI.Core.CoreWindow** value);
                [propget] HRESULT Dispatcher([out] [retval] Windows.UI.Core.CoreDispatcher** value);
                [eventadd] HRESULT Activated([in] Windows.UI.Xaml.WindowActivatedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Activated([in] EventRegistrationToken token);
                [eventadd] HRESULT Closed([in] Windows.UI.Xaml.WindowClosedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Closed([in] EventRegistrationToken token);
                [eventadd] HRESULT SizeChanged([in] Windows.UI.Xaml.WindowSizeChangedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT SizeChanged([in] EventRegistrationToken token);
                [eventadd] HRESULT VisibilityChanged([in] Windows.UI.Xaml.WindowVisibilityChangedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT VisibilityChanged([in] EventRegistrationToken token);
                HRESULT Activate();
                HRESULT Close();
            }

            [exclusiveto(Windows.UI.Xaml.Window)]
            [uuid(93328409-4EA1-4AFA-83DC-0C4E73E88BB1)]
            [version(0x06020000)]
            interface IWindowStatics : IInspectable
            {
                [propget] HRESULT Current([out] [retval] Windows.UI.Xaml.Window** value);
            }

            [exclusiveto(Windows.UI.Xaml.Window)]
            [uuid(D384759F-34F6-4482-8435-F552F9B24CC8)]
            [version(0x0A000000)]
            interface IWindow2 : IInspectable
            {
                HRESULT SetTitleBar([in] Windows.UI.Xaml.UIElement* value);
            }

            [exclusiveto(Windows.UI.Xaml.WindowCreatedEventArgs)]
            [uuid(31B71470-FEFF-4654-AF48-9B398AB5772B)]
            [version(0x06020000)]
            interface IWindowCreatedEventArgs : IInspectable
            {
                [propget] HRESULT Window([out] [retval] Windows.UI.Xaml.Window** value);
            }

            [exclusiveto(Windows.UI.Xaml.DependencyObjectCollection)]
            [uuid(051E79FF-B3A8-49EE-B5AF-AC8F68B649E4)]
            [version(0x06030000)]
            interface IDependencyObjectCollectionFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.DependencyObjectCollection** instance);
            }

            [exclusiveto(Windows.UI.Xaml.DragEventArgs)]
            [uuid(B440C7C3-02B4-4980-9342-25DAE1C0F188)]
            [version(0x06020000)]
            interface IDragEventArgs : IInspectable
            {
                [propget] HRESULT Handled([out] [retval] boolean* value);
                [propput] HRESULT Handled([in] boolean value);
                [propget] HRESULT Data([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackage** value);
                [propput] HRESULT Data([in] Windows.ApplicationModel.DataTransfer.DataPackage* value);
                HRESULT GetPosition([in] Windows.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.DragEventArgs)]
            [uuid(26336658-2917-411D-BFC3-2F22471CBBE7)]
            [version(0x0A000000)]
            interface IDragEventArgs2 : IInspectable
            {
                [propget] HRESULT DataView([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackageView** value);
                [propget] HRESULT DragUIOverride([out] [retval] Windows.UI.Xaml.DragUIOverride** value);
                [propget] HRESULT Modifiers([out] [retval] Windows.ApplicationModel.DataTransfer.DragDrop.DragDropModifiers* value);
                [propget] HRESULT AcceptedOperation([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackageOperation* value);
                [propput] HRESULT AcceptedOperation([in] Windows.ApplicationModel.DataTransfer.DataPackageOperation value);
                HRESULT GetDeferral([out] [retval] Windows.UI.Xaml.DragOperationDeferral** returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.DragStartingEventArgs)]
            [uuid(6800D3FA-90B8-46F9-8E30-5AC25F73F0F9)]
            [version(0x0A000000)]
            interface IDragStartingEventArgs : IInspectable
            {
                [propget] HRESULT Cancel([out] [retval] boolean* value);
                [propput] HRESULT Cancel([in] boolean value);
                [propget] HRESULT Data([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackage** value);
                [propget] HRESULT DragUI([out] [retval] Windows.UI.Xaml.DragUI** value);
                HRESULT GetDeferral([out] [retval] Windows.UI.Xaml.DragOperationDeferral** returnValue);
                HRESULT GetPosition([in] Windows.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.DropCompletedEventArgs)]
            [uuid(6C4FC188-95BC-4261-9EC5-21CAB677B734)]
            [version(0x0A000000)]
            interface IDropCompletedEventArgs : IInspectable
            {
                [propget] HRESULT DropResult([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackageOperation* value);
            }

            [exclusiveto(Windows.UI.Xaml.ExceptionRoutedEventArgs)]
            [uuid(DD9FF16A-4B62-4A6C-A49D-0671EF6136BE)]
            [version(0x06020000)]
            interface IExceptionRoutedEventArgs : IInspectable
            {
                [propget] HRESULT ErrorMessage([out] [retval] HSTRING* value);
            }

            [exclusiveto(Windows.UI.Xaml.ExceptionRoutedEventArgs)]
            [uuid(BBA9826D-5D7A-44E7-B893-B2AE0DD24273)]
            [version(0x06020000)]
            interface IExceptionRoutedEventArgsFactory : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.FrameworkTemplate)]
            [uuid(A1E254D8-A446-4A27-9A9D-A0F59E1258A5)]
            [version(0x06020000)]
            interface IFrameworkTemplate : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.FrameworkTemplate)]
            [uuid(1A78A0A5-937D-46D4-832B-94FF14DAB061)]
            [version(0x06020000)]
            interface IFrameworkTemplateFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.FrameworkTemplate** instance);
            }

            [exclusiveto(Windows.UI.Xaml.PropertyPath)]
            [uuid(300E5D8A-1FF3-4D2C-95EC-27F81DEBACB8)]
            [version(0x06020000)]
            interface IPropertyPath : IInspectable
            {
                [propget] HRESULT Path([out] [retval] HSTRING* value);
            }

            [exclusiveto(Windows.UI.Xaml.PropertyPath)]
            [uuid(4E4CDF99-9826-4E56-847C-CA055F162905)]
            [version(0x06020000)]
            interface IPropertyPathFactory : IInspectable
            {
                HRESULT CreateInstance([in] HSTRING path, [out] [retval] Windows.UI.Xaml.PropertyPath** instance);
            }

            [exclusiveto(Windows.UI.Xaml.ResourceDictionary)]
            [uuid(C1EA4F24-D6DE-4191-8E3A-F48601F7489C)]
            [version(0x06020000)]
            interface IResourceDictionary : IInspectable
            {
                [propget] HRESULT Source([out] [retval] Windows.Foundation.Uri** value);
                [propput] HRESULT Source([in] Windows.Foundation.Uri* value);
                [propget] HRESULT MergedDictionaries([out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Xaml.ResourceDictionary*>** value);
                [propget] HRESULT ThemeDictionaries([out] [retval] Windows.Foundation.Collections.IMap<IInspectable*, IInspectable*>** value);
            }

            [exclusiveto(Windows.UI.Xaml.ResourceDictionary)]
            [uuid(EA3639B5-31B7-4271-92C9-7C9584A91C22)]
            [version(0x06020000)]
            interface IResourceDictionaryFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.ResourceDictionary** instance);
            }

            [exclusiveto(Windows.UI.Xaml.SetterBase)]
            [uuid(418BE27C-2AC4-4F22-8097-DEA3AEEB2FB3)]
            [version(0x06020000)]
            interface ISetterBase : IInspectable
            {
                [propget] HRESULT IsSealed([out] [retval] boolean* value);
            }

            [exclusiveto(Windows.UI.Xaml.SetterBase)]
            [uuid(81F8AD60-1CE8-469D-A667-16E37CEF8BA9)]
            [version(0x06020000)]
            interface ISetterBaseFactory : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.SizeChangedEventArgs)]
            [uuid(D5312E60-5CC1-42A1-920C-1AF46BE2F986)]
            [version(0x06020000)]
            interface ISizeChangedEventArgs : IInspectable
            {
                [propget] HRESULT PreviousSize([out] [retval] Windows.Foundation.Size* value);
                [propget] HRESULT NewSize([out] [retval] Windows.Foundation.Size* value);
            }

            [exclusiveto(Windows.UI.Xaml.StateTriggerBase)]
            [uuid(48B20698-AF06-466C-8052-93666DDE0E49)]
            [version(0x0A000000)]
            interface IStateTriggerBase : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.StateTriggerBase)]
            [uuid(3C41E253-8D14-4216-994C-F9930429F6E5)]
            [version(0x0A000000)]
            interface IStateTriggerBaseProtected : IInspectable
            {
                HRESULT SetActive([in] boolean IsActive);
            }

            [exclusiveto(Windows.UI.Xaml.StateTriggerBase)]
            [uuid(970E2C4B-BFAF-47B0-BE42-C1D711BB2E9F)]
            [version(0x0A000000)]
            interface IStateTriggerBaseFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.StateTriggerBase** instance);
            }

            [exclusiveto(Windows.UI.Xaml.Style)]
            [uuid(C4A9F225-9DB7-4A7D-B6D1-F74EDB9293C2)]
            [version(0x06020000)]
            interface IStyle : IInspectable
            {
                [propget] HRESULT IsSealed([out] [retval] boolean* value);
                [propget] HRESULT Setters([out] [retval] Windows.UI.Xaml.SetterBaseCollection** value);
                [propget] HRESULT TargetType([out] [retval] Windows.UI.Xaml.Interop.TypeName* value);
                [propput] HRESULT TargetType([in] Windows.UI.Xaml.Interop.TypeName value);
                [propget] HRESULT BasedOn([out] [retval] Windows.UI.Xaml.Style** value);
                [propput] HRESULT BasedOn([in] Windows.UI.Xaml.Style* value);
                HRESULT Seal();
            }

            [exclusiveto(Windows.UI.Xaml.Style)]
            [uuid(A36824E3-3D81-4CE5-AA51-8B410F602FCD)]
            [version(0x06020000)]
            interface IStyleFactory : IInspectable
            {
                HRESULT CreateInstance([in] Windows.UI.Xaml.Interop.TypeName targetType, [out] [retval] Windows.UI.Xaml.Style** instance);
            }

            [exclusiveto(Windows.UI.Xaml.TriggerAction)]
            [uuid(A2C0DF02-63D5-4B46-9B83-0868D3079621)]
            [version(0x06020000)]
            interface ITriggerAction : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.TriggerAction)]
            [uuid(68D2C0B9-3289-414F-8F6E-C6B97AEDDA03)]
            [version(0x06020000)]
            interface ITriggerActionFactory : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.TriggerBase)]
            [uuid(E7EA222F-DEE6-4393-A8B2-8923D641F395)]
            [version(0x06020000)]
            interface ITriggerBase : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.TriggerBase)]
            [uuid(6A3B9E57-FC5D-42D0-8CB9-CA50667AF746)]
            [version(0x06020000)]
            interface ITriggerBaseFactory : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.UIElement)]
            [uuid(676D0BE9-B65C-41C6-BA40-58CF87F201C1)]
            [version(0x06020000)]
            interface IUIElement : IInspectable
            {
                [propget] HRESULT DesiredSize([out] [retval] Windows.Foundation.Size* value);
                [propget] HRESULT AllowDrop([out] [retval] boolean* value);
                [propput] HRESULT AllowDrop([in] boolean value);
                [propget] HRESULT Opacity([out] [retval] DOUBLE* value);
                [propput] HRESULT Opacity([in] DOUBLE value);
                [propget] HRESULT Clip([out] [retval] Windows.UI.Xaml.Media.RectangleGeometry** value);
                [propput] HRESULT Clip([in] Windows.UI.Xaml.Media.RectangleGeometry* value);
                [propget] HRESULT RenderTransform([out] [retval] Windows.UI.Xaml.Media.Transform** value);
                [propput] HRESULT RenderTransform([in] Windows.UI.Xaml.Media.Transform* value);
                [propget] HRESULT Projection([out] [retval] Windows.UI.Xaml.Media.Projection** value);
                [propput] HRESULT Projection([in] Windows.UI.Xaml.Media.Projection* value);
                [propget] HRESULT RenderTransformOrigin([out] [retval] Windows.Foundation.Point* value);
                [propput] HRESULT RenderTransformOrigin([in] Windows.Foundation.Point value);
                [propget] HRESULT IsHitTestVisible([out] [retval] boolean* value);
                [propput] HRESULT IsHitTestVisible([in] boolean value);
                [propget] HRESULT Visibility([out] [retval] Windows.UI.Xaml.Visibility* value);
                [propput] HRESULT Visibility([in] Windows.UI.Xaml.Visibility value);
                [propget] HRESULT RenderSize([out] [retval] Windows.Foundation.Size* value);
                [propget] HRESULT UseLayoutRounding([out] [retval] boolean* value);
                [propput] HRESULT UseLayoutRounding([in] boolean value);
                [propget] HRESULT Transitions([out] [retval] Windows.UI.Xaml.Media.Animation.TransitionCollection** value);
                [propput] HRESULT Transitions([in] Windows.UI.Xaml.Media.Animation.TransitionCollection* value);
                [propget] HRESULT CacheMode([out] [retval] Windows.UI.Xaml.Media.CacheMode** value);
                [propput] HRESULT CacheMode([in] Windows.UI.Xaml.Media.CacheMode* value);
                [propget] HRESULT IsTapEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsTapEnabled([in] boolean value);
                [propget] HRESULT IsDoubleTapEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsDoubleTapEnabled([in] boolean value);
                [propget] HRESULT IsRightTapEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsRightTapEnabled([in] boolean value);
                [propget] HRESULT IsHoldingEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsHoldingEnabled([in] boolean value);
                [propget] HRESULT ManipulationMode([out] [retval] Windows.UI.Xaml.Input.ManipulationModes* value);
                [propput] HRESULT ManipulationMode([in] Windows.UI.Xaml.Input.ManipulationModes value);
                [propget] HRESULT PointerCaptures([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.Input.Pointer*>** value);
                [eventadd] HRESULT KeyUp([in] Windows.UI.Xaml.Input.KeyEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT KeyUp([in] EventRegistrationToken token);
                [eventadd] HRESULT KeyDown([in] Windows.UI.Xaml.Input.KeyEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT KeyDown([in] EventRegistrationToken token);
                [eventadd] HRESULT GotFocus([in] Windows.UI.Xaml.RoutedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT GotFocus([in] EventRegistrationToken token);
                [eventadd] HRESULT LostFocus([in] Windows.UI.Xaml.RoutedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT LostFocus([in] EventRegistrationToken token);
                [eventadd] HRESULT DragEnter([in] Windows.UI.Xaml.DragEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DragEnter([in] EventRegistrationToken token);
                [eventadd] HRESULT DragLeave([in] Windows.UI.Xaml.DragEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DragLeave([in] EventRegistrationToken token);
                [eventadd] HRESULT DragOver([in] Windows.UI.Xaml.DragEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DragOver([in] EventRegistrationToken token);
                [eventadd] HRESULT Drop([in] Windows.UI.Xaml.DragEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Drop([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerPressed([in] Windows.UI.Xaml.Input.PointerEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerPressed([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerMoved([in] Windows.UI.Xaml.Input.PointerEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerMoved([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerReleased([in] Windows.UI.Xaml.Input.PointerEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerReleased([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerEntered([in] Windows.UI.Xaml.Input.PointerEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerEntered([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerExited([in] Windows.UI.Xaml.Input.PointerEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerExited([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerCaptureLost([in] Windows.UI.Xaml.Input.PointerEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerCaptureLost([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerCanceled([in] Windows.UI.Xaml.Input.PointerEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerCanceled([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerWheelChanged([in] Windows.UI.Xaml.Input.PointerEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerWheelChanged([in] EventRegistrationToken token);
                [eventadd] HRESULT Tapped([in] Windows.UI.Xaml.Input.TappedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Tapped([in] EventRegistrationToken token);
                [eventadd] HRESULT DoubleTapped([in] Windows.UI.Xaml.Input.DoubleTappedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DoubleTapped([in] EventRegistrationToken token);
                [eventadd] HRESULT Holding([in] Windows.UI.Xaml.Input.HoldingEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Holding([in] EventRegistrationToken token);
                [eventadd] HRESULT RightTapped([in] Windows.UI.Xaml.Input.RightTappedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT RightTapped([in] EventRegistrationToken token);
                [eventadd] HRESULT ManipulationStarting([in] Windows.UI.Xaml.Input.ManipulationStartingEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ManipulationStarting([in] EventRegistrationToken token);
                [eventadd] HRESULT ManipulationInertiaStarting([in] Windows.UI.Xaml.Input.ManipulationInertiaStartingEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ManipulationInertiaStarting([in] EventRegistrationToken token);
                [eventadd] HRESULT ManipulationStarted([in] Windows.UI.Xaml.Input.ManipulationStartedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ManipulationStarted([in] EventRegistrationToken token);
                [eventadd] HRESULT ManipulationDelta([in] Windows.UI.Xaml.Input.ManipulationDeltaEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ManipulationDelta([in] EventRegistrationToken token);
                [eventadd] HRESULT ManipulationCompleted([in] Windows.UI.Xaml.Input.ManipulationCompletedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ManipulationCompleted([in] EventRegistrationToken token);
                HRESULT Measure([in] Windows.Foundation.Size availableSize);
                HRESULT Arrange([in] Windows.Foundation.Rect finalRect);
                HRESULT CapturePointer([in] Windows.UI.Xaml.Input.Pointer* value, [out] [retval] boolean* returnValue);
                HRESULT ReleasePointerCapture([in] Windows.UI.Xaml.Input.Pointer* value);
                HRESULT ReleasePointerCaptures();
                HRESULT AddHandler([in] Windows.UI.Xaml.RoutedEvent* routedEvent, [in] IInspectable* handler, [in] boolean handledEventsToo);
                HRESULT RemoveHandler([in] Windows.UI.Xaml.RoutedEvent* routedEvent, [in] IInspectable* handler);
                HRESULT TransformToVisual([in] Windows.UI.Xaml.UIElement* visual, [out] [retval] Windows.UI.Xaml.Media.GeneralTransform** returnValue);
                HRESULT InvalidateMeasure();
                HRESULT InvalidateArrange();
                HRESULT UpdateLayout();
            }

            [exclusiveto(Windows.UI.Xaml.UIElement)]
            [uuid(608D2F1D-7858-4AEB-89E4-B54E2C7ED3D3)]
            [version(0x06020000)]
            interface IUIElementOverrides : IInspectable
            {
                HRESULT OnCreateAutomationPeer([out] [retval] Windows.UI.Xaml.Automation.Peers.AutomationPeer** returnValue);
                HRESULT OnDisconnectVisualChildren();
                HRESULT FindSubElementsForTouchTargeting([in] Windows.Foundation.Point point, [in] Windows.Foundation.Rect boundingRect, [out] [retval] Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IIterable<Windows.Foundation.Point>*>** returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.UIElement)]
            [uuid(58D3573B-F52C-45BE-988B-A5869564873C)]
            [version(0x06020000)]
            interface IUIElementStatics : IInspectable
            {
                [propget] HRESULT KeyDownEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT KeyUpEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerEnteredEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerPressedEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerMovedEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerReleasedEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerExitedEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerCaptureLostEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerCanceledEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerWheelChangedEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT TappedEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT DoubleTappedEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT HoldingEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT RightTappedEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT ManipulationStartingEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT ManipulationInertiaStartingEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT ManipulationStartedEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT ManipulationDeltaEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT ManipulationCompletedEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT DragEnterEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT DragLeaveEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT DragOverEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT DropEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT AllowDropProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT OpacityProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT ClipProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT RenderTransformProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT ProjectionProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT RenderTransformOriginProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT IsHitTestVisibleProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT VisibilityProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT UseLayoutRoundingProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT TransitionsProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT CacheModeProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT IsTapEnabledProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT IsDoubleTapEnabledProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT IsRightTapEnabledProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT IsHoldingEnabledProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT ManipulationModeProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT PointerCapturesProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
            }

            [exclusiveto(Windows.UI.Xaml.UIElement)]
            [uuid(B9EE93FE-A338-419F-AC32-91DCAADF5D08)]
            [version(0x06020000)]
            interface IUIElementFactory : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.UIElement)]
            [uuid(676D0BF9-B66C-41D6-BA50-58CF87F201D1)]
            [version(0x06030000)]
            interface IUIElement2 : IInspectable
            {
                [propget] HRESULT CompositeMode([out] [retval] Windows.UI.Xaml.Media.ElementCompositeMode* value);
                [propput] HRESULT CompositeMode([in] Windows.UI.Xaml.Media.ElementCompositeMode value);
                HRESULT CancelDirectManipulations([out] [retval] boolean* returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.UIElement)]
            [uuid(58D3574B-F53C-45BE-989B-A5869564874C)]
            [version(0x06030000)]
            interface IUIElementStatics2 : IInspectable
            {
                [propget] HRESULT CompositeModeProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
            }

            [exclusiveto(Windows.UI.Xaml.UIElement)]
            [uuid(BC2B28F1-26F2-4AAB-B256-3B5350881E37)]
            [version(0x0A000000)]
            interface IUIElement3 : IInspectable
            {
                [propget] HRESULT Transform3D([out] [retval] Windows.UI.Xaml.Media.Media3D.Transform3D** value);
                [propput] HRESULT Transform3D([in] Windows.UI.Xaml.Media.Media3D.Transform3D* value);
                [propget] HRESULT CanDrag([out] [retval] boolean* value);
                [propput] HRESULT CanDrag([in] boolean value);
                [eventadd] HRESULT DragStarting([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.UIElement*, Windows.UI.Xaml.DragStartingEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DragStarting([in] EventRegistrationToken token);
                [eventadd] HRESULT DropCompleted([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.UIElement*, Windows.UI.Xaml.DropCompletedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DropCompleted([in] EventRegistrationToken token);
                HRESULT StartDragAsync([in] Windows.UI.Input.PointerPoint* pointerPoint, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.ApplicationModel.DataTransfer.DataPackageOperation>** returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.UIElement)]
            [uuid(D1F87ADE-ECA1-4561-A32B-64601B4E0597)]
            [version(0x0A000000)]
            interface IUIElementStatics3 : IInspectable
            {
                [propget] HRESULT Transform3DProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT CanDragProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                HRESULT TryStartDirectManipulation([in] Windows.UI.Xaml.Input.Pointer* value, [out] [retval] boolean* returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.VisualState)]
            [uuid(6320AFFC-C31A-4450-AFDE-F6EA7BD1F586)]
            [version(0x06020000)]
            interface IVisualState : IInspectable
            {
                [propget] HRESULT Name([out] [retval] HSTRING* value);
                [propget] HRESULT Storyboard([out] [retval] Windows.UI.Xaml.Media.Animation.Storyboard** value);
                [propput] HRESULT Storyboard([in] Windows.UI.Xaml.Media.Animation.Storyboard* value);
            }

            [exclusiveto(Windows.UI.Xaml.VisualState)]
            [uuid(0FA0F896-64C0-45FB-8D24-FB83298C0D93)]
            [version(0x0A000000)]
            interface IVisualState2 : IInspectable
            {
                [propget] HRESULT Setters([out] [retval] Windows.UI.Xaml.SetterBaseCollection** value);
                [propget] HRESULT StateTriggers([out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Xaml.StateTriggerBase*>** value);
            }

            [exclusiveto(Windows.UI.Xaml.VisualStateGroup)]
            [uuid(E4F9D9A4-E028-44DE-9B15-4929AE0A26C2)]
            [version(0x06020000)]
            interface IVisualStateGroup : IInspectable
            {
                [propget] HRESULT Name([out] [retval] HSTRING* value);
                [propget] HRESULT Transitions([out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Xaml.VisualTransition*>** value);
                [propget] HRESULT States([out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Xaml.VisualState*>** value);
                [propget] HRESULT CurrentState([out] [retval] Windows.UI.Xaml.VisualState** value);
                [eventadd] HRESULT CurrentStateChanged([in] Windows.UI.Xaml.VisualStateChangedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT CurrentStateChanged([in] EventRegistrationToken token);
                [eventadd] HRESULT CurrentStateChanging([in] Windows.UI.Xaml.VisualStateChangedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT CurrentStateChanging([in] EventRegistrationToken token);
            }

            [exclusiveto(Windows.UI.Xaml.VisualStateManager)]
            [uuid(6FDA9F9A-6FAB-4112-9258-1006A3C3476E)]
            [version(0x06020000)]
            interface IVisualStateManager : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.VisualStateManager)]
            [uuid(4A66910E-7979-43C8-8FF4-EC6122750006)]
            [version(0x06020000)]
            interface IVisualStateManagerOverrides : IInspectable
            {
                HRESULT GoToStateCore([in] Windows.UI.Xaml.Controls.Control* control, [in] Windows.UI.Xaml.FrameworkElement* templateRoot, [in] HSTRING stateName, [in] Windows.UI.Xaml.VisualStateGroup* group, [in] Windows.UI.Xaml.VisualState* state, [in] boolean useTransitions, [out] [retval] boolean* returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.VisualStateManager)]
            [uuid(4B3B8640-B0B7-404C-9EF4-D949640E245D)]
            [version(0x06020000)]
            interface IVisualStateManagerProtected : IInspectable
            {
                HRESULT RaiseCurrentStateChanging([in] Windows.UI.Xaml.VisualStateGroup* stateGroup, [in] Windows.UI.Xaml.VisualState* oldState, [in] Windows.UI.Xaml.VisualState* newState, [in] Windows.UI.Xaml.Controls.Control* control);
                HRESULT RaiseCurrentStateChanged([in] Windows.UI.Xaml.VisualStateGroup* stateGroup, [in] Windows.UI.Xaml.VisualState* oldState, [in] Windows.UI.Xaml.VisualState* newState, [in] Windows.UI.Xaml.Controls.Control* control);
            }

            [exclusiveto(Windows.UI.Xaml.VisualStateManager)]
            [uuid(01D0E9E0-D713-414E-A74E-E63EC7AC8C3D)]
            [version(0x06020000)]
            interface IVisualStateManagerStatics : IInspectable
            {
                HRESULT GetVisualStateGroups([in] Windows.UI.Xaml.FrameworkElement* obj, [out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Xaml.VisualStateGroup*>** value);
                [propget] HRESULT CustomVisualStateManagerProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                HRESULT GetCustomVisualStateManager([in] Windows.UI.Xaml.FrameworkElement* obj, [out] [retval] Windows.UI.Xaml.VisualStateManager** value);
                HRESULT SetCustomVisualStateManager([in] Windows.UI.Xaml.FrameworkElement* obj, [in] Windows.UI.Xaml.VisualStateManager* value);
                HRESULT GoToState([in] Windows.UI.Xaml.Controls.Control* control, [in] HSTRING stateName, [in] boolean useTransitions, [out] [retval] boolean* returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.VisualStateManager)]
            [uuid(85E598FD-A575-47B6-9E30-383CD08585F2)]
            [version(0x06020000)]
            interface IVisualStateManagerFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.VisualStateManager** instance);
            }

            [exclusiveto(Windows.UI.Xaml.VisualTransition)]
            [uuid(55C5905E-2BC7-400D-AAA4-1A2981491EE0)]
            [version(0x06020000)]
            interface IVisualTransition : IInspectable
            {
                [propget] HRESULT GeneratedDuration([out] [retval] Windows.UI.Xaml.Duration* value);
                [propput] HRESULT GeneratedDuration([in] Windows.UI.Xaml.Duration value);
                [propget] HRESULT GeneratedEasingFunction([out] [retval] Windows.UI.Xaml.Media.Animation.EasingFunctionBase** value);
                [propput] HRESULT GeneratedEasingFunction([in] Windows.UI.Xaml.Media.Animation.EasingFunctionBase* value);
                [propget] HRESULT To([out] [retval] HSTRING* value);
                [propput] HRESULT To([in] HSTRING value);
                [propget] HRESULT From([out] [retval] HSTRING* value);
                [propput] HRESULT From([in] HSTRING value);
                [propget] HRESULT Storyboard([out] [retval] Windows.UI.Xaml.Media.Animation.Storyboard** value);
                [propput] HRESULT Storyboard([in] Windows.UI.Xaml.Media.Animation.Storyboard* value);
            }

            [exclusiveto(Windows.UI.Xaml.VisualTransition)]
            [uuid(EA75864F-D1E0-4DAE-B429-89FC322724F4)]
            [version(0x06020000)]
            interface IVisualTransitionFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.VisualTransition** instance);
            }

            [exclusiveto(Windows.UI.Xaml.AdaptiveTrigger)]
            [uuid(A5F04119-0CD9-49F1-A23F-44E547AB9F1A)]
            [version(0x0A000000)]
            interface IAdaptiveTrigger : IInspectable
            {
                [propget] HRESULT MinWindowWidth([out] [retval] DOUBLE* value);
                [propput] HRESULT MinWindowWidth([in] DOUBLE value);
                [propget] HRESULT MinWindowHeight([out] [retval] DOUBLE* value);
                [propput] HRESULT MinWindowHeight([in] DOUBLE value);
            }

            [exclusiveto(Windows.UI.Xaml.AdaptiveTrigger)]
            [uuid(B92E29EA-1615-4350-9C3B-92B2986BF444)]
            [version(0x0A000000)]
            interface IAdaptiveTriggerStatics : IInspectable
            {
                [propget] HRESULT MinWindowWidthProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT MinWindowHeightProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
            }

            [exclusiveto(Windows.UI.Xaml.AdaptiveTrigger)]
            [uuid(C966D482-5AEB-4841-9247-C1A0BDD6F59F)]
            [version(0x0A000000)]
            interface IAdaptiveTriggerFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.AdaptiveTrigger** instance);
            }

            [exclusiveto(Windows.UI.Xaml.EventTrigger)]
            [uuid(DEF8F855-0B49-4087-B1A9-B8B38488F786)]
            [version(0x06020000)]
            interface IEventTrigger : IInspectable
            {
                [propget] HRESULT RoutedEvent([out] [retval] Windows.UI.Xaml.RoutedEvent** value);
                [propput] HRESULT RoutedEvent([in] Windows.UI.Xaml.RoutedEvent* value);
                [propget] HRESULT Actions([out] [retval] Windows.UI.Xaml.TriggerActionCollection** value);
            }

            [exclusiveto(Windows.UI.Xaml.FrameworkElement)]
            [uuid(A391D09B-4A99-4B7C-9D8D-6FA5D01F6FBF)]
            [version(0x06020000)]
            interface IFrameworkElement : IInspectable
            {
                [propget] HRESULT Triggers([out] [retval] Windows.UI.Xaml.TriggerCollection** value);
                [propget] HRESULT Resources([out] [retval] Windows.UI.Xaml.ResourceDictionary** value);
                [propput] HRESULT Resources([in] Windows.UI.Xaml.ResourceDictionary* value);
                [propget] HRESULT Tag([out] [retval] IInspectable** value);
                [propput] HRESULT Tag([in] IInspectable* value);
                [propget] HRESULT Language([out] [retval] HSTRING* value);
                [propput] HRESULT Language([in] HSTRING value);
                [propget] HRESULT ActualWidth([out] [retval] DOUBLE* value);
                [propget] HRESULT ActualHeight([out] [retval] DOUBLE* value);
                [propget] HRESULT Width([out] [retval] DOUBLE* value);
                [propput] HRESULT Width([in] DOUBLE value);
                [propget] HRESULT Height([out] [retval] DOUBLE* value);
                [propput] HRESULT Height([in] DOUBLE value);
                [propget] HRESULT MinWidth([out] [retval] DOUBLE* value);
                [propput] HRESULT MinWidth([in] DOUBLE value);
                [propget] HRESULT MaxWidth([out] [retval] DOUBLE* value);
                [propput] HRESULT MaxWidth([in] DOUBLE value);
                [propget] HRESULT MinHeight([out] [retval] DOUBLE* value);
                [propput] HRESULT MinHeight([in] DOUBLE value);
                [propget] HRESULT MaxHeight([out] [retval] DOUBLE* value);
                [propput] HRESULT MaxHeight([in] DOUBLE value);
                [propget] HRESULT HorizontalAlignment([out] [retval] Windows.UI.Xaml.HorizontalAlignment* value);
                [propput] HRESULT HorizontalAlignment([in] Windows.UI.Xaml.HorizontalAlignment value);
                [propget] HRESULT VerticalAlignment([out] [retval] Windows.UI.Xaml.VerticalAlignment* value);
                [propput] HRESULT VerticalAlignment([in] Windows.UI.Xaml.VerticalAlignment value);
                [propget] HRESULT Margin([out] [retval] Windows.UI.Xaml.Thickness* value);
                [propput] HRESULT Margin([in] Windows.UI.Xaml.Thickness value);
                [propget] HRESULT Name([out] [retval] HSTRING* value);
                [propput] HRESULT Name([in] HSTRING value);
                [propget] HRESULT BaseUri([out] [retval] Windows.Foundation.Uri** value);
                [propget] HRESULT DataContext([out] [retval] IInspectable** value);
                [propput] HRESULT DataContext([in] IInspectable* value);
                [propget] HRESULT Style([out] [retval] Windows.UI.Xaml.Style** value);
                [propput] HRESULT Style([in] Windows.UI.Xaml.Style* value);
                [propget] HRESULT Parent([out] [retval] Windows.UI.Xaml.DependencyObject** value);
                [propget] HRESULT FlowDirection([out] [retval] Windows.UI.Xaml.FlowDirection* value);
                [propput] HRESULT FlowDirection([in] Windows.UI.Xaml.FlowDirection value);
                [eventadd] HRESULT Loaded([in] Windows.UI.Xaml.RoutedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Loaded([in] EventRegistrationToken token);
                [eventadd] HRESULT Unloaded([in] Windows.UI.Xaml.RoutedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Unloaded([in] EventRegistrationToken token);
                [eventadd] HRESULT SizeChanged([in] Windows.UI.Xaml.SizeChangedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT SizeChanged([in] EventRegistrationToken token);
                [eventadd] HRESULT LayoutUpdated([in] Windows.Foundation.EventHandler<IInspectable*>* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT LayoutUpdated([in] EventRegistrationToken token);
                HRESULT FindName([in] HSTRING name, [out] [retval] IInspectable** returnValue);
                HRESULT SetBinding([in] Windows.UI.Xaml.DependencyProperty* dp, [in] Windows.UI.Xaml.Data.BindingBase* binding);
            }

            [exclusiveto(Windows.UI.Xaml.FrameworkElement)]
            [uuid(DA007E54-B3C2-4B9A-AA8E-D3F071262B97)]
            [version(0x06020000)]
            interface IFrameworkElementOverrides : IInspectable
            {
                HRESULT MeasureOverride([in] Windows.Foundation.Size availableSize, [out] [retval] Windows.Foundation.Size* returnValue);
                HRESULT ArrangeOverride([in] Windows.Foundation.Size finalSize, [out] [retval] Windows.Foundation.Size* returnValue);
                HRESULT OnApplyTemplate();
            }

            [exclusiveto(Windows.UI.Xaml.FrameworkElement)]
            [uuid(48383032-FBEB-4F8A-AED2-EE21FB27A57B)]
            [version(0x06020000)]
            interface IFrameworkElementStatics : IInspectable
            {
                [propget] HRESULT TagProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT LanguageProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT ActualWidthProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT ActualHeightProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT WidthProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT HeightProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT MinWidthProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT MaxWidthProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT MinHeightProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT MaxHeightProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT HorizontalAlignmentProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT VerticalAlignmentProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT MarginProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT NameProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT DataContextProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT StyleProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT FlowDirectionProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
            }

            [exclusiveto(Windows.UI.Xaml.FrameworkElement)]
            [uuid(DEAEE126-03CA-4966-B576-604CCE93B5E8)]
            [version(0x06020000)]
            interface IFrameworkElementFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.FrameworkElement** instance);
            }

            [exclusiveto(Windows.UI.Xaml.FrameworkElement)]
            [uuid(F19104BE-422A-4904-A52F-EE72010429E5)]
            [version(0x06030000)]
            interface IFrameworkElement2 : IInspectable
            {
                [propget] HRESULT RequestedTheme([out] [retval] Windows.UI.Xaml.ElementTheme* value);
                [propput] HRESULT RequestedTheme([in] Windows.UI.Xaml.ElementTheme value);
                [eventadd] HRESULT DataContextChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.FrameworkElement*, Windows.UI.Xaml.DataContextChangedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DataContextChanged([in] EventRegistrationToken token);
                HRESULT GetBindingExpression([in] Windows.UI.Xaml.DependencyProperty* dp, [out] [retval] Windows.UI.Xaml.Data.BindingExpression** returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.FrameworkElement)]
            [uuid(CB5CD2B9-E3B4-458C-B64E-1434FD1BD88A)]
            [version(0x06030000)]
            interface IFrameworkElementOverrides2 : IInspectable
            {
                HRESULT GoToElementStateCore([in] HSTRING stateName, [in] boolean useTransitions, [out] [retval] boolean* returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.FrameworkElement)]
            [uuid(9695DB02-C0D8-4FA2-B100-3FA2DF8B9538)]
            [version(0x06030000)]
            interface IFrameworkElementStatics2 : IInspectable
            {
                [propget] HRESULT RequestedThemeProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
            }

            [exclusiveto(Windows.UI.Xaml.FrameworkElement)]
            [uuid(C81C2720-5C52-4BBE-A199-2B1E34F00F70)]
            [version(0x0A000000)]
            interface IFrameworkElement3 : IInspectable
            {
                [eventadd] HRESULT Loading([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.FrameworkElement*, IInspectable*>* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Loading([in] EventRegistrationToken token);
            }

            [exclusiveto(Windows.UI.Xaml.MediaFailedRoutedEventArgs)]
            [uuid(46D1FA8D-5149-4153-BA3C-B03E64EE531E)]
            [version(0x06020000)]
            interface IMediaFailedRoutedEventArgs : IInspectable
            {
                [propget] HRESULT ErrorTrace([out] [retval] HSTRING* value);
            }

            [exclusiveto(Windows.UI.Xaml.Setter)]
            [uuid(A73DED29-B4AE-4A81-BE85-E690BA0D3B6E)]
            [version(0x06020000)]
            interface ISetter : IInspectable
            {
                [propget] HRESULT Property([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                [propput] HRESULT Property([in] Windows.UI.Xaml.DependencyProperty* value);
                [propget] HRESULT Value([out] [retval] IInspectable** value);
                [propput] HRESULT Value([in] IInspectable* value);
            }

            [exclusiveto(Windows.UI.Xaml.Setter)]
            [uuid(D3CA3D42-09B1-49D5-8891-E7B5648E02A2)]
            [version(0x06020000)]
            interface ISetterFactory : IInspectable
            {
                HRESULT CreateInstance([in] Windows.UI.Xaml.DependencyProperty* targetProperty, [in] IInspectable* value, [out] [retval] Windows.UI.Xaml.Setter** instance);
            }

            [exclusiveto(Windows.UI.Xaml.Setter)]
            [uuid(70169561-05B1-4FA3-9D53-8E0C8C747AFC)]
            [version(0x0A000000)]
            interface ISetter2 : IInspectable
            {
                [propget] HRESULT Target([out] [retval] Windows.UI.Xaml.TargetPropertyPath** value);
                [propput] HRESULT Target([in] Windows.UI.Xaml.TargetPropertyPath* value);
            }

            [exclusiveto(Windows.UI.Xaml.StateTrigger)]
            [uuid(67ADEF2E-D8D9-49F7-A1FD-2E35EEDD23CD)]
            [version(0x0A000000)]
            interface IStateTrigger : IInspectable
            {
                [propget] HRESULT IsActive([out] [retval] boolean* value);
                [propput] HRESULT IsActive([in] boolean value);
            }

            [exclusiveto(Windows.UI.Xaml.StateTrigger)]
            [uuid(71E95C90-B3FE-4DD3-A8A8-44A2CE25E0B8)]
            [version(0x0A000000)]
            interface IStateTriggerStatics : IInspectable
            {
                [propget] HRESULT IsActiveProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
            }

            [exclusiveto(Windows.UI.Xaml.GridLengthHelper)]
            [uuid(7A826CE1-07A0-4083-B6D1-B1D917B976AC)]
            [version(0x06020000)]
            interface IGridLengthHelper : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.GridLengthHelper)]
            [uuid(9D457B9B-019F-4266-8872-215F198F6A9D)]
            [version(0x06020000)]
            interface IGridLengthHelperStatics : IInspectable
            {
                [propget] HRESULT Auto([out] [retval] Windows.UI.Xaml.GridLength* value);
                HRESULT FromPixels([in] DOUBLE pixels, [out] [retval] Windows.UI.Xaml.GridLength* returnValue);
                HRESULT FromValueAndType([in] DOUBLE value, [in] Windows.UI.Xaml.GridUnitType type, [out] [retval] Windows.UI.Xaml.GridLength* returnValue);
                HRESULT GetIsAbsolute([in] Windows.UI.Xaml.GridLength target, [out] [retval] boolean* value);
                HRESULT GetIsAuto([in] Windows.UI.Xaml.GridLength target, [out] [retval] boolean* value);
                HRESULT GetIsStar([in] Windows.UI.Xaml.GridLength target, [out] [retval] boolean* value);
                HRESULT Equals([in] Windows.UI.Xaml.GridLength target, [in] Windows.UI.Xaml.GridLength value, [out] [retval] boolean* returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.BindingFailedEventArgs)]
            [uuid(32C1D013-4DBD-446D-BBB8-0DE35048A449)]
            [version(0x06020000)]
            interface IBindingFailedEventArgs : IInspectable
            {
                [propget] HRESULT Message([out] [retval] HSTRING* value);
            }

            [exclusiveto(Windows.UI.Xaml.DebugSettings)]
            [uuid(3D451F98-C6A7-4D17-8398-D83A067183D8)]
            [version(0x06020000)]
            interface IDebugSettings : IInspectable
            {
                [propget] HRESULT EnableFrameRateCounter([out] [retval] boolean* value);
                [propput] HRESULT EnableFrameRateCounter([in] boolean value);
                [propget] HRESULT IsBindingTracingEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsBindingTracingEnabled([in] boolean value);
                [propget] HRESULT IsOverdrawHeatMapEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsOverdrawHeatMapEnabled([in] boolean value);
                [eventadd] HRESULT BindingFailed([in] Windows.UI.Xaml.BindingFailedEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT BindingFailed([in] EventRegistrationToken token);
            }

            [exclusiveto(Windows.UI.Xaml.DebugSettings)]
            [uuid(48D37585-E1A6-469B-83C8-30825037119E)]
            [version(0x06030000)]
            interface IDebugSettings2 : IInspectable
            {
                [propget] HRESULT EnableRedrawRegions([out] [retval] boolean* value);
                [propput] HRESULT EnableRedrawRegions([in] boolean value);
            }

            [exclusiveto(Windows.UI.Xaml.DebugSettings)]
            [uuid(E6BB5022-0625-479F-8E32-4B583D73B7AC)]
            [version(0x0A000000)]
            interface IDebugSettings3 : IInspectable
            {
                [propget] HRESULT IsTextPerformanceVisualizationEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsTextPerformanceVisualizationEnabled([in] boolean value);
            }

            [exclusiveto(Windows.UI.Xaml.Application)]
            [uuid(74B861A1-7487-46A9-9A6E-C78B512726C5)]
            [version(0x06020000)]
            interface IApplication : IInspectable
            {
                [propget] HRESULT Resources([out] [retval] Windows.UI.Xaml.ResourceDictionary** value);
                [propput] HRESULT Resources([in] Windows.UI.Xaml.ResourceDictionary* value);
                [propget] HRESULT DebugSettings([out] [retval] Windows.UI.Xaml.DebugSettings** value);
                [propget] HRESULT RequestedTheme([out] [retval] Windows.UI.Xaml.ApplicationTheme* value);
                [propput] HRESULT RequestedTheme([in] Windows.UI.Xaml.ApplicationTheme value);
                [eventadd] HRESULT UnhandledException([in] Windows.UI.Xaml.UnhandledExceptionEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT UnhandledException([in] EventRegistrationToken token);
                [eventadd] HRESULT Suspending([in] Windows.UI.Xaml.SuspendingEventHandler* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Suspending([in] EventRegistrationToken token);
                [eventadd] HRESULT Resuming([in] Windows.Foundation.EventHandler<IInspectable*>* value, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Resuming([in] EventRegistrationToken token);
                HRESULT Exit();
            }

            [exclusiveto(Windows.UI.Xaml.Application)]
            [uuid(25F99FF7-9347-459A-9FAC-B2D0E11C1A0F)]
            [version(0x06020000)]
            interface IApplicationOverrides : IInspectable
            {
                HRESULT OnActivated([in] Windows.ApplicationModel.Activation.IActivatedEventArgs* args);
                HRESULT OnLaunched([in] Windows.ApplicationModel.Activation.LaunchActivatedEventArgs* args);
                HRESULT OnFileActivated([in] Windows.ApplicationModel.Activation.FileActivatedEventArgs* args);
                HRESULT OnSearchActivated([in] Windows.ApplicationModel.Activation.SearchActivatedEventArgs* args);
                HRESULT OnShareTargetActivated([in] Windows.ApplicationModel.Activation.ShareTargetActivatedEventArgs* args);
                HRESULT OnFileOpenPickerActivated([in] Windows.ApplicationModel.Activation.FileOpenPickerActivatedEventArgs* args);
                HRESULT OnFileSavePickerActivated([in] Windows.ApplicationModel.Activation.FileSavePickerActivatedEventArgs* args);
                HRESULT OnCachedFileUpdaterActivated([in] Windows.ApplicationModel.Activation.CachedFileUpdaterActivatedEventArgs* args);
                HRESULT OnWindowCreated([in] Windows.UI.Xaml.WindowCreatedEventArgs* args);
            }

            [exclusiveto(Windows.UI.Xaml.Application)]
            [uuid(06499997-F7B4-45FE-B763-7577D1D3CB4A)]
            [version(0x06020000)]
            interface IApplicationStatics : IInspectable
            {
                [propget] HRESULT Current([out] [retval] Windows.UI.Xaml.Application** value);
                HRESULT Start([in] Windows.UI.Xaml.ApplicationInitializationCallback* callback);
                [overload("LoadComponent")] HRESULT LoadComponent([in] IInspectable* component, [in] Windows.Foundation.Uri* resourceLocator);
                [overload("LoadComponent")] HRESULT LoadComponentWithResourceLocation([in] IInspectable* component, [in] Windows.Foundation.Uri* resourceLocator, [in] Windows.UI.Xaml.Controls.Primitives.ComponentResourceLocation componentResourceLocation);
            }

            [exclusiveto(Windows.UI.Xaml.Application)]
            [uuid(93BBE361-BE5A-4EE3-B4A3-95118DC97A89)]
            [version(0x06020000)]
            interface IApplicationFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Application** instance);
            }

            [exclusiveto(Windows.UI.Xaml.FrameworkViewSource)]
            [uuid(E3B077DA-35AD-4B09-B5B2-27420041BA9F)]
            [version(0x06020000)]
            interface IFrameworkViewSource : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.PointHelper)]
            [uuid(727BDD92-64B0-49CF-A321-A9793E73E2E7)]
            [version(0x06020000)]
            interface IPointHelper : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.PointHelper)]
            [uuid(015ACA75-76D8-4B7E-8A33-7D79204691EE)]
            [version(0x06020000)]
            interface IPointHelperStatics : IInspectable
            {
                HRESULT FromCoordinates([in] FLOAT x, [in] FLOAT y, [out] [retval] Windows.Foundation.Point* returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.RectHelper)]
            [uuid(A38781E2-4BFB-4EE2-AFE5-89F31B37478D)]
            [version(0x06020000)]
            interface IRectHelper : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.RectHelper)]
            [uuid(5EE163E4-C17E-494F-B580-2F0574FC3A15)]
            [version(0x06020000)]
            interface IRectHelperStatics : IInspectable
            {
                [propget] HRESULT Empty([out] [retval] Windows.Foundation.Rect* value);
                HRESULT FromCoordinatesAndDimensions([in] FLOAT x, [in] FLOAT y, [in] FLOAT width, [in] FLOAT height, [out] [retval] Windows.Foundation.Rect* returnValue);
                HRESULT FromPoints([in] Windows.Foundation.Point point1, [in] Windows.Foundation.Point point2, [out] [retval] Windows.Foundation.Rect* returnValue);
                HRESULT FromLocationAndSize([in] Windows.Foundation.Point location, [in] Windows.Foundation.Size size, [out] [retval] Windows.Foundation.Rect* returnValue);
                HRESULT GetIsEmpty([in] Windows.Foundation.Rect target, [out] [retval] boolean* value);
                HRESULT GetBottom([in] Windows.Foundation.Rect target, [out] [retval] FLOAT* value);
                HRESULT GetLeft([in] Windows.Foundation.Rect target, [out] [retval] FLOAT* value);
                HRESULT GetRight([in] Windows.Foundation.Rect target, [out] [retval] FLOAT* value);
                HRESULT GetTop([in] Windows.Foundation.Rect target, [out] [retval] FLOAT* value);
                HRESULT Contains([in] Windows.Foundation.Rect target, [in] Windows.Foundation.Point point, [out] [retval] boolean* returnValue);
                HRESULT Equals([in] Windows.Foundation.Rect target, [in] Windows.Foundation.Rect value, [out] [retval] boolean* returnValue);
                HRESULT Intersect([in] Windows.Foundation.Rect target, [in] Windows.Foundation.Rect rect, [out] [retval] Windows.Foundation.Rect* returnValue);
                [default_overload] [overload("Union")] HRESULT UnionWithPoint([in] Windows.Foundation.Rect target, [in] Windows.Foundation.Point point, [out] [retval] Windows.Foundation.Rect* returnValue);
                [overload("Union")] HRESULT UnionWithRect([in] Windows.Foundation.Rect target, [in] Windows.Foundation.Rect rect, [out] [retval] Windows.Foundation.Rect* returnValue);
            }

            [exclusiveto(Windows.UI.Xaml.SizeHelper)]
            [uuid(E7225A94-5D03-4A03-BA94-967FC68FCEFE)]
            [version(0x06020000)]
            interface ISizeHelper : IInspectable
            {
            }

            [exclusiveto(Windows.UI.Xaml.SizeHelper)]
            [uuid(6286C5B2-CF78-4915-AA40-76004A165F5E)]
            [version(0x06020000)]
            interface ISizeHelperStatics : IInspectable
            {
                [propget] HRESULT Empty([out] [retval] Windows.Foundation.Size* value);
                HRESULT FromDimensions([in] FLOAT width, [in] FLOAT height, [out] [retval] Windows.Foundation.Size* returnValue);
                HRESULT GetIsEmpty([in] Windows.Foundation.Size target, [out] [retval] boolean* value);
                HRESULT Equals([in] Windows.Foundation.Size target, [in] Windows.Foundation.Size value, [out] [retval] boolean* returnValue);
            }

            [composable(Windows.UI.Xaml.IDispatcherTimerFactory, public, 0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass DispatcherTimer
            {
                [default] interface Windows.UI.Xaml.IDispatcherTimer;
            }

            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.ICornerRadiusHelperStatics, 0x06020000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass CornerRadiusHelper
            {
                [default] interface Windows.UI.Xaml.ICornerRadiusHelper;
            }

            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.IDurationHelperStatics, 0x06020000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass DurationHelper
            {
                [default] interface Windows.UI.Xaml.IDurationHelper;
            }

            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.IThicknessHelperStatics, 0x06020000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass ThicknessHelper
            {
                [default] interface Windows.UI.Xaml.IThicknessHelper;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass ApplicationInitializationCallbackParams
            {
                [default] interface Windows.UI.Xaml.IApplicationInitializationCallbackParams;
            }

            [composable(Windows.UI.Xaml.IDependencyObjectFactory, protected, 0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass DependencyObject
            {
                [default] interface Windows.UI.Xaml.IDependencyObject;
                [version(0x0A000000)] interface Windows.UI.Xaml.IDependencyObject2;
            }

            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.IDependencyPropertyStatics, 0x06020000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass DependencyProperty
            {
                [default] interface Windows.UI.Xaml.IDependencyProperty;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass DependencyPropertyChangedEventArgs
            {
                [default] interface Windows.UI.Xaml.IDependencyPropertyChangedEventArgs;
            }

            [composable(Windows.UI.Xaml.IRoutedEventArgsFactory, public, 0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass RoutedEventArgs
            {
                [default] interface Windows.UI.Xaml.IRoutedEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass UnhandledExceptionEventArgs
            {
                [default] interface Windows.UI.Xaml.IUnhandledExceptionEventArgs;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass VisualStateChangedEventArgs
            {
                [default] interface Windows.UI.Xaml.IVisualStateChangedEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass DataContextChangedEventArgs
            {
                [default] interface Windows.UI.Xaml.IDataContextChangedEventArgs;
            }

            [composable(Windows.UI.Xaml.IDataTemplateKeyFactory, public, 0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass DataTemplateKey
            {
                [default] interface Windows.UI.Xaml.IDataTemplateKey;
            }

            [composable(Windows.UI.Xaml.IPropertyMetadataFactory, public, 0x06020000)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.IPropertyMetadataStatics, 0x06020000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass PropertyMetadata
            {
                [default] interface Windows.UI.Xaml.IPropertyMetadata;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass DragOperationDeferral
            {
                [default] interface Windows.UI.Xaml.IDragOperationDeferral;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass DragUI
            {
                [default] interface Windows.UI.Xaml.IDragUI;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass DragUIOverride
            {
                [default] interface Windows.UI.Xaml.IDragUIOverride;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass FrameworkView
            {
                [default] interface Windows.UI.Xaml.IFrameworkView;
                [version(0x06020000)] interface Windows.ApplicationModel.Core.IFrameworkView;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass RoutedEvent
            {
                [default] interface Windows.UI.Xaml.IRoutedEvent;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass SetterBaseCollection
            {
                [default] interface Windows.UI.Xaml.ISetterBaseCollection;
                interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.SetterBase*>;
                interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.SetterBase*>;
            }

            [activatable(Windows.UI.Xaml.ITargetPropertyPathFactory, 0x0A000000)]
            [activatable(0x0A000000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass TargetPropertyPath
            {
                [default] interface Windows.UI.Xaml.ITargetPropertyPath;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass TriggerActionCollection
            {
                [default] interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.TriggerAction*>;
                interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.TriggerAction*>;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass TriggerCollection
            {
                [default] interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.TriggerBase*>;
                interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.TriggerBase*>;
            }

            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.IWindowStatics, 0x06020000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass Window
            {
                [default] interface Windows.UI.Xaml.IWindow;
                [version(0x0A000000)] interface Windows.UI.Xaml.IWindow2;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass WindowCreatedEventArgs
            {
                [default] interface Windows.UI.Xaml.IWindowCreatedEventArgs;
            }

            [composable(Windows.UI.Xaml.IDependencyObjectCollectionFactory, public, 0x06030000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06030000)]
            runtimeclass DependencyObjectCollection : Windows.UI.Xaml.DependencyObject
            {
                [default] interface Windows.Foundation.Collections.IObservableVector<Windows.UI.Xaml.DependencyObject*>;
                interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.DependencyObject*>;
                interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.DependencyObject*>;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass DragEventArgs : Windows.UI.Xaml.RoutedEventArgs
            {
                [default] interface Windows.UI.Xaml.IDragEventArgs;
                [version(0x0A000000)] interface Windows.UI.Xaml.IDragEventArgs2;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass DragStartingEventArgs : Windows.UI.Xaml.RoutedEventArgs
            {
                [default] interface Windows.UI.Xaml.IDragStartingEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass DropCompletedEventArgs : Windows.UI.Xaml.RoutedEventArgs
            {
                [default] interface Windows.UI.Xaml.IDropCompletedEventArgs;
            }

            [composable(Windows.UI.Xaml.IExceptionRoutedEventArgsFactory, public, 0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass ExceptionRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
            {
                [default] interface Windows.UI.Xaml.IExceptionRoutedEventArgs;
            }

            [composable(Windows.UI.Xaml.IFrameworkTemplateFactory, protected, 0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass FrameworkTemplate : Windows.UI.Xaml.DependencyObject
            {
                [default] interface Windows.UI.Xaml.IFrameworkTemplate;
            }

            [composable(Windows.UI.Xaml.IDataTemplateFactory, public, 0x06020000)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.IDataTemplateStatics2, 0x0A000000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass DataTemplate : Windows.UI.Xaml.FrameworkTemplate
            {
                [default] interface Windows.UI.Xaml.IDataTemplate;
            }

            [activatable(Windows.UI.Xaml.IPropertyPathFactory, 0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass PropertyPath : Windows.UI.Xaml.DependencyObject
            {
                [default] interface Windows.UI.Xaml.IPropertyPath;
            }

            [composable(Windows.UI.Xaml.IResourceDictionaryFactory, public, 0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass ResourceDictionary : Windows.UI.Xaml.DependencyObject
            {
                [default] interface Windows.UI.Xaml.IResourceDictionary;
                [version(0x06020000)] interface Windows.Foundation.Collections.IMap<IInspectable*, IInspectable*>;
                [version(0x06020000)] interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<IInspectable*, IInspectable*>*>;
            }

            [composable(Windows.UI.Xaml.ISetterBaseFactory, protected, 0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass SetterBase : Windows.UI.Xaml.DependencyObject
            {
                [default] interface Windows.UI.Xaml.ISetterBase;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass SizeChangedEventArgs : Windows.UI.Xaml.RoutedEventArgs
            {
                [default] interface Windows.UI.Xaml.ISizeChangedEventArgs;
            }

            [composable(Windows.UI.Xaml.IStateTriggerBaseFactory, protected, 0x0A000000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass StateTriggerBase : Windows.UI.Xaml.DependencyObject
            {
                [default] interface Windows.UI.Xaml.IStateTriggerBase;
                [protected] [version(0x0A000000)] interface Windows.UI.Xaml.IStateTriggerBaseProtected;
            }

            [activatable(Windows.UI.Xaml.IStyleFactory, 0x06020000)]
            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass Style : Windows.UI.Xaml.DependencyObject
            {
                [default] interface Windows.UI.Xaml.IStyle;
            }

            [composable(Windows.UI.Xaml.ITriggerActionFactory, protected, 0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass TriggerAction : Windows.UI.Xaml.DependencyObject
            {
                [default] interface Windows.UI.Xaml.ITriggerAction;
            }

            [composable(Windows.UI.Xaml.ITriggerBaseFactory, protected, 0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass TriggerBase : Windows.UI.Xaml.DependencyObject
            {
                [default] interface Windows.UI.Xaml.ITriggerBase;
            }

            [composable(Windows.UI.Xaml.IUIElementFactory, protected, 0x06020000)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.IUIElementStatics3, 0x0A000000)]
            [static(Windows.UI.Xaml.IUIElementStatics2, 0x06030000)]
            [static(Windows.UI.Xaml.IUIElementStatics, 0x06020000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass UIElement : Windows.UI.Xaml.DependencyObject
            {
                [default] interface Windows.UI.Xaml.IUIElement;
                [overridable] [version(0x06020000)] interface Windows.UI.Xaml.IUIElementOverrides;
                [version(0x06030000)] interface Windows.UI.Xaml.IUIElement2;
                [version(0x0A000000)] interface Windows.UI.Xaml.IUIElement3;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass VisualState : Windows.UI.Xaml.DependencyObject
            {
                [default] interface Windows.UI.Xaml.IVisualState;
                [version(0x0A000000)] interface Windows.UI.Xaml.IVisualState2;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass VisualStateGroup : Windows.UI.Xaml.DependencyObject
            {
                [default] interface Windows.UI.Xaml.IVisualStateGroup;
            }

            [composable(Windows.UI.Xaml.IVisualStateManagerFactory, public, 0x06020000)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.IVisualStateManagerStatics, 0x06020000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass VisualStateManager : Windows.UI.Xaml.DependencyObject
            {
                [default] interface Windows.UI.Xaml.IVisualStateManager;
                [overridable] [version(0x06020000)] interface Windows.UI.Xaml.IVisualStateManagerOverrides;
                [protected] [version(0x06020000)] interface Windows.UI.Xaml.IVisualStateManagerProtected;
            }

            [composable(Windows.UI.Xaml.IVisualTransitionFactory, public, 0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass VisualTransition : Windows.UI.Xaml.DependencyObject
            {
                [default] interface Windows.UI.Xaml.IVisualTransition;
            }

            [composable(Windows.UI.Xaml.IAdaptiveTriggerFactory, public, 0x0A000000)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.IAdaptiveTriggerStatics, 0x0A000000)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass AdaptiveTrigger : Windows.UI.Xaml.StateTriggerBase
            {
                [default] interface Windows.UI.Xaml.IAdaptiveTrigger;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass EventTrigger : Windows.UI.Xaml.TriggerBase
            {
                [default] interface Windows.UI.Xaml.IEventTrigger;
            }

            [composable(Windows.UI.Xaml.IFrameworkElementFactory, protected, 0x06020000)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.IFrameworkElementStatics, 0x06020000)]
            [static(Windows.UI.Xaml.IFrameworkElementStatics2, 0x06030000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass FrameworkElement : Windows.UI.Xaml.UIElement
            {
                [default] interface Windows.UI.Xaml.IFrameworkElement;
                [overridable] [version(0x06020000)] interface Windows.UI.Xaml.IFrameworkElementOverrides;
                [version(0x06030000)] interface Windows.UI.Xaml.IFrameworkElement2;
                [overridable] [version(0x06030000)] interface Windows.UI.Xaml.IFrameworkElementOverrides2;
                [version(0x0A000000)] interface Windows.UI.Xaml.IFrameworkElement3;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass MediaFailedRoutedEventArgs : Windows.UI.Xaml.ExceptionRoutedEventArgs
            {
                [default] interface Windows.UI.Xaml.IMediaFailedRoutedEventArgs;
            }

            [activatable(Windows.UI.Xaml.ISetterFactory, 0x06020000)]
            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass Setter : Windows.UI.Xaml.SetterBase
            {
                [default] interface Windows.UI.Xaml.ISetter;
                [version(0x0A000000)] interface Windows.UI.Xaml.ISetter2;
            }

            [activatable(0x0A000000)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.IStateTriggerStatics, 0x0A000000)]
            [threading(both)]
            [version(0x0A000000)]
            runtimeclass StateTrigger : Windows.UI.Xaml.StateTriggerBase
            {
                [default] interface Windows.UI.Xaml.IStateTrigger;
            }

            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.IGridLengthHelperStatics, 0x06020000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass GridLengthHelper
            {
                [default] interface Windows.UI.Xaml.IGridLengthHelper;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass BindingFailedEventArgs
            {
                [default] interface Windows.UI.Xaml.IBindingFailedEventArgs;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass DebugSettings
            {
                [default] interface Windows.UI.Xaml.IDebugSettings;
                [version(0x06030000)] interface Windows.UI.Xaml.IDebugSettings2;
                [version(0x0A000000)] interface Windows.UI.Xaml.IDebugSettings3;
            }

            [composable(Windows.UI.Xaml.IApplicationFactory, public, 0x06020000)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.IApplicationStatics, 0x06020000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass Application
            {
                [default] interface Windows.UI.Xaml.IApplication;
                [overridable] [version(0x06020000)] interface Windows.UI.Xaml.IApplicationOverrides;
            }

            [activatable(0x06020000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass FrameworkViewSource
            {
                [default] interface Windows.UI.Xaml.IFrameworkViewSource;
                [version(0x06020000)] interface Windows.ApplicationModel.Core.IFrameworkViewSource;
            }

            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.IPointHelperStatics, 0x06020000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass PointHelper
            {
                [default] interface Windows.UI.Xaml.IPointHelper;
            }

            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.IRectHelperStatics, 0x06020000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass RectHelper
            {
                [default] interface Windows.UI.Xaml.IRectHelper;
            }

            [marshaling_behavior(agile)]
            [static(Windows.UI.Xaml.ISizeHelperStatics, 0x06020000)]
            [threading(both)]
            [version(0x06020000)]
            runtimeclass SizeHelper
            {
                [default] interface Windows.UI.Xaml.ISizeHelper;
            }
        }
    }
}
