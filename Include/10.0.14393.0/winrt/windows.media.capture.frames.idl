//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0015
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Devices.Enumeration.idl";
import "Windows.Graphics.DirectX.Direct3D11.idl";
import "Windows.Graphics.Imaging.idl";
import "Windows.Media.idl";
import "Windows.Media.Capture.idl";
import "Windows.Media.Devices.idl";
import "Windows.Media.Devices.Core.idl";
import "Windows.Media.MediaProperties.idl";
import "Windows.Perception.Spatial.idl";
import "Windows.Storage.Streams.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Edevices2Eenumeration_h__)")
cpp_quote("#include <Windows.Devices.Enumeration.h>")
cpp_quote("#endif // !defined(__windows2Edevices2Eenumeration_h__)")
cpp_quote("#if !defined(__windows2Egraphics2Edirectx2Edirect3d11_h__)")
cpp_quote("#include <Windows.Graphics.DirectX.Direct3D11.h>")
cpp_quote("#endif // !defined(__windows2Egraphics2Edirectx2Edirect3d11_h__)")
cpp_quote("#if !defined(__windows2Egraphics2Eimaging_h__)")
cpp_quote("#include <Windows.Graphics.Imaging.h>")
cpp_quote("#endif // !defined(__windows2Egraphics2Eimaging_h__)")
cpp_quote("#if !defined(__windows2Emedia_h__)")
cpp_quote("#include <Windows.Media.h>")
cpp_quote("#endif // !defined(__windows2Emedia_h__)")
cpp_quote("#if !defined(__windows2Emedia2Ecapture_h__)")
cpp_quote("#include <Windows.Media.Capture.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Ecapture_h__)")
cpp_quote("#if !defined(__windows2Emedia2Edevices_h__)")
cpp_quote("#include <Windows.Media.Devices.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Edevices_h__)")
cpp_quote("#if !defined(__windows2Emedia2Edevices2Ecore_h__)")
cpp_quote("#include <Windows.Media.Devices.Core.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Edevices2Ecore_h__)")
cpp_quote("#if !defined(__windows2Emedia2Emediaproperties_h__)")
cpp_quote("#include <Windows.Media.MediaProperties.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Emediaproperties_h__)")
cpp_quote("#if !defined(__windows2Eperception2Espatial_h__)")
cpp_quote("#include <Windows.Perception.Spatial.h>")
cpp_quote("#endif // !defined(__windows2Eperception2Espatial_h__)")
cpp_quote("#if !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#include <Windows.Storage.Streams.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Devices
    {
        namespace Enumeration
        {
            runtimeclass DeviceInformation;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IAsyncAction;

        interface IClosable;

        typedef struct TimeSpan TimeSpan;
    }
}
namespace Windows
{
    namespace Graphics
    {
        namespace DirectX
        {
            namespace Direct3D11
            {
                interface IDirect3DSurface;
            }
        }
    }
}
namespace Windows
{
    namespace Graphics
    {
        namespace Imaging
        {
            runtimeclass SoftwareBitmap;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Capture
        {
            typedef enum MediaStreamType MediaStreamType;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Devices
        {
            namespace Core
            {
                runtimeclass CameraIntrinsics;

                runtimeclass DepthCorrelatedCoordinateMapper;
            }
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Devices
        {
            runtimeclass VideoDeviceController;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace MediaProperties
        {
            runtimeclass MediaRatio;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        runtimeclass VideoFrame;
    }
}
namespace Windows
{
    namespace Perception
    {
        namespace Spatial
        {
            runtimeclass SpatialCoordinateSystem;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IBuffer;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Capture
        {
            namespace Frames
            {
                typedef enum MediaFrameReaderStartStatus MediaFrameReaderStartStatus;

                typedef enum MediaFrameSourceGetPropertyStatus MediaFrameSourceGetPropertyStatus;

                typedef enum MediaFrameSourceKind MediaFrameSourceKind;

                typedef enum MediaFrameSourceSetPropertyStatus MediaFrameSourceSetPropertyStatus;

                interface IBufferMediaFrame;

                interface IDepthMediaFrame;

                interface IDepthMediaFrameFormat;

                interface IInfraredMediaFrame;

                interface IMediaFrameArrivedEventArgs;

                interface IMediaFrameFormat;

                interface IMediaFrameReader;

                interface IMediaFrameReference;

                interface IMediaFrameSource;

                interface IMediaFrameSourceController;

                interface IMediaFrameSourceGetPropertyResult;

                interface IMediaFrameSourceGroup;

                interface IMediaFrameSourceGroupStatics;

                interface IMediaFrameSourceInfo;

                interface IVideoMediaFrame;

                interface IVideoMediaFrameFormat;

                runtimeclass BufferMediaFrame;

                runtimeclass DepthMediaFrame;

                runtimeclass DepthMediaFrameFormat;

                runtimeclass InfraredMediaFrame;

                runtimeclass MediaFrameArrivedEventArgs;

                runtimeclass MediaFrameFormat;

                runtimeclass MediaFrameReader;

                runtimeclass MediaFrameReference;

                runtimeclass MediaFrameSource;

                runtimeclass MediaFrameSourceController;

                runtimeclass MediaFrameSourceGetPropertyResult;

                runtimeclass MediaFrameSourceGroup;

                runtimeclass MediaFrameSourceInfo;

                runtimeclass VideoMediaFrame;

                runtimeclass VideoMediaFrameFormat;
            }
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace Media
    {
        namespace Capture
        {
            namespace Frames
            {
                declare
                {
                    interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<HSTRING, Windows.Media.Capture.Frames.MediaFrameSource*>*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.Media.Capture.Frames.MediaFrameFormat*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.Media.Capture.Frames.MediaFrameSourceGroup*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.Media.Capture.Frames.MediaFrameSourceInfo*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<HSTRING, Windows.Media.Capture.Frames.MediaFrameSource*>*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Media.Capture.Frames.MediaFrameFormat*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Media.Capture.Frames.MediaFrameSourceGroup*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Media.Capture.Frames.MediaFrameSourceInfo*>;

                    interface Windows.Foundation.Collections.IKeyValuePair<HSTRING, Windows.Media.Capture.Frames.MediaFrameSource*>;

                    interface Windows.Foundation.Collections.IMapView<HSTRING, Windows.Media.Capture.Frames.MediaFrameSource*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.Frames.MediaFrameFormat*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.Frames.MediaFrameSourceGroup*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.Frames.MediaFrameSourceInfo*>;

                    interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.Frames.MediaFrameSourceGroup*>*>;

                    interface Windows.Foundation.IAsyncOperation<Windows.Media.Capture.Frames.MediaFrameReader*>;

                    interface Windows.Foundation.IAsyncOperation<Windows.Media.Capture.Frames.MediaFrameReaderStartStatus>;

                    interface Windows.Foundation.IAsyncOperation<Windows.Media.Capture.Frames.MediaFrameSourceGetPropertyResult*>;

                    interface Windows.Foundation.IAsyncOperation<Windows.Media.Capture.Frames.MediaFrameSourceGroup*>;

                    interface Windows.Foundation.IAsyncOperation<Windows.Media.Capture.Frames.MediaFrameSourceSetPropertyStatus>;

                    interface Windows.Foundation.TypedEventHandler<Windows.Media.Capture.Frames.MediaFrameReader*, Windows.Media.Capture.Frames.MediaFrameArrivedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.Media.Capture.Frames.MediaFrameSource*, IInspectable*>;
                }
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace Media
    {
        namespace Capture
        {
            namespace Frames
            {
                [version(0x0A000002)]
                enum MediaFrameReaderStartStatus
                {
                    Success                  = 0,
                    UnknownFailure           = 1,
                    DeviceNotAvailable       = 2,
                    OutputFormatNotSupported = 3
                };

                [version(0x0A000002)]
                enum MediaFrameSourceGetPropertyStatus
                {
                    Success            = 0,
                    UnknownFailure     = 1,
                    NotSupported       = 2,
                    DeviceNotAvailable = 3
                };

                [version(0x0A000002)]
                enum MediaFrameSourceKind
                {
                    Custom   = 0,
                    Color    = 1,
                    Infrared = 2,
                    Depth    = 3
                };

                [version(0x0A000002)]
                enum MediaFrameSourceSetPropertyStatus
                {
                    Success            = 0,
                    UnknownFailure     = 1,
                    NotSupported       = 2,
                    InvalidValue       = 3,
                    DeviceNotAvailable = 4,
                    NotInControl       = 5
                };

                [exclusiveto(Windows.Media.Capture.Frames.BufferMediaFrame)]
                [uuid(B5B153C7-9B84-4062-B79C-A365B2596854)]
                [version(0x0A000002)]
                interface IBufferMediaFrame : IInspectable
                {
                    [propget] HRESULT FrameReference([out] [retval] Windows.Media.Capture.Frames.MediaFrameReference** value);
                    [propget] HRESULT Buffer([out] [retval] Windows.Storage.Streams.IBuffer** value);
                }

                [exclusiveto(Windows.Media.Capture.Frames.DepthMediaFrame)]
                [uuid(47135E4F-8549-45C0-925B-80D35EFDB10A)]
                [version(0x0A000002)]
                interface IDepthMediaFrame : IInspectable
                {
                    [propget] HRESULT FrameReference([out] [retval] Windows.Media.Capture.Frames.MediaFrameReference** value);
                    [propget] HRESULT VideoMediaFrame([out] [retval] Windows.Media.Capture.Frames.VideoMediaFrame** value);
                    [propget] HRESULT DepthFormat([out] [retval] Windows.Media.Capture.Frames.DepthMediaFrameFormat** value);
                    HRESULT TryCreateCoordinateMapper([in] Windows.Media.Devices.Core.CameraIntrinsics* cameraIntrinsics, [in] Windows.Perception.Spatial.SpatialCoordinateSystem* coordinateSystem, [out] [retval] Windows.Media.Devices.Core.DepthCorrelatedCoordinateMapper** value);
                }

                [exclusiveto(Windows.Media.Capture.Frames.DepthMediaFrameFormat)]
                [uuid(C312CF40-D729-453E-8780-2E04F140D28E)]
                [version(0x0A000002)]
                interface IDepthMediaFrameFormat : IInspectable
                {
                    [propget] HRESULT VideoFormat([out] [retval] Windows.Media.Capture.Frames.VideoMediaFrameFormat** value);
                    [propget] HRESULT DepthScaleInMeters([out] [retval] DOUBLE* value);
                }

                [exclusiveto(Windows.Media.Capture.Frames.InfraredMediaFrame)]
                [uuid(3FD13503-004B-4F0E-91AC-465299B41658)]
                [version(0x0A000002)]
                interface IInfraredMediaFrame : IInspectable
                {
                    [propget] HRESULT FrameReference([out] [retval] Windows.Media.Capture.Frames.MediaFrameReference** value);
                    [propget] HRESULT VideoMediaFrame([out] [retval] Windows.Media.Capture.Frames.VideoMediaFrame** value);
                    [propget] HRESULT IsIlluminated([out] [retval] boolean* value);
                }

                [exclusiveto(Windows.Media.Capture.Frames.MediaFrameArrivedEventArgs)]
                [uuid(0B430ADD-A490-4435-ADA1-9AFFD55239F7)]
                [version(0x0A000002)]
                interface IMediaFrameArrivedEventArgs : IInspectable
                {
                }

                [exclusiveto(Windows.Media.Capture.Frames.MediaFrameFormat)]
                [uuid(71902B4E-B279-4A97-A9DB-BD5A2FB78F39)]
                [version(0x0A000002)]
                interface IMediaFrameFormat : IInspectable
                {
                    [propget] HRESULT MajorType([out] [retval] HSTRING* value);
                    [propget] HRESULT Subtype([out] [retval] HSTRING* value);
                    [propget] HRESULT FrameRate([out] [retval] Windows.Media.MediaProperties.MediaRatio** value);
                    [propget] HRESULT Properties([out] [retval] Windows.Foundation.Collections.IMapView<GUID, IInspectable*>** value);
                    [propget] HRESULT VideoFormat([out] [retval] Windows.Media.Capture.Frames.VideoMediaFrameFormat** value);
                }

                [exclusiveto(Windows.Media.Capture.Frames.MediaFrameReader)]
                [uuid(E4C94395-2028-48ED-90B0-D1C1B162E24C)]
                [version(0x0A000002)]
                interface IMediaFrameReader : IInspectable
                    requires
                        Windows.Foundation.IClosable
                {
                    [eventadd] HRESULT FrameArrived([in] Windows.Foundation.TypedEventHandler<Windows.Media.Capture.Frames.MediaFrameReader*, Windows.Media.Capture.Frames.MediaFrameArrivedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT FrameArrived([in] EventRegistrationToken token);
                    HRESULT TryAcquireLatestFrame([out] [retval] Windows.Media.Capture.Frames.MediaFrameReference** value);
                    HRESULT StartAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Capture.Frames.MediaFrameReaderStartStatus>** operation);
                    HRESULT StopAsync([out] [retval] Windows.Foundation.IAsyncAction** action);
                }

                [exclusiveto(Windows.Media.Capture.Frames.MediaFrameReference)]
                [uuid(F6B88641-F0DC-4044-8DC9-961CEDD05BAD)]
                [version(0x0A000002)]
                interface IMediaFrameReference : IInspectable
                    requires
                        Windows.Foundation.IClosable
                {
                    [propget] HRESULT SourceKind([out] [retval] Windows.Media.Capture.Frames.MediaFrameSourceKind* value);
                    [propget] HRESULT Format([out] [retval] Windows.Media.Capture.Frames.MediaFrameFormat** value);
                    [propget] HRESULT SystemRelativeTime([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                    [propget] HRESULT Duration([out] [retval] Windows.Foundation.TimeSpan* value);
                    [propget] HRESULT Properties([out] [retval] Windows.Foundation.Collections.IMapView<GUID, IInspectable*>** value);
                    [propget] HRESULT BufferMediaFrame([out] [retval] Windows.Media.Capture.Frames.BufferMediaFrame** value);
                    [propget] HRESULT VideoMediaFrame([out] [retval] Windows.Media.Capture.Frames.VideoMediaFrame** value);
                    [propget] HRESULT CoordinateSystem([out] [retval] Windows.Perception.Spatial.SpatialCoordinateSystem** value);
                }

                [exclusiveto(Windows.Media.Capture.Frames.MediaFrameSource)]
                [uuid(D6782953-90DB-46A8-8ADD-2AA884A8D253)]
                [version(0x0A000002)]
                interface IMediaFrameSource : IInspectable
                {
                    [propget] HRESULT Info([out] [retval] Windows.Media.Capture.Frames.MediaFrameSourceInfo** value);
                    [propget] HRESULT Controller([out] [retval] Windows.Media.Capture.Frames.MediaFrameSourceController** value);
                    [propget] HRESULT SupportedFormats([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.Frames.MediaFrameFormat*>** value);
                    [propget] HRESULT CurrentFormat([out] [retval] Windows.Media.Capture.Frames.MediaFrameFormat** value);
                    HRESULT SetFormatAsync([in] Windows.Media.Capture.Frames.MediaFrameFormat* format, [out] [retval] Windows.Foundation.IAsyncAction** value);
                    [eventadd] HRESULT FormatChanged([in] Windows.Foundation.TypedEventHandler<Windows.Media.Capture.Frames.MediaFrameSource*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT FormatChanged([in] EventRegistrationToken token);
                    HRESULT TryGetCameraIntrinsics([in] Windows.Media.Capture.Frames.MediaFrameFormat* format, [out] [retval] Windows.Media.Devices.Core.CameraIntrinsics** value);
                }

                [exclusiveto(Windows.Media.Capture.Frames.MediaFrameSourceController)]
                [uuid(6D076635-316D-4B8F-B7B6-EEB04A8C6525)]
                [version(0x0A000002)]
                interface IMediaFrameSourceController : IInspectable
                {
                    HRESULT GetPropertyAsync([in] HSTRING propertyId, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Capture.Frames.MediaFrameSourceGetPropertyResult*>** value);
                    HRESULT SetPropertyAsync([in] HSTRING propertyId, [in] IInspectable* propertyValue, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Capture.Frames.MediaFrameSourceSetPropertyStatus>** value);
                    [propget] HRESULT VideoDeviceController([out] [retval] Windows.Media.Devices.VideoDeviceController** value);
                }

                [exclusiveto(Windows.Media.Capture.Frames.MediaFrameSourceGetPropertyResult)]
                [uuid(088616C2-3A64-4BD5-BD2B-E7C898D2F37A)]
                [version(0x0A000002)]
                interface IMediaFrameSourceGetPropertyResult : IInspectable
                {
                    [propget] HRESULT Status([out] [retval] Windows.Media.Capture.Frames.MediaFrameSourceGetPropertyStatus* value);
                    [propget] HRESULT Value([out] [retval] IInspectable** value);
                }

                [exclusiveto(Windows.Media.Capture.Frames.MediaFrameSourceGroup)]
                [uuid(7F605B87-4832-4B5F-AE3D-412FAAB37D34)]
                [version(0x0A000002)]
                interface IMediaFrameSourceGroup : IInspectable
                {
                    [propget] HRESULT Id([out] [retval] HSTRING* value);
                    [propget] HRESULT DisplayName([out] [retval] HSTRING* value);
                    [propget] HRESULT SourceInfos([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.Frames.MediaFrameSourceInfo*>** value);
                }

                [exclusiveto(Windows.Media.Capture.Frames.MediaFrameSourceGroup)]
                [uuid(1C48BFC5-436F-4508-94CF-D5D8B7326445)]
                [version(0x0A000002)]
                interface IMediaFrameSourceGroupStatics : IInspectable
                {
                    HRESULT FindAllAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Media.Capture.Frames.MediaFrameSourceGroup*>*>** value);
                    HRESULT FromIdAsync([in] HSTRING id, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.Capture.Frames.MediaFrameSourceGroup*>** value);
                    HRESULT GetDeviceSelector([out] [retval] HSTRING* value);
                }

                [exclusiveto(Windows.Media.Capture.Frames.MediaFrameSourceInfo)]
                [uuid(87BDC9CD-4601-408F-91CF-038318CD0AF3)]
                [version(0x0A000002)]
                interface IMediaFrameSourceInfo : IInspectable
                {
                    [propget] HRESULT Id([out] [retval] HSTRING* value);
                    [propget] HRESULT MediaStreamType([out] [retval] Windows.Media.Capture.MediaStreamType* value);
                    [propget] HRESULT SourceKind([out] [retval] Windows.Media.Capture.Frames.MediaFrameSourceKind* value);
                    [propget] HRESULT SourceGroup([out] [retval] Windows.Media.Capture.Frames.MediaFrameSourceGroup** value);
                    [propget] HRESULT DeviceInformation([out] [retval] Windows.Devices.Enumeration.DeviceInformation** value);
                    [propget] HRESULT Properties([out] [retval] Windows.Foundation.Collections.IMapView<GUID, IInspectable*>** value);
                    [propget] HRESULT CoordinateSystem([out] [retval] Windows.Perception.Spatial.SpatialCoordinateSystem** value);
                }

                [exclusiveto(Windows.Media.Capture.Frames.VideoMediaFrame)]
                [uuid(00DD4CCB-32BD-4FE1-A013-7CC13CF5DBCF)]
                [version(0x0A000002)]
                interface IVideoMediaFrame : IInspectable
                {
                    [propget] HRESULT FrameReference([out] [retval] Windows.Media.Capture.Frames.MediaFrameReference** value);
                    [propget] HRESULT VideoFormat([out] [retval] Windows.Media.Capture.Frames.VideoMediaFrameFormat** value);
                    [propget] HRESULT SoftwareBitmap([out] [retval] Windows.Graphics.Imaging.SoftwareBitmap** value);
                    [propget] HRESULT Direct3DSurface([out] [retval] Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface** value);
                    [propget] HRESULT CameraIntrinsics([out] [retval] Windows.Media.Devices.Core.CameraIntrinsics** value);
                    [propget] HRESULT InfraredMediaFrame([out] [retval] Windows.Media.Capture.Frames.InfraredMediaFrame** value);
                    [propget] HRESULT DepthMediaFrame([out] [retval] Windows.Media.Capture.Frames.DepthMediaFrame** value);
                    HRESULT GetVideoFrame([out] [retval] Windows.Media.VideoFrame** value);
                }

                [exclusiveto(Windows.Media.Capture.Frames.VideoMediaFrameFormat)]
                [uuid(46027FC0-D71B-45C7-8F14-6D9A0AE604E4)]
                [version(0x0A000002)]
                interface IVideoMediaFrameFormat : IInspectable
                {
                    [propget] HRESULT MediaFrameFormat([out] [retval] Windows.Media.Capture.Frames.MediaFrameFormat** value);
                    [propget] HRESULT DepthFormat([out] [retval] Windows.Media.Capture.Frames.DepthMediaFrameFormat** value);
                    [propget] HRESULT Width([out] [retval] UINT32* value);
                    [propget] HRESULT Height([out] [retval] UINT32* value);
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass BufferMediaFrame
                {
                    [default] interface Windows.Media.Capture.Frames.IBufferMediaFrame;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass DepthMediaFrame
                {
                    [default] interface Windows.Media.Capture.Frames.IDepthMediaFrame;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass DepthMediaFrameFormat
                {
                    [default] interface Windows.Media.Capture.Frames.IDepthMediaFrameFormat;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass InfraredMediaFrame
                {
                    [default] interface Windows.Media.Capture.Frames.IInfraredMediaFrame;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass MediaFrameArrivedEventArgs
                {
                    [default] interface Windows.Media.Capture.Frames.IMediaFrameArrivedEventArgs;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass MediaFrameFormat
                {
                    [default] interface Windows.Media.Capture.Frames.IMediaFrameFormat;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass MediaFrameReader
                {
                    [default] interface Windows.Media.Capture.Frames.IMediaFrameReader;
                    interface Windows.Foundation.IClosable;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass MediaFrameReference
                {
                    [default] interface Windows.Media.Capture.Frames.IMediaFrameReference;
                    interface Windows.Foundation.IClosable;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass MediaFrameSource
                {
                    [default] interface Windows.Media.Capture.Frames.IMediaFrameSource;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass MediaFrameSourceController
                {
                    [default] interface Windows.Media.Capture.Frames.IMediaFrameSourceController;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass MediaFrameSourceGetPropertyResult
                {
                    [default] interface Windows.Media.Capture.Frames.IMediaFrameSourceGetPropertyResult;
                }

                [marshaling_behavior(agile)]
                [static(Windows.Media.Capture.Frames.IMediaFrameSourceGroupStatics, 0x0A000002)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass MediaFrameSourceGroup
                {
                    [default] interface Windows.Media.Capture.Frames.IMediaFrameSourceGroup;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass MediaFrameSourceInfo
                {
                    [default] interface Windows.Media.Capture.Frames.IMediaFrameSourceInfo;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass VideoMediaFrame
                {
                    [default] interface Windows.Media.Capture.Frames.IVideoMediaFrame;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass VideoMediaFrameFormat
                {
                    [default] interface Windows.Media.Capture.Frames.IVideoMediaFrameFormat;
                }
            }
        }
    }
}
