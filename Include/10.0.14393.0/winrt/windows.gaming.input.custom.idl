//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0015
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Gaming.Input.idl";
import "Windows.Storage.Streams.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Egaming2Einput_h__)")
cpp_quote("#include <Windows.Gaming.Input.h>")
cpp_quote("#endif // !defined(__windows2Egaming2Einput_h__)")
cpp_quote("#if !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#include <Windows.Storage.Streams.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Gaming
    {
        namespace Input
        {
            interface IGameController;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IInputStream;
        }
    }
}
namespace Windows
{
    namespace Gaming
    {
        namespace Input
        {
            namespace Custom
            {
                typedef enum GipFirmwareUpdateStatus GipFirmwareUpdateStatus;

                typedef enum GipMessageClass GipMessageClass;

                typedef enum XusbDeviceSubtype XusbDeviceSubtype;

                typedef enum XusbDeviceType XusbDeviceType;

                typedef struct GameControllerVersionInfo GameControllerVersionInfo;

                typedef struct GipFirmwareUpdateProgress GipFirmwareUpdateProgress;

                interface ICustomGameControllerFactory;

                interface IGameControllerFactoryManagerStatics;

                interface IGameControllerInputSink;

                interface IGameControllerProvider;

                interface IGipFirmwareUpdateResult;

                interface IGipGameControllerInputSink;

                interface IGipGameControllerProvider;

                interface IXusbGameControllerInputSink;

                interface IXusbGameControllerProvider;

                runtimeclass GameControllerFactoryManager;

                runtimeclass GipFirmwareUpdateResult;

                runtimeclass GipGameControllerProvider;

                runtimeclass XusbGameControllerProvider;
            }
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace Gaming
    {
        namespace Input
        {
            namespace Custom
            {
                declare
                {
                    interface Windows.Foundation.IAsyncOperationWithProgress<Windows.Gaming.Input.Custom.GipFirmwareUpdateResult*, Windows.Gaming.Input.Custom.GipFirmwareUpdateProgress>;
                }
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace Gaming
    {
        namespace Input
        {
            namespace Custom
            {
                [version(0x0A000002)]
                enum GipFirmwareUpdateStatus
                {
                    Completed = 0,
                    UpToDate  = 1,
                    Failed    = 2
                };

                [version(0x0A000002)]
                enum GipMessageClass
                {
                    Command         = 0,
                    LowLatency      = 1,
                    StandardLatency = 2
                };

                [version(0x0A000002)]
                enum XusbDeviceSubtype
                {
                    Unknown         = 0,
                    Gamepad         = 1,
                    ArcadePad       = 2,
                    ArcadeStick     = 3,
                    FlightStick     = 4,
                    Wheel           = 5,
                    Guitar          = 6,
                    GuitarAlternate = 7,
                    GuitarBass      = 8,
                    DrumKit         = 9,
                    DancePad        = 10
                };

                [version(0x0A000002)]
                enum XusbDeviceType
                {
                    Unknown = 0,
                    Gamepad = 1
                };

                [version(0x0A000002)]
                struct GameControllerVersionInfo
                {
                    UINT16 Major;
                    UINT16 Minor;
                    UINT16 Build;
                    UINT16 Revision;
                };

                [version(0x0A000002)]
                struct GipFirmwareUpdateProgress
                {
                    DOUBLE PercentCompleted;
                    UINT32 CurrentComponentId;
                };

                [uuid(69A0AE5E-758E-4CBE-ACE6-62155FE9126F)]
                [version(0x0A000002)]
                interface ICustomGameControllerFactory : IInspectable
                {
                    HRESULT CreateGameController([in] Windows.Gaming.Input.Custom.IGameControllerProvider* provider, [out] [retval] IInspectable** value);
                    HRESULT OnGameControllerAdded([in] Windows.Gaming.Input.IGameController* value);
                    HRESULT OnGameControllerRemoved([in] Windows.Gaming.Input.IGameController* value);
                }

                [exclusiveto(Windows.Gaming.Input.Custom.GameControllerFactoryManager)]
                [uuid(36CB66E3-D0A1-4986-A24C-40B137DEBA9E)]
                [version(0x0A000002)]
                interface IGameControllerFactoryManagerStatics : IInspectable
                {
                    HRESULT RegisterCustomFactoryForGipInterface([in] Windows.Gaming.Input.Custom.ICustomGameControllerFactory* factory, [in] GUID interfaceId);
                    HRESULT RegisterCustomFactoryForHardwareId([in] Windows.Gaming.Input.Custom.ICustomGameControllerFactory* factory, [in] UINT16 hardwareVendorId, [in] UINT16 hardwareProductId);
                    HRESULT RegisterCustomFactoryForXusbType([in] Windows.Gaming.Input.Custom.ICustomGameControllerFactory* factory, [in] Windows.Gaming.Input.Custom.XusbDeviceType xusbType, [in] Windows.Gaming.Input.Custom.XusbDeviceSubtype xusbSubtype);
                }

                [uuid(1FF6F922-C640-4C78-A820-9A715C558BCB)]
                [version(0x0A000002)]
                interface IGameControllerInputSink : IInspectable
                {
                    HRESULT OnInputResumed([in] UINT64 timestamp);
                    HRESULT OnInputSuspended([in] UINT64 timestamp);
                }

                [uuid(E6D73982-2996-4559-B16C-3E57D46E58D6)]
                [version(0x0A000002)]
                interface IGameControllerProvider : IInspectable
                {
                    [propget] HRESULT FirmwareVersionInfo([out] [retval] Windows.Gaming.Input.Custom.GameControllerVersionInfo* value);
                    [propget] HRESULT HardwareProductId([out] [retval] UINT16* value);
                    [propget] HRESULT HardwareVendorId([out] [retval] UINT16* value);
                    [propget] HRESULT HardwareVersionInfo([out] [retval] Windows.Gaming.Input.Custom.GameControllerVersionInfo* value);
                    [propget] HRESULT IsConnected([out] [retval] boolean* value);
                }

                [exclusiveto(Windows.Gaming.Input.Custom.GipFirmwareUpdateResult)]
                [uuid(6B794D32-8553-4292-8E03-E16651A2F8BC)]
                [version(0x0A000002)]
                interface IGipFirmwareUpdateResult : IInspectable
                {
                    [propget] HRESULT ExtendedErrorCode([out] [retval] UINT32* value);
                    [propget] HRESULT FinalComponentId([out] [retval] UINT32* value);
                    [propget] HRESULT Status([out] [retval] Windows.Gaming.Input.Custom.GipFirmwareUpdateStatus* value);
                }

                [uuid(A2108ABF-09F1-43BC-A140-80F899EC36FB)]
                [version(0x0A000002)]
                interface IGipGameControllerInputSink : IInspectable
                    requires
                        Windows.Gaming.Input.Custom.IGameControllerInputSink
                {
                    HRESULT OnKeyReceived([in] UINT64 timestamp, [in] BYTE keyCode, [in] boolean isPressed);
                    HRESULT OnMessageReceived([in] UINT64 timestamp, [in] Windows.Gaming.Input.Custom.GipMessageClass messageClass, [in] BYTE messageId, [in] BYTE sequenceId, [in] UINT32 __messageBufferSize, [in] [size_is(__messageBufferSize)] BYTE* messageBuffer);
                }

                [exclusiveto(Windows.Gaming.Input.Custom.GipGameControllerProvider)]
                [uuid(DBCF1E19-1AF5-45A8-BF02-A0EE50C823FC)]
                [version(0x0A000002)]
                interface IGipGameControllerProvider : IInspectable
                    requires
                        Windows.Gaming.Input.Custom.IGameControllerProvider
                {
                    HRESULT SendMessage([in] Windows.Gaming.Input.Custom.GipMessageClass messageClass, [in] BYTE messageId, [in] UINT32 __messageBufferSize, [in] [size_is(__messageBufferSize)] BYTE* messageBuffer);
                    HRESULT SendReceiveMessage([in] Windows.Gaming.Input.Custom.GipMessageClass messageClass, [in] BYTE messageId, [in] UINT32 __requestMessageBufferSize, [in] [size_is(__requestMessageBufferSize)] BYTE* requestMessageBuffer, [in] UINT32 __responseMessageBufferSize, [out] [size_is(__responseMessageBufferSize)] BYTE* responseMessageBuffer);
                    HRESULT UpdateFirmwareAsync([in] Windows.Storage.Streams.IInputStream* firmwareImage, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<Windows.Gaming.Input.Custom.GipFirmwareUpdateResult*, Windows.Gaming.Input.Custom.GipFirmwareUpdateProgress>** result);
                }

                [uuid(B2AC1D95-6ECB-42B3-8AAB-025401CA4712)]
                [version(0x0A000002)]
                interface IXusbGameControllerInputSink : IInspectable
                    requires
                        Windows.Gaming.Input.Custom.IGameControllerInputSink
                {
                    HRESULT OnInputReceived([in] UINT64 timestamp, [in] BYTE reportId, [in] UINT32 __inputBufferSize, [in] [size_is(__inputBufferSize)] BYTE* inputBuffer);
                }

                [exclusiveto(Windows.Gaming.Input.Custom.XusbGameControllerProvider)]
                [uuid(6E2971EB-0EFB-48B4-808B-837643B2F216)]
                [version(0x0A000002)]
                interface IXusbGameControllerProvider : IInspectable
                    requires
                        Windows.Gaming.Input.Custom.IGameControllerProvider
                {
                    HRESULT SetVibration([in] DOUBLE lowFrequencyMotorSpeed, [in] DOUBLE highFrequencyMotorSpeed);
                }

                [marshaling_behavior(agile)]
                [static(Windows.Gaming.Input.Custom.IGameControllerFactoryManagerStatics, 0x0A000002)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass GameControllerFactoryManager
                {
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass GipFirmwareUpdateResult
                {
                    [default] interface Windows.Gaming.Input.Custom.IGipFirmwareUpdateResult;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass GipGameControllerProvider
                {
                    [default] interface Windows.Gaming.Input.Custom.IGipGameControllerProvider;
                    interface Windows.Gaming.Input.Custom.IGameControllerProvider;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x0A000002)]
                runtimeclass XusbGameControllerProvider
                {
                    [default] interface Windows.Gaming.Input.Custom.IXusbGameControllerProvider;
                    interface Windows.Gaming.Input.Custom.IGameControllerProvider;
                }
            }
        }
    }
}
