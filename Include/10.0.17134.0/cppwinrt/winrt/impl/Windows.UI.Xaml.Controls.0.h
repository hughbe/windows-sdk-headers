// C++/WinRT v1.0.180227.3

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

#pragma once

WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Contacts {

struct Contact;

}

WINRT_EXPORT namespace winrt::Windows::ApplicationModel::DataTransfer {

enum class DataPackageOperation : unsigned;
struct DataPackage;

}

WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Search {

struct LocalContentSuggestionSettings;
struct SearchQueryLinguisticDetails;
struct SearchSuggestionsRequest;

}

WINRT_EXPORT namespace winrt::Windows::Foundation {

struct Deferral;
struct Uri;

}

WINRT_EXPORT namespace winrt::Windows::Foundation::Collections {

struct IPropertySet;

}

WINRT_EXPORT namespace winrt::Windows::Globalization {

enum class DayOfWeek;

}

WINRT_EXPORT namespace winrt::Windows::Media::Capture {

struct MediaCapture;

}

WINRT_EXPORT namespace winrt::Windows::Media::Casting {

struct CastingSource;

}

WINRT_EXPORT namespace winrt::Windows::Media::Core {

struct IMediaSource;

}

WINRT_EXPORT namespace winrt::Windows::Media::PlayTo {

struct PlayToSource;

}

WINRT_EXPORT namespace winrt::Windows::Media::Playback {

struct IMediaPlaybackSource;
struct MediaPlayer;

}

WINRT_EXPORT namespace winrt::Windows::Media::Protection {

struct MediaProtectionManager;

}

WINRT_EXPORT namespace winrt::Windows::Storage::Streams {

struct IRandomAccessStream;

}

WINRT_EXPORT namespace winrt::Windows::System {

enum class VirtualKeyModifiers : unsigned;

}

WINRT_EXPORT namespace winrt::Windows::UI {

struct Color;

}

WINRT_EXPORT namespace winrt::Windows::UI::Composition {

struct CompositionBrush;

}

WINRT_EXPORT namespace winrt::Windows::UI::Core {

enum class CoreInputDeviceTypes : unsigned;
struct CoreIndependentInputSource;

}

WINRT_EXPORT namespace winrt::Windows::UI::Input::Inking {

struct InkDrawingAttributes;
struct InkPresenter;
struct InkPresenterProtractor;
struct InkPresenterRuler;

}

WINRT_EXPORT namespace winrt::Windows::UI::Text {

enum class FontStretch;
enum class FontStyle;
enum class TextDecorations : unsigned;
struct ContentLinkInfo;
struct FontWeight;
struct ITextDocument;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml {

enum class ElementSoundMode;
enum class FocusState;
enum class HorizontalAlignment;
enum class LineStackingStrategy;
enum class OpticalMarginAlignment;
enum class TextAlignment;
enum class TextLineBounds;
enum class TextReadingOrder;
enum class TextTrimming;
enum class TextWrapping;
enum class VerticalAlignment;
enum class Visibility;
struct CornerRadius;
struct DataTemplate;
struct DependencyObject;
struct DependencyObjectCollection;
struct DependencyProperty;
struct DependencyPropertyChangedEventHandler;
struct DragEventArgs;
struct Duration;
struct ExceptionRoutedEventHandler;
struct FrameworkElement;
struct GridLength;
struct RoutedEventArgs;
struct RoutedEventHandler;
struct Style;
struct Thickness;
struct UIElement;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Controls::Primitives {

enum class GeneratorDirection;
enum class GroupHeaderPlacement;
enum class PlacementMode;
enum class SliderSnapsTo;
enum class SnapPointsAlignment;
enum class TickPlacement;
struct AppBarButtonTemplateSettings;
struct AppBarTemplateSettings;
struct AppBarToggleButtonTemplateSettings;
struct CalendarViewTemplateSettings;
struct ComboBoxTemplateSettings;
struct CommandBarTemplateSettings;
struct FlyoutBase;
struct GeneratorPosition;
struct GridViewItemTemplateSettings;
struct ItemsChangedEventArgs;
struct ItemsChangedEventHandler;
struct ListViewItemTemplateSettings;
struct MenuFlyoutItemTemplateSettings;
struct MenuFlyoutPresenterTemplateSettings;
struct ProgressBarTemplateSettings;
struct ProgressRingTemplateSettings;
struct SelectorItem;
struct SettingsFlyoutTemplateSettings;
struct SplitViewTemplateSettings;
struct ToggleSwitchTemplateSettings;
struct ToolTipTemplateSettings;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Data {

struct ICustomProperty;
struct IValueConverter;
struct ItemIndexRange;
struct LoadMoreItemsResult;
struct PropertyChangedEventHandler;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Documents {

struct BlockCollection;
struct ContentLinkInvokedEventArgs;
struct ContentLinkProviderCollection;
struct InlineCollection;
struct TextHighlighter;
struct TextPointer;
struct TextRange;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Input {

enum class KeyboardNavigationMode;
struct CharacterReceivedRoutedEventArgs;
struct DoubleTappedRoutedEventArgs;
struct HoldingRoutedEventArgs;
struct ICommand;
struct InputScope;
struct KeyRoutedEventArgs;
struct ManipulationCompletedRoutedEventArgs;
struct ManipulationDeltaRoutedEventArgs;
struct ManipulationInertiaStartingRoutedEventArgs;
struct ManipulationStartedRoutedEventArgs;
struct ManipulationStartingRoutedEventArgs;
struct PointerRoutedEventArgs;
struct RightTappedRoutedEventArgs;
struct TappedRoutedEventArgs;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Interop {

struct TypeName;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Media {

enum class AudioCategory;
enum class AudioDeviceType;
enum class FastPlayFallbackBehaviour;
enum class MediaCanPlayResponse;
enum class MediaElementState;
enum class Stereo3DVideoPackingMode;
enum class Stereo3DVideoRenderMode;
enum class Stretch;
struct Brush;
struct FontFamily;
struct Geometry;
struct ImageSource;
struct MediaTransportControlsThumbnailRequestedEventArgs;
struct PartialMediaFailureDetectedEventArgs;
struct RateChangedRoutedEventHandler;
struct SolidColorBrush;
struct TimelineMarkerCollection;
struct TimelineMarkerRoutedEventHandler;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Media::Animation {

struct ConnectedAnimation;
struct NavigationTransitionInfo;
struct TransitionCollection;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Navigation {

enum class NavigationCacheMode;
struct LoadCompletedEventHandler;
struct NavigatedEventHandler;
struct NavigatingCancelEventArgs;
struct NavigatingCancelEventHandler;
struct NavigationEventArgs;
struct NavigationFailedEventHandler;
struct NavigationStoppedEventHandler;
struct PageStackEntry;

}

WINRT_EXPORT namespace winrt::Windows::Web {

enum class WebErrorStatus;
struct IUriToStreamResolver;

}

WINRT_EXPORT namespace winrt::Windows::Web::Http {

struct HttpRequestMessage;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Controls {

enum class AppBarClosedDisplayMode : int32_t
{
    Compact = 0,
    Minimal = 1,
    Hidden = 2,
};

enum class AutoSuggestionBoxTextChangeReason : int32_t
{
    UserInput = 0,
    ProgrammaticChange = 1,
    SuggestionChosen = 2,
};

enum class CalendarViewDisplayMode : int32_t
{
    Month = 0,
    Year = 1,
    Decade = 2,
};

enum class CalendarViewSelectionMode : int32_t
{
    None = 0,
    Single = 1,
    Multiple = 2,
};

enum class CandidateWindowAlignment : int32_t
{
    Default = 0,
    BottomEdge = 1,
};

enum class CharacterCasing : int32_t
{
    Normal = 0,
    Lower = 1,
    Upper = 2,
};

enum class ClickMode : int32_t
{
    Release = 0,
    Press = 1,
    Hover = 2,
};

enum class ColorPickerHsvChannel : int32_t
{
    Hue = 0,
    Saturation = 1,
    Value = 2,
    Alpha = 3,
};

enum class ColorSpectrumComponents : int32_t
{
    HueValue = 0,
    ValueHue = 1,
    HueSaturation = 2,
    SaturationHue = 3,
    SaturationValue = 4,
    ValueSaturation = 5,
};

enum class ColorSpectrumShape : int32_t
{
    Box = 0,
    Ring = 1,
};

enum class ComboBoxSelectionChangedTrigger : int32_t
{
    Committed = 0,
    Always = 1,
};

enum class CommandBarDefaultLabelPosition : int32_t
{
    Bottom = 0,
    Right = 1,
    Collapsed = 2,
};

enum class CommandBarDynamicOverflowAction : int32_t
{
    AddingToOverflow = 0,
    RemovingFromOverflow = 1,
};

enum class CommandBarLabelPosition : int32_t
{
    Default = 0,
    Collapsed = 1,
};

enum class CommandBarOverflowButtonVisibility : int32_t
{
    Auto = 0,
    Visible = 1,
    Collapsed = 2,
};

enum class ContentDialogButton : int32_t
{
    None = 0,
    Primary = 1,
    Secondary = 2,
    Close = 3,
};

enum class ContentDialogPlacement : int32_t
{
    Popup = 0,
    InPlace = 1,
};

enum class ContentDialogResult : int32_t
{
    None = 0,
    Primary = 1,
    Secondary = 2,
};

enum class ContentLinkChangeKind : int32_t
{
    Inserted = 0,
    Removed = 1,
    Edited = 2,
};

enum class DisabledFormattingAccelerators : uint32_t
{
    None = 0x0,
    Bold = 0x1,
    Italic = 0x2,
    Underline = 0x4,
    All = 0xFFFFFFFF,
};

enum class HandwritingPanelPlacementAlignment : int32_t
{
    Auto = 0,
    TopLeft = 1,
    TopRight = 2,
    BottomLeft = 3,
    BottomRight = 4,
};

enum class IncrementalLoadingTrigger : int32_t
{
    None = 0,
    Edge = 1,
};

enum class InkToolbarButtonFlyoutPlacement : int32_t
{
    Auto = 0,
    Top = 1,
    Bottom = 2,
    Left = 3,
    Right = 4,
};

enum class InkToolbarFlyoutItemKind : int32_t
{
    Simple = 0,
    Radio = 1,
    Check = 2,
    RadioCheck = 3,
};

enum class InkToolbarInitialControls : int32_t
{
    All = 0,
    None = 1,
    PensOnly = 2,
    AllExceptPens = 3,
};

enum class InkToolbarMenuKind : int32_t
{
    Stencil = 0,
};

enum class InkToolbarStencilKind : int32_t
{
    Ruler = 0,
    Protractor = 1,
};

enum class InkToolbarToggle : int32_t
{
    Ruler = 0,
    Custom = 1,
};

enum class InkToolbarTool : int32_t
{
    BallpointPen = 0,
    Pencil = 1,
    Highlighter = 2,
    Eraser = 3,
    CustomPen = 4,
    CustomTool = 5,
};

enum class ItemsUpdatingScrollMode : int32_t
{
    KeepItemsInView = 0,
    KeepScrollOffset = 1,
    KeepLastItemInView = 2,
};

enum class LightDismissOverlayMode : int32_t
{
    Auto = 0,
    On = 1,
    Off = 2,
};

enum class ListPickerFlyoutSelectionMode : int32_t
{
    Single = 0,
    Multiple = 1,
};

enum class ListViewReorderMode : int32_t
{
    Disabled = 0,
    Enabled = 1,
};

enum class ListViewSelectionMode : int32_t
{
    None = 0,
    Single = 1,
    Multiple = 2,
    Extended = 3,
};

enum class NavigationViewBackButtonVisible : int32_t
{
    Collapsed = 0,
    Visible = 1,
    Auto = 2,
};

enum class NavigationViewDisplayMode : int32_t
{
    Minimal = 0,
    Compact = 1,
    Expanded = 2,
};

enum class Orientation : int32_t
{
    Vertical = 0,
    Horizontal = 1,
};

enum class PanelScrollingDirection : int32_t
{
    None = 0,
    Forward = 1,
    Backward = 2,
};

enum class ParallaxSourceOffsetKind : int32_t
{
    Absolute = 0,
    Relative = 1,
};

enum class PasswordRevealMode : int32_t
{
    Peek = 0,
    Hidden = 1,
    Visible = 2,
};

enum class PivotHeaderFocusVisualPlacement : int32_t
{
    ItemHeaders = 0,
    SelectedItemHeader = 1,
};

enum class PivotSlideInAnimationGroup : int32_t
{
    Default = 0,
    GroupOne = 1,
    GroupTwo = 2,
    GroupThree = 3,
};

enum class RefreshPullDirection : int32_t
{
    LeftToRight = 0,
    TopToBottom = 1,
    RightToLeft = 2,
    BottomToTop = 3,
};

enum class RefreshVisualizerOrientation : int32_t
{
    Auto = 0,
    Normal = 1,
    Rotate90DegreesCounterclockwise = 2,
    Rotate270DegreesCounterclockwise = 3,
};

enum class RefreshVisualizerState : int32_t
{
    Idle = 0,
    Peeking = 1,
    Interacting = 2,
    Pending = 3,
    Refreshing = 4,
};

enum class RequiresPointer : int32_t
{
    Never = 0,
    WhenEngaged = 1,
    WhenFocused = 2,
};

enum class RichEditClipboardFormat : int32_t
{
    AllFormats = 0,
    PlainText = 1,
};

enum class ScrollBarVisibility : int32_t
{
    Disabled = 0,
    Auto = 1,
    Hidden = 2,
    Visible = 3,
};

enum class ScrollIntoViewAlignment : int32_t
{
    Default = 0,
    Leading = 1,
};

enum class ScrollMode : int32_t
{
    Disabled = 0,
    Enabled = 1,
    Auto = 2,
};

enum class SelectionMode : int32_t
{
    Single = 0,
    Multiple = 1,
    Extended = 2,
};

enum class SnapPointsType : int32_t
{
    None = 0,
    Optional = 1,
    Mandatory = 2,
    OptionalSingle = 3,
    MandatorySingle = 4,
};

enum class SplitViewDisplayMode : int32_t
{
    Overlay = 0,
    Inline = 1,
    CompactOverlay = 2,
    CompactInline = 3,
};

enum class SplitViewPanePlacement : int32_t
{
    Left = 0,
    Right = 1,
};

enum class StretchDirection : int32_t
{
    UpOnly = 0,
    DownOnly = 1,
    Both = 2,
};

enum class SwipeBehaviorOnInvoked : int32_t
{
    Auto = 0,
    Close = 1,
    RemainOpen = 2,
};

enum class SwipeMode : int32_t
{
    Reveal = 0,
    Execute = 1,
};

enum class Symbol : int32_t
{
    Previous = 57600,
    Next = 57601,
    Play = 57602,
    Pause = 57603,
    Edit = 57604,
    Save = 57605,
    Clear = 57606,
    Delete = 57607,
    Remove = 57608,
    Add = 57609,
    Cancel = 57610,
    Accept = 57611,
    More = 57612,
    Redo = 57613,
    Undo = 57614,
    Home = 57615,
    Up = 57616,
    Forward = 57617,
    Back = 57618,
    Favorite = 57619,
    Camera = 57620,
    Setting = 57621,
    Video = 57622,
    Sync = 57623,
    Download = 57624,
    Mail = 57625,
    Find = 57626,
    Help = 57627,
    Upload = 57628,
    Emoji = 57629,
    TwoPage = 57630,
    LeaveChat = 57631,
    MailForward = 57632,
    Clock = 57633,
    Send = 57634,
    Crop = 57635,
    RotateCamera = 57636,
    People = 57637,
    OpenPane = 57638,
    ClosePane = 57639,
    World = 57640,
    Flag = 57641,
    PreviewLink = 57642,
    Globe = 57643,
    Trim = 57644,
    AttachCamera = 57645,
    ZoomIn = 57646,
    Bookmarks = 57647,
    Document = 57648,
    ProtectedDocument = 57649,
    Page = 57650,
    Bullets = 57651,
    Comment = 57652,
    MailFilled = 57653,
    ContactInfo = 57654,
    HangUp = 57655,
    ViewAll = 57656,
    MapPin = 57657,
    Phone = 57658,
    VideoChat = 57659,
    Switch = 57660,
    Contact = 57661,
    Rename = 57662,
    Pin = 57665,
    MusicInfo = 57666,
    Go = 57667,
    Keyboard = 57668,
    DockLeft = 57669,
    DockRight = 57670,
    DockBottom = 57671,
    Remote = 57672,
    Refresh = 57673,
    Rotate = 57674,
    Shuffle = 57675,
    List = 57676,
    Shop = 57677,
    SelectAll = 57678,
    Orientation = 57679,
    Import = 57680,
    ImportAll = 57681,
    BrowsePhotos = 57685,
    WebCam = 57686,
    Pictures = 57688,
    SaveLocal = 57689,
    Caption = 57690,
    Stop = 57691,
    ShowResults = 57692,
    Volume = 57693,
    Repair = 57694,
    Message = 57695,
    Page2 = 57696,
    CalendarDay = 57697,
    CalendarWeek = 57698,
    Calendar = 57699,
    Character = 57700,
    MailReplyAll = 57701,
    Read = 57702,
    Link = 57703,
    Account = 57704,
    ShowBcc = 57705,
    HideBcc = 57706,
    Cut = 57707,
    Attach = 57708,
    Paste = 57709,
    Filter = 57710,
    Copy = 57711,
    Emoji2 = 57712,
    Important = 57713,
    MailReply = 57714,
    SlideShow = 57715,
    Sort = 57716,
    Manage = 57720,
    AllApps = 57721,
    DisconnectDrive = 57722,
    MapDrive = 57723,
    NewWindow = 57724,
    OpenWith = 57725,
    ContactPresence = 57729,
    Priority = 57730,
    GoToToday = 57732,
    Font = 57733,
    FontColor = 57734,
    Contact2 = 57735,
    Folder = 57736,
    Audio = 57737,
    Placeholder = 57738,
    View = 57739,
    SetLockScreen = 57740,
    SetTile = 57741,
    ClosedCaption = 57744,
    StopSlideShow = 57745,
    Permissions = 57746,
    Highlight = 57747,
    DisableUpdates = 57748,
    UnFavorite = 57749,
    UnPin = 57750,
    OpenLocal = 57751,
    Mute = 57752,
    Italic = 57753,
    Underline = 57754,
    Bold = 57755,
    MoveToFolder = 57756,
    LikeDislike = 57757,
    Dislike = 57758,
    Like = 57759,
    AlignRight = 57760,
    AlignCenter = 57761,
    AlignLeft = 57762,
    Zoom = 57763,
    ZoomOut = 57764,
    OpenFile = 57765,
    OtherUser = 57766,
    Admin = 57767,
    Street = 57795,
    Map = 57796,
    ClearSelection = 57797,
    FontDecrease = 57798,
    FontIncrease = 57799,
    FontSize = 57800,
    CellPhone = 57801,
    ReShare = 57802,
    Tag = 57803,
    RepeatOne = 57804,
    RepeatAll = 57805,
    OutlineStar = 57806,
    SolidStar = 57807,
    Calculator = 57808,
    Directions = 57809,
    Target = 57810,
    Library = 57811,
    PhoneBook = 57812,
    Memo = 57813,
    Microphone = 57814,
    PostUpdate = 57815,
    BackToWindow = 57816,
    FullScreen = 57817,
    NewFolder = 57818,
    CalendarReply = 57819,
    UnSyncFolder = 57821,
    ReportHacked = 57822,
    SyncFolder = 57823,
    BlockContact = 57824,
    SwitchApps = 57825,
    AddFriend = 57826,
    TouchPointer = 57827,
    GoToStart = 57828,
    ZeroBars = 57829,
    OneBar = 57830,
    TwoBars = 57831,
    ThreeBars = 57832,
    FourBars = 57833,
    Scan = 58004,
    Preview = 58005,
    GlobalNavigationButton = 59136,
    Share = 59181,
    Print = 59209,
    XboxOneConsole = 59792,
};

enum class TreeViewSelectionMode : int32_t
{
    None = 0,
    Single = 1,
    Multiple = 2,
};

enum class VirtualizationMode : int32_t
{
    Standard = 0,
    Recycling = 1,
};

enum class WebViewExecutionMode : int32_t
{
    SameThread = 0,
    SeparateThread = 1,
    SeparateProcess = 2,
};

enum class WebViewPermissionState : int32_t
{
    Unknown = 0,
    Defer = 1,
    Allow = 2,
    Deny = 3,
};

enum class WebViewPermissionType : int32_t
{
    Geolocation = 0,
    UnlimitedIndexedDBQuota = 1,
    Media = 2,
    PointerLock = 3,
    WebNotifications = 4,
    Screen = 5,
    ImmersiveView = 6,
};

enum class ZoomMode : int32_t
{
    Disabled = 0,
    Enabled = 1,
};

struct IAppBar;
struct IAppBar2;
struct IAppBar3;
struct IAppBar4;
struct IAppBarButton;
struct IAppBarButton3;
struct IAppBarButton4;
struct IAppBarButton5;
struct IAppBarButtonFactory;
struct IAppBarButtonStatics;
struct IAppBarButtonStatics3;
struct IAppBarButtonStatics4;
struct IAppBarFactory;
struct IAppBarOverrides;
struct IAppBarOverrides3;
struct IAppBarSeparator;
struct IAppBarSeparatorFactory;
struct IAppBarSeparatorStatics;
struct IAppBarSeparatorStatics3;
struct IAppBarStatics;
struct IAppBarStatics2;
struct IAppBarStatics4;
struct IAppBarToggleButton;
struct IAppBarToggleButton3;
struct IAppBarToggleButton4;
struct IAppBarToggleButton5;
struct IAppBarToggleButtonFactory;
struct IAppBarToggleButtonStatics;
struct IAppBarToggleButtonStatics3;
struct IAppBarToggleButtonStatics4;
struct IAutoSuggestBox;
struct IAutoSuggestBox2;
struct IAutoSuggestBox3;
struct IAutoSuggestBoxQuerySubmittedEventArgs;
struct IAutoSuggestBoxStatics;
struct IAutoSuggestBoxStatics2;
struct IAutoSuggestBoxStatics3;
struct IAutoSuggestBoxSuggestionChosenEventArgs;
struct IAutoSuggestBoxTextChangedEventArgs;
struct IAutoSuggestBoxTextChangedEventArgsStatics;
struct IBackClickEventArgs;
struct IBitmapIcon;
struct IBitmapIcon2;
struct IBitmapIconFactory;
struct IBitmapIconSource;
struct IBitmapIconSourceFactory;
struct IBitmapIconSourceStatics;
struct IBitmapIconStatics;
struct IBitmapIconStatics2;
struct IBorder;
struct IBorderStatics;
struct IButton;
struct IButtonFactory;
struct IButtonStaticsWithFlyout;
struct IButtonWithFlyout;
struct ICalendarDatePicker;
struct ICalendarDatePicker2;
struct ICalendarDatePickerDateChangedEventArgs;
struct ICalendarDatePickerFactory;
struct ICalendarDatePickerStatics;
struct ICalendarDatePickerStatics2;
struct ICalendarView;
struct ICalendarViewDayItem;
struct ICalendarViewDayItemChangingEventArgs;
struct ICalendarViewDayItemFactory;
struct ICalendarViewDayItemStatics;
struct ICalendarViewFactory;
struct ICalendarViewSelectedDatesChangedEventArgs;
struct ICalendarViewStatics;
struct ICandidateWindowBoundsChangedEventArgs;
struct ICanvas;
struct ICanvasFactory;
struct ICanvasStatics;
struct ICaptureElement;
struct ICaptureElementStatics;
struct ICheckBox;
struct ICheckBoxFactory;
struct IChoosingGroupHeaderContainerEventArgs;
struct IChoosingItemContainerEventArgs;
struct ICleanUpVirtualizedItemEventArgs;
struct IColorChangedEventArgs;
struct IColorPicker;
struct IColorPickerFactory;
struct IColorPickerStatics;
struct IColumnDefinition;
struct IColumnDefinitionStatics;
struct IComboBox;
struct IComboBox2;
struct IComboBox3;
struct IComboBox4;
struct IComboBox5;
struct IComboBoxFactory;
struct IComboBoxItem;
struct IComboBoxItemFactory;
struct IComboBoxOverrides;
struct IComboBoxStatics;
struct IComboBoxStatics2;
struct IComboBoxStatics3;
struct IComboBoxStatics4;
struct IComboBoxStatics5;
struct ICommandBar;
struct ICommandBar2;
struct ICommandBar3;
struct ICommandBarElement;
struct ICommandBarElement2;
struct ICommandBarFactory;
struct ICommandBarOverflowPresenter;
struct ICommandBarOverflowPresenterFactory;
struct ICommandBarStatics;
struct ICommandBarStatics2;
struct ICommandBarStatics3;
struct IContainerContentChangingEventArgs;
struct IContentControl;
struct IContentControl2;
struct IContentControlFactory;
struct IContentControlOverrides;
struct IContentControlStatics;
struct IContentDialog;
struct IContentDialog2;
struct IContentDialog3;
struct IContentDialogButtonClickDeferral;
struct IContentDialogButtonClickEventArgs;
struct IContentDialogClosedEventArgs;
struct IContentDialogClosingDeferral;
struct IContentDialogClosingEventArgs;
struct IContentDialogFactory;
struct IContentDialogOpenedEventArgs;
struct IContentDialogStatics;
struct IContentDialogStatics2;
struct IContentLinkChangedEventArgs;
struct IContentPresenter;
struct IContentPresenter2;
struct IContentPresenter3;
struct IContentPresenter4;
struct IContentPresenterFactory;
struct IContentPresenterOverrides;
struct IContentPresenterStatics;
struct IContentPresenterStatics2;
struct IContentPresenterStatics3;
struct IContentPresenterStatics4;
struct IContextMenuEventArgs;
struct IControl;
struct IControl2;
struct IControl3;
struct IControl4;
struct IControl5;
struct IControlFactory;
struct IControlOverrides;
struct IControlOverrides6;
struct IControlProtected;
struct IControlStatics;
struct IControlStatics2;
struct IControlStatics3;
struct IControlStatics4;
struct IControlStatics5;
struct IControlTemplate;
struct IDataTemplateSelector;
struct IDataTemplateSelector2;
struct IDataTemplateSelectorFactory;
struct IDataTemplateSelectorOverrides;
struct IDataTemplateSelectorOverrides2;
struct IDatePickedEventArgs;
struct IDatePicker;
struct IDatePicker2;
struct IDatePickerFactory;
struct IDatePickerFlyout;
struct IDatePickerFlyout2;
struct IDatePickerFlyoutItem;
struct IDatePickerFlyoutItemStatics;
struct IDatePickerFlyoutPresenter;
struct IDatePickerFlyoutStatics;
struct IDatePickerFlyoutStatics2;
struct IDatePickerStatics;
struct IDatePickerStatics2;
struct IDatePickerValueChangedEventArgs;
struct IDragItemsCompletedEventArgs;
struct IDragItemsStartingEventArgs;
struct IDynamicOverflowItemsChangingEventArgs;
struct IFlipView;
struct IFlipView2;
struct IFlipViewFactory;
struct IFlipViewItem;
struct IFlipViewItemFactory;
struct IFlipViewStatics2;
struct IFlyout;
struct IFlyoutFactory;
struct IFlyoutPresenter;
struct IFlyoutPresenterFactory;
struct IFlyoutStatics;
struct IFocusDisengagedEventArgs;
struct IFocusEngagedEventArgs;
struct IFocusEngagedEventArgs2;
struct IFontIcon;
struct IFontIcon2;
struct IFontIcon3;
struct IFontIconFactory;
struct IFontIconSource;
struct IFontIconSourceFactory;
struct IFontIconSourceStatics;
struct IFontIconStatics;
struct IFontIconStatics2;
struct IFontIconStatics3;
struct IFrame;
struct IFrame2;
struct IFrame3;
struct IFrame4;
struct IFrameFactory;
struct IFrameStatics;
struct IFrameStatics2;
struct IGrid;
struct IGrid2;
struct IGrid3;
struct IGridFactory;
struct IGridStatics;
struct IGridStatics2;
struct IGridStatics3;
struct IGridView;
struct IGridViewFactory;
struct IGridViewHeaderItem;
struct IGridViewHeaderItemFactory;
struct IGridViewItem;
struct IGridViewItemFactory;
struct IGroupItem;
struct IGroupItemFactory;
struct IGroupStyle;
struct IGroupStyle2;
struct IGroupStyleFactory;
struct IGroupStyleSelector;
struct IGroupStyleSelectorFactory;
struct IGroupStyleSelectorOverrides;
struct IHandwritingPanelClosedEventArgs;
struct IHandwritingPanelOpenedEventArgs;
struct IHandwritingView;
struct IHandwritingViewFactory;
struct IHandwritingViewStatics;
struct IHub;
struct IHubFactory;
struct IHubSection;
struct IHubSectionFactory;
struct IHubSectionHeaderClickEventArgs;
struct IHubSectionStatics;
struct IHubStatics;
struct IHyperlinkButton;
struct IHyperlinkButtonFactory;
struct IHyperlinkButtonStatics;
struct IIconElement;
struct IIconElementFactory;
struct IIconElementStatics;
struct IIconSource;
struct IIconSourceFactory;
struct IIconSourceStatics;
struct IImage;
struct IImage2;
struct IImage3;
struct IImageStatics;
struct IInkCanvas;
struct IInkCanvasFactory;
struct IInkToolbar;
struct IInkToolbar2;
struct IInkToolbarBallpointPenButton;
struct IInkToolbarBallpointPenButtonFactory;
struct IInkToolbarCustomPen;
struct IInkToolbarCustomPenButton;
struct IInkToolbarCustomPenButtonFactory;
struct IInkToolbarCustomPenButtonStatics;
struct IInkToolbarCustomPenFactory;
struct IInkToolbarCustomPenOverrides;
struct IInkToolbarCustomToggleButton;
struct IInkToolbarCustomToggleButtonFactory;
struct IInkToolbarCustomToolButton;
struct IInkToolbarCustomToolButtonFactory;
struct IInkToolbarCustomToolButtonStatics;
struct IInkToolbarEraserButton;
struct IInkToolbarEraserButton2;
struct IInkToolbarEraserButtonFactory;
struct IInkToolbarEraserButtonStatics2;
struct IInkToolbarFactory;
struct IInkToolbarFlyoutItem;
struct IInkToolbarFlyoutItemFactory;
struct IInkToolbarFlyoutItemStatics;
struct IInkToolbarHighlighterButton;
struct IInkToolbarHighlighterButtonFactory;
struct IInkToolbarIsStencilButtonCheckedChangedEventArgs;
struct IInkToolbarMenuButton;
struct IInkToolbarMenuButtonFactory;
struct IInkToolbarMenuButtonStatics;
struct IInkToolbarPenButton;
struct IInkToolbarPenButtonFactory;
struct IInkToolbarPenButtonStatics;
struct IInkToolbarPenConfigurationControl;
struct IInkToolbarPenConfigurationControlFactory;
struct IInkToolbarPenConfigurationControlStatics;
struct IInkToolbarPencilButton;
struct IInkToolbarPencilButtonFactory;
struct IInkToolbarRulerButton;
struct IInkToolbarRulerButtonFactory;
struct IInkToolbarRulerButtonStatics;
struct IInkToolbarStatics;
struct IInkToolbarStatics2;
struct IInkToolbarStencilButton;
struct IInkToolbarStencilButtonFactory;
struct IInkToolbarStencilButtonStatics;
struct IInkToolbarToggleButton;
struct IInkToolbarToggleButtonFactory;
struct IInkToolbarToolButton;
struct IInkToolbarToolButtonFactory;
struct IInkToolbarToolButtonStatics;
struct IInsertionPanel;
struct IIsTextTrimmedChangedEventArgs;
struct IItemClickEventArgs;
struct IItemContainerGenerator;
struct IItemContainerMapping;
struct IItemsControl;
struct IItemsControl2;
struct IItemsControl3;
struct IItemsControlFactory;
struct IItemsControlOverrides;
struct IItemsControlStatics;
struct IItemsPanelTemplate;
struct IItemsPickedEventArgs;
struct IItemsPresenter;
struct IItemsPresenter2;
struct IItemsPresenterStatics;
struct IItemsPresenterStatics2;
struct IItemsStackPanel;
struct IItemsStackPanel2;
struct IItemsStackPanelStatics;
struct IItemsStackPanelStatics2;
struct IItemsWrapGrid;
struct IItemsWrapGrid2;
struct IItemsWrapGridStatics;
struct IItemsWrapGridStatics2;
struct IListBox;
struct IListBox2;
struct IListBoxFactory;
struct IListBoxItem;
struct IListBoxItemFactory;
struct IListBoxStatics;
struct IListBoxStatics2;
struct IListPickerFlyout;
struct IListPickerFlyoutPresenter;
struct IListPickerFlyoutStatics;
struct IListView;
struct IListViewBase;
struct IListViewBase2;
struct IListViewBase3;
struct IListViewBase4;
struct IListViewBase5;
struct IListViewBase6;
struct IListViewBaseFactory;
struct IListViewBaseHeaderItem;
struct IListViewBaseHeaderItemFactory;
struct IListViewBaseStatics;
struct IListViewBaseStatics2;
struct IListViewBaseStatics3;
struct IListViewBaseStatics4;
struct IListViewBaseStatics5;
struct IListViewFactory;
struct IListViewHeaderItem;
struct IListViewHeaderItemFactory;
struct IListViewItem;
struct IListViewItemFactory;
struct IListViewPersistenceHelper;
struct IListViewPersistenceHelperStatics;
struct IMediaElement;
struct IMediaElement2;
struct IMediaElement3;
struct IMediaElementStatics;
struct IMediaElementStatics2;
struct IMediaPlayerElement;
struct IMediaPlayerElementFactory;
struct IMediaPlayerElementStatics;
struct IMediaPlayerPresenter;
struct IMediaPlayerPresenterFactory;
struct IMediaPlayerPresenterStatics;
struct IMediaTransportControls;
struct IMediaTransportControls2;
struct IMediaTransportControls3;
struct IMediaTransportControls4;
struct IMediaTransportControlsFactory;
struct IMediaTransportControlsHelper;
struct IMediaTransportControlsHelperStatics;
struct IMediaTransportControlsStatics;
struct IMediaTransportControlsStatics2;
struct IMediaTransportControlsStatics3;
struct IMediaTransportControlsStatics4;
struct IMenuFlyout;
struct IMenuFlyout2;
struct IMenuFlyoutFactory;
struct IMenuFlyoutItem;
struct IMenuFlyoutItem2;
struct IMenuFlyoutItem3;
struct IMenuFlyoutItemBase;
struct IMenuFlyoutItemBaseFactory;
struct IMenuFlyoutItemFactory;
struct IMenuFlyoutItemStatics;
struct IMenuFlyoutItemStatics2;
struct IMenuFlyoutItemStatics3;
struct IMenuFlyoutPresenter;
struct IMenuFlyoutPresenter2;
struct IMenuFlyoutPresenterFactory;
struct IMenuFlyoutSeparator;
struct IMenuFlyoutSeparatorFactory;
struct IMenuFlyoutStatics;
struct IMenuFlyoutSubItem;
struct IMenuFlyoutSubItem2;
struct IMenuFlyoutSubItemStatics;
struct IMenuFlyoutSubItemStatics2;
struct INavigate;
struct INavigationView;
struct INavigationView2;
struct INavigationViewBackRequestedEventArgs;
struct INavigationViewDisplayModeChangedEventArgs;
struct INavigationViewFactory;
struct INavigationViewItem;
struct INavigationViewItemBase;
struct INavigationViewItemBaseFactory;
struct INavigationViewItemFactory;
struct INavigationViewItemHeader;
struct INavigationViewItemHeaderFactory;
struct INavigationViewItemInvokedEventArgs;
struct INavigationViewItemSeparator;
struct INavigationViewItemSeparatorFactory;
struct INavigationViewItemStatics;
struct INavigationViewList;
struct INavigationViewListFactory;
struct INavigationViewPaneClosingEventArgs;
struct INavigationViewSelectionChangedEventArgs;
struct INavigationViewStatics;
struct INavigationViewStatics2;
struct INotifyEventArgs;
struct INotifyEventArgs2;
struct IPage;
struct IPageFactory;
struct IPageOverrides;
struct IPageStatics;
struct IPanel;
struct IPanelFactory;
struct IPanelStatics;
struct IParallaxView;
struct IParallaxViewFactory;
struct IParallaxViewStatics;
struct IPasswordBox;
struct IPasswordBox2;
struct IPasswordBox3;
struct IPasswordBox4;
struct IPasswordBoxPasswordChangingEventArgs;
struct IPasswordBoxStatics;
struct IPasswordBoxStatics2;
struct IPasswordBoxStatics3;
struct IPathIcon;
struct IPathIconFactory;
struct IPathIconSource;
struct IPathIconSourceFactory;
struct IPathIconSourceStatics;
struct IPathIconStatics;
struct IPersonPicture;
struct IPersonPictureFactory;
struct IPersonPictureStatics;
struct IPickerConfirmedEventArgs;
struct IPickerFlyout;
struct IPickerFlyoutPresenter;
struct IPickerFlyoutStatics;
struct IPivot;
struct IPivot2;
struct IPivot3;
struct IPivotFactory;
struct IPivotItem;
struct IPivotItemEventArgs;
struct IPivotItemFactory;
struct IPivotItemStatics;
struct IPivotStatics;
struct IPivotStatics2;
struct IPivotStatics3;
struct IProgressBar;
struct IProgressBarFactory;
struct IProgressBarStatics;
struct IProgressRing;
struct IProgressRingStatics;
struct IRadioButton;
struct IRadioButtonFactory;
struct IRadioButtonStatics;
struct IRatingControl;
struct IRatingControlFactory;
struct IRatingControlStatics;
struct IRatingItemFontInfo;
struct IRatingItemFontInfoFactory;
struct IRatingItemFontInfoStatics;
struct IRatingItemImageInfo;
struct IRatingItemImageInfoFactory;
struct IRatingItemImageInfoStatics;
struct IRatingItemInfo;
struct IRatingItemInfoFactory;
struct IRefreshContainer;
struct IRefreshContainerFactory;
struct IRefreshContainerStatics;
struct IRefreshInteractionRatioChangedEventArgs;
struct IRefreshRequestedEventArgs;
struct IRefreshStateChangedEventArgs;
struct IRefreshVisualizer;
struct IRefreshVisualizerFactory;
struct IRefreshVisualizerStatics;
struct IRelativePanel;
struct IRelativePanelFactory;
struct IRelativePanelStatics;
struct IRichEditBox;
struct IRichEditBox2;
struct IRichEditBox3;
struct IRichEditBox4;
struct IRichEditBox5;
struct IRichEditBox6;
struct IRichEditBox7;
struct IRichEditBoxFactory;
struct IRichEditBoxStatics;
struct IRichEditBoxStatics2;
struct IRichEditBoxStatics3;
struct IRichEditBoxStatics4;
struct IRichEditBoxStatics5;
struct IRichEditBoxStatics6;
struct IRichEditBoxStatics7;
struct IRichEditBoxTextChangingEventArgs;
struct IRichEditBoxTextChangingEventArgs2;
struct IRichTextBlock;
struct IRichTextBlock2;
struct IRichTextBlock3;
struct IRichTextBlock4;
struct IRichTextBlock5;
struct IRichTextBlockOverflow;
struct IRichTextBlockOverflow2;
struct IRichTextBlockOverflow3;
struct IRichTextBlockOverflowStatics;
struct IRichTextBlockOverflowStatics2;
struct IRichTextBlockOverflowStatics3;
struct IRichTextBlockStatics;
struct IRichTextBlockStatics2;
struct IRichTextBlockStatics3;
struct IRichTextBlockStatics4;
struct IRichTextBlockStatics5;
struct IRowDefinition;
struct IRowDefinitionStatics;
struct IScrollContentPresenter;
struct IScrollViewer;
struct IScrollViewer2;
struct IScrollViewer3;
struct IScrollViewerStatics;
struct IScrollViewerStatics2;
struct IScrollViewerView;
struct IScrollViewerViewChangedEventArgs;
struct IScrollViewerViewChangingEventArgs;
struct ISearchBox;
struct ISearchBoxFactory;
struct ISearchBoxQueryChangedEventArgs;
struct ISearchBoxQuerySubmittedEventArgs;
struct ISearchBoxResultSuggestionChosenEventArgs;
struct ISearchBoxStatics;
struct ISearchBoxSuggestionsRequestedEventArgs;
struct ISectionsInViewChangedEventArgs;
struct ISectionsInViewChangedEventArgsFactory;
struct ISelectionChangedEventArgs;
struct ISelectionChangedEventArgsFactory;
struct ISemanticZoom;
struct ISemanticZoomInformation;
struct ISemanticZoomLocation;
struct ISemanticZoomStatics;
struct ISemanticZoomViewChangedEventArgs;
struct ISettingsFlyout;
struct ISettingsFlyoutFactory;
struct ISettingsFlyoutStatics;
struct ISlider;
struct ISlider2;
struct ISliderFactory;
struct ISliderStatics;
struct ISliderStatics2;
struct ISplitView;
struct ISplitView2;
struct ISplitView3;
struct ISplitViewFactory;
struct ISplitViewPaneClosingEventArgs;
struct ISplitViewStatics;
struct ISplitViewStatics2;
struct IStackPanel;
struct IStackPanel2;
struct IStackPanel4;
struct IStackPanelFactory;
struct IStackPanelStatics;
struct IStackPanelStatics2;
struct IStackPanelStatics4;
struct IStyleSelector;
struct IStyleSelectorFactory;
struct IStyleSelectorOverrides;
struct ISwapChainBackgroundPanel;
struct ISwapChainBackgroundPanel2;
struct ISwapChainBackgroundPanelFactory;
struct ISwapChainPanel;
struct ISwapChainPanelFactory;
struct ISwapChainPanelStatics;
struct ISwipeControl;
struct ISwipeControlFactory;
struct ISwipeControlStatics;
struct ISwipeItem;
struct ISwipeItemFactory;
struct ISwipeItemInvokedEventArgs;
struct ISwipeItemStatics;
struct ISwipeItems;
struct ISwipeItemsFactory;
struct ISwipeItemsStatics;
struct ISymbolIcon;
struct ISymbolIconFactory;
struct ISymbolIconSource;
struct ISymbolIconSourceFactory;
struct ISymbolIconSourceStatics;
struct ISymbolIconStatics;
struct ITextBlock;
struct ITextBlock2;
struct ITextBlock3;
struct ITextBlock4;
struct ITextBlock5;
struct ITextBlock6;
struct ITextBlockStatics;
struct ITextBlockStatics2;
struct ITextBlockStatics3;
struct ITextBlockStatics5;
struct ITextBlockStatics6;
struct ITextBox;
struct ITextBox2;
struct ITextBox3;
struct ITextBox4;
struct ITextBox5;
struct ITextBox6;
struct ITextBox7;
struct ITextBoxBeforeTextChangingEventArgs;
struct ITextBoxFactory;
struct ITextBoxStatics;
struct ITextBoxStatics2;
struct ITextBoxStatics3;
struct ITextBoxStatics5;
struct ITextBoxStatics6;
struct ITextBoxStatics7;
struct ITextBoxTextChangingEventArgs;
struct ITextBoxTextChangingEventArgs2;
struct ITextChangedEventArgs;
struct ITextCompositionChangedEventArgs;
struct ITextCompositionEndedEventArgs;
struct ITextCompositionStartedEventArgs;
struct ITextControlCopyingToClipboardEventArgs;
struct ITextControlCuttingToClipboardEventArgs;
struct ITextControlPasteEventArgs;
struct ITimePickedEventArgs;
struct ITimePicker;
struct ITimePicker2;
struct ITimePickerFactory;
struct ITimePickerFlyout;
struct ITimePickerFlyoutPresenter;
struct ITimePickerFlyoutStatics;
struct ITimePickerStatics;
struct ITimePickerStatics2;
struct ITimePickerValueChangedEventArgs;
struct IToggleMenuFlyoutItem;
struct IToggleMenuFlyoutItemFactory;
struct IToggleMenuFlyoutItemStatics;
struct IToggleSwitch;
struct IToggleSwitchOverrides;
struct IToggleSwitchStatics;
struct IToolTip;
struct IToolTipFactory;
struct IToolTipService;
struct IToolTipServiceStatics;
struct IToolTipStatics;
struct ITreeView;
struct ITreeViewCollapsedEventArgs;
struct ITreeViewExpandingEventArgs;
struct ITreeViewFactory;
struct ITreeViewItem;
struct ITreeViewItemFactory;
struct ITreeViewItemInvokedEventArgs;
struct ITreeViewItemStatics;
struct ITreeViewItemTemplateSettings;
struct ITreeViewItemTemplateSettingsFactory;
struct ITreeViewItemTemplateSettingsStatics;
struct ITreeViewList;
struct ITreeViewListFactory;
struct ITreeViewNode;
struct ITreeViewNodeFactory;
struct ITreeViewNodeStatics;
struct ITreeViewStatics;
struct IUIElementCollection;
struct IUserControl;
struct IUserControlFactory;
struct IUserControlStatics;
struct IVariableSizedWrapGrid;
struct IVariableSizedWrapGridStatics;
struct IViewbox;
struct IViewboxStatics;
struct IVirtualizingPanel;
struct IVirtualizingPanelFactory;
struct IVirtualizingPanelOverrides;
struct IVirtualizingPanelProtected;
struct IVirtualizingStackPanel;
struct IVirtualizingStackPanelOverrides;
struct IVirtualizingStackPanelStatics;
struct IWebView;
struct IWebView2;
struct IWebView3;
struct IWebView4;
struct IWebView5;
struct IWebView6;
struct IWebViewBrush;
struct IWebViewBrushStatics;
struct IWebViewContentLoadingEventArgs;
struct IWebViewDOMContentLoadedEventArgs;
struct IWebViewDeferredPermissionRequest;
struct IWebViewFactory4;
struct IWebViewLongRunningScriptDetectedEventArgs;
struct IWebViewNavigationCompletedEventArgs;
struct IWebViewNavigationFailedEventArgs;
struct IWebViewNavigationStartingEventArgs;
struct IWebViewNewWindowRequestedEventArgs;
struct IWebViewPermissionRequest;
struct IWebViewPermissionRequestedEventArgs;
struct IWebViewSeparateProcessLostEventArgs;
struct IWebViewSettings;
struct IWebViewStatics;
struct IWebViewStatics2;
struct IWebViewStatics3;
struct IWebViewStatics4;
struct IWebViewStatics5;
struct IWebViewUnsupportedUriSchemeIdentifiedEventArgs;
struct IWebViewUnviewableContentIdentifiedEventArgs;
struct IWebViewUnviewableContentIdentifiedEventArgs2;
struct IWrapGrid;
struct IWrapGridStatics;
struct AppBar;
struct AppBarButton;
struct AppBarSeparator;
struct AppBarToggleButton;
struct AutoSuggestBox;
struct AutoSuggestBoxQuerySubmittedEventArgs;
struct AutoSuggestBoxSuggestionChosenEventArgs;
struct AutoSuggestBoxTextChangedEventArgs;
struct BackClickEventArgs;
struct BitmapIcon;
struct BitmapIconSource;
struct Border;
struct Button;
struct CalendarDatePicker;
struct CalendarDatePickerDateChangedEventArgs;
struct CalendarView;
struct CalendarViewDayItem;
struct CalendarViewDayItemChangingEventArgs;
struct CalendarViewSelectedDatesChangedEventArgs;
struct CandidateWindowBoundsChangedEventArgs;
struct Canvas;
struct CaptureElement;
struct CheckBox;
struct ChoosingGroupHeaderContainerEventArgs;
struct ChoosingItemContainerEventArgs;
struct CleanUpVirtualizedItemEventArgs;
struct ColorChangedEventArgs;
struct ColorPicker;
struct ColumnDefinition;
struct ColumnDefinitionCollection;
struct ComboBox;
struct ComboBoxItem;
struct CommandBar;
struct CommandBarOverflowPresenter;
struct ContainerContentChangingEventArgs;
struct ContentControl;
struct ContentDialog;
struct ContentDialogButtonClickDeferral;
struct ContentDialogButtonClickEventArgs;
struct ContentDialogClosedEventArgs;
struct ContentDialogClosingDeferral;
struct ContentDialogClosingEventArgs;
struct ContentDialogOpenedEventArgs;
struct ContentLinkChangedEventArgs;
struct ContentPresenter;
struct ContextMenuEventArgs;
struct Control;
struct ControlTemplate;
struct DataTemplateSelector;
struct DatePickedEventArgs;
struct DatePicker;
struct DatePickerFlyout;
struct DatePickerFlyoutItem;
struct DatePickerFlyoutPresenter;
struct DatePickerValueChangedEventArgs;
struct DragItemsCompletedEventArgs;
struct DragItemsStartingEventArgs;
struct DynamicOverflowItemsChangingEventArgs;
struct FlipView;
struct FlipViewItem;
struct Flyout;
struct FlyoutPresenter;
struct FocusDisengagedEventArgs;
struct FocusEngagedEventArgs;
struct FontIcon;
struct FontIconSource;
struct Frame;
struct Grid;
struct GridView;
struct GridViewHeaderItem;
struct GridViewItem;
struct GroupItem;
struct GroupStyle;
struct GroupStyleSelector;
struct HandwritingPanelClosedEventArgs;
struct HandwritingPanelOpenedEventArgs;
struct HandwritingView;
struct Hub;
struct HubSection;
struct HubSectionCollection;
struct HubSectionHeaderClickEventArgs;
struct HyperlinkButton;
struct IconElement;
struct IconSource;
struct Image;
struct InkCanvas;
struct InkToolbar;
struct InkToolbarBallpointPenButton;
struct InkToolbarCustomPen;
struct InkToolbarCustomPenButton;
struct InkToolbarCustomToggleButton;
struct InkToolbarCustomToolButton;
struct InkToolbarEraserButton;
struct InkToolbarFlyoutItem;
struct InkToolbarHighlighterButton;
struct InkToolbarIsStencilButtonCheckedChangedEventArgs;
struct InkToolbarMenuButton;
struct InkToolbarPenButton;
struct InkToolbarPenConfigurationControl;
struct InkToolbarPencilButton;
struct InkToolbarRulerButton;
struct InkToolbarStencilButton;
struct InkToolbarToggleButton;
struct InkToolbarToolButton;
struct IsTextTrimmedChangedEventArgs;
struct ItemClickEventArgs;
struct ItemCollection;
struct ItemContainerGenerator;
struct ItemsControl;
struct ItemsPanelTemplate;
struct ItemsPickedEventArgs;
struct ItemsPresenter;
struct ItemsStackPanel;
struct ItemsWrapGrid;
struct ListBox;
struct ListBoxItem;
struct ListPickerFlyout;
struct ListPickerFlyoutPresenter;
struct ListView;
struct ListViewBase;
struct ListViewBaseHeaderItem;
struct ListViewHeaderItem;
struct ListViewItem;
struct ListViewPersistenceHelper;
struct MediaElement;
struct MediaPlayerElement;
struct MediaPlayerPresenter;
struct MediaTransportControls;
struct MediaTransportControlsHelper;
struct MenuFlyout;
struct MenuFlyoutItem;
struct MenuFlyoutItemBase;
struct MenuFlyoutPresenter;
struct MenuFlyoutSeparator;
struct MenuFlyoutSubItem;
struct NavigationView;
struct NavigationViewBackRequestedEventArgs;
struct NavigationViewDisplayModeChangedEventArgs;
struct NavigationViewItem;
struct NavigationViewItemBase;
struct NavigationViewItemHeader;
struct NavigationViewItemInvokedEventArgs;
struct NavigationViewItemSeparator;
struct NavigationViewList;
struct NavigationViewPaneClosingEventArgs;
struct NavigationViewSelectionChangedEventArgs;
struct NotifyEventArgs;
struct Page;
struct Panel;
struct ParallaxView;
struct PasswordBox;
struct PasswordBoxPasswordChangingEventArgs;
struct PathIcon;
struct PathIconSource;
struct PersonPicture;
struct PickerConfirmedEventArgs;
struct PickerFlyout;
struct PickerFlyoutPresenter;
struct Pivot;
struct PivotItem;
struct PivotItemEventArgs;
struct ProgressBar;
struct ProgressRing;
struct RadioButton;
struct RatingControl;
struct RatingItemFontInfo;
struct RatingItemImageInfo;
struct RatingItemInfo;
struct RefreshContainer;
struct RefreshInteractionRatioChangedEventArgs;
struct RefreshRequestedEventArgs;
struct RefreshStateChangedEventArgs;
struct RefreshVisualizer;
struct RelativePanel;
struct RichEditBox;
struct RichEditBoxTextChangingEventArgs;
struct RichTextBlock;
struct RichTextBlockOverflow;
struct RowDefinition;
struct RowDefinitionCollection;
struct ScrollContentPresenter;
struct ScrollViewer;
struct ScrollViewerView;
struct ScrollViewerViewChangedEventArgs;
struct ScrollViewerViewChangingEventArgs;
struct SearchBox;
struct SearchBoxQueryChangedEventArgs;
struct SearchBoxQuerySubmittedEventArgs;
struct SearchBoxResultSuggestionChosenEventArgs;
struct SearchBoxSuggestionsRequestedEventArgs;
struct SectionsInViewChangedEventArgs;
struct SelectionChangedEventArgs;
struct SemanticZoom;
struct SemanticZoomLocation;
struct SemanticZoomViewChangedEventArgs;
struct SettingsFlyout;
struct Slider;
struct SplitView;
struct SplitViewPaneClosingEventArgs;
struct StackPanel;
struct StyleSelector;
struct SwapChainBackgroundPanel;
struct SwapChainPanel;
struct SwipeControl;
struct SwipeItem;
struct SwipeItemInvokedEventArgs;
struct SwipeItems;
struct SymbolIcon;
struct SymbolIconSource;
struct TextBlock;
struct TextBox;
struct TextBoxBeforeTextChangingEventArgs;
struct TextBoxTextChangingEventArgs;
struct TextChangedEventArgs;
struct TextCompositionChangedEventArgs;
struct TextCompositionEndedEventArgs;
struct TextCompositionStartedEventArgs;
struct TextControlCopyingToClipboardEventArgs;
struct TextControlCuttingToClipboardEventArgs;
struct TextControlPasteEventArgs;
struct TimePickedEventArgs;
struct TimePicker;
struct TimePickerFlyout;
struct TimePickerFlyoutPresenter;
struct TimePickerValueChangedEventArgs;
struct ToggleMenuFlyoutItem;
struct ToggleSwitch;
struct ToolTip;
struct ToolTipService;
struct TreeView;
struct TreeViewCollapsedEventArgs;
struct TreeViewExpandingEventArgs;
struct TreeViewItem;
struct TreeViewItemInvokedEventArgs;
struct TreeViewItemTemplateSettings;
struct TreeViewList;
struct TreeViewNode;
struct UIElementCollection;
struct UserControl;
struct VariableSizedWrapGrid;
struct Viewbox;
struct VirtualizingPanel;
struct VirtualizingStackPanel;
struct WebView;
struct WebViewBrush;
struct WebViewContentLoadingEventArgs;
struct WebViewDOMContentLoadedEventArgs;
struct WebViewDeferredPermissionRequest;
struct WebViewLongRunningScriptDetectedEventArgs;
struct WebViewNavigationCompletedEventArgs;
struct WebViewNavigationFailedEventArgs;
struct WebViewNavigationStartingEventArgs;
struct WebViewNewWindowRequestedEventArgs;
struct WebViewPermissionRequest;
struct WebViewPermissionRequestedEventArgs;
struct WebViewSeparateProcessLostEventArgs;
struct WebViewSettings;
struct WebViewUnsupportedUriSchemeIdentifiedEventArgs;
struct WebViewUnviewableContentIdentifiedEventArgs;
struct WrapGrid;
struct BackClickEventHandler;
struct CalendarViewDayItemChangingEventHandler;
struct CleanUpVirtualizedItemEventHandler;
struct ContextMenuOpeningEventHandler;
struct DragItemsStartingEventHandler;
struct HubSectionHeaderClickEventHandler;
struct ItemClickEventHandler;
struct ListViewItemToKeyHandler;
struct ListViewKeyToItemHandler;
struct NotifyEventHandler;
struct SectionsInViewChangedEventHandler;
struct SelectionChangedEventHandler;
struct SemanticZoomViewChangedEventHandler;
struct TextChangedEventHandler;
struct TextControlPasteEventHandler;
struct WebViewNavigationFailedEventHandler;

}

namespace winrt::impl {

template<> struct is_enum_flag<Windows::UI::Xaml::Controls::DisabledFormattingAccelerators> : std::true_type {};
template <> struct category<Windows::UI::Xaml::Controls::IAppBar>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBar2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBar3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBar4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarButton3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarButton4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarButton5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarButtonStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarButtonStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarButtonStatics4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarOverrides>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarOverrides3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarSeparator>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarSeparatorFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarSeparatorStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarStatics4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarToggleButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarToggleButton3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarToggleButton4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarToggleButton5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAutoSuggestBox>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAutoSuggestBox2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAutoSuggestBox3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IBackClickEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IBitmapIcon>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IBitmapIcon2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IBitmapIconFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IBitmapIconSource>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IBitmapIconSourceFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IBitmapIconSourceStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IBitmapIconStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IBitmapIconStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IBorder>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IBorderStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IButtonWithFlyout>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICalendarDatePicker>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICalendarDatePicker2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICalendarDatePickerFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICalendarDatePickerStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICalendarView>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICalendarViewDayItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICalendarViewFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICalendarViewStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICanvas>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICanvasFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICanvasStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICaptureElement>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICaptureElementStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICheckBox>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICheckBoxFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IColorChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IColorPicker>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IColorPickerFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IColorPickerStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IColumnDefinition>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IColumnDefinitionStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IComboBox>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IComboBox2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IComboBox3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IComboBox4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IComboBox5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IComboBoxFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IComboBoxItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IComboBoxItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IComboBoxOverrides>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IComboBoxStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IComboBoxStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IComboBoxStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IComboBoxStatics4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IComboBoxStatics5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICommandBar>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICommandBar2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICommandBar3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICommandBarElement>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICommandBarElement2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICommandBarFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICommandBarStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICommandBarStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ICommandBarStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentControl>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentControl2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentControlFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentControlOverrides>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentControlStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentDialog>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentDialog2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentDialog3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentDialogClosingDeferral>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentDialogFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentDialogStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentDialogStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentLinkChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentPresenter>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentPresenter2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentPresenter3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentPresenter4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentPresenterFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentPresenterOverrides>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentPresenterStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentPresenterStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentPresenterStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContentPresenterStatics4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IContextMenuEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IControl>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IControl2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IControl3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IControl4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IControl5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IControlFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IControlOverrides>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IControlOverrides6>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IControlProtected>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IControlStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IControlStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IControlStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IControlStatics4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IControlStatics5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IControlTemplate>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDataTemplateSelector>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDataTemplateSelector2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDatePickedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDatePicker>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDatePicker2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDatePickerFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDatePickerFlyout>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDatePickerFlyout2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDatePickerFlyoutItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDatePickerStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDatePickerStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFlipView>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFlipView2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFlipViewFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFlipViewItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFlipViewItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFlipViewStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFlyout>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFlyoutFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFlyoutPresenter>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFlyoutPresenterFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFlyoutStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFocusEngagedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFocusEngagedEventArgs2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFontIcon>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFontIcon2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFontIcon3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFontIconFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFontIconSource>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFontIconSourceFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFontIconSourceStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFontIconStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFontIconStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFontIconStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFrame>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFrame2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFrame3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFrame4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFrameFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFrameStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IFrameStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGrid>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGrid2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGrid3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGridFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGridStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGridStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGridStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGridView>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGridViewFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGridViewHeaderItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGridViewItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGridViewItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGroupItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGroupItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGroupStyle>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGroupStyle2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGroupStyleFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGroupStyleSelector>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IHandwritingPanelClosedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IHandwritingPanelOpenedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IHandwritingView>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IHandwritingViewFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IHandwritingViewStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IHub>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IHubFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IHubSection>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IHubSectionFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IHubSectionStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IHubStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IHyperlinkButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IHyperlinkButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IHyperlinkButtonStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IIconElement>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IIconElementFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IIconElementStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IIconSource>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IIconSourceFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IIconSourceStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IImage>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IImage2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IImage3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IImageStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkCanvas>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkCanvasFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbar>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbar2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarCustomPen>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarEraserButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarEraserButton2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarEraserButtonStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarIsStencilButtonCheckedChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarMenuButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarMenuButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarMenuButtonStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarPenButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarPencilButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarRulerButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarStencilButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarStencilButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarStencilButtonStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarToggleButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarToolButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IInsertionPanel>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemClickEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemContainerGenerator>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemContainerMapping>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsControl>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsControl2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsControl3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsControlFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsControlOverrides>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsControlStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsPanelTemplate>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsPickedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsPresenter>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsPresenter2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsPresenterStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsPresenterStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsStackPanel>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsStackPanel2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsStackPanelStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsStackPanelStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsWrapGrid>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsWrapGrid2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsWrapGridStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IItemsWrapGridStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListBox>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListBox2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListBoxFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListBoxItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListBoxItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListBoxStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListBoxStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListPickerFlyout>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListPickerFlyoutStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListView>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewBase>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewBase2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewBase3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewBase4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewBase5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewBase6>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewBaseFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewBaseHeaderItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewBaseStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewBaseStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewBaseStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewBaseStatics4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewBaseStatics5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewHeaderItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewHeaderItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewPersistenceHelper>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaElement>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaElement2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaElement3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaElementStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaElementStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaPlayerElement>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaPlayerElementFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaPlayerElementStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaPlayerPresenter>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaTransportControls>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaTransportControls2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaTransportControls3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaTransportControls4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaTransportControlsFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaTransportControlsHelper>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyout>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyout2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutItem2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutItem3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutItemBase>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutPresenter>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutSeparator>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutSubItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutSubItem2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigate>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationView>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationView2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewItemBase>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewItemBaseFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewItemHeader>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewItemHeaderFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewItemSeparator>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewItemStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewList>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewListFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INavigationViewStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INotifyEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::INotifyEventArgs2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPage>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPageFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPageOverrides>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPageStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPanel>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPanelFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPanelStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IParallaxView>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IParallaxViewFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IParallaxViewStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPasswordBox>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPasswordBox2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPasswordBox3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPasswordBox4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPasswordBoxStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPasswordBoxStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPasswordBoxStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPathIcon>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPathIconFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPathIconSource>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPathIconSourceFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPathIconSourceStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPathIconStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPersonPicture>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPersonPictureFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPersonPictureStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPickerFlyout>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPickerFlyoutPresenter>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPickerFlyoutStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPivot>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPivot2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPivot3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPivotFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPivotItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPivotItemEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPivotItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPivotItemStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPivotStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPivotStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IPivotStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IProgressBar>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IProgressBarFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IProgressBarStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IProgressRing>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IProgressRingStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRadioButton>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRadioButtonFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRadioButtonStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRatingControl>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRatingControlFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRatingControlStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRatingItemFontInfo>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRatingItemFontInfoFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRatingItemFontInfoStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRatingItemImageInfo>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRatingItemImageInfoFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRatingItemImageInfoStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRatingItemInfo>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRatingItemInfoFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRefreshContainer>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRefreshContainerFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRefreshContainerStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRefreshRequestedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRefreshStateChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRefreshVisualizer>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRefreshVisualizerFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRefreshVisualizerStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRelativePanel>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRelativePanelFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRelativePanelStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBox>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBox2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBox3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBox4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBox5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBox6>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBox7>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBoxFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBoxStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBoxStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBoxStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBoxStatics4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBoxStatics5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBoxStatics6>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBoxStatics7>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlock>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlock2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlock3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlock4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlock5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlockOverflow>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlockOverflow2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlockOverflow3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlockStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlockStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlockStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlockStatics4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRichTextBlockStatics5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRowDefinition>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IRowDefinitionStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IScrollContentPresenter>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IScrollViewer>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IScrollViewer2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IScrollViewer3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IScrollViewerStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IScrollViewerStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IScrollViewerView>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISearchBox>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISearchBoxFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISearchBoxStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISelectionChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISemanticZoom>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISemanticZoomInformation>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISemanticZoomLocation>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISemanticZoomStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISettingsFlyout>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISettingsFlyoutFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISettingsFlyoutStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISlider>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISlider2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISliderFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISliderStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISliderStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISplitView>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISplitView2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISplitView3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISplitViewFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISplitViewStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISplitViewStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IStackPanel>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IStackPanel2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IStackPanel4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IStackPanelFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IStackPanelStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IStackPanelStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IStackPanelStatics4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IStyleSelector>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IStyleSelectorFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IStyleSelectorOverrides>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwapChainPanel>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwapChainPanelFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwapChainPanelStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwipeControl>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwipeControlFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwipeControlStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwipeItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwipeItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwipeItemStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwipeItems>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwipeItemsFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISwipeItemsStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISymbolIcon>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISymbolIconFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISymbolIconSource>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISymbolIconSourceFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISymbolIconSourceStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ISymbolIconStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBlock>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBlock2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBlock3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBlock4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBlock5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBlock6>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBlockStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBlockStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBlockStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBlockStatics5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBlockStatics6>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBox>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBox2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBox3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBox4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBox5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBox6>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBox7>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBoxFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBoxStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBoxStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBoxStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBoxStatics5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBoxStatics6>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBoxStatics7>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITextControlPasteEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITimePickedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITimePicker>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITimePicker2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITimePickerFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITimePickerFlyout>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITimePickerStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITimePickerStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IToggleSwitch>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IToggleSwitchOverrides>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IToggleSwitchStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IToolTip>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IToolTipFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IToolTipService>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IToolTipServiceStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IToolTipStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeView>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewItem>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewItemFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewItemStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettings>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewList>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewListFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewNode>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewNodeFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewNodeStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::ITreeViewStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IUIElementCollection>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IUserControl>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IUserControlFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IUserControlStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IViewbox>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IViewboxStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IVirtualizingPanel>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IVirtualizingPanelFactory>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IVirtualizingPanelProtected>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IVirtualizingStackPanel>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebView>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebView2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebView3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebView4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebView5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebView6>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewBrush>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewBrushStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewFactory4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewPermissionRequest>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewSeparateProcessLostEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewSettings>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewStatics2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewStatics3>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewStatics4>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewStatics5>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWrapGrid>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::IWrapGridStatics>{ using type = interface_category; };
template <> struct category<Windows::UI::Xaml::Controls::AppBar>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::AppBarButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::AppBarSeparator>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::AppBarToggleButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::AutoSuggestBox>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::BackClickEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::BitmapIcon>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::BitmapIconSource>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::Border>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::Button>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::CalendarDatePicker>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::CalendarView>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::CalendarViewDayItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::Canvas>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::CaptureElement>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::CheckBox>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ColorChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ColorPicker>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ColumnDefinition>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ColumnDefinitionCollection>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ComboBox>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ComboBoxItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::CommandBar>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::CommandBarOverflowPresenter>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContentControl>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContentDialog>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContentDialogButtonClickDeferral>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContentDialogClosingDeferral>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContentLinkChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContentPresenter>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContextMenuEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::Control>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ControlTemplate>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::DataTemplateSelector>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::DatePickedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::DatePicker>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::DatePickerFlyout>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::DatePickerFlyoutItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::DatePickerFlyoutPresenter>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::DragItemsStartingEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::FlipView>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::FlipViewItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::Flyout>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::FlyoutPresenter>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::FocusDisengagedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::FocusEngagedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::FontIcon>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::FontIconSource>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::Frame>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::Grid>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::GridView>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::GridViewHeaderItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::GridViewItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::GroupItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::GroupStyle>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::GroupStyleSelector>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::HandwritingPanelClosedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::HandwritingPanelOpenedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::HandwritingView>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::Hub>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::HubSection>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::HubSectionCollection>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::HyperlinkButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::IconElement>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::IconSource>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::Image>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkCanvas>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbar>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarBallpointPenButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarCustomPen>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarCustomPenButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarCustomToggleButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarCustomToolButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarEraserButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarFlyoutItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarHighlighterButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarIsStencilButtonCheckedChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarMenuButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarPenButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarPenConfigurationControl>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarPencilButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarRulerButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarStencilButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarToggleButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarToolButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ItemClickEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ItemCollection>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ItemContainerGenerator>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ItemsControl>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ItemsPanelTemplate>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ItemsPickedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ItemsPresenter>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ItemsStackPanel>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ItemsWrapGrid>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ListBox>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ListBoxItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ListPickerFlyout>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ListPickerFlyoutPresenter>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ListView>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ListViewBase>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ListViewBaseHeaderItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ListViewHeaderItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ListViewItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ListViewPersistenceHelper>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::MediaElement>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::MediaPlayerElement>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::MediaPlayerPresenter>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::MediaTransportControls>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::MediaTransportControlsHelper>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::MenuFlyout>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::MenuFlyoutItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::MenuFlyoutItemBase>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::MenuFlyoutPresenter>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::MenuFlyoutSeparator>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::MenuFlyoutSubItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::NavigationView>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::NavigationViewItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::NavigationViewItemBase>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::NavigationViewItemHeader>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::NavigationViewItemSeparator>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::NavigationViewList>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::NotifyEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::Page>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::Panel>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ParallaxView>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::PasswordBox>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::PathIcon>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::PathIconSource>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::PersonPicture>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::PickerConfirmedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::PickerFlyout>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::PickerFlyoutPresenter>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::Pivot>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::PivotItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::PivotItemEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ProgressBar>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ProgressRing>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RadioButton>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RatingControl>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RatingItemFontInfo>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RatingItemImageInfo>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RatingItemInfo>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RefreshContainer>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RefreshRequestedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RefreshStateChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RefreshVisualizer>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RelativePanel>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RichEditBox>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RichTextBlock>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RichTextBlockOverflow>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RowDefinition>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::RowDefinitionCollection>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ScrollContentPresenter>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ScrollViewer>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ScrollViewerView>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SearchBox>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SectionsInViewChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SelectionChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SemanticZoom>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SemanticZoomLocation>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SettingsFlyout>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::Slider>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SplitView>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::StackPanel>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::StyleSelector>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SwapChainBackgroundPanel>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SwapChainPanel>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SwipeControl>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SwipeItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SwipeItemInvokedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SwipeItems>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SymbolIcon>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::SymbolIconSource>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TextBlock>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TextBox>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TextChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TextControlPasteEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TimePickedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TimePicker>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TimePickerFlyout>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TimePickerFlyoutPresenter>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ToggleSwitch>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ToolTip>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::ToolTipService>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TreeView>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TreeViewCollapsedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TreeViewExpandingEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TreeViewItem>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TreeViewItemTemplateSettings>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TreeViewList>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::TreeViewNode>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::UIElementCollection>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::UserControl>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::VariableSizedWrapGrid>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::Viewbox>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::VirtualizingPanel>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::VirtualizingStackPanel>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebView>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewBrush>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewNavigationFailedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewPermissionRequest>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewSeparateProcessLostEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewSettings>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::WrapGrid>{ using type = class_category; };
template <> struct category<Windows::UI::Xaml::Controls::AppBarClosedDisplayMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::CalendarViewDisplayMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::CalendarViewSelectionMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::CandidateWindowAlignment>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::CharacterCasing>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ClickMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ColorPickerHsvChannel>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ColorSpectrumComponents>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ColorSpectrumShape>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ComboBoxSelectionChangedTrigger>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::CommandBarDynamicOverflowAction>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::CommandBarLabelPosition>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContentDialogButton>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContentDialogPlacement>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContentDialogResult>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContentLinkChangeKind>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::DisabledFormattingAccelerators>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::HandwritingPanelPlacementAlignment>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::IncrementalLoadingTrigger>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarButtonFlyoutPlacement>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarFlyoutItemKind>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarInitialControls>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarMenuKind>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarStencilKind>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarToggle>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::InkToolbarTool>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::LightDismissOverlayMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ListViewReorderMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ListViewSelectionMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::NavigationViewBackButtonVisible>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::NavigationViewDisplayMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::Orientation>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::PanelScrollingDirection>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ParallaxSourceOffsetKind>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::PasswordRevealMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::RefreshPullDirection>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::RefreshVisualizerOrientation>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::RefreshVisualizerState>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::RequiresPointer>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::RichEditClipboardFormat>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ScrollBarVisibility>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ScrollIntoViewAlignment>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ScrollMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::SelectionMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::SnapPointsType>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::SplitViewDisplayMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::SplitViewPanePlacement>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::StretchDirection>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::SwipeBehaviorOnInvoked>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::SwipeMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::Symbol>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::TreeViewSelectionMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::VirtualizationMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewExecutionMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewPermissionState>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewPermissionType>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::ZoomMode>{ using type = enum_category; };
template <> struct category<Windows::UI::Xaml::Controls::BackClickEventHandler>{ using type = delegate_category; };
template <> struct category<Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler>{ using type = delegate_category; };
template <> struct category<Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler>{ using type = delegate_category; };
template <> struct category<Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler>{ using type = delegate_category; };
template <> struct category<Windows::UI::Xaml::Controls::DragItemsStartingEventHandler>{ using type = delegate_category; };
template <> struct category<Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler>{ using type = delegate_category; };
template <> struct category<Windows::UI::Xaml::Controls::ItemClickEventHandler>{ using type = delegate_category; };
template <> struct category<Windows::UI::Xaml::Controls::ListViewItemToKeyHandler>{ using type = delegate_category; };
template <> struct category<Windows::UI::Xaml::Controls::ListViewKeyToItemHandler>{ using type = delegate_category; };
template <> struct category<Windows::UI::Xaml::Controls::NotifyEventHandler>{ using type = delegate_category; };
template <> struct category<Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler>{ using type = delegate_category; };
template <> struct category<Windows::UI::Xaml::Controls::SelectionChangedEventHandler>{ using type = delegate_category; };
template <> struct category<Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler>{ using type = delegate_category; };
template <> struct category<Windows::UI::Xaml::Controls::TextChangedEventHandler>{ using type = delegate_category; };
template <> struct category<Windows::UI::Xaml::Controls::TextControlPasteEventHandler>{ using type = delegate_category; };
template <> struct category<Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler>{ using type = delegate_category; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBar>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBar" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBar2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBar2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBar3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBar3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBar4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBar4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarButton3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarButton3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarButton4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarButton4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarButton5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarButton5" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarButtonStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarButtonStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarButtonStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarButtonStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarButtonStatics4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarButtonStatics4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarOverrides>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarOverrides" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarOverrides3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarOverrides3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarSeparator>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarSeparator" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarSeparatorFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarSeparatorFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarSeparatorStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarSeparatorStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarSeparatorStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarStatics4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarStatics4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarToggleButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarToggleButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarToggleButton3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarToggleButton3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarToggleButton4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarToggleButton4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarToggleButton5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarToggleButton5" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarToggleButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarToggleButtonStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarToggleButtonStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAppBarToggleButtonStatics4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAutoSuggestBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAutoSuggestBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAutoSuggestBox2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAutoSuggestBox2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAutoSuggestBox3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAutoSuggestBox3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAutoSuggestBoxQuerySubmittedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAutoSuggestBoxStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAutoSuggestBoxStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAutoSuggestBoxStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAutoSuggestBoxSuggestionChosenEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAutoSuggestBoxTextChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IAutoSuggestBoxTextChangedEventArgsStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IBackClickEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IBackClickEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IBitmapIcon>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IBitmapIcon" }; };
template <> struct name<Windows::UI::Xaml::Controls::IBitmapIcon2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IBitmapIcon2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IBitmapIconFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IBitmapIconFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IBitmapIconSource>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IBitmapIconSource" }; };
template <> struct name<Windows::UI::Xaml::Controls::IBitmapIconSourceFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IBitmapIconSourceFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IBitmapIconSourceStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IBitmapIconSourceStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IBitmapIconStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IBitmapIconStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IBitmapIconStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IBitmapIconStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IBorder>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IBorder" }; };
template <> struct name<Windows::UI::Xaml::Controls::IBorderStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IBorderStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IButtonStaticsWithFlyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::IButtonWithFlyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IButtonWithFlyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICalendarDatePicker>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICalendarDatePicker" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICalendarDatePicker2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICalendarDatePicker2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICalendarDatePickerDateChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICalendarDatePickerFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICalendarDatePickerFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICalendarDatePickerStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICalendarDatePickerStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICalendarDatePickerStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICalendarView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICalendarView" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICalendarViewDayItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICalendarViewDayItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICalendarViewDayItemChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICalendarViewDayItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICalendarViewDayItemStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICalendarViewFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICalendarViewFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICalendarViewSelectedDatesChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICalendarViewStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICalendarViewStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICandidateWindowBoundsChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICanvas>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICanvas" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICanvasFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICanvasFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICanvasStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICanvasStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICaptureElement>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICaptureElement" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICaptureElementStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICaptureElementStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICheckBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICheckBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICheckBoxFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICheckBoxFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IChoosingGroupHeaderContainerEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IChoosingItemContainerEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICleanUpVirtualizedItemEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IColorChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IColorChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IColorPicker>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IColorPicker" }; };
template <> struct name<Windows::UI::Xaml::Controls::IColorPickerFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IColorPickerFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IColorPickerStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IColorPickerStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IColumnDefinition>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IColumnDefinition" }; };
template <> struct name<Windows::UI::Xaml::Controls::IColumnDefinitionStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IColumnDefinitionStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IComboBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IComboBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::IComboBox2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IComboBox2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IComboBox3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IComboBox3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IComboBox4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IComboBox4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IComboBox5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IComboBox5" }; };
template <> struct name<Windows::UI::Xaml::Controls::IComboBoxFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IComboBoxFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IComboBoxItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IComboBoxItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::IComboBoxItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IComboBoxItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IComboBoxOverrides>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IComboBoxOverrides" }; };
template <> struct name<Windows::UI::Xaml::Controls::IComboBoxStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IComboBoxStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IComboBoxStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IComboBoxStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IComboBoxStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IComboBoxStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IComboBoxStatics4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IComboBoxStatics4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IComboBoxStatics5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IComboBoxStatics5" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICommandBar>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICommandBar" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICommandBar2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICommandBar2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICommandBar3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICommandBar3" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICommandBarElement>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICommandBarElement" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICommandBarElement2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICommandBarElement2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICommandBarFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICommandBarFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICommandBarOverflowPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICommandBarOverflowPresenterFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICommandBarStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICommandBarStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICommandBarStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICommandBarStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ICommandBarStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ICommandBarStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContainerContentChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentControl>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentControl" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentControl2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentControl2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentControlFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentControlFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentControlOverrides>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentControlOverrides" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentControlStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentControlStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentDialog>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentDialog" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentDialog2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentDialog2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentDialog3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentDialog3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentDialogButtonClickDeferral" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentDialogButtonClickEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentDialogClosedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentDialogClosingDeferral>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentDialogClosingDeferral" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentDialogClosingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentDialogFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentDialogFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentDialogOpenedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentDialogStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentDialogStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentDialogStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentDialogStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentLinkChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentLinkChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentPresenter2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentPresenter2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentPresenter3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentPresenter3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentPresenter4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentPresenter4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentPresenterFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentPresenterFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentPresenterOverrides>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentPresenterOverrides" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentPresenterStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentPresenterStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentPresenterStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentPresenterStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentPresenterStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentPresenterStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContentPresenterStatics4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContentPresenterStatics4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IContextMenuEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IContextMenuEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IControl>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IControl" }; };
template <> struct name<Windows::UI::Xaml::Controls::IControl2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IControl2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IControl3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IControl3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IControl4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IControl4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IControl5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IControl5" }; };
template <> struct name<Windows::UI::Xaml::Controls::IControlFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IControlFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IControlOverrides>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IControlOverrides" }; };
template <> struct name<Windows::UI::Xaml::Controls::IControlOverrides6>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IControlOverrides6" }; };
template <> struct name<Windows::UI::Xaml::Controls::IControlProtected>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IControlProtected" }; };
template <> struct name<Windows::UI::Xaml::Controls::IControlStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IControlStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IControlStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IControlStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IControlStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IControlStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IControlStatics4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IControlStatics4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IControlStatics5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IControlStatics5" }; };
template <> struct name<Windows::UI::Xaml::Controls::IControlTemplate>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IControlTemplate" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDataTemplateSelector>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDataTemplateSelector" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDataTemplateSelector2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDataTemplateSelector2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDataTemplateSelectorFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDataTemplateSelectorOverrides" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDataTemplateSelectorOverrides2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDatePickedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDatePickedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDatePicker>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDatePicker" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDatePicker2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDatePicker2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDatePickerFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDatePickerFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDatePickerFlyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDatePickerFlyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDatePickerFlyout2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDatePickerFlyout2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDatePickerFlyoutItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDatePickerFlyoutItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDatePickerFlyoutItemStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDatePickerFlyoutPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDatePickerFlyoutStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDatePickerFlyoutStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDatePickerStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDatePickerStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDatePickerStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDatePickerStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDatePickerValueChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDragItemsCompletedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDragItemsStartingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IDynamicOverflowItemsChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFlipView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFlipView" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFlipView2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFlipView2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFlipViewFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFlipViewFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFlipViewItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFlipViewItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFlipViewItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFlipViewItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFlipViewStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFlipViewStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFlyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFlyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFlyoutFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFlyoutFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFlyoutPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFlyoutPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFlyoutPresenterFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFlyoutPresenterFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFlyoutStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFlyoutStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFocusDisengagedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFocusEngagedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFocusEngagedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFocusEngagedEventArgs2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFocusEngagedEventArgs2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFontIcon>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFontIcon" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFontIcon2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFontIcon2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFontIcon3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFontIcon3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFontIconFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFontIconFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFontIconSource>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFontIconSource" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFontIconSourceFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFontIconSourceFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFontIconSourceStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFontIconSourceStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFontIconStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFontIconStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFontIconStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFontIconStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFontIconStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFontIconStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFrame>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFrame" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFrame2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFrame2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFrame3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFrame3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFrame4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFrame4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFrameFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFrameFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFrameStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFrameStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IFrameStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IFrameStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGrid>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGrid" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGrid2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGrid2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGrid3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGrid3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGridFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGridFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGridStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGridStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGridStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGridStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGridStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGridStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGridView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGridView" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGridViewFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGridViewFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGridViewHeaderItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGridViewHeaderItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGridViewHeaderItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGridViewItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGridViewItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGridViewItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGridViewItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGroupItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGroupItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGroupItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGroupItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGroupStyle>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGroupStyle" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGroupStyle2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGroupStyle2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGroupStyleFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGroupStyleFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGroupStyleSelector>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGroupStyleSelector" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGroupStyleSelectorFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IGroupStyleSelectorOverrides" }; };
template <> struct name<Windows::UI::Xaml::Controls::IHandwritingPanelClosedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IHandwritingPanelClosedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IHandwritingPanelOpenedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IHandwritingPanelOpenedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IHandwritingView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IHandwritingView" }; };
template <> struct name<Windows::UI::Xaml::Controls::IHandwritingViewFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IHandwritingViewFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IHandwritingViewStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IHandwritingViewStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IHub>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IHub" }; };
template <> struct name<Windows::UI::Xaml::Controls::IHubFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IHubFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IHubSection>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IHubSection" }; };
template <> struct name<Windows::UI::Xaml::Controls::IHubSectionFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IHubSectionFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IHubSectionHeaderClickEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IHubSectionStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IHubSectionStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IHubStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IHubStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IHyperlinkButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IHyperlinkButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IHyperlinkButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IHyperlinkButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IHyperlinkButtonStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IHyperlinkButtonStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IIconElement>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IIconElement" }; };
template <> struct name<Windows::UI::Xaml::Controls::IIconElementFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IIconElementFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IIconElementStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IIconElementStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IIconSource>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IIconSource" }; };
template <> struct name<Windows::UI::Xaml::Controls::IIconSourceFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IIconSourceFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IIconSourceStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IIconSourceStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IImage>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IImage" }; };
template <> struct name<Windows::UI::Xaml::Controls::IImage2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IImage2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IImage3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IImage3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IImageStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IImageStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkCanvas>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkCanvas" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkCanvasFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkCanvasFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbar>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbar" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbar2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbar2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarBallpointPenButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarBallpointPenButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarCustomPen>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarCustomPen" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarCustomPenButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarCustomPenButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarCustomPenButtonStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarCustomPenFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarCustomPenOverrides" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarCustomToggleButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarCustomToggleButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarCustomToolButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarCustomToolButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarCustomToolButtonStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarEraserButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarEraserButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarEraserButton2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarEraserButton2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarEraserButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarEraserButtonStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarEraserButtonStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarFlyoutItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarFlyoutItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarFlyoutItemStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarHighlighterButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarHighlighterButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarIsStencilButtonCheckedChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarIsStencilButtonCheckedChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarMenuButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarMenuButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarMenuButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarMenuButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarMenuButtonStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarMenuButtonStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarPenButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarPenButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarPenButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarPenButtonStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarPenConfigurationControl" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarPenConfigurationControlFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarPenConfigurationControlStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarPencilButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarPencilButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarPencilButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarRulerButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarRulerButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarRulerButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarRulerButtonStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarStencilButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarStencilButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarStencilButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarStencilButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarStencilButtonStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarStencilButtonStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarToggleButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarToggleButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarToggleButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarToolButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarToolButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarToolButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInkToolbarToolButtonStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IInsertionPanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IInsertionPanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IIsTextTrimmedChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemClickEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemClickEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemContainerGenerator>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemContainerGenerator" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemContainerMapping>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemContainerMapping" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsControl>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsControl" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsControl2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsControl2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsControl3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsControl3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsControlFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsControlFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsControlOverrides>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsControlOverrides" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsControlStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsControlStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsPanelTemplate>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsPanelTemplate" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsPickedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsPickedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsPresenter2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsPresenter2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsPresenterStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsPresenterStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsPresenterStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsPresenterStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsStackPanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsStackPanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsStackPanel2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsStackPanel2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsStackPanelStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsStackPanelStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsStackPanelStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsStackPanelStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsWrapGrid>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsWrapGrid" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsWrapGrid2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsWrapGrid2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsWrapGridStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsWrapGridStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IItemsWrapGridStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IItemsWrapGridStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListBox2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListBox2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListBoxFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListBoxFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListBoxItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListBoxItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListBoxItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListBoxItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListBoxStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListBoxStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListBoxStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListBoxStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListPickerFlyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListPickerFlyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListPickerFlyoutPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListPickerFlyoutStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListPickerFlyoutStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListView" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewBase>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewBase" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewBase2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewBase2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewBase3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewBase3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewBase4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewBase4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewBase5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewBase5" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewBase6>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewBase6" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewBaseFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewBaseFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewBaseHeaderItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewBaseHeaderItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewBaseHeaderItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewBaseStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewBaseStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewBaseStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewBaseStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewBaseStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewBaseStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewBaseStatics4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewBaseStatics4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewBaseStatics5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewBaseStatics5" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewHeaderItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewHeaderItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewHeaderItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewHeaderItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewPersistenceHelper>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewPersistenceHelper" }; };
template <> struct name<Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IListViewPersistenceHelperStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaElement>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaElement" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaElement2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaElement2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaElement3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaElement3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaElementStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaElementStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaElementStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaElementStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaPlayerElement>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaPlayerElement" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaPlayerElementFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaPlayerElementFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaPlayerElementStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaPlayerElementStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaPlayerPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaPlayerPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaPlayerPresenterFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaPlayerPresenterStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaTransportControls>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaTransportControls" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaTransportControls2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaTransportControls2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaTransportControls3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaTransportControls3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaTransportControls4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaTransportControls4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaTransportControlsFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaTransportControlsFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaTransportControlsHelper>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaTransportControlsHelper" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaTransportControlsHelperStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaTransportControlsStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaTransportControlsStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaTransportControlsStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMediaTransportControlsStatics4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyout2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyout2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutItem2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutItem2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutItem3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutItem3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutItemBase>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutItemBase" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutItemBaseFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutItemStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutItemStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutItemStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutPresenter2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutPresenterFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutSeparator>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutSeparator" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutSeparatorFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutSubItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutSubItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutSubItem2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutSubItem2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutSubItemStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IMenuFlyoutSubItemStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigate>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigate" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationView" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationView2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationView2" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewBackRequestedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewDisplayModeChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewItemBase>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewItemBase" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewItemBaseFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewItemBaseFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewItemHeader>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewItemHeader" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewItemHeaderFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewItemHeaderFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewItemInvokedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewItemSeparator>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewItemSeparator" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewItemSeparatorFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewItemStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewItemStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewList>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewList" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewListFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewListFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewPaneClosingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewSelectionChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::INavigationViewStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INavigationViewStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::INotifyEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INotifyEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::INotifyEventArgs2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.INotifyEventArgs2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPage>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPage" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPageFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPageFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPageOverrides>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPageOverrides" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPageStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPageStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPanelFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPanelFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPanelStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPanelStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IParallaxView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IParallaxView" }; };
template <> struct name<Windows::UI::Xaml::Controls::IParallaxViewFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IParallaxViewFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IParallaxViewStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IParallaxViewStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPasswordBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPasswordBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPasswordBox2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPasswordBox2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPasswordBox3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPasswordBox3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPasswordBox4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPasswordBox4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPasswordBoxPasswordChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPasswordBoxStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPasswordBoxStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPasswordBoxStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPasswordBoxStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPasswordBoxStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPasswordBoxStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPathIcon>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPathIcon" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPathIconFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPathIconFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPathIconSource>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPathIconSource" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPathIconSourceFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPathIconSourceFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPathIconSourceStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPathIconSourceStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPathIconStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPathIconStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPersonPicture>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPersonPicture" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPersonPictureFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPersonPictureFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPersonPictureStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPersonPictureStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPickerConfirmedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPickerFlyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPickerFlyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPickerFlyoutPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPickerFlyoutPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPickerFlyoutStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPickerFlyoutStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPivot>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPivot" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPivot2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPivot2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPivot3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPivot3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPivotFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPivotFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPivotItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPivotItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPivotItemEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPivotItemEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPivotItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPivotItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPivotItemStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPivotItemStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPivotStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPivotStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPivotStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPivotStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IPivotStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IPivotStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IProgressBar>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IProgressBar" }; };
template <> struct name<Windows::UI::Xaml::Controls::IProgressBarFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IProgressBarFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IProgressBarStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IProgressBarStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IProgressRing>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IProgressRing" }; };
template <> struct name<Windows::UI::Xaml::Controls::IProgressRingStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IProgressRingStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRadioButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRadioButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRadioButtonFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRadioButtonFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRadioButtonStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRadioButtonStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRatingControl>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRatingControl" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRatingControlFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRatingControlFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRatingControlStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRatingControlStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRatingItemFontInfo>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRatingItemFontInfo" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRatingItemFontInfoFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRatingItemFontInfoFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRatingItemFontInfoStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRatingItemFontInfoStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRatingItemImageInfo>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRatingItemImageInfo" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRatingItemImageInfoFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRatingItemImageInfoFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRatingItemImageInfoStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRatingItemImageInfoStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRatingItemInfo>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRatingItemInfo" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRatingItemInfoFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRatingItemInfoFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRefreshContainer>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRefreshContainer" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRefreshContainerFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRefreshContainerFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRefreshContainerStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRefreshContainerStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRefreshInteractionRatioChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRefreshRequestedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRefreshRequestedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRefreshStateChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRefreshStateChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRefreshVisualizer>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRefreshVisualizer" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRefreshVisualizerFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRefreshVisualizerFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRefreshVisualizerStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRefreshVisualizerStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRelativePanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRelativePanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRelativePanelFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRelativePanelFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRelativePanelStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRelativePanelStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBox2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBox2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBox3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBox3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBox4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBox4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBox5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBox5" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBox6>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBox6" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBox7>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBox7" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBoxFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBoxFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBoxStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBoxStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBoxStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBoxStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBoxStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBoxStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBoxStatics4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBoxStatics4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBoxStatics5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBoxStatics5" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBoxStatics6>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBoxStatics6" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBoxStatics7>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBoxStatics7" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBoxTextChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichEditBoxTextChangingEventArgs2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlock>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlock" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlock2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlock2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlock3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlock3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlock4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlock4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlock5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlock5" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlockOverflow>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlockOverflow" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlockOverflow2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlockOverflow2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlockOverflow3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlockOverflow3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlockOverflowStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlockOverflowStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlockOverflowStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlockStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlockStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlockStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlockStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlockStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlockStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlockStatics4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlockStatics4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRichTextBlockStatics5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRichTextBlockStatics5" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRowDefinition>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRowDefinition" }; };
template <> struct name<Windows::UI::Xaml::Controls::IRowDefinitionStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IRowDefinitionStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IScrollContentPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IScrollContentPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::IScrollViewer>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IScrollViewer" }; };
template <> struct name<Windows::UI::Xaml::Controls::IScrollViewer2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IScrollViewer2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IScrollViewer3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IScrollViewer3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IScrollViewerStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IScrollViewerStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IScrollViewerStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IScrollViewerStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IScrollViewerView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IScrollViewerView" }; };
template <> struct name<Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IScrollViewerViewChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IScrollViewerViewChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISearchBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISearchBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISearchBoxFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISearchBoxFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISearchBoxQueryChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISearchBoxQuerySubmittedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISearchBoxResultSuggestionChosenEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISearchBoxStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISearchBoxStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISearchBoxSuggestionsRequestedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISectionsInViewChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISectionsInViewChangedEventArgsFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISelectionChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISelectionChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISelectionChangedEventArgsFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISemanticZoom>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISemanticZoom" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISemanticZoomInformation>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISemanticZoomInformation" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISemanticZoomLocation>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISemanticZoomLocation" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISemanticZoomStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISemanticZoomStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISemanticZoomViewChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISettingsFlyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISettingsFlyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISettingsFlyoutFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISettingsFlyoutFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISettingsFlyoutStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISettingsFlyoutStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISlider>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISlider" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISlider2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISlider2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISliderFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISliderFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISliderStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISliderStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISliderStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISliderStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISplitView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISplitView" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISplitView2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISplitView2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISplitView3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISplitView3" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISplitViewFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISplitViewFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISplitViewPaneClosingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISplitViewStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISplitViewStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISplitViewStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISplitViewStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IStackPanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IStackPanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::IStackPanel2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IStackPanel2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IStackPanel4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IStackPanel4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IStackPanelFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IStackPanelFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IStackPanelStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IStackPanelStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IStackPanelStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IStackPanelStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IStackPanelStatics4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IStackPanelStatics4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IStyleSelector>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IStyleSelector" }; };
template <> struct name<Windows::UI::Xaml::Controls::IStyleSelectorFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IStyleSelectorFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IStyleSelectorOverrides>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IStyleSelectorOverrides" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwapChainBackgroundPanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwapChainBackgroundPanel2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwapChainBackgroundPanelFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwapChainPanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwapChainPanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwapChainPanelFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwapChainPanelFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwapChainPanelStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwapChainPanelStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwipeControl>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwipeControl" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwipeControlFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwipeControlFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwipeControlStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwipeControlStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwipeItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwipeItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwipeItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwipeItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwipeItemInvokedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwipeItemStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwipeItemStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwipeItems>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwipeItems" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwipeItemsFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwipeItemsFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISwipeItemsStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISwipeItemsStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISymbolIcon>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISymbolIcon" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISymbolIconFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISymbolIconFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISymbolIconSource>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISymbolIconSource" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISymbolIconSourceFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISymbolIconSourceFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISymbolIconSourceStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISymbolIconSourceStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ISymbolIconStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ISymbolIconStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBlock>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBlock" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBlock2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBlock2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBlock3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBlock3" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBlock4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBlock4" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBlock5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBlock5" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBlock6>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBlock6" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBlockStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBlockStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBlockStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBlockStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBlockStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBlockStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBlockStatics5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBlockStatics5" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBlockStatics6>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBlockStatics6" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBox2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBox2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBox3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBox3" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBox4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBox4" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBox5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBox5" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBox6>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBox6" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBox7>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBox7" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBoxBeforeTextChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBoxFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBoxFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBoxStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBoxStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBoxStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBoxStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBoxStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBoxStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBoxStatics5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBoxStatics5" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBoxStatics6>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBoxStatics6" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBoxStatics7>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBoxStatics7" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBoxTextChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextBoxTextChangingEventArgs2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextCompositionChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextCompositionEndedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextCompositionStartedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextControlCopyingToClipboardEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextControlCuttingToClipboardEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITextControlPasteEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITextControlPasteEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITimePickedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITimePickedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITimePicker>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITimePicker" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITimePicker2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITimePicker2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITimePickerFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITimePickerFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITimePickerFlyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITimePickerFlyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITimePickerFlyoutPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITimePickerFlyoutStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITimePickerStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITimePickerStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITimePickerStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITimePickerStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITimePickerValueChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IToggleMenuFlyoutItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IToggleMenuFlyoutItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IToggleMenuFlyoutItemStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IToggleSwitch>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IToggleSwitch" }; };
template <> struct name<Windows::UI::Xaml::Controls::IToggleSwitchOverrides>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IToggleSwitchOverrides" }; };
template <> struct name<Windows::UI::Xaml::Controls::IToggleSwitchStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IToggleSwitchStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IToolTip>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IToolTip" }; };
template <> struct name<Windows::UI::Xaml::Controls::IToolTipFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IToolTipFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IToolTipService>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IToolTipService" }; };
template <> struct name<Windows::UI::Xaml::Controls::IToolTipServiceStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IToolTipServiceStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IToolTipStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IToolTipStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeView" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewCollapsedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewExpandingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewItemFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewItemFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewItemInvokedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewItemStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewItemStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettings>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewItemTemplateSettings" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewItemTemplateSettingsFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewItemTemplateSettingsStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewList>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewList" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewListFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewListFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewNode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewNode" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewNodeFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewNodeFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewNodeStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewNodeStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::ITreeViewStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ITreeViewStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IUIElementCollection>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IUIElementCollection" }; };
template <> struct name<Windows::UI::Xaml::Controls::IUserControl>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IUserControl" }; };
template <> struct name<Windows::UI::Xaml::Controls::IUserControlFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IUserControlFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IUserControlStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IUserControlStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IVariableSizedWrapGrid" }; };
template <> struct name<Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IVariableSizedWrapGridStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IViewbox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IViewbox" }; };
template <> struct name<Windows::UI::Xaml::Controls::IViewboxStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IViewboxStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IVirtualizingPanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IVirtualizingPanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::IVirtualizingPanelFactory>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IVirtualizingPanelFactory" }; };
template <> struct name<Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IVirtualizingPanelOverrides" }; };
template <> struct name<Windows::UI::Xaml::Controls::IVirtualizingPanelProtected>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IVirtualizingPanelProtected" }; };
template <> struct name<Windows::UI::Xaml::Controls::IVirtualizingStackPanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IVirtualizingStackPanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IVirtualizingStackPanelOverrides" }; };
template <> struct name<Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IVirtualizingStackPanelStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebView" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebView2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebView2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebView3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebView3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebView4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebView4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebView5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebView5" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebView6>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebView6" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewBrush>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewBrush" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewBrushStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewBrushStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewContentLoadingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewDOMContentLoadedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewDeferredPermissionRequest" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewFactory4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewFactory4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewLongRunningScriptDetectedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewNavigationCompletedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewNavigationFailedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewNavigationStartingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewNewWindowRequestedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewPermissionRequest>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewPermissionRequest" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewPermissionRequestedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewSeparateProcessLostEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewSeparateProcessLostEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewSettings>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewSettings" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewStatics2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewStatics2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewStatics3>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewStatics3" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewStatics4>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewStatics4" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewStatics5>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewStatics5" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewUnsupportedUriSchemeIdentifiedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewUnviewableContentIdentifiedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWebViewUnviewableContentIdentifiedEventArgs2" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWrapGrid>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWrapGrid" }; };
template <> struct name<Windows::UI::Xaml::Controls::IWrapGridStatics>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IWrapGridStatics" }; };
template <> struct name<Windows::UI::Xaml::Controls::AppBar>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.AppBar" }; };
template <> struct name<Windows::UI::Xaml::Controls::AppBarButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.AppBarButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::AppBarSeparator>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.AppBarSeparator" }; };
template <> struct name<Windows::UI::Xaml::Controls::AppBarToggleButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.AppBarToggleButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::AutoSuggestBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.AutoSuggestBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::BackClickEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.BackClickEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::BitmapIcon>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.BitmapIcon" }; };
template <> struct name<Windows::UI::Xaml::Controls::BitmapIconSource>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.BitmapIconSource" }; };
template <> struct name<Windows::UI::Xaml::Controls::Border>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Border" }; };
template <> struct name<Windows::UI::Xaml::Controls::Button>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Button" }; };
template <> struct name<Windows::UI::Xaml::Controls::CalendarDatePicker>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CalendarDatePicker" }; };
template <> struct name<Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::CalendarView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CalendarView" }; };
template <> struct name<Windows::UI::Xaml::Controls::CalendarViewDayItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CalendarViewDayItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CalendarViewSelectedDatesChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::Canvas>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Canvas" }; };
template <> struct name<Windows::UI::Xaml::Controls::CaptureElement>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CaptureElement" }; };
template <> struct name<Windows::UI::Xaml::Controls::CheckBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CheckBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ChoosingItemContainerEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CleanUpVirtualizedItemEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ColorChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ColorChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ColorPicker>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ColorPicker" }; };
template <> struct name<Windows::UI::Xaml::Controls::ColumnDefinition>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ColumnDefinition" }; };
template <> struct name<Windows::UI::Xaml::Controls::ColumnDefinitionCollection>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ColumnDefinitionCollection" }; };
template <> struct name<Windows::UI::Xaml::Controls::ComboBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ComboBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::ComboBoxItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ComboBoxItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::CommandBar>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CommandBar" }; };
template <> struct name<Windows::UI::Xaml::Controls::CommandBarOverflowPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CommandBarOverflowPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContentControl>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContentControl" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContentDialog>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContentDialog" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContentDialogButtonClickDeferral>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContentDialogButtonClickDeferral" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContentDialogButtonClickEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContentDialogClosedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContentDialogClosingDeferral>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContentDialogClosingDeferral" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContentDialogClosingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContentDialogOpenedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContentLinkChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContentLinkChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContentPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContentPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContextMenuEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContextMenuEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::Control>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Control" }; };
template <> struct name<Windows::UI::Xaml::Controls::ControlTemplate>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ControlTemplate" }; };
template <> struct name<Windows::UI::Xaml::Controls::DataTemplateSelector>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.DataTemplateSelector" }; };
template <> struct name<Windows::UI::Xaml::Controls::DatePickedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.DatePickedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::DatePicker>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.DatePicker" }; };
template <> struct name<Windows::UI::Xaml::Controls::DatePickerFlyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.DatePickerFlyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::DatePickerFlyoutItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.DatePickerFlyoutItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::DatePickerFlyoutPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.DatePickerFlyoutPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.DatePickerValueChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.DragItemsCompletedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::DragItemsStartingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.DragItemsStartingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::FlipView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.FlipView" }; };
template <> struct name<Windows::UI::Xaml::Controls::FlipViewItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.FlipViewItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::Flyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Flyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::FlyoutPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.FlyoutPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::FocusDisengagedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.FocusDisengagedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::FocusEngagedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.FocusEngagedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::FontIcon>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.FontIcon" }; };
template <> struct name<Windows::UI::Xaml::Controls::FontIconSource>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.FontIconSource" }; };
template <> struct name<Windows::UI::Xaml::Controls::Frame>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Frame" }; };
template <> struct name<Windows::UI::Xaml::Controls::Grid>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Grid" }; };
template <> struct name<Windows::UI::Xaml::Controls::GridView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.GridView" }; };
template <> struct name<Windows::UI::Xaml::Controls::GridViewHeaderItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.GridViewHeaderItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::GridViewItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.GridViewItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::GroupItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.GroupItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::GroupStyle>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.GroupStyle" }; };
template <> struct name<Windows::UI::Xaml::Controls::GroupStyleSelector>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.GroupStyleSelector" }; };
template <> struct name<Windows::UI::Xaml::Controls::HandwritingPanelClosedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.HandwritingPanelClosedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::HandwritingPanelOpenedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.HandwritingPanelOpenedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::HandwritingView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.HandwritingView" }; };
template <> struct name<Windows::UI::Xaml::Controls::Hub>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Hub" }; };
template <> struct name<Windows::UI::Xaml::Controls::HubSection>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.HubSection" }; };
template <> struct name<Windows::UI::Xaml::Controls::HubSectionCollection>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.HubSectionCollection" }; };
template <> struct name<Windows::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.HubSectionHeaderClickEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::HyperlinkButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.HyperlinkButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IconElement>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IconElement" }; };
template <> struct name<Windows::UI::Xaml::Controls::IconSource>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IconSource" }; };
template <> struct name<Windows::UI::Xaml::Controls::Image>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Image" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkCanvas>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkCanvas" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbar>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbar" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarBallpointPenButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarBallpointPenButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarCustomPen>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarCustomPen" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarCustomPenButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarCustomPenButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarCustomToggleButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarCustomToolButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarCustomToolButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarEraserButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarEraserButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarFlyoutItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarFlyoutItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarHighlighterButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarHighlighterButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarIsStencilButtonCheckedChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarIsStencilButtonCheckedChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarMenuButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarMenuButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarPenButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarPenButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarPenConfigurationControl>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarPenConfigurationControl" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarPencilButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarPencilButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarRulerButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarRulerButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarStencilButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarStencilButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarToggleButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarToggleButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarToolButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarToolButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ItemClickEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ItemClickEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ItemCollection>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ItemCollection" }; };
template <> struct name<Windows::UI::Xaml::Controls::ItemContainerGenerator>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ItemContainerGenerator" }; };
template <> struct name<Windows::UI::Xaml::Controls::ItemsControl>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ItemsControl" }; };
template <> struct name<Windows::UI::Xaml::Controls::ItemsPanelTemplate>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ItemsPanelTemplate" }; };
template <> struct name<Windows::UI::Xaml::Controls::ItemsPickedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ItemsPickedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ItemsPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ItemsPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::ItemsStackPanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ItemsStackPanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::ItemsWrapGrid>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ItemsWrapGrid" }; };
template <> struct name<Windows::UI::Xaml::Controls::ListBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ListBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::ListBoxItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ListBoxItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::ListPickerFlyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ListPickerFlyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::ListPickerFlyoutPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ListPickerFlyoutPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::ListView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ListView" }; };
template <> struct name<Windows::UI::Xaml::Controls::ListViewBase>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ListViewBase" }; };
template <> struct name<Windows::UI::Xaml::Controls::ListViewBaseHeaderItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ListViewBaseHeaderItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::ListViewHeaderItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ListViewHeaderItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::ListViewItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ListViewItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::ListViewPersistenceHelper>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ListViewPersistenceHelper" }; };
template <> struct name<Windows::UI::Xaml::Controls::MediaElement>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.MediaElement" }; };
template <> struct name<Windows::UI::Xaml::Controls::MediaPlayerElement>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.MediaPlayerElement" }; };
template <> struct name<Windows::UI::Xaml::Controls::MediaPlayerPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.MediaPlayerPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::MediaTransportControls>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.MediaTransportControls" }; };
template <> struct name<Windows::UI::Xaml::Controls::MediaTransportControlsHelper>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.MediaTransportControlsHelper" }; };
template <> struct name<Windows::UI::Xaml::Controls::MenuFlyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.MenuFlyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::MenuFlyoutItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.MenuFlyoutItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::MenuFlyoutItemBase>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.MenuFlyoutItemBase" }; };
template <> struct name<Windows::UI::Xaml::Controls::MenuFlyoutPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.MenuFlyoutPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::MenuFlyoutSeparator>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.MenuFlyoutSeparator" }; };
template <> struct name<Windows::UI::Xaml::Controls::MenuFlyoutSubItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.MenuFlyoutSubItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::NavigationView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.NavigationView" }; };
template <> struct name<Windows::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::NavigationViewItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.NavigationViewItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::NavigationViewItemBase>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.NavigationViewItemBase" }; };
template <> struct name<Windows::UI::Xaml::Controls::NavigationViewItemHeader>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.NavigationViewItemHeader" }; };
template <> struct name<Windows::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::NavigationViewItemSeparator>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.NavigationViewItemSeparator" }; };
template <> struct name<Windows::UI::Xaml::Controls::NavigationViewList>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.NavigationViewList" }; };
template <> struct name<Windows::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::NotifyEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.NotifyEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::Page>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Page" }; };
template <> struct name<Windows::UI::Xaml::Controls::Panel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Panel" }; };
template <> struct name<Windows::UI::Xaml::Controls::ParallaxView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ParallaxView" }; };
template <> struct name<Windows::UI::Xaml::Controls::PasswordBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.PasswordBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.PasswordBoxPasswordChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::PathIcon>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.PathIcon" }; };
template <> struct name<Windows::UI::Xaml::Controls::PathIconSource>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.PathIconSource" }; };
template <> struct name<Windows::UI::Xaml::Controls::PersonPicture>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.PersonPicture" }; };
template <> struct name<Windows::UI::Xaml::Controls::PickerConfirmedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.PickerConfirmedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::PickerFlyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.PickerFlyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::PickerFlyoutPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.PickerFlyoutPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::Pivot>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Pivot" }; };
template <> struct name<Windows::UI::Xaml::Controls::PivotItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.PivotItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::PivotItemEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.PivotItemEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ProgressBar>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ProgressBar" }; };
template <> struct name<Windows::UI::Xaml::Controls::ProgressRing>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ProgressRing" }; };
template <> struct name<Windows::UI::Xaml::Controls::RadioButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RadioButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::RatingControl>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RatingControl" }; };
template <> struct name<Windows::UI::Xaml::Controls::RatingItemFontInfo>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RatingItemFontInfo" }; };
template <> struct name<Windows::UI::Xaml::Controls::RatingItemImageInfo>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RatingItemImageInfo" }; };
template <> struct name<Windows::UI::Xaml::Controls::RatingItemInfo>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RatingItemInfo" }; };
template <> struct name<Windows::UI::Xaml::Controls::RefreshContainer>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RefreshContainer" }; };
template <> struct name<Windows::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RefreshInteractionRatioChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::RefreshRequestedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RefreshRequestedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::RefreshStateChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RefreshStateChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::RefreshVisualizer>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RefreshVisualizer" }; };
template <> struct name<Windows::UI::Xaml::Controls::RelativePanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RelativePanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::RichEditBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RichEditBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RichEditBoxTextChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::RichTextBlock>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RichTextBlock" }; };
template <> struct name<Windows::UI::Xaml::Controls::RichTextBlockOverflow>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RichTextBlockOverflow" }; };
template <> struct name<Windows::UI::Xaml::Controls::RowDefinition>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RowDefinition" }; };
template <> struct name<Windows::UI::Xaml::Controls::RowDefinitionCollection>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RowDefinitionCollection" }; };
template <> struct name<Windows::UI::Xaml::Controls::ScrollContentPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ScrollContentPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::ScrollViewer>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ScrollViewer" }; };
template <> struct name<Windows::UI::Xaml::Controls::ScrollViewerView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ScrollViewerView" }; };
template <> struct name<Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::SearchBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SearchBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SearchBoxQueryChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SearchBoxQuerySubmittedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SearchBoxResultSuggestionChosenEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SearchBoxSuggestionsRequestedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::SectionsInViewChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SectionsInViewChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::SelectionChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SelectionChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::SemanticZoom>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SemanticZoom" }; };
template <> struct name<Windows::UI::Xaml::Controls::SemanticZoomLocation>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SemanticZoomLocation" }; };
template <> struct name<Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::SettingsFlyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SettingsFlyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::Slider>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Slider" }; };
template <> struct name<Windows::UI::Xaml::Controls::SplitView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SplitView" }; };
template <> struct name<Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SplitViewPaneClosingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::StackPanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.StackPanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::StyleSelector>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.StyleSelector" }; };
template <> struct name<Windows::UI::Xaml::Controls::SwapChainBackgroundPanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SwapChainBackgroundPanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::SwapChainPanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SwapChainPanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::SwipeControl>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SwipeControl" }; };
template <> struct name<Windows::UI::Xaml::Controls::SwipeItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SwipeItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::SwipeItemInvokedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SwipeItemInvokedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::SwipeItems>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SwipeItems" }; };
template <> struct name<Windows::UI::Xaml::Controls::SymbolIcon>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SymbolIcon" }; };
template <> struct name<Windows::UI::Xaml::Controls::SymbolIconSource>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SymbolIconSource" }; };
template <> struct name<Windows::UI::Xaml::Controls::TextBlock>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TextBlock" }; };
template <> struct name<Windows::UI::Xaml::Controls::TextBox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TextBox" }; };
template <> struct name<Windows::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TextBoxTextChangingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::TextChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TextChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TextCompositionChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TextCompositionEndedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TextCompositionStartedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::TextControlPasteEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TextControlPasteEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::TimePickedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TimePickedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::TimePicker>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TimePicker" }; };
template <> struct name<Windows::UI::Xaml::Controls::TimePickerFlyout>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TimePickerFlyout" }; };
template <> struct name<Windows::UI::Xaml::Controls::TimePickerFlyoutPresenter>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TimePickerFlyoutPresenter" }; };
template <> struct name<Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TimePickerValueChangedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ToggleMenuFlyoutItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::ToggleSwitch>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ToggleSwitch" }; };
template <> struct name<Windows::UI::Xaml::Controls::ToolTip>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ToolTip" }; };
template <> struct name<Windows::UI::Xaml::Controls::ToolTipService>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ToolTipService" }; };
template <> struct name<Windows::UI::Xaml::Controls::TreeView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TreeView" }; };
template <> struct name<Windows::UI::Xaml::Controls::TreeViewCollapsedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TreeViewCollapsedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::TreeViewExpandingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TreeViewExpandingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::TreeViewItem>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TreeViewItem" }; };
template <> struct name<Windows::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TreeViewItemInvokedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::TreeViewItemTemplateSettings>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TreeViewItemTemplateSettings" }; };
template <> struct name<Windows::UI::Xaml::Controls::TreeViewList>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TreeViewList" }; };
template <> struct name<Windows::UI::Xaml::Controls::TreeViewNode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TreeViewNode" }; };
template <> struct name<Windows::UI::Xaml::Controls::UIElementCollection>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.UIElementCollection" }; };
template <> struct name<Windows::UI::Xaml::Controls::UserControl>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.UserControl" }; };
template <> struct name<Windows::UI::Xaml::Controls::VariableSizedWrapGrid>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.VariableSizedWrapGrid" }; };
template <> struct name<Windows::UI::Xaml::Controls::Viewbox>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Viewbox" }; };
template <> struct name<Windows::UI::Xaml::Controls::VirtualizingPanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.VirtualizingPanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::VirtualizingStackPanel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.VirtualizingStackPanel" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebView>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebView" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewBrush>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewBrush" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewContentLoadingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewDOMContentLoadedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewDeferredPermissionRequest" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewLongRunningScriptDetectedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewNavigationCompletedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewNavigationFailedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewNavigationFailedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewNewWindowRequestedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewPermissionRequest>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewPermissionRequest" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewPermissionRequestedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewSeparateProcessLostEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewSeparateProcessLostEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewSettings>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewSettings" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewUnsupportedUriSchemeIdentifiedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewUnviewableContentIdentifiedEventArgs" }; };
template <> struct name<Windows::UI::Xaml::Controls::WrapGrid>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WrapGrid" }; };
template <> struct name<Windows::UI::Xaml::Controls::AppBarClosedDisplayMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.AppBarClosedDisplayMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.AutoSuggestionBoxTextChangeReason" }; };
template <> struct name<Windows::UI::Xaml::Controls::CalendarViewDisplayMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CalendarViewDisplayMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::CalendarViewSelectionMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CalendarViewSelectionMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::CandidateWindowAlignment>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CandidateWindowAlignment" }; };
template <> struct name<Windows::UI::Xaml::Controls::CharacterCasing>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CharacterCasing" }; };
template <> struct name<Windows::UI::Xaml::Controls::ClickMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ClickMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::ColorPickerHsvChannel>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ColorPickerHsvChannel" }; };
template <> struct name<Windows::UI::Xaml::Controls::ColorSpectrumComponents>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ColorSpectrumComponents" }; };
template <> struct name<Windows::UI::Xaml::Controls::ColorSpectrumShape>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ColorSpectrumShape" }; };
template <> struct name<Windows::UI::Xaml::Controls::ComboBoxSelectionChangedTrigger>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ComboBoxSelectionChangedTrigger" }; };
template <> struct name<Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CommandBarDefaultLabelPosition" }; };
template <> struct name<Windows::UI::Xaml::Controls::CommandBarDynamicOverflowAction>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CommandBarDynamicOverflowAction" }; };
template <> struct name<Windows::UI::Xaml::Controls::CommandBarLabelPosition>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CommandBarLabelPosition" }; };
template <> struct name<Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CommandBarOverflowButtonVisibility" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContentDialogButton>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContentDialogButton" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContentDialogPlacement>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContentDialogPlacement" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContentDialogResult>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContentDialogResult" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContentLinkChangeKind>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContentLinkChangeKind" }; };
template <> struct name<Windows::UI::Xaml::Controls::DisabledFormattingAccelerators>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.DisabledFormattingAccelerators" }; };
template <> struct name<Windows::UI::Xaml::Controls::HandwritingPanelPlacementAlignment>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.HandwritingPanelPlacementAlignment" }; };
template <> struct name<Windows::UI::Xaml::Controls::IncrementalLoadingTrigger>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.IncrementalLoadingTrigger" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarButtonFlyoutPlacement>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarButtonFlyoutPlacement" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarFlyoutItemKind>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarFlyoutItemKind" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarInitialControls>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarInitialControls" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarMenuKind>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarMenuKind" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarStencilKind>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarStencilKind" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarToggle>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarToggle" }; };
template <> struct name<Windows::UI::Xaml::Controls::InkToolbarTool>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.InkToolbarTool" }; };
template <> struct name<Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ItemsUpdatingScrollMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::LightDismissOverlayMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.LightDismissOverlayMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ListPickerFlyoutSelectionMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::ListViewReorderMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ListViewReorderMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::ListViewSelectionMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ListViewSelectionMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::NavigationViewBackButtonVisible>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.NavigationViewBackButtonVisible" }; };
template <> struct name<Windows::UI::Xaml::Controls::NavigationViewDisplayMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.NavigationViewDisplayMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::Orientation>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Orientation" }; };
template <> struct name<Windows::UI::Xaml::Controls::PanelScrollingDirection>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.PanelScrollingDirection" }; };
template <> struct name<Windows::UI::Xaml::Controls::ParallaxSourceOffsetKind>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ParallaxSourceOffsetKind" }; };
template <> struct name<Windows::UI::Xaml::Controls::PasswordRevealMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.PasswordRevealMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.PivotHeaderFocusVisualPlacement" }; };
template <> struct name<Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.PivotSlideInAnimationGroup" }; };
template <> struct name<Windows::UI::Xaml::Controls::RefreshPullDirection>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RefreshPullDirection" }; };
template <> struct name<Windows::UI::Xaml::Controls::RefreshVisualizerOrientation>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RefreshVisualizerOrientation" }; };
template <> struct name<Windows::UI::Xaml::Controls::RefreshVisualizerState>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RefreshVisualizerState" }; };
template <> struct name<Windows::UI::Xaml::Controls::RequiresPointer>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RequiresPointer" }; };
template <> struct name<Windows::UI::Xaml::Controls::RichEditClipboardFormat>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.RichEditClipboardFormat" }; };
template <> struct name<Windows::UI::Xaml::Controls::ScrollBarVisibility>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ScrollBarVisibility" }; };
template <> struct name<Windows::UI::Xaml::Controls::ScrollIntoViewAlignment>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ScrollIntoViewAlignment" }; };
template <> struct name<Windows::UI::Xaml::Controls::ScrollMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ScrollMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::SelectionMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SelectionMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::SnapPointsType>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SnapPointsType" }; };
template <> struct name<Windows::UI::Xaml::Controls::SplitViewDisplayMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SplitViewDisplayMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::SplitViewPanePlacement>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SplitViewPanePlacement" }; };
template <> struct name<Windows::UI::Xaml::Controls::StretchDirection>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.StretchDirection" }; };
template <> struct name<Windows::UI::Xaml::Controls::SwipeBehaviorOnInvoked>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SwipeBehaviorOnInvoked" }; };
template <> struct name<Windows::UI::Xaml::Controls::SwipeMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SwipeMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::Symbol>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.Symbol" }; };
template <> struct name<Windows::UI::Xaml::Controls::TreeViewSelectionMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TreeViewSelectionMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::VirtualizationMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.VirtualizationMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewExecutionMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewExecutionMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewPermissionState>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewPermissionState" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewPermissionType>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewPermissionType" }; };
template <> struct name<Windows::UI::Xaml::Controls::ZoomMode>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ZoomMode" }; };
template <> struct name<Windows::UI::Xaml::Controls::BackClickEventHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.BackClickEventHandler" }; };
template <> struct name<Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CalendarViewDayItemChangingEventHandler" }; };
template <> struct name<Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.CleanUpVirtualizedItemEventHandler" }; };
template <> struct name<Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ContextMenuOpeningEventHandler" }; };
template <> struct name<Windows::UI::Xaml::Controls::DragItemsStartingEventHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.DragItemsStartingEventHandler" }; };
template <> struct name<Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.HubSectionHeaderClickEventHandler" }; };
template <> struct name<Windows::UI::Xaml::Controls::ItemClickEventHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ItemClickEventHandler" }; };
template <> struct name<Windows::UI::Xaml::Controls::ListViewItemToKeyHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ListViewItemToKeyHandler" }; };
template <> struct name<Windows::UI::Xaml::Controls::ListViewKeyToItemHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.ListViewKeyToItemHandler" }; };
template <> struct name<Windows::UI::Xaml::Controls::NotifyEventHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.NotifyEventHandler" }; };
template <> struct name<Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SectionsInViewChangedEventHandler" }; };
template <> struct name<Windows::UI::Xaml::Controls::SelectionChangedEventHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SelectionChangedEventHandler" }; };
template <> struct name<Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventHandler" }; };
template <> struct name<Windows::UI::Xaml::Controls::TextChangedEventHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TextChangedEventHandler" }; };
template <> struct name<Windows::UI::Xaml::Controls::TextControlPasteEventHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.TextControlPasteEventHandler" }; };
template <> struct name<Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler>{ static constexpr auto & value{ L"Windows.UI.Xaml.Controls.WebViewNavigationFailedEventHandler" }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBar>{ static constexpr GUID value{ 0x7B0FC253,0x86A5,0x4B43,{ 0x98,0x72,0x0B,0x8A,0x62,0x34,0xB7,0x4B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBar2>{ static constexpr GUID value{ 0xC3AB17B3,0x7AD7,0x4676,{ 0x99,0x10,0x7F,0xE3,0xF0,0xE8,0xE9,0x93 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBar3>{ static constexpr GUID value{ 0x982B001F,0x752E,0x4E7A,{ 0xB0,0x55,0x54,0x80,0x2C,0x9E,0xA7,0x49 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBar4>{ static constexpr GUID value{ 0x94EBC8CD,0x0A64,0x4DA3,{ 0xBF,0x43,0xF1,0x31,0x00,0xA4,0x66,0x05 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarButton>{ static constexpr GUID value{ 0x4459A451,0x69E8,0x440C,{ 0x98,0x96,0x4B,0xB4,0xF5,0xF6,0x42,0xD1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarButton3>{ static constexpr GUID value{ 0x0B282150,0x198B,0x4E84,{ 0x8F,0x1C,0x9F,0x6A,0x8B,0xA2,0x67,0xA7 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarButton4>{ static constexpr GUID value{ 0x958FCE6B,0xFD08,0x4414,{ 0x84,0x58,0x9D,0x40,0x86,0x6D,0xC8,0x4E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarButton5>{ static constexpr GUID value{ 0x4096FC7F,0x1AEC,0x4B0F,{ 0xA0,0x31,0xCA,0x8C,0x4E,0x06,0xD2,0xED } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarButtonFactory>{ static constexpr GUID value{ 0xBDBB1BB6,0xCB2E,0x4276,{ 0xAB,0xD6,0x79,0x35,0x13,0x05,0x10,0xE0 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarButtonStatics>{ static constexpr GUID value{ 0x7CCD13E6,0x5301,0x407F,{ 0x87,0x4E,0xDC,0x91,0x60,0xAA,0x07,0xAF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarButtonStatics3>{ static constexpr GUID value{ 0x4D7BF314,0x2EDE,0x4328,{ 0x89,0x06,0x75,0x2A,0x1F,0x27,0xCD,0xFA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarButtonStatics4>{ static constexpr GUID value{ 0x1C0AE26A,0xC755,0x4FE6,{ 0xA3,0xB6,0x0E,0x33,0x94,0xE9,0x52,0xC0 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarFactory>{ static constexpr GUID value{ 0x614708D1,0x8E65,0x43CB,{ 0x92,0xD7,0x8E,0xEE,0x17,0x51,0x5F,0x8D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarOverrides>{ static constexpr GUID value{ 0xF003E4E2,0x7B0F,0x4F4A,{ 0x97,0x0D,0xAE,0x8A,0x0E,0xAA,0x9B,0x70 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarOverrides3>{ static constexpr GUID value{ 0x412BBBC8,0x51D0,0x4B49,{ 0xAB,0x62,0xA3,0xDD,0x6B,0xDC,0xB2,0x98 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarSeparator>{ static constexpr GUID value{ 0x1B0795A1,0x1BC1,0x4D53,{ 0x95,0xEA,0xFB,0x0A,0x2C,0xCC,0xC9,0x05 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarSeparatorFactory>{ static constexpr GUID value{ 0x05DA25CD,0xF407,0x48DE,{ 0x8B,0x50,0xFF,0x87,0xD1,0xE2,0x81,0x8F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarSeparatorStatics>{ static constexpr GUID value{ 0x37F23484,0x5B35,0x4663,{ 0xA7,0x5D,0xF2,0xD5,0x0C,0xB9,0xC6,0x19 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3>{ static constexpr GUID value{ 0x36C753F9,0x7373,0x4E5E,{ 0x9B,0xA4,0xC3,0x62,0x2A,0x00,0x3C,0x4E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarStatics>{ static constexpr GUID value{ 0x79BB7E8D,0xDCA9,0x4B5F,{ 0xA4,0x48,0x37,0xB1,0x32,0x38,0xED,0x76 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarStatics2>{ static constexpr GUID value{ 0x222355E9,0x0384,0x49DE,{ 0x87,0x38,0xDF,0xC9,0xD4,0x09,0xAC,0x5D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarStatics4>{ static constexpr GUID value{ 0xBA02082E,0x1165,0x4451,{ 0x94,0xB3,0xEB,0x3A,0xC7,0x3E,0x41,0x96 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarToggleButton>{ static constexpr GUID value{ 0x2E914438,0xFD53,0x4B8D,{ 0x85,0x8B,0x36,0x44,0x26,0x9F,0x8E,0x4D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarToggleButton3>{ static constexpr GUID value{ 0xEF9A85E5,0x16FF,0x4D72,{ 0xB9,0xE8,0x9B,0x86,0x1E,0xAF,0x84,0xA8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarToggleButton4>{ static constexpr GUID value{ 0xB86B736E,0x3EAF,0x4751,{ 0xA8,0x97,0x00,0x02,0x9F,0x1F,0x6A,0xCA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarToggleButton5>{ static constexpr GUID value{ 0x9DCA3357,0xC130,0x4FB6,{ 0xA1,0xE2,0xD2,0xB3,0x48,0xFE,0x43,0xBE } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory>{ static constexpr GUID value{ 0x028AA7D4,0x8F54,0x45A6,{ 0x9F,0x90,0x13,0x60,0x56,0x56,0xD7,0x93 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics>{ static constexpr GUID value{ 0xFE5AAF96,0x7929,0x4DA1,{ 0xAA,0x67,0xCD,0xDF,0x73,0xA3,0xE4,0xB5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3>{ static constexpr GUID value{ 0xBD4C65BF,0x2EDD,0x44D1,{ 0xAC,0xD5,0x35,0xC0,0x0E,0x2F,0x21,0xBC } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics4>{ static constexpr GUID value{ 0xA478B984,0xE916,0x4137,{ 0xBD,0xBD,0x95,0xBD,0x46,0xFF,0x3C,0xE6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAutoSuggestBox>{ static constexpr GUID value{ 0x103E9B13,0x3400,0x4A16,{ 0x90,0xB9,0x69,0x12,0xBF,0x06,0x97,0x4F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAutoSuggestBox2>{ static constexpr GUID value{ 0xAA87DDDE,0xE679,0x45B2,{ 0xA7,0xC9,0x9A,0xED,0xC3,0x9D,0xB8,0x86 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAutoSuggestBox3>{ static constexpr GUID value{ 0x9BBBFCEF,0xF32D,0x402E,{ 0x90,0x09,0x05,0xBD,0xBA,0xF6,0x33,0x6E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>{ static constexpr GUID value{ 0x78DCB116,0x818A,0x4CB5,{ 0xBC,0xA7,0x38,0x2C,0xE6,0xDD,0xC9,0x0D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics>{ static constexpr GUID value{ 0xEE22C7F4,0xC15D,0x4FF3,{ 0x8A,0x94,0xF5,0x0D,0xFD,0xFB,0xE8,0x9A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2>{ static constexpr GUID value{ 0x1CD297A8,0x8E6A,0x41EF,{ 0xA9,0x5D,0x71,0x57,0xDC,0x0C,0x71,0x06 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3>{ static constexpr GUID value{ 0x2CEAD2DD,0xC4D5,0x4AB2,{ 0x8A,0x13,0xAF,0xDD,0xCF,0x06,0x7C,0x86 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>{ static constexpr GUID value{ 0x396F7254,0x1ED5,0x4BC5,{ 0xA0,0x60,0x65,0x55,0x30,0xBC,0xA6,0xBA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>{ static constexpr GUID value{ 0x3A6F7254,0x1ED5,0x4BC5,{ 0xA0,0x60,0x65,0x55,0x30,0xBC,0xA6,0xBA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics>{ static constexpr GUID value{ 0xFEF7772B,0x9F45,0x44DB,{ 0x8C,0x27,0xBD,0xA3,0xF9,0x33,0xE7,0xB5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IBackClickEventArgs>{ static constexpr GUID value{ 0x2AE6146C,0x477E,0x48C9,{ 0x88,0x30,0x2C,0x46,0x4B,0x7C,0x71,0x04 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IBitmapIcon>{ static constexpr GUID value{ 0xE8FE17CB,0x35F7,0x40F3,{ 0xA1,0x85,0x48,0xB3,0x97,0xB7,0x3E,0x68 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IBitmapIcon2>{ static constexpr GUID value{ 0x0624A20A,0x9DD1,0x4201,{ 0xBB,0x20,0x42,0x86,0x3D,0xA1,0x56,0x58 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IBitmapIconFactory>{ static constexpr GUID value{ 0x46D64B1D,0x7A49,0x4F66,{ 0x97,0x29,0x28,0x48,0xC7,0x88,0xE4,0x02 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IBitmapIconSource>{ static constexpr GUID value{ 0xC8E33DC7,0xD4AE,0x4A87,{ 0x94,0x7F,0xAC,0x4D,0x0B,0xCF,0x5A,0xF4 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IBitmapIconSourceFactory>{ static constexpr GUID value{ 0x6509E5C6,0x44B6,0x4CD1,{ 0x86,0xCD,0xC3,0x18,0x9B,0x12,0xC4,0x3C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IBitmapIconSourceStatics>{ static constexpr GUID value{ 0x5A105887,0xE494,0x4D2B,{ 0x85,0x28,0x39,0x47,0x22,0x96,0x13,0x3F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IBitmapIconStatics>{ static constexpr GUID value{ 0xE072D117,0xE4E7,0x4E0C,{ 0x94,0x70,0x53,0xFF,0x1C,0xE8,0x4F,0x67 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IBitmapIconStatics2>{ static constexpr GUID value{ 0x9745026B,0xB742,0x4A89,{ 0xA5,0xD7,0xA0,0xE5,0xFB,0x80,0x9A,0xF1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IBorder>{ static constexpr GUID value{ 0x797C4539,0x45BD,0x4633,{ 0xA0,0x44,0xBF,0xB0,0x2E,0xF5,0x17,0x0F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IBorderStatics>{ static constexpr GUID value{ 0xB81D1639,0xE911,0x4FD7,{ 0xA4,0xC4,0xB9,0xC7,0xF0,0x08,0xB7,0xFC } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IButton>{ static constexpr GUID value{ 0x280335AE,0x5570,0x46C7,{ 0x8E,0x0B,0x60,0x2B,0xE7,0x12,0x29,0xA2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IButtonFactory>{ static constexpr GUID value{ 0x80A13C19,0x843A,0x451C,{ 0x8C,0xF5,0x44,0xC7,0x01,0xB0,0xE2,0x16 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout>{ static constexpr GUID value{ 0x90143898,0xA16C,0x4759,{ 0xB2,0xF0,0xA5,0xF7,0xE6,0x25,0x16,0x9E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IButtonWithFlyout>{ static constexpr GUID value{ 0x09108F87,0xDF6C,0x4180,{ 0x9B,0x3A,0xE6,0x08,0x45,0x82,0x58,0x11 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICalendarDatePicker>{ static constexpr GUID value{ 0x63C9C16F,0x668C,0x4491,{ 0x94,0x44,0xD4,0x5D,0x8B,0xF4,0xFA,0x29 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICalendarDatePicker2>{ static constexpr GUID value{ 0xB216C159,0x2411,0x4A60,{ 0xA7,0xAA,0x27,0x41,0x6B,0x49,0x48,0x1E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>{ static constexpr GUID value{ 0x60D90DB2,0x5010,0x46BA,{ 0x84,0x2D,0xA4,0x15,0x2C,0x65,0x04,0xE7 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICalendarDatePickerFactory>{ static constexpr GUID value{ 0x107AAD5D,0x38BE,0x42AF,{ 0xA9,0x57,0xFC,0x86,0xA5,0xCF,0x1E,0x9A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICalendarDatePickerStatics>{ static constexpr GUID value{ 0x39A3D291,0xAFAB,0x4B94,{ 0x83,0x95,0xBA,0x7B,0x87,0x4E,0x3C,0x8C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2>{ static constexpr GUID value{ 0x30206B58,0xA2F6,0x4A00,{ 0x8D,0x13,0x33,0xC4,0x6B,0x6B,0x8E,0x0D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICalendarView>{ static constexpr GUID value{ 0xCD639203,0xDFB5,0x4312,{ 0xAC,0x07,0xC0,0x39,0x18,0x24,0x60,0x7B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICalendarViewDayItem>{ static constexpr GUID value{ 0x0FDB2DC5,0x32C1,0x4B8F,{ 0xBE,0xFC,0x01,0x7B,0x55,0x5B,0x32,0xD2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>{ static constexpr GUID value{ 0x73146666,0x1FB1,0x44F9,{ 0xB7,0xAD,0x4D,0xE8,0x59,0xEC,0xC5,0x65 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory>{ static constexpr GUID value{ 0x62112BDC,0x1D2F,0x4E44,{ 0x9B,0xAF,0x16,0x65,0x74,0x95,0x21,0xF2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics>{ static constexpr GUID value{ 0xC3A1DBBF,0xBD88,0x488B,{ 0xB9,0x16,0xD0,0x0D,0x69,0xB1,0x73,0x5A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICalendarViewFactory>{ static constexpr GUID value{ 0x3D8F82E3,0x6CC6,0x423E,{ 0x8D,0x7C,0x70,0x14,0xD9,0x54,0xDD,0xEF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>{ static constexpr GUID value{ 0xEE6069F6,0x13EF,0x4896,{ 0x8F,0xFC,0x53,0x02,0xB1,0xB1,0x75,0x39 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICalendarViewStatics>{ static constexpr GUID value{ 0x7260F1C4,0x2F5D,0x41BD,{ 0x99,0xBB,0x45,0x71,0xB2,0x0B,0x79,0xA8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>{ static constexpr GUID value{ 0x8A946458,0x83B0,0x4C32,{ 0x94,0x50,0x51,0x69,0xA5,0x83,0x8B,0x55 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICanvas>{ static constexpr GUID value{ 0x79190E19,0xCD38,0x4823,{ 0xAE,0xAE,0x64,0xA7,0x71,0x32,0xF5,0x19 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICanvasFactory>{ static constexpr GUID value{ 0x1B328BD1,0xB400,0x4A8E,{ 0x94,0x3B,0x5A,0xD2,0xC4,0x5B,0xE0,0xDF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICanvasStatics>{ static constexpr GUID value{ 0x40CE5C46,0x2962,0x446F,{ 0xAA,0xFB,0x4C,0xDC,0x48,0x69,0x39,0xC9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICaptureElement>{ static constexpr GUID value{ 0x31A5C0E7,0xF307,0x4D4A,{ 0xB6,0x26,0xE9,0x78,0x86,0x3F,0x5B,0x74 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICaptureElementStatics>{ static constexpr GUID value{ 0x1E438DED,0x7DA6,0x409E,{ 0x80,0x6E,0x30,0x5A,0xE4,0xAD,0x9B,0x3F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICheckBox>{ static constexpr GUID value{ 0x2294C894,0x7E2A,0x4B70,{ 0xB0,0x88,0x8F,0x5D,0x81,0x48,0x75,0xBA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICheckBoxFactory>{ static constexpr GUID value{ 0x4FA6AABB,0x3F4B,0x4301,{ 0xBE,0x07,0x11,0x72,0xEA,0x61,0xEE,0xFB } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>{ static constexpr GUID value{ 0x67DB44D6,0xD201,0x4D72,{ 0xBE,0xAC,0x5E,0x8E,0x58,0xAF,0xD8,0xC7 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>{ static constexpr GUID value{ 0x9BB43BCE,0xAE67,0x4A80,{ 0x83,0x63,0xE3,0xFE,0x1B,0x24,0x4F,0x2C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>{ static constexpr GUID value{ 0xEA05CCE9,0x937C,0x4120,{ 0x84,0x06,0x79,0x21,0x85,0x78,0x43,0x38 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IColorChangedEventArgs>{ static constexpr GUID value{ 0x34F7201F,0xAAD0,0x4C3A,{ 0xB9,0x7B,0x2A,0xBF,0x36,0x45,0x55,0x39 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IColorPicker>{ static constexpr GUID value{ 0x6232E371,0x5C64,0x43CB,{ 0x8B,0x35,0x7F,0x82,0xDD,0xE3,0x67,0x40 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IColorPickerFactory>{ static constexpr GUID value{ 0xABAE07FF,0xAECF,0x481D,{ 0x92,0x04,0x20,0x1C,0x38,0x94,0xCD,0x1B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IColorPickerStatics>{ static constexpr GUID value{ 0x67CA9BE7,0x1574,0x451A,{ 0xB6,0xDF,0xFE,0x57,0xD9,0xD0,0x7B,0x46 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IColumnDefinition>{ static constexpr GUID value{ 0xF7F1B229,0xF024,0x467F,{ 0x97,0x0A,0x7E,0x70,0x56,0x15,0xDB,0x7B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IColumnDefinitionStatics>{ static constexpr GUID value{ 0x06B0D728,0xD044,0x40C6,{ 0x94,0x2E,0xAE,0x60,0xEA,0xC7,0x48,0x51 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IComboBox>{ static constexpr GUID value{ 0xB9A8D05C,0xAC97,0x47F1,{ 0xA5,0xF4,0x3F,0x9F,0x4D,0x4B,0x11,0x6C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IComboBox2>{ static constexpr GUID value{ 0xEA0CBF91,0xCA36,0x4FAD,{ 0x97,0x2A,0x2E,0x53,0xA6,0x71,0x8B,0x9F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IComboBox3>{ static constexpr GUID value{ 0x52400A63,0x476C,0x4BB6,{ 0xB7,0x81,0x01,0x93,0x24,0xD3,0xFE,0xD9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IComboBox4>{ static constexpr GUID value{ 0xB7974F49,0xB05C,0x47F9,{ 0x9A,0xAF,0xD6,0xF9,0x18,0x7B,0xE5,0xFD } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IComboBox5>{ static constexpr GUID value{ 0xAB79D646,0x800A,0x4A28,{ 0x96,0x9B,0x34,0xBB,0x8F,0xB4,0x58,0xCF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IComboBoxFactory>{ static constexpr GUID value{ 0xAC0D0444,0xA65B,0x4ABD,{ 0x86,0xDF,0x30,0x16,0x04,0x9E,0xFE,0xDC } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IComboBoxItem>{ static constexpr GUID value{ 0x993FD6D2,0x2AAE,0x4F3B,{ 0xB4,0x4D,0x56,0x48,0xF4,0xD0,0x61,0x14 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IComboBoxItemFactory>{ static constexpr GUID value{ 0x8FFFE867,0xD94C,0x4E87,{ 0x8F,0xC4,0x6E,0xBC,0xD6,0x3C,0x5A,0xC2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IComboBoxOverrides>{ static constexpr GUID value{ 0x4F016541,0xBCFE,0x4A22,{ 0x89,0x32,0xC9,0x14,0x98,0x1C,0x22,0x40 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IComboBoxStatics>{ static constexpr GUID value{ 0x3E14C9B1,0xD15B,0x4DC9,{ 0x81,0x10,0xCF,0x3A,0x11,0x7B,0x96,0xE7 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IComboBoxStatics2>{ static constexpr GUID value{ 0x93988A11,0x402C,0x4B13,{ 0x96,0xD1,0x72,0x20,0x26,0x6B,0x92,0x20 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IComboBoxStatics3>{ static constexpr GUID value{ 0x949E140F,0xCE7F,0x4E41,{ 0xBD,0xC5,0xD1,0xD3,0x38,0x8A,0xD0,0xA6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IComboBoxStatics4>{ static constexpr GUID value{ 0xD9F58358,0xF7B0,0x46CE,{ 0x80,0x61,0xAD,0x83,0xEC,0x2F,0x2D,0xD4 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IComboBoxStatics5>{ static constexpr GUID value{ 0xB802CEF1,0xA264,0x444A,{ 0x9A,0x61,0xAA,0x88,0x67,0xB7,0xA6,0x3C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICommandBar>{ static constexpr GUID value{ 0x98BC4280,0x4A3D,0x4CEE,{ 0xBD,0x07,0x22,0xCE,0x94,0xC5,0xAF,0x76 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICommandBar2>{ static constexpr GUID value{ 0x57662F58,0x5B32,0x475D,{ 0xBE,0x64,0x4C,0xA3,0x6E,0x7B,0x97,0xD4 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICommandBar3>{ static constexpr GUID value{ 0x40EBBC23,0x2A79,0x48B3,{ 0x9A,0x67,0x64,0x9B,0x85,0x2D,0x85,0x89 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICommandBarElement>{ static constexpr GUID value{ 0x67918E1B,0xF2D5,0x44D1,{ 0x8B,0x84,0x92,0xB8,0x7F,0x80,0xA3,0x50 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICommandBarElement2>{ static constexpr GUID value{ 0xA9BF1236,0x4402,0x4688,{ 0xB9,0x87,0x9D,0x2B,0x9B,0x7B,0xF2,0xBD } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICommandBarFactory>{ static constexpr GUID value{ 0x67BDEB44,0x20E1,0x4177,{ 0xAD,0x44,0xF6,0x17,0xB3,0x74,0xE8,0xE8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter>{ static constexpr GUID value{ 0x6E7A9427,0x58EF,0x4366,{ 0xA0,0x17,0x18,0xC1,0x93,0xD5,0x6B,0x14 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory>{ static constexpr GUID value{ 0x8323F774,0x5AAA,0x4049,{ 0xB7,0x8F,0x21,0x8C,0x6A,0x19,0xC3,0x7E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICommandBarStatics>{ static constexpr GUID value{ 0x5BD981EA,0xE278,0x409C,{ 0xB5,0x22,0xF9,0x46,0xCA,0x25,0x3B,0x44 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICommandBarStatics2>{ static constexpr GUID value{ 0x3D9EC8E3,0x51A9,0x4E34,{ 0x95,0x6C,0x70,0x81,0xD0,0x6F,0x26,0xF8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ICommandBarStatics3>{ static constexpr GUID value{ 0xB45A24A4,0x8AF1,0x4843,{ 0xB3,0x19,0xE0,0x3F,0xC4,0x5A,0xB7,0x26 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>{ static constexpr GUID value{ 0x07DEEAA7,0x018F,0x4DDA,{ 0xB3,0x99,0xFD,0x4E,0x13,0xA3,0x1B,0xEA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentControl>{ static constexpr GUID value{ 0xA26DD1DC,0xCD44,0x435C,{ 0xBE,0x94,0x01,0xD6,0x24,0x1C,0x23,0x1C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentControl2>{ static constexpr GUID value{ 0x652C208C,0x8CCF,0x4399,{ 0xBD,0x3E,0x5A,0x01,0x5A,0xA1,0xBC,0x03 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentControlFactory>{ static constexpr GUID value{ 0xAB017B19,0x196E,0x4ED5,{ 0xA2,0x7F,0x55,0xC5,0x8F,0xB1,0x67,0x3F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentControlOverrides>{ static constexpr GUID value{ 0x5F4C0B10,0xE38E,0x4B5D,{ 0xBE,0x1A,0x5E,0xD0,0x42,0x46,0xA6,0x35 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentControlStatics>{ static constexpr GUID value{ 0x116982A4,0x5CF5,0x4C05,{ 0xA5,0x3F,0x15,0xE4,0x87,0x6C,0x85,0xEC } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentDialog>{ static constexpr GUID value{ 0x38DC4404,0xD24E,0x40D8,{ 0x94,0x15,0x34,0x94,0x64,0xC1,0xAF,0xDC } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentDialog2>{ static constexpr GUID value{ 0x2F93EB45,0xEE43,0x4303,{ 0x9B,0x38,0x3F,0xE1,0xA1,0x11,0xEC,0xBF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentDialog3>{ static constexpr GUID value{ 0x9D9A089E,0xF954,0x4EDE,{ 0xB0,0x7F,0x6B,0x06,0x9A,0x9C,0x01,0x80 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral>{ static constexpr GUID value{ 0xBD0D3637,0x19CE,0x4946,{ 0x8E,0x77,0xBD,0x03,0xFE,0x8E,0xBE,0x03 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>{ static constexpr GUID value{ 0x5F34C205,0x8AFA,0x4CF2,{ 0x8C,0xA0,0x26,0x4D,0x73,0xBE,0xD6,0x3D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs>{ static constexpr GUID value{ 0x905522EF,0x2CBA,0x4AF8,{ 0xB6,0x66,0xCC,0x36,0xC2,0x27,0x32,0xFB } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentDialogClosingDeferral>{ static constexpr GUID value{ 0x215D4D11,0x7E30,0x4CB9,{ 0xA7,0x10,0x5A,0x4F,0x9C,0xCA,0x8B,0x42 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs>{ static constexpr GUID value{ 0xDB3C1C34,0x3BBF,0x47D4,{ 0xBE,0x4F,0xC9,0xEC,0x11,0x59,0x18,0xB9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentDialogFactory>{ static constexpr GUID value{ 0x05557178,0x9D8E,0x4315,{ 0xB3,0x7D,0x68,0x0C,0x14,0x01,0x2C,0x35 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs>{ static constexpr GUID value{ 0x0966B315,0x5F59,0x4999,{ 0x9E,0x3E,0x37,0x4C,0x0F,0x17,0x4B,0x04 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentDialogStatics>{ static constexpr GUID value{ 0x23AB47A6,0x508A,0x4F33,{ 0xB7,0x86,0xF2,0xFA,0x96,0xD8,0x69,0xAF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentDialogStatics2>{ static constexpr GUID value{ 0x329825B2,0x8FB0,0x4125,{ 0xBB,0x07,0xE7,0x9A,0x5A,0x03,0x81,0x9F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentLinkChangedEventArgs>{ static constexpr GUID value{ 0x64F3F1DE,0x89FB,0x4B77,{ 0x8B,0x9B,0x19,0x1B,0x6D,0x19,0x29,0x0A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentPresenter>{ static constexpr GUID value{ 0x79FDE5B4,0xCD37,0x491C,{ 0x88,0x45,0xDA,0xF4,0x72,0xDE,0xFF,0xF6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentPresenter2>{ static constexpr GUID value{ 0x5138E958,0x335D,0x4210,{ 0x8B,0xBB,0x0A,0xA2,0xB4,0xB5,0xC2,0x9E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentPresenter3>{ static constexpr GUID value{ 0xB038876A,0x9C4D,0x4402,{ 0xAC,0x56,0xA2,0x23,0x48,0x7D,0xC6,0xC8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentPresenter4>{ static constexpr GUID value{ 0x997B1B17,0x3BF8,0x432B,{ 0x8F,0xD9,0x68,0xC7,0xBA,0xB2,0x1F,0x9D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentPresenterFactory>{ static constexpr GUID value{ 0x3339D4F7,0x4815,0x44C4,{ 0x9F,0x76,0x68,0xC8,0x38,0x80,0xEF,0x10 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentPresenterOverrides>{ static constexpr GUID value{ 0xA76339ED,0x32FF,0x438B,{ 0xAA,0xD5,0x1D,0x68,0xFA,0xE9,0x34,0x26 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentPresenterStatics>{ static constexpr GUID value{ 0x18C2893B,0xDA2E,0x4426,{ 0xB8,0x5A,0x2C,0x7E,0x21,0x71,0xBE,0xDF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentPresenterStatics2>{ static constexpr GUID value{ 0xC7D89DD9,0x06E6,0x46BE,{ 0xA8,0xA0,0x9C,0x11,0x7D,0x30,0x24,0xA3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentPresenterStatics3>{ static constexpr GUID value{ 0xCBE6CF5B,0x38B1,0x4D5D,{ 0xB0,0x98,0xBC,0x94,0xB3,0x5C,0x8D,0xDF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContentPresenterStatics4>{ static constexpr GUID value{ 0xFF8BE292,0xAF28,0x47EB,{ 0xA5,0xC3,0xDC,0x44,0xCE,0xD4,0x0F,0xD2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IContextMenuEventArgs>{ static constexpr GUID value{ 0x1F7DF263,0xC14B,0x4528,{ 0xB6,0xF0,0x63,0x79,0x99,0xD8,0x3C,0xC6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IControl>{ static constexpr GUID value{ 0xA8912263,0x2951,0x4F58,{ 0xA9,0xC5,0x5A,0x13,0x4E,0xAA,0x7F,0x07 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IControl2>{ static constexpr GUID value{ 0x43E0FE10,0x14EC,0x427E,{ 0x8C,0x57,0xDE,0xE6,0x0D,0xF6,0x0A,0xA8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IControl3>{ static constexpr GUID value{ 0x077B29E4,0xDADE,0x4F55,{ 0x9B,0x96,0x09,0xE2,0x1B,0x28,0xEB,0x1C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IControl4>{ static constexpr GUID value{ 0x0E18AEEE,0x5F2E,0x44EA,{ 0x85,0x13,0xD3,0x87,0x5C,0x0A,0x75,0x13 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IControl5>{ static constexpr GUID value{ 0x5EBB51D5,0x9E58,0x49B7,{ 0xBC,0x2D,0x01,0x55,0xFF,0x11,0x86,0x64 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IControlFactory>{ static constexpr GUID value{ 0xB12B1D5A,0x6419,0x4E16,{ 0xB2,0x12,0xA4,0x53,0x36,0xB7,0x57,0x78 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IControlOverrides>{ static constexpr GUID value{ 0xA09691DF,0x9824,0x41FE,{ 0xB5,0x30,0xB0,0xD8,0x99,0x0E,0x64,0xC1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IControlOverrides6>{ static constexpr GUID value{ 0xE194C96A,0xD8CC,0x4339,{ 0xA0,0xE1,0x2E,0x9C,0x42,0x08,0x79,0xEC } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IControlProtected>{ static constexpr GUID value{ 0x1791587A,0x2A7C,0x4981,{ 0xA2,0xD8,0xAB,0x99,0xFF,0xFC,0x65,0xB9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IControlStatics>{ static constexpr GUID value{ 0x473B305B,0x877D,0x4C35,{ 0x8F,0xCA,0x46,0xA0,0x5F,0x96,0x60,0x7A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IControlStatics2>{ static constexpr GUID value{ 0x32233E36,0xAB74,0x4A25,{ 0xA5,0x56,0x45,0x29,0x31,0x35,0xB2,0xC5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IControlStatics3>{ static constexpr GUID value{ 0xAAD15E61,0xE4B9,0x4D72,{ 0xB6,0x53,0x93,0x41,0x49,0xAA,0x50,0x03 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IControlStatics4>{ static constexpr GUID value{ 0x59FDA728,0xC05A,0x4EC2,{ 0x8A,0x4B,0x06,0xAD,0x69,0xB6,0x6E,0x15 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IControlStatics5>{ static constexpr GUID value{ 0xF635B5A3,0xEF8E,0x404F,{ 0x87,0x7B,0x55,0x80,0x47,0x37,0x10,0xA6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IControlTemplate>{ static constexpr GUID value{ 0xEFD2418E,0x41E0,0x48BB,{ 0x8B,0x82,0x91,0xED,0xA1,0xBA,0x3F,0xE2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDataTemplateSelector>{ static constexpr GUID value{ 0xA907D496,0x46A0,0x4CD7,{ 0x8D,0xBE,0xF9,0xA5,0x81,0xDF,0x60,0xB1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDataTemplateSelector2>{ static constexpr GUID value{ 0x3792BC47,0x8C4B,0x4257,{ 0xA5,0xAE,0xCC,0x3F,0x8E,0xD7,0x86,0xEB } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory>{ static constexpr GUID value{ 0x511BAAD0,0x210A,0x457D,{ 0x95,0x21,0x43,0x3D,0x2B,0x11,0xB7,0xD2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides>{ static constexpr GUID value{ 0x2D162925,0x5966,0x4BFA,{ 0x86,0x38,0x4D,0x34,0x56,0x89,0xF6,0xCF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2>{ static constexpr GUID value{ 0x6C3FB5FC,0x8E84,0x4C91,{ 0xAC,0x15,0x04,0xA1,0xD8,0x85,0x50,0x0F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDatePickedEventArgs>{ static constexpr GUID value{ 0xA1527B12,0x59C1,0x4521,{ 0xB2,0x8C,0xB1,0x76,0x67,0x5E,0x7C,0x5A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDatePicker>{ static constexpr GUID value{ 0x06DA3946,0x08B8,0x4103,{ 0x8B,0x8A,0x09,0x3E,0xFD,0x6A,0x76,0x57 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDatePicker2>{ static constexpr GUID value{ 0xBB28B475,0x2C1F,0x4340,{ 0x9E,0x30,0x94,0x8F,0x99,0xC9,0xE5,0x7A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDatePickerFactory>{ static constexpr GUID value{ 0xEEC3CA84,0x9896,0x4A7D,{ 0xBB,0x35,0x6F,0xB2,0x1E,0xAE,0xCA,0x11 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDatePickerFlyout>{ static constexpr GUID value{ 0xFBF33B1A,0xA3A4,0x4DF8,{ 0x92,0x28,0x23,0xA5,0xAC,0x27,0xDF,0x4E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDatePickerFlyout2>{ static constexpr GUID value{ 0xCFB18DBB,0x9931,0x4119,{ 0x8B,0xDA,0x54,0xA8,0x6F,0xDF,0xAC,0x84 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDatePickerFlyoutItem>{ static constexpr GUID value{ 0x9D9BC289,0x00D2,0x4AAC,{ 0x9C,0x85,0xD7,0x4F,0x06,0x36,0x78,0x87 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>{ static constexpr GUID value{ 0xAA9C91DA,0x07F6,0x4CDF,{ 0x89,0xB4,0xDD,0xA3,0xBD,0xB0,0xEA,0x6B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter>{ static constexpr GUID value{ 0x7C62F70E,0x2DDC,0x4381,{ 0x83,0x2F,0x54,0xCB,0xDF,0xAA,0x84,0x9A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics>{ static constexpr GUID value{ 0xCD570377,0x5845,0x4C12,{ 0x8C,0x10,0x59,0x2D,0x9F,0xCC,0x7C,0xD9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2>{ static constexpr GUID value{ 0xAFD3E569,0x81E6,0x4B54,{ 0x84,0xA9,0x68,0x07,0x9B,0x73,0xE3,0x4E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDatePickerStatics>{ static constexpr GUID value{ 0x182E7C69,0x2116,0x4C67,{ 0xB5,0x13,0x71,0x33,0x64,0x83,0x1D,0x79 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDatePickerStatics2>{ static constexpr GUID value{ 0xF1076DF6,0xFBA6,0x4550,{ 0x8B,0x88,0xA6,0x42,0x08,0x47,0xF6,0x0D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>{ static constexpr GUID value{ 0x1AE661B2,0xB1B4,0x4273,{ 0x96,0xE0,0x19,0xDA,0xFF,0x18,0x74,0x46 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs>{ static constexpr GUID value{ 0xAF05F22F,0x9E78,0x4B21,{ 0x9A,0x8E,0x41,0xC2,0xD1,0x36,0x7A,0x2A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>{ static constexpr GUID value{ 0x71CF215C,0xDAED,0x4783,{ 0xAA,0x11,0xDC,0x57,0x4D,0x27,0x13,0xE9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>{ static constexpr GUID value{ 0xC93C736F,0x6F6E,0x4E43,{ 0x90,0xD9,0x9B,0x46,0xA0,0xD8,0x8B,0x9F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFlipView>{ static constexpr GUID value{ 0xA1582F68,0x3D7D,0x4D3B,{ 0xB7,0x1D,0x48,0x8E,0xED,0x1E,0x34,0x93 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFlipView2>{ static constexpr GUID value{ 0xC4FEA4FD,0x7AF3,0x4952,{ 0x9F,0xD9,0x9E,0x09,0x87,0xFC,0x4F,0x29 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFlipViewFactory>{ static constexpr GUID value{ 0xF1DEA9BE,0x9AE8,0x4D4B,{ 0xAB,0x43,0x16,0xD3,0x1E,0x05,0xF4,0xF3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFlipViewItem>{ static constexpr GUID value{ 0x56196565,0xCE2B,0x4BDA,{ 0xA3,0x6B,0x82,0xA2,0xB8,0xB0,0xD4,0xC0 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFlipViewItemFactory>{ static constexpr GUID value{ 0xF21D91FE,0x22A0,0x4412,{ 0xA8,0x53,0x9D,0x6A,0x6E,0x8F,0x2A,0xAF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFlipViewStatics2>{ static constexpr GUID value{ 0x70E3D93F,0x4308,0x4BA2,{ 0xBB,0xCE,0xE2,0xCB,0x0E,0xD3,0x44,0x76 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFlyout>{ static constexpr GUID value{ 0x6584EBDF,0xCBC7,0x4E19,{ 0x84,0x3A,0xA1,0x4F,0x24,0xA7,0x93,0xEA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFlyoutFactory>{ static constexpr GUID value{ 0x4BED4933,0x008E,0x4B03,{ 0xA3,0x85,0x79,0xFE,0x52,0x66,0xDD,0xBA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFlyoutPresenter>{ static constexpr GUID value{ 0x827D5B79,0xE37B,0x46A5,{ 0x8D,0x44,0x63,0xA1,0x1A,0x58,0x0E,0x83 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFlyoutPresenterFactory>{ static constexpr GUID value{ 0xEE4D668F,0xDA76,0x469A,{ 0xAC,0xD7,0x30,0x60,0xE6,0x13,0xAD,0xE7 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFlyoutStatics>{ static constexpr GUID value{ 0x61364E0B,0xDB75,0x47E1,{ 0xB2,0xC3,0x5B,0x90,0x1C,0x3D,0x74,0xB6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs>{ static constexpr GUID value{ 0x5E14280F,0x953E,0x4CF8,{ 0xB9,0xEA,0xC5,0x30,0xA1,0xCE,0x02,0xAD } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFocusEngagedEventArgs>{ static constexpr GUID value{ 0xA69FC352,0xDA66,0x404C,{ 0x82,0x3F,0x53,0x58,0x59,0x4E,0x70,0xBB } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFocusEngagedEventArgs2>{ static constexpr GUID value{ 0x4A59E0F4,0x87C0,0x4CCD,{ 0x93,0xC4,0xA3,0xA0,0x1C,0xE3,0x92,0x65 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFontIcon>{ static constexpr GUID value{ 0xD4D61391,0x39AC,0x4950,{ 0x91,0x66,0x36,0x06,0xC2,0x64,0x41,0x8B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFontIcon2>{ static constexpr GUID value{ 0xF6EBD84D,0x37E8,0x46EE,{ 0xA5,0x74,0x41,0xAD,0x55,0x04,0x82,0xE0 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFontIcon3>{ static constexpr GUID value{ 0x6155D919,0x1C6C,0x4950,{ 0x87,0x94,0x23,0x1E,0xF0,0x91,0x4D,0x94 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFontIconFactory>{ static constexpr GUID value{ 0x1C781B6B,0x37BF,0x4DDC,{ 0xA1,0xA8,0x1B,0x77,0xDB,0x3C,0xF0,0xEA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFontIconSource>{ static constexpr GUID value{ 0x2211AC9A,0x74E3,0x43ED,{ 0xB6,0x1C,0x21,0xAF,0xC7,0xDF,0x4D,0x10 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFontIconSourceFactory>{ static constexpr GUID value{ 0x8BDCF6BD,0xFC06,0x42B8,{ 0xB3,0x0B,0x75,0x05,0x08,0x2A,0xC3,0x8F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFontIconSourceStatics>{ static constexpr GUID value{ 0x8C0E422F,0x8269,0x43B1,{ 0xB9,0x5A,0xEF,0x07,0x0E,0x86,0x77,0x0D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFontIconStatics>{ static constexpr GUID value{ 0xB3BE7BF6,0x1467,0x4086,{ 0xBB,0xCB,0x4E,0x21,0xD9,0x7A,0x7B,0x4D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFontIconStatics2>{ static constexpr GUID value{ 0xE6080672,0x08F8,0x43D3,{ 0x87,0x90,0x46,0x04,0x29,0x0C,0xBE,0xBD } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFontIconStatics3>{ static constexpr GUID value{ 0xA4528B17,0xB084,0x4BD5,{ 0xAA,0xB4,0xFE,0xAE,0x9D,0x3B,0x5D,0x26 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFrame>{ static constexpr GUID value{ 0x68EA500B,0x3FE9,0x4735,{ 0xB6,0xA0,0xE7,0x60,0x19,0x33,0xB0,0x89 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFrame2>{ static constexpr GUID value{ 0x3F367F87,0x9F5A,0x4B04,{ 0xB8,0x18,0xB5,0x54,0xC0,0x69,0x59,0x7A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFrame3>{ static constexpr GUID value{ 0x648A2B4D,0x53CA,0x4B5A,{ 0xAA,0x8E,0x3C,0xC7,0x44,0x0F,0x4A,0x67 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFrame4>{ static constexpr GUID value{ 0x9B17C21A,0xBD2B,0x4A00,{ 0x99,0xEB,0x94,0x6B,0xE9,0x61,0x80,0x84 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFrameFactory>{ static constexpr GUID value{ 0x02EE93D4,0x448E,0x469E,{ 0x97,0x99,0x0A,0x8A,0x1F,0x70,0xF1,0x71 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFrameStatics>{ static constexpr GUID value{ 0xD5ACF0E9,0xD967,0x471B,{ 0x84,0x59,0xC8,0xAF,0x43,0x41,0x51,0x1B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IFrameStatics2>{ static constexpr GUID value{ 0xE4B5CDFE,0x42F0,0x4462,{ 0xA1,0xC1,0x5D,0x25,0x9D,0xD8,0x2A,0x03 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGrid>{ static constexpr GUID value{ 0xFD104460,0x2E15,0x4BA3,{ 0x8B,0x8F,0xFA,0x69,0x3A,0x41,0x61,0xE9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGrid2>{ static constexpr GUID value{ 0xF76EFA41,0x380E,0x45DB,{ 0xBE,0x87,0x9E,0x13,0x26,0xBA,0x4B,0x57 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGrid3>{ static constexpr GUID value{ 0x12DFC5FC,0x2342,0x4DD2,{ 0x9E,0x7D,0x20,0x90,0xA1,0x71,0xD1,0xEF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGridFactory>{ static constexpr GUID value{ 0xAE814041,0xC531,0x43B4,{ 0xBF,0x99,0x12,0xF5,0x06,0xF7,0xB0,0x1C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGridStatics>{ static constexpr GUID value{ 0x64FE2E9F,0xF951,0x42B6,{ 0xA9,0xCE,0xBB,0x17,0x9A,0xF1,0x15,0x95 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGridStatics2>{ static constexpr GUID value{ 0x2D666658,0x58B6,0x4A1B,{ 0x84,0x1B,0x87,0x5B,0xA9,0x3B,0x5D,0x6A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGridStatics3>{ static constexpr GUID value{ 0xC3FBA437,0x5A0C,0x407A,{ 0x96,0x21,0x79,0x54,0x53,0x86,0xD8,0x11 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGridView>{ static constexpr GUID value{ 0x026AE934,0xB67E,0x4D80,{ 0x8F,0x72,0x8A,0xA6,0x4B,0x4D,0x82,0x7B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGridViewFactory>{ static constexpr GUID value{ 0xD9BCCA89,0x09F9,0x4C6E,{ 0xA8,0x3E,0xF1,0x99,0x14,0x6F,0x0E,0x7D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGridViewHeaderItem>{ static constexpr GUID value{ 0x72D75D7E,0x5DC3,0x4FFC,{ 0x9B,0x1C,0x93,0x9B,0x5C,0x37,0x16,0x1C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory>{ static constexpr GUID value{ 0x36E0C96E,0xB56A,0x4B3B,{ 0x8B,0xAC,0x7A,0xEF,0x5E,0x6F,0x99,0x45 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGridViewItem>{ static constexpr GUID value{ 0x7D9901F1,0xE7C1,0x4E83,{ 0xB4,0x70,0xC9,0xD6,0xD7,0xBD,0xA9,0xF5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGridViewItemFactory>{ static constexpr GUID value{ 0x229B00AF,0x3FA6,0x43E9,{ 0x97,0x9D,0x07,0xEA,0x0D,0x62,0x80,0xDC } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGroupItem>{ static constexpr GUID value{ 0x4AE8D5D1,0x7228,0x4A16,{ 0xA6,0x1F,0x88,0xC0,0xE8,0xF4,0x5C,0x76 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGroupItemFactory>{ static constexpr GUID value{ 0xD9A1D53E,0xB1E0,0x4319,{ 0x98,0x08,0x7A,0x9E,0x88,0x7E,0x13,0xB0 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGroupStyle>{ static constexpr GUID value{ 0x71CA300B,0xB89E,0x4184,{ 0xB0,0xDF,0xA9,0xE9,0x54,0x47,0xDE,0x8D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGroupStyle2>{ static constexpr GUID value{ 0x69F90679,0x3A11,0x4FE7,{ 0xB4,0xDF,0x2A,0x01,0x39,0xD4,0x01,0x8B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGroupStyleFactory>{ static constexpr GUID value{ 0x56FF664F,0xE2D7,0x4F49,{ 0x80,0x3D,0xC7,0x27,0xCD,0xF9,0x37,0x2D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGroupStyleSelector>{ static constexpr GUID value{ 0x6DDA119E,0x9A74,0x478F,{ 0xA3,0x39,0x5B,0xB5,0x2D,0xE6,0xC5,0x1E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory>{ static constexpr GUID value{ 0xBF570D33,0xB2F6,0x481F,{ 0xA4,0x50,0xC8,0x0C,0x29,0x1F,0xB2,0x2D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides>{ static constexpr GUID value{ 0xF691CAB2,0x77AD,0x4D3D,{ 0xA5,0x1C,0x8E,0xF9,0xC3,0x83,0x64,0x56 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IHandwritingPanelClosedEventArgs>{ static constexpr GUID value{ 0x4FB91C73,0x192D,0x4DD2,{ 0xA1,0xA2,0x80,0xED,0x01,0x12,0x58,0x76 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IHandwritingPanelOpenedEventArgs>{ static constexpr GUID value{ 0xFC15B16D,0x9F15,0x47B0,{ 0xB9,0x7A,0x94,0xA6,0x8C,0xC6,0x13,0x45 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IHandwritingView>{ static constexpr GUID value{ 0xC44204A7,0x31E0,0x44BC,{ 0xA3,0x8B,0x4B,0xEE,0x64,0xEC,0xD9,0x9F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IHandwritingViewFactory>{ static constexpr GUID value{ 0xE00C873F,0x0012,0x475C,{ 0x89,0x0C,0x97,0xAE,0x30,0x86,0x42,0xDE } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IHandwritingViewStatics>{ static constexpr GUID value{ 0xBB7CEED0,0xCC5F,0x4004,{ 0xB8,0xC8,0x14,0x2E,0x19,0x5F,0x06,0x18 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IHub>{ static constexpr GUID value{ 0xAE692E82,0x7314,0x4F51,{ 0xAB,0x11,0x2A,0xF1,0xED,0x4A,0x19,0xF8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IHubFactory>{ static constexpr GUID value{ 0xDCA6B2BA,0xC6F5,0x4961,{ 0x99,0x53,0xC5,0x18,0x73,0xDB,0x54,0x24 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IHubSection>{ static constexpr GUID value{ 0xA4E66CB7,0x7FDD,0x4FE0,{ 0xAB,0x49,0xC2,0x46,0x63,0x9D,0xCC,0xF9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IHubSectionFactory>{ static constexpr GUID value{ 0xFFF55FA2,0xECE4,0x4BBA,{ 0xAA,0x3B,0x98,0x04,0xAE,0xF4,0x78,0x83 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>{ static constexpr GUID value{ 0xE1C5EF04,0x1EDD,0x4112,{ 0xAE,0xEB,0x99,0x6C,0x96,0x40,0x06,0x98 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IHubSectionStatics>{ static constexpr GUID value{ 0x12D2D85A,0xEA27,0x42D1,{ 0x99,0x8B,0x61,0xE5,0x2A,0xED,0x84,0x2B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IHubStatics>{ static constexpr GUID value{ 0x0E6FA034,0xAD3C,0x4F32,{ 0xB7,0x01,0xE2,0x4F,0xAB,0x56,0x20,0x28 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IHyperlinkButton>{ static constexpr GUID value{ 0xCCEBACA3,0x3B5C,0x4F4C,{ 0x9B,0xFD,0x86,0x88,0x7B,0xC7,0x97,0x72 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IHyperlinkButtonFactory>{ static constexpr GUID value{ 0x43521BAD,0x4E97,0x4DA9,{ 0xA6,0x4D,0x93,0x5D,0xFD,0x8C,0xED,0xF2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IHyperlinkButtonStatics>{ static constexpr GUID value{ 0xFBAEB5C7,0xCDB7,0x4263,{ 0xB7,0xD6,0x3C,0x0D,0x29,0x04,0xED,0x98 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IIconElement>{ static constexpr GUID value{ 0x9AF0803B,0xD04C,0x467A,{ 0xBB,0xD5,0x9B,0x81,0xF0,0x2D,0x9A,0x56 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IIconElementFactory>{ static constexpr GUID value{ 0xCF37A562,0x0424,0x43C7,{ 0x8B,0xEA,0x72,0x0F,0xBA,0x97,0x3E,0xF1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IIconElementStatics>{ static constexpr GUID value{ 0xBE19A623,0x77CF,0x472F,{ 0x82,0xEA,0x04,0x78,0x01,0xD1,0x20,0x12 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IIconSource>{ static constexpr GUID value{ 0x92EC8D55,0x45EB,0x47A4,{ 0x86,0x3C,0x91,0xB2,0x24,0x04,0x4F,0x9B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IIconSourceFactory>{ static constexpr GUID value{ 0x4D117CF1,0x1FD6,0x49D7,{ 0xB4,0x83,0x02,0xEC,0x3D,0xE9,0x97,0xD6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IIconSourceStatics>{ static constexpr GUID value{ 0x1D389DBE,0x1CD3,0x4F4F,{ 0x83,0xB0,0x55,0xDC,0x63,0x87,0x68,0x5B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IImage>{ static constexpr GUID value{ 0x495B7402,0x9AF3,0x4E50,{ 0xAA,0x90,0x03,0x38,0x8F,0x30,0x86,0xD2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IImage2>{ static constexpr GUID value{ 0xF445119E,0x881F,0x48BB,{ 0x87,0x3A,0x64,0x41,0x7C,0xA4,0xF0,0x02 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IImage3>{ static constexpr GUID value{ 0x06EBE792,0x47C2,0x4D92,{ 0xA4,0x88,0x8C,0xD6,0x85,0xD0,0x6A,0xCA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IImageStatics>{ static constexpr GUID value{ 0x89903772,0xC336,0x43D1,{ 0x9D,0x51,0xC3,0xBB,0xD5,0xD5,0xD6,0x91 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkCanvas>{ static constexpr GUID value{ 0x29443C28,0x8E48,0x4FC8,{ 0xA4,0x73,0x35,0xB0,0xBA,0x12,0xAC,0xEA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkCanvasFactory>{ static constexpr GUID value{ 0x924AC2DE,0xAB04,0x48F0,{ 0x96,0x53,0xE0,0xF2,0xDA,0x4D,0xBF,0x1A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbar>{ static constexpr GUID value{ 0x3DDD0CCA,0x51F0,0x486F,{ 0xA0,0x3E,0x4E,0xE1,0x3D,0xC1,0x2B,0xCB } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbar2>{ static constexpr GUID value{ 0x86F0C111,0xB484,0x454A,{ 0xAE,0x78,0x1D,0x25,0xA3,0x3D,0x1C,0x67 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton>{ static constexpr GUID value{ 0x158329F8,0x1E99,0x3ACC,{ 0x91,0x0F,0x9D,0xA2,0xD8,0x72,0xAE,0x12 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory>{ static constexpr GUID value{ 0x2F0BD3E4,0xD754,0x4255,{ 0x8E,0xC4,0x00,0xCD,0x10,0x12,0x96,0xAB } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarCustomPen>{ static constexpr GUID value{ 0x4082207B,0x2F3D,0x4E6A,{ 0x8C,0x27,0xFE,0x61,0xEF,0x7E,0x70,0xEB } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton>{ static constexpr GUID value{ 0x46024401,0x2B2A,0x4F3C,{ 0xA5,0x3C,0x1A,0x04,0x5A,0x40,0x8E,0xFA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory>{ static constexpr GUID value{ 0x0F2EF0BA,0xC8B9,0x4C36,{ 0x89,0x87,0x94,0xD3,0xDA,0xFE,0xDE,0x18 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics>{ static constexpr GUID value{ 0x373C25F4,0xE555,0x4E85,{ 0xA8,0x0D,0xDA,0x6B,0x84,0x33,0xDB,0xDE } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory>{ static constexpr GUID value{ 0xD214D636,0xF1AA,0x4F48,{ 0xBF,0x2C,0xA9,0x26,0xCA,0xAE,0x4C,0x60 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides>{ static constexpr GUID value{ 0x9D22EB6C,0x1255,0x4256,{ 0xB6,0xBD,0x82,0xC2,0xFD,0x27,0x34,0x88 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton>{ static constexpr GUID value{ 0x550C4D84,0x4F54,0x4FBE,{ 0xB1,0x2B,0xE0,0xA5,0x0A,0xAB,0x0D,0x05 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory>{ static constexpr GUID value{ 0x4A00374D,0x4CD2,0x4ED9,{ 0x86,0x3E,0x83,0xB8,0xCF,0x3F,0xD2,0xAF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton>{ static constexpr GUID value{ 0x9F98ACD7,0xC605,0x4105,{ 0xBE,0x10,0x39,0x43,0xA7,0xC0,0xDA,0x3C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory>{ static constexpr GUID value{ 0xC295FE4E,0x30EB,0x4130,{ 0xA6,0xB6,0x8C,0x85,0xD8,0xE2,0x6E,0x89 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics>{ static constexpr GUID value{ 0x11FE4CB9,0xBBAC,0x4314,{ 0x93,0x44,0x92,0xC6,0x69,0x3D,0xDE,0xAF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarEraserButton>{ static constexpr GUID value{ 0x4CBDB92E,0x5F5E,0x4B35,{ 0xA4,0x1C,0x16,0xFF,0xB0,0x28,0x3B,0xC0 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarEraserButton2>{ static constexpr GUID value{ 0xE7A59257,0x5AE8,0x436D,{ 0xB2,0xE2,0x93,0xC2,0x00,0x90,0x0C,0xA0 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory>{ static constexpr GUID value{ 0xFD40611D,0xD1BA,0x4D67,{ 0xAF,0x00,0x14,0x80,0x36,0xAD,0x49,0x2C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarEraserButtonStatics2>{ static constexpr GUID value{ 0x038A1736,0xC5CD,0x4311,{ 0x83,0xF4,0x38,0xCB,0xF0,0x7C,0x20,0x66 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarFactory>{ static constexpr GUID value{ 0x3947AA99,0x36B1,0x4374,{ 0xAB,0x5C,0x98,0xBF,0x07,0xA4,0x32,0x0B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem>{ static constexpr GUID value{ 0x92B68786,0x37EE,0x4915,{ 0x9E,0x89,0xE1,0x87,0x56,0x4A,0x88,0x9A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemFactory>{ static constexpr GUID value{ 0x352E7B93,0x803B,0x4F0E,{ 0x8C,0x72,0x9D,0xFC,0x03,0x29,0x32,0x9F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemStatics>{ static constexpr GUID value{ 0x1FE54B64,0x4063,0x4A5F,{ 0xB8,0x9C,0x9F,0x58,0x93,0x5E,0xE3,0x79 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton>{ static constexpr GUID value{ 0x0B3CC15B,0x7ABF,0x487E,{ 0xAC,0xC1,0x5B,0x50,0x48,0xFE,0xE6,0xD2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory>{ static constexpr GUID value{ 0x7C334ADD,0x42CA,0x4943,{ 0x94,0xA4,0x23,0xB5,0xA6,0xE5,0x5C,0xF1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarIsStencilButtonCheckedChangedEventArgs>{ static constexpr GUID value{ 0x026EDD26,0xD32B,0x4E28,{ 0xA0,0x33,0xD5,0x09,0x76,0x62,0xB2,0x92 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarMenuButton>{ static constexpr GUID value{ 0x860ECAE5,0x7633,0x4EA1,{ 0xA2,0x09,0x50,0x39,0x2D,0x1A,0xEB,0xD1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarMenuButtonFactory>{ static constexpr GUID value{ 0x7A463A9D,0x5DC7,0x44A7,{ 0xAF,0xD0,0x2B,0x68,0x5C,0xB9,0xA9,0x6C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarMenuButtonStatics>{ static constexpr GUID value{ 0xF03B17A6,0xB8B0,0x4A87,{ 0xA9,0x61,0x37,0xCD,0x05,0xD8,0x31,0x37 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarPenButton>{ static constexpr GUID value{ 0xE0B80C21,0xB032,0x40EE,{ 0xA2,0xB9,0x50,0x7F,0x6C,0xCB,0x82,0x7B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory>{ static constexpr GUID value{ 0xB1463D21,0x59CB,0x4A83,{ 0x92,0xE1,0x69,0x28,0x42,0x79,0x7B,0x2E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics>{ static constexpr GUID value{ 0xB922CE42,0x09F0,0x453D,{ 0x80,0x26,0x44,0xDA,0xF2,0x75,0x3F,0x65 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl>{ static constexpr GUID value{ 0x601AE5F6,0x28A5,0x44CC,{ 0x89,0xA6,0x38,0x0E,0x91,0xA5,0x72,0xDD } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory>{ static constexpr GUID value{ 0x67F065EE,0xF5E7,0x46EB,{ 0x91,0x87,0x8D,0x3C,0xA3,0xAF,0x89,0x1B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics>{ static constexpr GUID value{ 0x48A61BEF,0x19CE,0x41BB,{ 0xAB,0xE0,0x7C,0x87,0x26,0xFA,0xE7,0x5E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarPencilButton>{ static constexpr GUID value{ 0x5B112832,0x1984,0x4148,{ 0x9F,0x25,0x38,0x2B,0x35,0xDB,0x08,0x7F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory>{ static constexpr GUID value{ 0xDB66D85F,0xCFD6,0x495F,{ 0x93,0xAB,0xB8,0x56,0x6A,0xF9,0xF8,0xAF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarRulerButton>{ static constexpr GUID value{ 0x4A992832,0x1984,0x4148,{ 0x9F,0x25,0x38,0x2B,0x35,0xDB,0x08,0x7F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory>{ static constexpr GUID value{ 0xBB26D85F,0xCFD6,0x495F,{ 0x93,0xAB,0xB8,0x56,0x6A,0xF9,0xF8,0xAF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics>{ static constexpr GUID value{ 0xBAE75F65,0xBE30,0x4BEE,{ 0x96,0x4B,0xFF,0x9E,0x49,0x8F,0xEE,0x37 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarStatics>{ static constexpr GUID value{ 0xA3B493BB,0xCB4F,0x4E6B,{ 0xA3,0x3D,0xF1,0x1E,0x7A,0x29,0x5E,0xFA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarStatics2>{ static constexpr GUID value{ 0xAAC1F8F2,0x2C1F,0x4E9C,{ 0xB3,0xF3,0x31,0xFF,0x22,0xB5,0x1C,0x7A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarStencilButton>{ static constexpr GUID value{ 0x306A2616,0x5B40,0x4BF3,{ 0x92,0xB7,0xF1,0xDF,0x93,0x6A,0xEF,0xF5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarStencilButtonFactory>{ static constexpr GUID value{ 0xA20701D1,0x8A70,0x4D77,{ 0x89,0xD4,0x17,0x30,0xA3,0xA5,0x8E,0xDF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarStencilButtonStatics>{ static constexpr GUID value{ 0x4748C07F,0x63E4,0x420D,{ 0x93,0x9A,0x6B,0x72,0x43,0xE9,0xD1,0x24 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarToggleButton>{ static constexpr GUID value{ 0xB4A278FA,0xF5F0,0x4B1F,{ 0xBE,0xB0,0x0B,0x8A,0x29,0x90,0x5A,0x4A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory>{ static constexpr GUID value{ 0xB2F90710,0xE5A1,0x4365,{ 0x9D,0x1A,0xE5,0xB7,0xAD,0x8B,0x96,0x68 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarToolButton>{ static constexpr GUID value{ 0x5C5AF41E,0xCCB7,0x4458,{ 0x80,0x64,0xA9,0x84,0x9D,0x31,0x56,0x1B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory>{ static constexpr GUID value{ 0x6293BF4B,0x89FE,0x4ED0,{ 0xA1,0xA6,0x88,0xD3,0xEB,0xA9,0x17,0xB2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics>{ static constexpr GUID value{ 0x9E097D18,0xD136,0x4EF6,{ 0xB0,0xFD,0x1A,0x78,0xC2,0x88,0x4A,0x01 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IInsertionPanel>{ static constexpr GUID value{ 0x6B8DE08F,0x6527,0x4D39,{ 0xBC,0xBF,0x58,0xB0,0x1D,0xA9,0x23,0xD7 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs>{ static constexpr GUID value{ 0x16F597CD,0xEBFF,0x4FB4,{ 0x87,0x14,0x26,0x14,0x74,0x18,0xB9,0x45 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemClickEventArgs>{ static constexpr GUID value{ 0x9C314242,0xF29A,0x494D,{ 0xA3,0xA5,0xD4,0xC7,0xB2,0xA4,0x68,0x52 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemContainerGenerator>{ static constexpr GUID value{ 0x40765F00,0x83F0,0x4D7F,{ 0xB1,0xB8,0xF1,0x9D,0xE4,0xF1,0xD5,0xDA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemContainerMapping>{ static constexpr GUID value{ 0x53C9F23A,0xF25D,0x446A,{ 0x99,0xB8,0xC7,0xAE,0xB8,0x39,0x05,0x0F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsControl>{ static constexpr GUID value{ 0xF4A91DD8,0xD979,0x4381,{ 0x86,0x52,0xBD,0xA0,0x34,0x2A,0x76,0x5E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsControl2>{ static constexpr GUID value{ 0x754C3266,0x0529,0x45E3,{ 0x87,0x48,0xBF,0x74,0x7D,0x15,0x83,0x57 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsControl3>{ static constexpr GUID value{ 0x502B7489,0xAEE4,0x4DE3,{ 0xA2,0xAB,0x19,0x5A,0xC2,0x0C,0x42,0x12 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsControlFactory>{ static constexpr GUID value{ 0xF7BBC359,0xF8FD,0x471C,{ 0xBC,0xB2,0x2C,0x74,0xBE,0x8E,0xBF,0x8C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsControlOverrides>{ static constexpr GUID value{ 0xC79BB41B,0xA084,0x4301,{ 0xA4,0x96,0x72,0x97,0x1F,0x36,0x4E,0xD1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsControlStatics>{ static constexpr GUID value{ 0x37DABD89,0xDCFB,0x45B8,{ 0x9A,0xFE,0x87,0x4D,0xF0,0x97,0x90,0x5E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsPanelTemplate>{ static constexpr GUID value{ 0x14EAD768,0x34B2,0x4B97,{ 0xBF,0x3C,0xE8,0xD7,0x32,0x30,0xA2,0xAA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsPickedEventArgs>{ static constexpr GUID value{ 0xF95B9AAC,0xA621,0x488E,{ 0x91,0x56,0x8E,0xE3,0x11,0x65,0xBE,0x04 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsPresenter>{ static constexpr GUID value{ 0xC271569B,0x6DCA,0x4E2B,{ 0x8E,0x14,0xC5,0x51,0x36,0xB0,0x2A,0x71 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsPresenter2>{ static constexpr GUID value{ 0x5C04AA33,0x1DF3,0x4731,{ 0xA4,0xC9,0xDA,0x81,0x83,0x78,0xD6,0x3D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsPresenterStatics>{ static constexpr GUID value{ 0x18DE66CD,0x4A6C,0x4B2E,{ 0xAA,0x86,0xCB,0x12,0x6C,0x9A,0x29,0x20 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsPresenterStatics2>{ static constexpr GUID value{ 0x8971632E,0x7867,0x4D66,{ 0x96,0x30,0x29,0xF1,0xC5,0xF7,0x40,0x3F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsStackPanel>{ static constexpr GUID value{ 0xDF7AB79D,0x7AD5,0x4B58,{ 0x93,0x63,0x91,0x9A,0xF9,0x02,0x26,0xE6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsStackPanel2>{ static constexpr GUID value{ 0xEEEECDB0,0x00B4,0x4534,{ 0x93,0x7B,0x56,0x31,0x8B,0x29,0x3E,0x92 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsStackPanelStatics>{ static constexpr GUID value{ 0xCA25D63F,0x044F,0x4B6B,{ 0xB3,0x15,0x0B,0x60,0xE0,0xB4,0xF8,0x7D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsStackPanelStatics2>{ static constexpr GUID value{ 0x3972EB2C,0x384A,0x48BF,{ 0xAD,0xFD,0x77,0x2E,0x25,0x72,0xC5,0x04 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsWrapGrid>{ static constexpr GUID value{ 0xDDFE6B5F,0xBA88,0x4A7D,{ 0x8A,0x5B,0xE5,0x8C,0xAF,0x0F,0x4E,0x2D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsWrapGrid2>{ static constexpr GUID value{ 0x80C21C0F,0x63EC,0x4258,{ 0xBD,0x61,0xD4,0xA6,0x95,0x6C,0x86,0x4A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsWrapGridStatics>{ static constexpr GUID value{ 0x4EC5427D,0x24A0,0x449A,{ 0xB7,0x63,0x30,0x77,0xBA,0x0F,0x2D,0xD5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IItemsWrapGridStatics2>{ static constexpr GUID value{ 0x2E27D3F7,0xFEAA,0x478D,{ 0xBF,0xD1,0x29,0x33,0x8A,0xDC,0x5A,0x03 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListBox>{ static constexpr GUID value{ 0xE9F3B9FF,0x8E91,0x4ECF,{ 0xA7,0x07,0xC9,0x27,0xF6,0x94,0xF8,0x81 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListBox2>{ static constexpr GUID value{ 0x70572ABA,0x8AD1,0x4085,{ 0x93,0x50,0xDE,0xEE,0x35,0x92,0x94,0xE3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListBoxFactory>{ static constexpr GUID value{ 0x60CDFDA2,0x2F44,0x444B,{ 0x9C,0x94,0xB8,0xC9,0xFD,0xA4,0x6F,0x59 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListBoxItem>{ static constexpr GUID value{ 0x43C13323,0x6EDF,0x4E4B,{ 0xB6,0xB2,0x3A,0x93,0xEE,0xC4,0x1D,0x95 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListBoxItemFactory>{ static constexpr GUID value{ 0x4398B8D4,0xA3DE,0x402C,{ 0xB2,0x3D,0x19,0x03,0x84,0xB2,0x7C,0xA8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListBoxStatics>{ static constexpr GUID value{ 0x6D3F7F73,0x706A,0x4E53,{ 0xA9,0xAA,0xC9,0xA5,0x3C,0x9C,0xDD,0x70 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListBoxStatics2>{ static constexpr GUID value{ 0x0089ADEB,0xB709,0x4C8D,{ 0xB1,0xED,0x4A,0x7D,0x97,0xEE,0x77,0x16 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListPickerFlyout>{ static constexpr GUID value{ 0x0F0CB9D7,0xE5F3,0x45E6,{ 0x90,0x63,0xFF,0x7B,0xBB,0x19,0x3C,0x47 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter>{ static constexpr GUID value{ 0x68155FB3,0x883E,0x417A,{ 0x80,0xD0,0xE2,0xFD,0x88,0x41,0x00,0x84 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListPickerFlyoutStatics>{ static constexpr GUID value{ 0xFEE25B97,0x8B96,0x4602,{ 0x81,0xD2,0x82,0xFD,0x8E,0x0F,0x7E,0xA8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListView>{ static constexpr GUID value{ 0xF6CE8C6D,0xFE96,0x41AD,{ 0xA6,0x4A,0xC2,0xB8,0x1C,0x4A,0xF7,0xF8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewBase>{ static constexpr GUID value{ 0x3D0813BA,0x6890,0x4537,{ 0xBF,0xE5,0x79,0x6D,0x94,0x58,0xED,0xD6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewBase2>{ static constexpr GUID value{ 0xD1C2A4F7,0x78A3,0x4491,{ 0x86,0xE0,0x2D,0xDE,0xBC,0x00,0x7A,0xC5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewBase3>{ static constexpr GUID value{ 0xB364C035,0x0A13,0x406F,{ 0xA3,0xFB,0xF3,0x0E,0x7D,0xDC,0xA9,0x4C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewBase4>{ static constexpr GUID value{ 0x18B7792B,0x11DC,0x4EB6,{ 0xA7,0xBC,0x74,0x1A,0xDB,0x3E,0xEB,0x79 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewBase5>{ static constexpr GUID value{ 0x1A9C6E99,0x1719,0x4B80,{ 0xB3,0x35,0x62,0x83,0x31,0xA0,0x70,0x19 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewBase6>{ static constexpr GUID value{ 0xF8A42637,0x965B,0x483B,{ 0x94,0xE5,0xE5,0xC9,0xFE,0xF0,0xE3,0x52 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewBaseFactory>{ static constexpr GUID value{ 0xE67E6C7F,0x150F,0x46D0,{ 0xA6,0xAC,0xC5,0x00,0x2B,0xD9,0xCA,0x53 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewBaseHeaderItem>{ static constexpr GUID value{ 0x6D0DED27,0x0D19,0x4091,{ 0x89,0x17,0xCE,0x7C,0x85,0xC1,0xE6,0x30 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>{ static constexpr GUID value{ 0x3872A6A1,0xEA19,0x455F,{ 0x9D,0xF7,0x14,0x7C,0xC4,0x1D,0x32,0x9C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewBaseStatics>{ static constexpr GUID value{ 0x8532B8F7,0x3E16,0x455B,{ 0x89,0xA8,0xC1,0x34,0x62,0x23,0xF6,0xD3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewBaseStatics2>{ static constexpr GUID value{ 0x821C00C8,0x78CC,0x411F,{ 0x9F,0x2E,0xA5,0x57,0x58,0x22,0x7F,0x3E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewBaseStatics3>{ static constexpr GUID value{ 0x3B539091,0x31C6,0x4D0C,{ 0x90,0xAF,0x5D,0xC1,0xD6,0xAE,0x9C,0x05 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewBaseStatics4>{ static constexpr GUID value{ 0xAD13258B,0xFBD0,0x4F18,{ 0x8B,0xF8,0x9B,0x86,0x13,0x95,0x1C,0x22 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewBaseStatics5>{ static constexpr GUID value{ 0x40346FCF,0x0476,0x4259,{ 0x89,0x5F,0xA6,0x56,0x97,0x38,0x62,0x0F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewFactory>{ static constexpr GUID value{ 0xBDFF696D,0x3F22,0x41F9,{ 0x97,0xA6,0x88,0x31,0x34,0xA7,0x61,0x13 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewHeaderItem>{ static constexpr GUID value{ 0x1B61BAEB,0xE196,0x4B3B,{ 0xA5,0xF9,0x1E,0xD6,0x36,0xF3,0xF7,0x9B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewHeaderItemFactory>{ static constexpr GUID value{ 0x68D2C96A,0x96B0,0x4F08,{ 0xA7,0xA5,0xF1,0x08,0x67,0x20,0xA0,0xFA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewItem>{ static constexpr GUID value{ 0xB7BB4305,0x3DD9,0x43DE,{ 0xA8,0xC0,0xC4,0x72,0xF0,0x85,0xBC,0x11 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewItemFactory>{ static constexpr GUID value{ 0xF431073D,0x9CAC,0x42A2,{ 0x82,0xDF,0x0F,0x44,0x90,0xBC,0x4E,0x2E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewPersistenceHelper>{ static constexpr GUID value{ 0x05BDE8A6,0x2191,0x4B4B,{ 0x8C,0x22,0x9B,0x25,0x67,0x6E,0x80,0x6E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics>{ static constexpr GUID value{ 0x6D0C2B08,0xBB9B,0x44F9,{ 0x80,0x63,0x5C,0x3F,0x9C,0x21,0x88,0x4B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaElement>{ static constexpr GUID value{ 0xA38ED2CF,0x13DE,0x4299,{ 0xAD,0xE2,0xAE,0x18,0xF7,0x4E,0xD3,0x53 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaElement2>{ static constexpr GUID value{ 0xFD53DA65,0xB186,0x4654,{ 0xBF,0xDB,0x18,0x0E,0xD2,0x6C,0xAD,0x07 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaElement3>{ static constexpr GUID value{ 0x479F6F13,0x0FDB,0x4ED8,{ 0x92,0x8A,0x4D,0x39,0x16,0x9C,0x3C,0xD2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaElementStatics>{ static constexpr GUID value{ 0xDCCD2CB9,0x7568,0x4682,{ 0xA7,0x2A,0x8D,0xDF,0x2A,0x26,0x65,0xCA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaElementStatics2>{ static constexpr GUID value{ 0x9EE7F826,0xF154,0x4DC6,{ 0x80,0x14,0xA6,0xEB,0xA9,0x87,0xF8,0x47 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaPlayerElement>{ static constexpr GUID value{ 0x3B4CA526,0x2E25,0x4598,{ 0xBC,0x71,0xD4,0x91,0xF8,0xE8,0xDE,0x39 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaPlayerElementFactory>{ static constexpr GUID value{ 0x77E525C3,0xEB17,0x4B8D,{ 0x88,0x9D,0x1E,0xA8,0xAB,0xDB,0xD4,0xEF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaPlayerElementStatics>{ static constexpr GUID value{ 0x1E7C4020,0xAC57,0x42DD,{ 0xAD,0x1C,0x3E,0xBC,0x2D,0x7F,0x08,0xBA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaPlayerPresenter>{ static constexpr GUID value{ 0x77A92326,0x0C5B,0x41FC,{ 0xBF,0x49,0x15,0xF6,0xC3,0x52,0x4B,0x6B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory>{ static constexpr GUID value{ 0xE6766FB7,0xD96F,0x4B95,{ 0xB3,0x3C,0x59,0xE8,0x1C,0xB1,0xE9,0xBA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics>{ static constexpr GUID value{ 0x84D774FE,0xEAD4,0x4957,{ 0xB4,0x2B,0x22,0x31,0x58,0xCA,0x0D,0xE7 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaTransportControls>{ static constexpr GUID value{ 0xD6F69E7D,0x0825,0x49A9,{ 0x9F,0xCE,0x55,0x86,0xD8,0x69,0x4F,0x0C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaTransportControls2>{ static constexpr GUID value{ 0x2B89EFEC,0x1BEA,0x451E,{ 0x8B,0xCD,0xCF,0xE2,0xD9,0x42,0x32,0x62 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaTransportControls3>{ static constexpr GUID value{ 0x5086430E,0x0940,0x11E7,{ 0x93,0xAE,0x92,0x36,0x1F,0x00,0x26,0x71 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaTransportControls4>{ static constexpr GUID value{ 0x0FB17C58,0x9F23,0x11E7,{ 0xAB,0xC4,0xCE,0xC2,0x78,0xB6,0xB5,0x0A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaTransportControlsFactory>{ static constexpr GUID value{ 0x1DA2015A,0xA8E4,0x4C1B,{ 0x88,0xC9,0x0B,0x18,0x3E,0xCC,0x62,0xE3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaTransportControlsHelper>{ static constexpr GUID value{ 0x3D41D509,0xFF44,0x4420,{ 0x80,0x7E,0x8F,0x7A,0x2E,0x2C,0x42,0x51 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics>{ static constexpr GUID value{ 0x5A772047,0xA9A1,0x4625,{ 0x92,0x70,0x7F,0x49,0x87,0x5D,0x43,0x94 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics>{ static constexpr GUID value{ 0x590EA907,0xD2EF,0x4C1A,{ 0x94,0x29,0xB4,0xB1,0x5D,0x64,0xFD,0x56 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2>{ static constexpr GUID value{ 0x1728CFDC,0x561F,0x4386,{ 0xA7,0xF8,0x09,0x0D,0x95,0xF6,0x8D,0x96 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics3>{ static constexpr GUID value{ 0x5FE05542,0x0940,0x11E7,{ 0x93,0xAE,0x92,0x36,0x1F,0x00,0x26,0x71 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics4>{ static constexpr GUID value{ 0x0FB18144,0x9F23,0x11E7,{ 0xAB,0xC4,0xCE,0xC2,0x78,0xB6,0xB5,0x0A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyout>{ static constexpr GUID value{ 0xAD3210F1,0x985B,0x4171,{ 0xBB,0xBA,0x67,0xBC,0xC7,0x29,0x64,0x9B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyout2>{ static constexpr GUID value{ 0x507C7BAD,0xD9D1,0x4C05,{ 0x9D,0x4B,0xCD,0xA8,0xDE,0x9A,0xB2,0x42 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutFactory>{ static constexpr GUID value{ 0x644533AB,0xBBB9,0x499B,{ 0x9F,0xF3,0x30,0xD4,0x0E,0x2C,0x56,0xD8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutItem>{ static constexpr GUID value{ 0x160775CF,0xB598,0x44AF,{ 0xA4,0x88,0xC3,0xCE,0x2A,0xF6,0xD3,0xF0 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutItem2>{ static constexpr GUID value{ 0x0AE266EB,0x028C,0x4423,{ 0xA8,0xE3,0x98,0x9F,0xD9,0xDD,0x71,0x26 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutItem3>{ static constexpr GUID value{ 0x9727B2E3,0xB2B6,0x49DC,{ 0x8C,0x22,0xE0,0x13,0x8B,0x94,0x15,0x59 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutItemBase>{ static constexpr GUID value{ 0xF9B56047,0x8DA6,0x4730,{ 0x92,0x08,0x14,0x41,0x25,0xC6,0xB3,0x96 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>{ static constexpr GUID value{ 0x83E6DBAD,0xFC67,0x41D5,{ 0x87,0x97,0x60,0xAC,0xD1,0xCE,0xB1,0xD9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory>{ static constexpr GUID value{ 0xC5AA39E2,0x44F3,0x455E,{ 0x9C,0x5B,0x62,0xBB,0x6A,0xFC,0xE3,0xAD } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics>{ static constexpr GUID value{ 0x4950B424,0xA43A,0x41F7,{ 0xAA,0x3A,0x9C,0xE9,0x61,0x97,0x47,0xD5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics2>{ static constexpr GUID value{ 0xACA4F564,0x1790,0x4601,{ 0x91,0x6E,0x5A,0xE1,0xF0,0x1F,0x4B,0xD6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics3>{ static constexpr GUID value{ 0xD83FD7C3,0x0AEB,0x4EF3,{ 0x82,0x70,0x8B,0x9B,0x95,0xF2,0xB2,0x98 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutPresenter>{ static constexpr GUID value{ 0x906E0304,0x254E,0x413F,{ 0xB2,0x19,0xC7,0xB9,0x7F,0x00,0x37,0x52 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2>{ static constexpr GUID value{ 0x895894DF,0x5A9F,0x4A1F,{ 0x85,0xEC,0x6F,0x3C,0x1B,0x6D,0xCB,0x89 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>{ static constexpr GUID value{ 0xB88B5091,0x101C,0x41F8,{ 0xAA,0xC1,0x1B,0x10,0x5C,0x14,0xFB,0x99 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutSeparator>{ static constexpr GUID value{ 0x71FA2B7D,0x0B51,0x4950,{ 0xA1,0xA4,0xBB,0xC4,0x2E,0xAC,0x4C,0x12 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>{ static constexpr GUID value{ 0xC159DCC8,0xB437,0x44E0,{ 0xB2,0x4B,0x57,0x20,0xAE,0xA1,0xDB,0xAC } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutStatics>{ static constexpr GUID value{ 0x3DBEFBA1,0x9522,0x4045,{ 0x9E,0x58,0xC9,0x9B,0x13,0xAA,0xB9,0xB9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutSubItem>{ static constexpr GUID value{ 0xE5386550,0xFE2C,0x43E2,{ 0xA7,0x3F,0x62,0x16,0x8F,0x61,0x99,0x73 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutSubItem2>{ static constexpr GUID value{ 0xAC935626,0x190A,0x4DE2,{ 0x8D,0x71,0x7C,0xC4,0x74,0x7D,0xA5,0x80 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics>{ static constexpr GUID value{ 0xDDB27A36,0x1874,0x4AEF,{ 0x83,0x7D,0x6F,0xEC,0x9D,0xA4,0xE6,0x81 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics2>{ static constexpr GUID value{ 0xAC14D09B,0x3E93,0x4785,{ 0x94,0xEF,0xFD,0xB2,0x3B,0xAB,0xA9,0x65 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigate>{ static constexpr GUID value{ 0xBF2195A9,0xF4EA,0x4336,{ 0x97,0x7C,0xF8,0xFC,0xF7,0x8B,0x0D,0x9E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationView>{ static constexpr GUID value{ 0xF209CE15,0x391A,0x42CA,{ 0x9F,0xC6,0xF7,0x9D,0xA6,0x5A,0xCA,0x32 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationView2>{ static constexpr GUID value{ 0x2BE49737,0x7C13,0x4C44,{ 0x86,0xC3,0x8B,0x25,0xE6,0x97,0xA8,0x0E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>{ static constexpr GUID value{ 0x446700E1,0x9A9D,0x4500,{ 0xA7,0x1D,0x25,0xC1,0x58,0x09,0xB8,0x79 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>{ static constexpr GUID value{ 0xB7C1AD35,0x5544,0x40C1,{ 0x9B,0x33,0xAC,0xFE,0x1D,0x6C,0x80,0x94 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewFactory>{ static constexpr GUID value{ 0xE50687C1,0xB7C2,0x4975,{ 0xAD,0x7A,0x5F,0x4F,0xE6,0xA5,0x14,0xC9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewItem>{ static constexpr GUID value{ 0x8614BE0F,0xB7B6,0x4851,{ 0x96,0x0A,0xF5,0xE3,0xF6,0x9F,0x62,0x4A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewItemBase>{ static constexpr GUID value{ 0xEDF04EB1,0x37D1,0x471F,{ 0x85,0x70,0x38,0x29,0xEE,0x5B,0x2B,0xC6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewItemBaseFactory>{ static constexpr GUID value{ 0xEB014CEF,0x7890,0x4EBB,{ 0x82,0x45,0x02,0xE8,0x51,0x0F,0x32,0x1D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewItemFactory>{ static constexpr GUID value{ 0x973BDB4A,0x7E08,0x4F76,{ 0x92,0x3C,0xF1,0x2B,0xD6,0x85,0xE8,0x6E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewItemHeader>{ static constexpr GUID value{ 0xE21DF22C,0xDA4A,0x4E74,{ 0x9F,0xFC,0xB1,0x63,0xBD,0x7A,0xDA,0xCD } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewItemHeaderFactory>{ static constexpr GUID value{ 0xF3105988,0x7768,0x45D3,{ 0x8B,0xB0,0x6D,0xED,0x9E,0x43,0xA9,0x8B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>{ static constexpr GUID value{ 0x29496822,0x55D2,0x49FA,{ 0x96,0x4B,0xF1,0xDB,0xAF,0xEF,0x85,0xC4 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewItemSeparator>{ static constexpr GUID value{ 0xDE62C951,0xBB9B,0x471E,{ 0x83,0xE3,0xAF,0x47,0x91,0xE7,0x09,0x6A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>{ static constexpr GUID value{ 0x71CF3A66,0xDB86,0x49E0,{ 0x81,0x54,0x5F,0xD3,0x56,0xAE,0xDE,0xC0 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewItemStatics>{ static constexpr GUID value{ 0x803C0081,0xFDA5,0x4B90,{ 0xAA,0xCE,0x3F,0x23,0x06,0xDB,0xE5,0xC4 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewList>{ static constexpr GUID value{ 0x4F726F85,0x5CE0,0x48CD,{ 0x8E,0xF2,0x1A,0x29,0x45,0x8A,0x34,0x04 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewListFactory>{ static constexpr GUID value{ 0xFAEE9541,0xC3BF,0x47BF,{ 0xB9,0x04,0x61,0x55,0xF4,0xDF,0x6B,0x4F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>{ static constexpr GUID value{ 0x955575BA,0x75F5,0x432D,{ 0xB4,0x9B,0x60,0xE4,0x75,0x52,0xD5,0xEE } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>{ static constexpr GUID value{ 0x5AA509A0,0x3A5E,0x4F54,{ 0x89,0x6C,0x98,0xB8,0x5F,0x81,0x95,0x08 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewStatics>{ static constexpr GUID value{ 0x363A86C7,0x72DA,0x4420,{ 0xB8,0x71,0x15,0xD9,0xD0,0xD4,0x57,0x56 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INavigationViewStatics2>{ static constexpr GUID value{ 0x8CC50D74,0x1A42,0x4852,{ 0xAB,0x5A,0x6D,0xC8,0x2F,0x28,0xA4,0xBA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INotifyEventArgs>{ static constexpr GUID value{ 0xAF0E05F7,0xC4B7,0x44C5,{ 0xB0,0x9D,0x5C,0xB7,0x05,0x2B,0x3A,0x97 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::INotifyEventArgs2>{ static constexpr GUID value{ 0x0D140F56,0x1DCE,0x4FCD,{ 0x85,0xBC,0x5A,0x55,0x72,0x27,0x3B,0x9C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPage>{ static constexpr GUID value{ 0xC4B27075,0xE641,0x453E,{ 0x82,0x4D,0x01,0x2F,0xC7,0xCF,0x95,0xCF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPageFactory>{ static constexpr GUID value{ 0xDFA149AC,0x1849,0x445E,{ 0x93,0x7C,0x40,0xA9,0x59,0x0C,0xC0,0x76 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPageOverrides>{ static constexpr GUID value{ 0x230B9CB8,0x3419,0x4306,{ 0xAA,0xBE,0x4A,0x8E,0x68,0x0D,0x36,0x27 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPageStatics>{ static constexpr GUID value{ 0x376DDE71,0xF725,0x46DD,{ 0x8D,0x80,0xEE,0xEA,0xF7,0xDA,0x74,0xE5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPanel>{ static constexpr GUID value{ 0xA50A4BBD,0x8361,0x469C,{ 0x90,0xDA,0xE9,0xA4,0x0C,0x74,0x74,0xDF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPanelFactory>{ static constexpr GUID value{ 0xEEE68111,0xC7CC,0x433F,{ 0x95,0xCD,0xD6,0x30,0xC3,0x43,0x02,0xDD } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPanelStatics>{ static constexpr GUID value{ 0xF23D6B5D,0x8330,0x47A6,{ 0xA0,0x46,0x25,0xF5,0x09,0xB2,0x52,0x32 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IParallaxView>{ static constexpr GUID value{ 0x6B84FCD4,0x4083,0x5B4B,{ 0xBC,0x40,0xD9,0x20,0x4E,0x19,0xB4,0x1A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IParallaxViewFactory>{ static constexpr GUID value{ 0xE4EB9642,0x3E8E,0x5A26,{ 0x94,0xF2,0x91,0x21,0xD1,0x21,0xB9,0x16 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IParallaxViewStatics>{ static constexpr GUID value{ 0x8836E49C,0x0E0E,0x57D8,{ 0x93,0x95,0xF0,0xA9,0xA0,0xD1,0xBB,0x28 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPasswordBox>{ static constexpr GUID value{ 0x02B9AA11,0x0B47,0x4E7D,{ 0xAD,0x91,0x3A,0x41,0x68,0xED,0x23,0x0D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPasswordBox2>{ static constexpr GUID value{ 0x5ED738DF,0x212F,0x4AEB,{ 0xB5,0xB8,0x2C,0x21,0x9A,0xEC,0x3C,0x0C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPasswordBox3>{ static constexpr GUID value{ 0x6024D9D1,0x56B7,0x41F0,{ 0x95,0x58,0x39,0x34,0xC1,0x42,0x44,0xD6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPasswordBox4>{ static constexpr GUID value{ 0x569F4343,0x8E6C,0x44BF,{ 0x80,0x8D,0x0E,0x03,0x96,0x4E,0xD3,0x2F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs>{ static constexpr GUID value{ 0x142EDA22,0x3552,0x4AB8,{ 0x81,0xA6,0xA4,0x86,0x20,0xEE,0x9C,0x53 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPasswordBoxStatics>{ static constexpr GUID value{ 0x5EE67563,0x2D74,0x4ACE,{ 0xBD,0x79,0xFC,0xAB,0x61,0xA7,0xD7,0x7B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPasswordBoxStatics2>{ static constexpr GUID value{ 0xFC57935F,0x98FA,0x4066,{ 0xB7,0x85,0xFA,0x72,0x5E,0xCD,0xE2,0x32 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPasswordBoxStatics3>{ static constexpr GUID value{ 0xA2CDD319,0xAD6A,0x4352,{ 0xB5,0x90,0xF6,0x96,0xFF,0xCB,0x8E,0x3F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPathIcon>{ static constexpr GUID value{ 0x214C62DB,0xC366,0x4A0E,{ 0xB9,0xAD,0xDC,0xF1,0x68,0xD7,0xEC,0x0C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPathIconFactory>{ static constexpr GUID value{ 0xAF9D9652,0x9C5D,0x4A37,{ 0x9E,0x1A,0x04,0x4A,0xBE,0xEF,0x79,0x2B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPathIconSource>{ static constexpr GUID value{ 0x1F47010E,0xB305,0x4863,{ 0x8B,0x7A,0x15,0xD0,0x8D,0x63,0x3C,0x7A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPathIconSourceFactory>{ static constexpr GUID value{ 0x8F7F85B9,0x5247,0x4F3B,{ 0x83,0x3F,0xE3,0x84,0xBF,0x7E,0x9C,0x84 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPathIconSourceStatics>{ static constexpr GUID value{ 0xDF7027D5,0x3682,0x43FF,{ 0x80,0xF0,0xAF,0xA2,0x56,0xB2,0xFD,0xC3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPathIconStatics>{ static constexpr GUID value{ 0x77B75DB8,0xFB15,0x491A,{ 0xB6,0xE3,0x7D,0xBB,0xA9,0x11,0xBA,0xFE } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPersonPicture>{ static constexpr GUID value{ 0x6C230B6D,0x0D75,0x4059,{ 0x91,0xBC,0x7B,0x17,0x4D,0x1D,0x73,0x15 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPersonPictureFactory>{ static constexpr GUID value{ 0x4F18330D,0x0416,0x4B92,{ 0xBF,0xD3,0xBF,0x57,0x80,0xB4,0x6A,0xB2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPersonPictureStatics>{ static constexpr GUID value{ 0xDBEC0982,0x3C10,0x4639,{ 0x96,0x14,0xAA,0x5B,0x7C,0xDC,0x32,0xCA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs>{ static constexpr GUID value{ 0x447A9B51,0x1E23,0x4779,{ 0x99,0x2B,0x98,0x68,0x49,0x71,0x39,0x41 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPickerFlyout>{ static constexpr GUID value{ 0xA336FFDB,0x08D9,0x43E6,{ 0x94,0x4E,0xF2,0xE5,0xC7,0xCE,0xE6,0x30 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPickerFlyoutPresenter>{ static constexpr GUID value{ 0x5884C978,0x6B27,0x4B38,{ 0xA9,0xAE,0x67,0x7C,0x29,0x94,0x65,0x2E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPickerFlyoutStatics>{ static constexpr GUID value{ 0xAF18A436,0xF38A,0x4ABD,{ 0xB9,0x33,0x62,0x86,0xC1,0x15,0xB0,0x7F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPivot>{ static constexpr GUID value{ 0x103E9B13,0x3400,0x4A16,{ 0x90,0xB9,0x69,0x12,0xBF,0x06,0x97,0x4E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPivot2>{ static constexpr GUID value{ 0x8B8A8660,0x1A55,0x411C,{ 0xA8,0x2D,0x18,0x99,0x1C,0x3F,0x0D,0x6F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPivot3>{ static constexpr GUID value{ 0x95BCBF96,0xF0DA,0x4089,{ 0x8C,0x65,0xE8,0xB8,0x13,0x54,0xC7,0x66 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPivotFactory>{ static constexpr GUID value{ 0x1B0A818E,0x2529,0x4762,{ 0xBA,0x44,0x9A,0xBC,0x68,0xC3,0xCE,0xCA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPivotItem>{ static constexpr GUID value{ 0xA4764371,0xA502,0x47A3,{ 0x91,0x5E,0x4A,0xA0,0x96,0xDA,0xF8,0x7F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPivotItemEventArgs>{ static constexpr GUID value{ 0x1A6F7254,0x1ED5,0x4BC5,{ 0xA0,0x60,0x65,0x55,0x30,0xBC,0xA6,0xBA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPivotItemFactory>{ static constexpr GUID value{ 0x0DCED981,0x636E,0x4A34,{ 0x8A,0x3F,0x8E,0xE0,0x18,0x63,0x92,0x85 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPivotItemStatics>{ static constexpr GUID value{ 0xE147AD0C,0x488B,0x4A6E,{ 0xBE,0xCD,0xA5,0xDB,0xD9,0x94,0x17,0x54 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPivotStatics>{ static constexpr GUID value{ 0xEE22C7F4,0xC15D,0x4FF3,{ 0x8A,0x94,0xF5,0x0D,0xFD,0xFB,0xE8,0x99 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPivotStatics2>{ static constexpr GUID value{ 0xD7518ADD,0xBE75,0x4023,{ 0x8D,0xEB,0xC6,0x51,0x3C,0x31,0x92,0xA3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IPivotStatics3>{ static constexpr GUID value{ 0x78B6274E,0x6616,0x4600,{ 0xA0,0x39,0x92,0x2A,0x5D,0x09,0x33,0x0B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IProgressBar>{ static constexpr GUID value{ 0xAE752C89,0x0067,0x4963,{ 0xBF,0x4C,0x29,0xDB,0x0C,0x4A,0x50,0x7E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IProgressBarFactory>{ static constexpr GUID value{ 0xDA9A8C11,0x1591,0x400B,{ 0xA9,0x93,0x0F,0x1C,0x5C,0xC1,0x2F,0x3B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IProgressBarStatics>{ static constexpr GUID value{ 0x7A129FDA,0x5837,0x4E26,{ 0xB3,0xB4,0xE1,0xC0,0x92,0xCE,0xBB,0xEC } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IProgressRing>{ static constexpr GUID value{ 0x6DA5E49E,0x6E9D,0x425C,{ 0xBD,0x7C,0x02,0x17,0x3E,0x39,0x76,0x3F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IProgressRingStatics>{ static constexpr GUID value{ 0xE8B62507,0x4E2C,0x47D5,{ 0xA5,0x4A,0xC6,0xC4,0x8A,0x5E,0x69,0x89 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRadioButton>{ static constexpr GUID value{ 0x325C44E0,0x9A03,0x4BF3,{ 0xAB,0xD6,0x6F,0xBB,0x46,0xC9,0xA4,0x86 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRadioButtonFactory>{ static constexpr GUID value{ 0xF1D04933,0x34E1,0x4A5C,{ 0xB2,0xAE,0xCA,0x3B,0x1C,0x0B,0x20,0xDE } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRadioButtonStatics>{ static constexpr GUID value{ 0x6B149293,0xF50F,0x4BD8,{ 0xB0,0xAC,0x5C,0x16,0x2F,0x33,0xA2,0x08 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRatingControl>{ static constexpr GUID value{ 0xA7D91CA7,0xE5CF,0x4963,{ 0xA2,0x4E,0x96,0x73,0xFE,0x5F,0xFD,0xD5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRatingControlFactory>{ static constexpr GUID value{ 0x18D81716,0xC542,0x4CCB,{ 0xB3,0x47,0x5E,0x62,0xC5,0xDB,0x78,0x2E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRatingControlStatics>{ static constexpr GUID value{ 0xD062D399,0xAD85,0x4C1C,{ 0xB2,0xC4,0x35,0xDD,0x44,0x32,0x27,0x5E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRatingItemFontInfo>{ static constexpr GUID value{ 0x054723E9,0x7989,0x4D5C,{ 0x9D,0x01,0xA7,0xEB,0x87,0x6F,0x10,0x71 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRatingItemFontInfoFactory>{ static constexpr GUID value{ 0x9603FE56,0x9E9F,0x40B5,{ 0xBA,0xE1,0x44,0x81,0xBB,0x73,0xBC,0xD3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRatingItemFontInfoStatics>{ static constexpr GUID value{ 0xFB214F01,0x6434,0x4EEB,{ 0x82,0xFF,0x7C,0xE5,0xD4,0x0B,0xF5,0x10 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRatingItemImageInfo>{ static constexpr GUID value{ 0x25240E8C,0xE0D2,0x490E,{ 0xB8,0xF8,0x96,0xC8,0xEE,0x05,0x12,0xB9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRatingItemImageInfoFactory>{ static constexpr GUID value{ 0x269E03F2,0xDA79,0x4787,{ 0x9F,0x4A,0x24,0xA6,0xFA,0x56,0xCD,0xE2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRatingItemImageInfoStatics>{ static constexpr GUID value{ 0x8438486B,0x4B1C,0x4123,{ 0xBA,0x0B,0x73,0x48,0x4D,0x68,0xC3,0x38 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRatingItemInfo>{ static constexpr GUID value{ 0x9CCBE6A2,0x591E,0x47A0,{ 0xA3,0x18,0x6A,0x1F,0x79,0x47,0xDA,0x2D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRatingItemInfoFactory>{ static constexpr GUID value{ 0xB0FD43D6,0xCFEC,0x43C8,{ 0x9A,0xC5,0x0B,0x0D,0x5E,0x25,0xD8,0x62 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRefreshContainer>{ static constexpr GUID value{ 0x535DC413,0xB1D5,0x43C1,{ 0xB0,0x57,0x86,0x58,0xCE,0x1E,0x0B,0xA2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRefreshContainerFactory>{ static constexpr GUID value{ 0x0A04777F,0x089E,0x4239,{ 0xBA,0xEB,0xC4,0x64,0x14,0x84,0xC3,0x7E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRefreshContainerStatics>{ static constexpr GUID value{ 0xA20AF5A5,0x7015,0x475D,{ 0x9D,0xE3,0x81,0xA0,0x47,0x9D,0xDA,0x38 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>{ static constexpr GUID value{ 0xD7E47820,0xDC47,0x4B8E,{ 0xBB,0x27,0x7F,0x0A,0x83,0xF2,0x9A,0x07 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRefreshRequestedEventArgs>{ static constexpr GUID value{ 0x1B089F43,0xCFCF,0x4AC6,{ 0xB3,0x1F,0x8D,0xAB,0x6E,0xEF,0xDD,0x93 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRefreshStateChangedEventArgs>{ static constexpr GUID value{ 0xBB6C901E,0x21FE,0x4109,{ 0xAF,0x80,0x73,0xEC,0x66,0x1B,0x67,0x8A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRefreshVisualizer>{ static constexpr GUID value{ 0xC0E30122,0xF3EB,0x4BAA,{ 0xA1,0x1F,0xC3,0xF8,0x73,0x42,0xCB,0xF4 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRefreshVisualizerFactory>{ static constexpr GUID value{ 0x6F5C6132,0x6E09,0x4C10,{ 0x82,0x4A,0x12,0x7D,0x36,0x67,0x27,0x15 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRefreshVisualizerStatics>{ static constexpr GUID value{ 0xAFEA56AF,0x362A,0x4015,{ 0xB1,0x55,0x73,0x3A,0x1F,0x86,0x98,0x31 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRelativePanel>{ static constexpr GUID value{ 0x2EABFAEB,0xB35A,0x4035,{ 0xAC,0xEA,0x3C,0x4A,0x37,0x30,0x68,0x3F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRelativePanelFactory>{ static constexpr GUID value{ 0x8460193C,0x361B,0x44BA,{ 0xA1,0x7E,0xB8,0x4C,0x9D,0xCD,0xC7,0x72 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRelativePanelStatics>{ static constexpr GUID value{ 0x15903C27,0xF18C,0x4C35,{ 0x8E,0x19,0x6A,0x74,0x59,0xD9,0x07,0xB6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBox>{ static constexpr GUID value{ 0x90A57A40,0x80B6,0x4FCE,{ 0xB1,0xEC,0xE3,0xC6,0x16,0x28,0x4B,0x6A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBox2>{ static constexpr GUID value{ 0xBBEA6EAD,0xE805,0x47A4,{ 0xBB,0xE7,0x47,0xE5,0x9B,0x8F,0x74,0xA7 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBox3>{ static constexpr GUID value{ 0x6B17A462,0xFBB6,0x4FFF,{ 0x99,0x91,0x93,0x99,0xCB,0x9C,0x0B,0x90 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBox4>{ static constexpr GUID value{ 0x5CAA8D35,0xC838,0x4BAD,{ 0xA0,0x7C,0x20,0x41,0x83,0xBB,0x75,0x1F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBox5>{ static constexpr GUID value{ 0xA66D9CEA,0x6391,0x4F3B,{ 0x9F,0xD3,0x1F,0xD0,0x1F,0x49,0xF3,0x27 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBox6>{ static constexpr GUID value{ 0x0C89D500,0xE8D8,0x4EAE,{ 0x88,0x04,0x33,0x64,0x92,0x05,0xD7,0xD2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBox7>{ static constexpr GUID value{ 0x980C93EA,0x241F,0x4F6A,{ 0xA5,0x39,0x9D,0x18,0x5C,0x8C,0xF1,0x8A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBoxFactory>{ static constexpr GUID value{ 0x61A1DF62,0x2806,0x41ED,{ 0x88,0xED,0xAE,0x21,0xF4,0x7A,0xB4,0x22 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBoxStatics>{ static constexpr GUID value{ 0xF5E03A74,0x88EA,0x479B,{ 0x9A,0x05,0x37,0x08,0x9F,0xF3,0x0E,0xDE } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBoxStatics2>{ static constexpr GUID value{ 0xE3EB26DE,0x2748,0x420B,{ 0xB1,0xFC,0xCE,0x95,0xB6,0xE8,0x5E,0xEC } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBoxStatics3>{ static constexpr GUID value{ 0x6D17EEC5,0x1FB3,0x4C8B,{ 0xAA,0x23,0xF5,0xE1,0x5D,0x6A,0xB6,0x4E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBoxStatics4>{ static constexpr GUID value{ 0xF5D54FD7,0x7796,0x42A5,{ 0xA5,0xE5,0x2C,0xD2,0x11,0xEE,0x81,0x76 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBoxStatics5>{ static constexpr GUID value{ 0x4B5C4568,0x43D5,0x43E6,{ 0xBB,0xB9,0xCB,0x4E,0x62,0x50,0xF4,0x5A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBoxStatics6>{ static constexpr GUID value{ 0xFE40E287,0x82ED,0x4F7E,{ 0x92,0xBA,0x66,0xF6,0x7B,0xC1,0xFF,0x44 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBoxStatics7>{ static constexpr GUID value{ 0x59FA898F,0xF861,0x43DA,{ 0xA7,0xCE,0x4B,0x9C,0x21,0xD8,0x35,0xF9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs>{ static constexpr GUID value{ 0x54065018,0x2813,0x4922,{ 0x9F,0x8E,0xB6,0xBB,0xAF,0xD9,0x95,0xD8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs2>{ static constexpr GUID value{ 0x395B0DB5,0x636E,0x413E,{ 0x9E,0xB4,0xFC,0x22,0xEB,0xFA,0x36,0x28 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlock>{ static constexpr GUID value{ 0xE5FFF9E2,0xB968,0x49E7,{ 0x97,0xD4,0x8C,0xCA,0x2A,0xC3,0xAE,0x7C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlock2>{ static constexpr GUID value{ 0x3F209013,0x03E7,0x4508,{ 0x96,0x4A,0x91,0xAE,0xDA,0xB3,0xD1,0x1E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlock3>{ static constexpr GUID value{ 0x7D39AE83,0x8918,0x4613,{ 0xB0,0x07,0x7C,0x89,0x8B,0xA2,0x95,0x0E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlock4>{ static constexpr GUID value{ 0x3577C1EA,0x24FD,0x4F50,{ 0xBB,0xE4,0x3F,0xB6,0x54,0xEA,0x58,0xC5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlock5>{ static constexpr GUID value{ 0x9C7DC0C6,0x7A9F,0x45B6,{ 0x88,0x18,0x82,0x2C,0x54,0x9B,0xA0,0x94 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlockOverflow>{ static constexpr GUID value{ 0x4F93749B,0xDAC3,0x4A42,{ 0x9C,0xBB,0x99,0xF0,0xDE,0x37,0xC0,0x71 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlockOverflow2>{ static constexpr GUID value{ 0x8742624E,0xA882,0x4826,{ 0xB9,0x29,0x4D,0x5C,0x39,0x05,0xB9,0xA1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlockOverflow3>{ static constexpr GUID value{ 0x7F69587B,0x5C7F,0x4B5F,{ 0xBD,0xBC,0xFB,0x95,0xC9,0x0E,0x10,0xDE } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics>{ static constexpr GUID value{ 0x041AC2F7,0x4F2B,0x43C3,{ 0xA1,0x22,0x3F,0xEA,0x9C,0xA9,0xDC,0x87 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2>{ static constexpr GUID value{ 0xB5EBED4C,0xF8C4,0x4A3A,{ 0x90,0x7F,0xE5,0x3E,0x78,0x27,0x9F,0xA3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics3>{ static constexpr GUID value{ 0xD1D4A705,0xEB0B,0x4ECB,{ 0xB9,0xB7,0xE6,0x5D,0x03,0x08,0x7C,0x8E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlockStatics>{ static constexpr GUID value{ 0x492D883C,0xADEA,0x433C,{ 0xBE,0x1C,0x20,0x8A,0x16,0x42,0x62,0xBE } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlockStatics2>{ static constexpr GUID value{ 0x0D6131E1,0xAF29,0x48CE,{ 0x8A,0xAF,0x74,0xEC,0xC2,0x8B,0xFB,0xB0 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlockStatics3>{ static constexpr GUID value{ 0x073F7EF4,0xCA2B,0x4B49,{ 0xA5,0x9A,0x31,0xD8,0xFA,0x74,0x33,0x32 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlockStatics4>{ static constexpr GUID value{ 0x80155BC4,0x6D96,0x4B08,{ 0xAD,0x57,0x13,0xDB,0x0F,0x04,0x64,0x12 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRichTextBlockStatics5>{ static constexpr GUID value{ 0xAC9283A1,0x4F25,0x4280,{ 0x88,0x68,0x3E,0xEE,0xE8,0x28,0x21,0xE8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRowDefinition>{ static constexpr GUID value{ 0x4ABAE829,0xD80C,0x4A5E,{ 0xA4,0x8C,0xF8,0xB3,0xD3,0xB6,0x53,0x3D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IRowDefinitionStatics>{ static constexpr GUID value{ 0x5ADF3FE5,0x2056,0x4724,{ 0x94,0xD6,0xE4,0x81,0x2B,0x02,0x2E,0xC8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IScrollContentPresenter>{ static constexpr GUID value{ 0x5712EE2B,0x0EEB,0x46D3,{ 0xAA,0x31,0x5F,0x68,0x01,0xB8,0xDE,0x20 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IScrollViewer>{ static constexpr GUID value{ 0x64E9BE00,0x4DC1,0x493D,{ 0xAB,0xE7,0xCB,0xD3,0xC5,0x77,0x49,0x0D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IScrollViewer2>{ static constexpr GUID value{ 0x64E9BE10,0x4DD1,0x494D,{ 0xAB,0xF7,0xCB,0xD3,0xC5,0x77,0x49,0x1D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IScrollViewer3>{ static constexpr GUID value{ 0x74E9BE21,0x5DE2,0x595E,{ 0xBC,0x08,0xDB,0xD3,0xC5,0x77,0x49,0x2C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IScrollViewerStatics>{ static constexpr GUID value{ 0x33D1299D,0x8D6E,0x4290,{ 0xBF,0x22,0x90,0x5C,0xCC,0xD0,0x4D,0x31 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IScrollViewerStatics2>{ static constexpr GUID value{ 0x33D129AD,0x8D7E,0x42A0,{ 0xBF,0x32,0x90,0x5C,0xCC,0xD0,0x4D,0x41 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IScrollViewerView>{ static constexpr GUID value{ 0x64E9BE01,0x4DC2,0x493E,{ 0xAB,0xE8,0xCB,0xD3,0xC5,0x77,0x49,0x0E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>{ static constexpr GUID value{ 0x4DD04F7E,0x7A11,0x4B2E,{ 0x99,0x33,0x57,0x7D,0xF3,0x92,0x52,0xB6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>{ static constexpr GUID value{ 0x4DD04F7F,0x7A11,0x4B2E,{ 0x99,0x33,0x57,0x7D,0xF3,0x92,0x52,0xB6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISearchBox>{ static constexpr GUID value{ 0xF89ECC5A,0x99BA,0x4BD4,{ 0x96,0x6C,0xF1,0x1F,0xA4,0x43,0xD1,0x3C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISearchBoxFactory>{ static constexpr GUID value{ 0xCD743F6D,0x8685,0x46B4,{ 0x9D,0xDD,0x20,0x2F,0x69,0x41,0xB7,0x01 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs>{ static constexpr GUID value{ 0xA9A70F8F,0x0CB0,0x4BD2,{ 0x99,0x98,0x2F,0xB5,0x7A,0xD5,0xE7,0x31 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>{ static constexpr GUID value{ 0x126E90FD,0x3C4E,0x4CCB,{ 0x9A,0xEF,0x47,0x05,0xD1,0x9F,0xE5,0x48 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs>{ static constexpr GUID value{ 0x18918C23,0xE4C3,0x4662,{ 0xA0,0x3B,0xD0,0x54,0xFF,0xD0,0xF9,0x05 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISearchBoxStatics>{ static constexpr GUID value{ 0xB123634F,0x6871,0x48CD,{ 0x92,0xDF,0x4C,0xFF,0x22,0x45,0x90,0x82 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>{ static constexpr GUID value{ 0xDA15170E,0xE566,0x48CB,{ 0xBD,0x11,0xFE,0x4B,0x0F,0x30,0xA4,0x4D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>{ static constexpr GUID value{ 0xDD49EE6B,0xD165,0x430F,{ 0xA3,0x7D,0xB8,0x07,0x06,0x4F,0x85,0xE1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>{ static constexpr GUID value{ 0x557F5244,0x92F8,0x4150,{ 0xB7,0x30,0xE6,0x34,0x6E,0x8F,0x50,0xD1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISelectionChangedEventArgs>{ static constexpr GUID value{ 0xC972D2DC,0xB609,0x4758,{ 0x85,0x1E,0xA7,0x99,0xC2,0x1D,0xE9,0x7D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>{ static constexpr GUID value{ 0x11A8B6B5,0x2830,0x4517,{ 0x84,0xCD,0x55,0x24,0xC8,0xB8,0x8B,0x45 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISemanticZoom>{ static constexpr GUID value{ 0x019FFF21,0xECE6,0x4FBC,{ 0xBF,0x40,0x89,0x38,0xD4,0x81,0x3E,0x27 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISemanticZoomInformation>{ static constexpr GUID value{ 0xA76A3B63,0x229B,0x4DC5,{ 0xAA,0x11,0x9D,0x92,0x2F,0xBF,0x8A,0x98 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISemanticZoomLocation>{ static constexpr GUID value{ 0x42011736,0xE3C2,0x496B,{ 0xBC,0x4E,0xD7,0x50,0xD4,0x37,0x5B,0x9A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISemanticZoomStatics>{ static constexpr GUID value{ 0x8EF17EF2,0x9898,0x4666,{ 0xB2,0x85,0x3E,0xD3,0x8A,0x07,0x91,0x0E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>{ static constexpr GUID value{ 0x47DFC068,0xB569,0x4B19,{ 0x84,0x2D,0x8E,0x6C,0xF9,0x09,0x89,0xAF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISettingsFlyout>{ static constexpr GUID value{ 0x830BA82B,0xC55B,0x4E32,{ 0xA5,0x1C,0x57,0x91,0xE0,0x24,0xC8,0xAF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISettingsFlyoutFactory>{ static constexpr GUID value{ 0x480C7011,0x57AA,0x4DB6,{ 0xB6,0xFD,0xEC,0x67,0x6F,0x6D,0x41,0x4E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISettingsFlyoutStatics>{ static constexpr GUID value{ 0xD0E3B535,0x9157,0x4BE4,{ 0xA4,0x2A,0xF5,0x91,0x69,0x88,0x46,0xAC } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISlider>{ static constexpr GUID value{ 0x89572027,0x4C48,0x4700,{ 0x80,0x76,0x49,0x7B,0xA7,0x3D,0x9C,0x18 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISlider2>{ static constexpr GUID value{ 0x40A3C50E,0x87D6,0x4D2F,{ 0xB1,0xCF,0xB2,0x79,0xCC,0x99,0x6F,0x26 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISliderFactory>{ static constexpr GUID value{ 0x03A67B37,0xC7BF,0x437C,{ 0x84,0x8F,0x8C,0xB5,0xB7,0x53,0xEA,0xB4 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISliderStatics>{ static constexpr GUID value{ 0x8A4363D7,0x7FDF,0x4D30,{ 0x98,0xFE,0xCE,0x78,0xC0,0x5B,0x31,0xCF } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISliderStatics2>{ static constexpr GUID value{ 0x00E7935D,0x79A5,0x4759,{ 0x96,0xA6,0x29,0xE0,0xA9,0x4A,0xDD,0x33 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISplitView>{ static constexpr GUID value{ 0x97222F31,0x3844,0x429E,{ 0x93,0x9C,0x16,0x73,0x15,0x53,0x22,0xA1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISplitView2>{ static constexpr GUID value{ 0x5EA7DC10,0xCC83,0x409A,{ 0x82,0xF9,0x3E,0x91,0xD6,0xD7,0x08,0x4F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISplitView3>{ static constexpr GUID value{ 0x0EA12D8D,0x1171,0x407B,{ 0x96,0xD3,0x5E,0x1B,0x47,0x0C,0x3E,0xC5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISplitViewFactory>{ static constexpr GUID value{ 0xF101773A,0x084E,0x4FB9,{ 0x84,0x42,0x63,0x22,0x1B,0x44,0x53,0x3F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>{ static constexpr GUID value{ 0x93CF494E,0x7A95,0x44D8,{ 0x95,0x62,0x1B,0x34,0x82,0x48,0xDA,0x9F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISplitViewStatics>{ static constexpr GUID value{ 0x859B4F6F,0x44AB,0x4E4B,{ 0x91,0xC1,0x17,0xB7,0x05,0x6D,0x9B,0x5F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISplitViewStatics2>{ static constexpr GUID value{ 0x14B7CD7A,0xDFBC,0x422C,{ 0x80,0xA9,0x58,0x58,0x71,0x29,0x71,0x13 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IStackPanel>{ static constexpr GUID value{ 0xB8AE8FE2,0xD641,0x4FD7,{ 0x80,0xB4,0x74,0x39,0x20,0x7D,0x27,0x98 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IStackPanel2>{ static constexpr GUID value{ 0x36F23359,0x040E,0x48F7,{ 0x9A,0x98,0xF2,0x66,0x45,0x91,0x95,0x9C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IStackPanel4>{ static constexpr GUID value{ 0x43EBF7F6,0x3196,0x412E,{ 0x8A,0x95,0xAD,0xD0,0x02,0xFF,0x43,0xF0 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IStackPanelFactory>{ static constexpr GUID value{ 0x63D8248A,0x8B34,0x445A,{ 0x80,0x8F,0xB6,0xEC,0xD6,0x2A,0x27,0xD9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IStackPanelStatics>{ static constexpr GUID value{ 0xF0D0CD93,0x4DBC,0x48A7,{ 0x99,0x14,0x95,0x49,0x24,0x65,0x77,0x71 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IStackPanelStatics2>{ static constexpr GUID value{ 0xD97E6257,0x080D,0x412E,{ 0xA9,0x1A,0xCE,0x6E,0x5D,0x02,0xAA,0xD3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IStackPanelStatics4>{ static constexpr GUID value{ 0x279CDD71,0x067B,0x459F,{ 0x81,0x5F,0xEC,0xD8,0x5C,0x5E,0x48,0x43 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IStyleSelector>{ static constexpr GUID value{ 0xD1113F67,0xD8C1,0x4AE4,{ 0x98,0xF0,0xD8,0x50,0x45,0x02,0xF0,0x8B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IStyleSelectorFactory>{ static constexpr GUID value{ 0x9E942AE7,0x3761,0x447F,{ 0x8F,0x97,0x29,0xE3,0x9D,0x5E,0xB3,0x10 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IStyleSelectorOverrides>{ static constexpr GUID value{ 0x08ADD66D,0x0E2E,0x43A0,{ 0xAE,0xCA,0x8F,0xAA,0x94,0xB9,0xD0,0x17 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel>{ static constexpr GUID value{ 0x1C59DB48,0x8233,0x4C0C,{ 0xBC,0xF5,0x02,0xA5,0xFB,0x35,0xAE,0x00 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2>{ static constexpr GUID value{ 0x21E672F2,0x2592,0x4C38,{ 0x87,0x0F,0x28,0xFB,0xCF,0x52,0xC0,0x95 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>{ static constexpr GUID value{ 0x198289D4,0xC89B,0x49B2,{ 0x89,0x6C,0x59,0x17,0xBF,0x8A,0xDC,0xAE } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwapChainPanel>{ static constexpr GUID value{ 0xC589644F,0xEBA8,0x427A,{ 0xB7,0x5A,0x9F,0x1F,0x93,0xA1,0x1A,0xE9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwapChainPanelFactory>{ static constexpr GUID value{ 0xF38F8D7F,0x1A48,0x49CB,{ 0x86,0xD2,0x10,0xEA,0xAA,0xF6,0xFD,0x70 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwapChainPanelStatics>{ static constexpr GUID value{ 0xF89C0297,0xEEA8,0x498C,{ 0x99,0xC4,0x25,0x7E,0x36,0x60,0xDF,0x7E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwipeControl>{ static constexpr GUID value{ 0x9EE3D96F,0x6704,0x4823,{ 0xAA,0x15,0x1C,0x14,0x3B,0xC5,0x3C,0xF7 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwipeControlFactory>{ static constexpr GUID value{ 0xC0AAA3AE,0xD141,0x4E12,{ 0xA7,0x28,0x5F,0x95,0xB5,0x07,0xE7,0xAB } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwipeControlStatics>{ static constexpr GUID value{ 0xE57AE83C,0x2216,0x4717,{ 0x9E,0xF6,0x46,0x62,0x33,0x4C,0x65,0x01 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwipeItem>{ static constexpr GUID value{ 0x836EDADC,0x45C8,0x4A00,{ 0x90,0xA0,0x71,0x07,0xFA,0x89,0x4A,0x1B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwipeItemFactory>{ static constexpr GUID value{ 0x844BD61A,0x1716,0x4097,{ 0xBB,0xA2,0x75,0x26,0xDA,0x22,0xDE,0x39 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>{ static constexpr GUID value{ 0xC5B025F5,0xCB32,0x4733,{ 0x80,0x11,0x5D,0x0D,0x37,0xF4,0x55,0x0A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwipeItemStatics>{ static constexpr GUID value{ 0xD0B44E96,0x2766,0x4D93,{ 0xB5,0xDB,0xF5,0xE1,0xBE,0x83,0x2C,0x2D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwipeItems>{ static constexpr GUID value{ 0xB01726FF,0x969A,0x40D0,{ 0x9F,0x04,0x76,0x08,0x4C,0xE6,0xD7,0xB7 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwipeItemsFactory>{ static constexpr GUID value{ 0x47C460EE,0xD5AA,0x445F,{ 0xB3,0x1E,0x50,0xC0,0x76,0xC0,0x11,0xB9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISwipeItemsStatics>{ static constexpr GUID value{ 0x376250DF,0x48DB,0x43E3,{ 0xB0,0xE9,0x08,0x9E,0x5D,0xA9,0xA1,0x14 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISymbolIcon>{ static constexpr GUID value{ 0x7A4774C9,0xA6A3,0x4B30,{ 0x8F,0xF1,0x90,0x81,0xD7,0x0E,0x9A,0x5C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISymbolIconFactory>{ static constexpr GUID value{ 0xC7252B88,0xE76C,0x4B44,{ 0x8A,0x05,0x04,0x6B,0x9D,0xC7,0x72,0xB8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISymbolIconSource>{ static constexpr GUID value{ 0x625D95A2,0xB6B1,0x408A,{ 0xB2,0x89,0xEA,0xB2,0xEC,0xBA,0x62,0xD8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISymbolIconSourceFactory>{ static constexpr GUID value{ 0xA526AAB0,0x4130,0x4907,{ 0xB0,0x49,0x21,0xF9,0x24,0x0C,0x7A,0x40 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISymbolIconSourceStatics>{ static constexpr GUID value{ 0x8BC49738,0xD94E,0x4148,{ 0x8D,0x64,0x1A,0xDF,0x0F,0x23,0xF2,0x5F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ISymbolIconStatics>{ static constexpr GUID value{ 0x8624FBDF,0x952C,0x4F76,{ 0xB0,0x3F,0x30,0x83,0x3B,0xE9,0x95,0x72 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBlock>{ static constexpr GUID value{ 0xAE2D9271,0x3B4A,0x45FC,{ 0x84,0x68,0xF7,0x94,0x95,0x48,0xF4,0xD5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBlock2>{ static constexpr GUID value{ 0x45206A4C,0x0A4E,0x4FBF,{ 0xAE,0xE9,0x33,0x5D,0x5A,0x20,0x5F,0x6E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBlock3>{ static constexpr GUID value{ 0xB651DD5A,0x424B,0x48C3,{ 0x9B,0x67,0x48,0x6F,0x4E,0x13,0x98,0x99 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBlock4>{ static constexpr GUID value{ 0xB014F270,0x9808,0x4ADC,{ 0xB4,0x52,0x60,0xCD,0xA5,0x41,0x00,0xC1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBlock5>{ static constexpr GUID value{ 0x624A2D38,0xEDBD,0x4A5A,{ 0xB6,0x78,0xE4,0x9F,0x1E,0x07,0xAF,0xBD } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBlock6>{ static constexpr GUID value{ 0x31816CD9,0x0404,0x410F,{ 0x91,0xEC,0x33,0xB0,0xA0,0xBB,0x92,0xB2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBlockStatics>{ static constexpr GUID value{ 0x193EC042,0xA847,0x4552,{ 0xB4,0xE8,0xDB,0x36,0x65,0x5B,0x84,0x0A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBlockStatics2>{ static constexpr GUID value{ 0x88100B1B,0xFF24,0x4B93,{ 0xA0,0xE6,0xF0,0x29,0xC9,0x48,0x71,0xF1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBlockStatics3>{ static constexpr GUID value{ 0x8D16B9EB,0x20A1,0x4EAB,{ 0xBB,0xF2,0x1D,0x6B,0xDC,0xBC,0xD7,0x05 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBlockStatics5>{ static constexpr GUID value{ 0x8E4D9C70,0x0D4E,0x48DF,{ 0xAE,0x7F,0xBB,0x7A,0x9A,0xF6,0x85,0x2E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBlockStatics6>{ static constexpr GUID value{ 0x3D1013A9,0xF9A6,0x43A2,{ 0x99,0xD3,0x57,0x3B,0x89,0xA8,0x3C,0xA3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBox>{ static constexpr GUID value{ 0xE48F5A8B,0x1DFF,0x4352,{ 0xA1,0xF4,0xE5,0x16,0x51,0x4E,0xC8,0x82 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBox2>{ static constexpr GUID value{ 0xF7168C00,0x1432,0x462A,{ 0x94,0x05,0x38,0xF3,0x85,0xBF,0xC3,0x7C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBox3>{ static constexpr GUID value{ 0x7DF18C3C,0x2826,0x425E,{ 0x9A,0x94,0x00,0xB7,0xF7,0x3F,0x37,0x56 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBox4>{ static constexpr GUID value{ 0xB5F1A675,0xCCE1,0x45AF,{ 0xAE,0xF9,0xC4,0x78,0x7B,0xBB,0x5E,0x30 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBox5>{ static constexpr GUID value{ 0x35F9CFC1,0x4176,0x44F4,{ 0xB7,0x56,0xE9,0xCC,0xC4,0x39,0x98,0x05 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBox6>{ static constexpr GUID value{ 0x41FF2D07,0x5085,0x4E52,{ 0xA5,0x1C,0xF9,0x4B,0x06,0xCD,0x55,0x8B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBox7>{ static constexpr GUID value{ 0xDA4911F9,0xFFE1,0x4C6A,{ 0xAC,0x6D,0x1B,0x4A,0x17,0x4C,0xCF,0x80 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs>{ static constexpr GUID value{ 0xA5541DB3,0x7784,0x4258,{ 0xAA,0x83,0xE4,0xBE,0xDD,0x72,0x74,0x67 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBoxFactory>{ static constexpr GUID value{ 0x710E4278,0x8529,0x47D3,{ 0x8D,0x8E,0x30,0x7E,0x34,0xCF,0xF0,0x81 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBoxStatics>{ static constexpr GUID value{ 0x7E37F4FB,0xA4BC,0x4625,{ 0x88,0x38,0x8E,0xB2,0xA9,0x09,0x12,0x83 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBoxStatics2>{ static constexpr GUID value{ 0x7592F37D,0x4E76,0x4EE4,{ 0x8E,0x0F,0x7D,0x6E,0x1A,0x23,0x32,0x6B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBoxStatics3>{ static constexpr GUID value{ 0x0E1005C0,0x10B5,0x40F6,{ 0x92,0xC2,0xCE,0x13,0x4B,0x0D,0x34,0x57 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBoxStatics5>{ static constexpr GUID value{ 0x07D04B45,0x1B2F,0x4627,{ 0x82,0xFD,0x68,0x3F,0x19,0x7E,0x5A,0x75 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBoxStatics6>{ static constexpr GUID value{ 0xDC0D97E7,0x1CB7,0x433E,{ 0xAA,0x4F,0x9C,0x64,0xC9,0x8C,0xDE,0xE5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBoxStatics7>{ static constexpr GUID value{ 0xCD6C6F47,0x147E,0x46F8,{ 0xA4,0xE8,0x74,0x9C,0x49,0x84,0x7A,0x3E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs>{ static constexpr GUID value{ 0x4E6A4B75,0x43DD,0x4E33,{ 0xAC,0xBE,0x2D,0x87,0x96,0xA1,0x79,0x27 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs2>{ static constexpr GUID value{ 0xC0723D44,0x53A6,0x415F,{ 0xA9,0x81,0x50,0xDF,0xAF,0x1B,0xEC,0xBE } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextChangedEventArgs>{ static constexpr GUID value{ 0x4DD04F7D,0x7A11,0x4B2E,{ 0x99,0x33,0x57,0x7D,0xF3,0x92,0x52,0xB6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs>{ static constexpr GUID value{ 0xB9C7E0F2,0x50B7,0x441D,{ 0x99,0x0C,0x68,0x55,0x3E,0x2E,0x05,0x6B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs>{ static constexpr GUID value{ 0x46E34DB2,0x77C0,0x4015,{ 0x8E,0xB4,0x92,0xEE,0xFD,0xFC,0x59,0x14 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs>{ static constexpr GUID value{ 0xDF22ABB2,0x10CF,0x491E,{ 0x91,0xE8,0xD3,0xCD,0x72,0xD8,0xA0,0xD3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs>{ static constexpr GUID value{ 0xE405EF19,0xD0DF,0x43DA,{ 0xAC,0xE6,0x16,0xF9,0x11,0x38,0x68,0xC3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs>{ static constexpr GUID value{ 0x5F894995,0xA58D,0x4CF3,{ 0xB5,0x89,0xB5,0xE5,0x00,0xE0,0x64,0x75 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITextControlPasteEventArgs>{ static constexpr GUID value{ 0x4BD1D625,0x221A,0x477E,{ 0xBB,0x2C,0xAD,0x0C,0x1E,0xD1,0x25,0xE7 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITimePickedEventArgs>{ static constexpr GUID value{ 0x8AD3FF21,0x5F66,0x4785,{ 0xB9,0x99,0x24,0xFE,0xF3,0x9F,0xB6,0xDB } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITimePicker>{ static constexpr GUID value{ 0xE39099F2,0x3AFF,0x4792,{ 0x90,0x9E,0x2D,0x99,0x41,0xEC,0x03,0x57 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITimePicker2>{ static constexpr GUID value{ 0x0FF0798C,0xF922,0x419F,{ 0x8B,0x3D,0x23,0xEE,0x75,0x86,0xD4,0x8E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITimePickerFactory>{ static constexpr GUID value{ 0x553FE413,0x6CD7,0x46A9,{ 0xA9,0x7B,0xA1,0x8B,0xDC,0x4B,0x4C,0xA3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITimePickerFlyout>{ static constexpr GUID value{ 0xBB739D75,0xE836,0x439E,{ 0x86,0xD5,0x50,0x6D,0x2D,0x18,0xE4,0x04 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter>{ static constexpr GUID value{ 0xC5320638,0x7A18,0x40ED,{ 0x9F,0xD0,0x4C,0x85,0x2C,0x09,0xB2,0x4E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics>{ static constexpr GUID value{ 0x3F6728CE,0x2169,0x4003,{ 0xB4,0xA8,0x8D,0xE7,0x03,0x5A,0x0A,0xD6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITimePickerStatics>{ static constexpr GUID value{ 0xFA71DFB1,0x233E,0x4F31,{ 0xB8,0xBE,0xA6,0xEA,0x67,0x0C,0x25,0xCD } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITimePickerStatics2>{ static constexpr GUID value{ 0x36D8ABCD,0x4E10,0x451A,{ 0xB9,0x3B,0x1A,0x73,0x1E,0xA7,0xEE,0x3F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>{ static constexpr GUID value{ 0x2F4EDB8D,0xB995,0x4E31,{ 0x8B,0xA9,0xC4,0xDC,0xDE,0xB2,0x1C,0xA3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem>{ static constexpr GUID value{ 0x49841EDD,0x88E9,0x4663,{ 0xA7,0x01,0xCD,0x4F,0xD2,0x5E,0x39,0x8F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>{ static constexpr GUID value{ 0xA151966F,0x3BF7,0x46B6,{ 0xB6,0x1C,0x9B,0x2C,0x1B,0xA6,0x88,0x43 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>{ static constexpr GUID value{ 0x16C724FB,0x6C1A,0x4852,{ 0x92,0x58,0x08,0xC0,0x38,0x36,0x79,0x07 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IToggleSwitch>{ static constexpr GUID value{ 0x331D8F00,0xC5F9,0x46A5,{ 0xB6,0xC8,0xED,0xE5,0x39,0x30,0x45,0x67 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IToggleSwitchOverrides>{ static constexpr GUID value{ 0xBFD07F53,0xF8CA,0x4E47,{ 0x94,0x9E,0x9E,0x80,0x42,0x9B,0x3D,0x16 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IToggleSwitchStatics>{ static constexpr GUID value{ 0x1D37147F,0x97DF,0x4226,{ 0x92,0xCA,0xDD,0xF4,0x53,0xD7,0xFD,0x5A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IToolTip>{ static constexpr GUID value{ 0x7DE5D75F,0x4415,0x429F,{ 0xB5,0x23,0x69,0x9B,0xDB,0x8C,0x30,0xDB } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IToolTipFactory>{ static constexpr GUID value{ 0x89839403,0xB538,0x49E3,{ 0xA4,0x30,0x3A,0xC0,0x37,0xDC,0x6F,0xE0 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IToolTipService>{ static constexpr GUID value{ 0x03A55F87,0xBFCC,0x4A1E,{ 0x8F,0xEA,0x98,0xF6,0x10,0x83,0x2C,0xEA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IToolTipServiceStatics>{ static constexpr GUID value{ 0x86E649F8,0xE245,0x48AA,{ 0xA8,0xC8,0xD1,0x07,0x3E,0xD7,0x63,0x19 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IToolTipStatics>{ static constexpr GUID value{ 0xF00285B8,0x4BA9,0x4F4F,{ 0x86,0xA7,0x86,0x00,0x38,0x13,0xCE,0xB3 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeView>{ static constexpr GUID value{ 0x9353CC5C,0xDD6E,0x453C,{ 0xAE,0xDD,0x0C,0x3A,0xC9,0x93,0x97,0x8B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>{ static constexpr GUID value{ 0x391DB3B0,0x1E58,0x4539,{ 0x9E,0x93,0x38,0x79,0x78,0xF4,0x6C,0xCE } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs>{ static constexpr GUID value{ 0xC5E1FA63,0x4154,0x49D2,{ 0xA2,0x1F,0xC3,0x41,0x76,0x60,0x5E,0x3A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewFactory>{ static constexpr GUID value{ 0xCC5267C3,0x6C69,0x49CE,{ 0xB4,0x45,0x75,0x3A,0xCE,0xE7,0x94,0x8B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewItem>{ static constexpr GUID value{ 0x4E05D3E6,0x6167,0x44E7,{ 0x9C,0x74,0x29,0x1D,0xDD,0x6D,0xF6,0xEB } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewItemFactory>{ static constexpr GUID value{ 0x4EA32731,0x568D,0x4D0D,{ 0xAD,0xFD,0x3D,0x8D,0xC5,0xAA,0x5D,0x88 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>{ static constexpr GUID value{ 0x472AB521,0x0242,0x4290,{ 0x93,0x63,0xAB,0x4F,0xE7,0x04,0x52,0x7F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewItemStatics>{ static constexpr GUID value{ 0x436795BE,0x7396,0x46DC,{ 0xA2,0x64,0x21,0xC5,0x65,0x81,0xC5,0xE5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettings>{ static constexpr GUID value{ 0xEC323744,0xDE31,0x4936,{ 0xBF,0xC2,0x1C,0xB3,0x7B,0xA1,0xDC,0x08 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>{ static constexpr GUID value{ 0x11A1953B,0x31B7,0x4F40,{ 0x86,0x33,0x02,0xFC,0x61,0x4B,0x51,0x8C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>{ static constexpr GUID value{ 0x55C720A8,0x70ED,0x4C21,{ 0x93,0xF4,0x2D,0x79,0xC1,0xA4,0xA5,0xF7 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewList>{ static constexpr GUID value{ 0x0F00A54E,0x099A,0x47A5,{ 0xA9,0x42,0x94,0x69,0x2B,0x01,0xF4,0x52 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewListFactory>{ static constexpr GUID value{ 0x288F6232,0x41D2,0x46F7,{ 0xB1,0xF5,0x69,0x1C,0x62,0x52,0x64,0xB7 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewNode>{ static constexpr GUID value{ 0xC04C8ED3,0x9AF2,0x4E75,{ 0xA3,0x29,0x74,0x97,0xA1,0x10,0xE7,0xA8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewNodeFactory>{ static constexpr GUID value{ 0x6EC62D90,0xAA19,0x414A,{ 0x8A,0x45,0x0A,0x55,0x89,0xA8,0x36,0xF7 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewNodeStatics>{ static constexpr GUID value{ 0x5D8276FE,0xE1D1,0x4B61,{ 0x9E,0x81,0xC7,0xFB,0x18,0x9A,0x29,0x80 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ITreeViewStatics>{ static constexpr GUID value{ 0xEF913E08,0x83F2,0x4E16,{ 0xBF,0xB1,0x15,0x77,0xB9,0x83,0x55,0xF5 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IUIElementCollection>{ static constexpr GUID value{ 0xD6602D54,0x88F6,0x43F6,{ 0x85,0xD8,0xA9,0xD9,0x14,0xA6,0xDD,0x3B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IUserControl>{ static constexpr GUID value{ 0xA7A69EC9,0xEA35,0x4679,{ 0xBF,0x29,0xF4,0xF0,0x92,0x86,0xD3,0x14 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IUserControlFactory>{ static constexpr GUID value{ 0x38B1ED92,0xA28A,0x4972,{ 0x93,0xDF,0xF4,0xF7,0x59,0xB8,0xAF,0xD2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IUserControlStatics>{ static constexpr GUID value{ 0xE8887976,0x2C5C,0x41CF,{ 0xBE,0x6A,0x9E,0x44,0xBE,0xFD,0xF6,0x55 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>{ static constexpr GUID value{ 0x9CA507C7,0x23C9,0x4F01,{ 0xB8,0x0F,0xBE,0x5C,0x21,0xEE,0xF4,0x74 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics>{ static constexpr GUID value{ 0xFE9DB859,0x8127,0x4AEF,{ 0xB7,0xA2,0x94,0x98,0x47,0x48,0x6E,0x96 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IViewbox>{ static constexpr GUID value{ 0x05252C58,0xBA9D,0x4809,{ 0x9E,0xC3,0xFA,0x0D,0x16,0x71,0x0B,0xA1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IViewboxStatics>{ static constexpr GUID value{ 0x5CD1E72D,0xE8D3,0x4865,{ 0x8F,0x08,0xB6,0xB2,0xD6,0x89,0xAD,0xF1 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IVirtualizingPanel>{ static constexpr GUID value{ 0x38AAD50C,0x12CF,0x4D1E,{ 0xA8,0x84,0xC9,0xDF,0x85,0xF0,0x7C,0xD9 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IVirtualizingPanelFactory>{ static constexpr GUID value{ 0xBE19F839,0xCBD0,0x43E9,{ 0xA5,0xD0,0x0B,0xDB,0xA0,0xFF,0xBD,0x38 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides>{ static constexpr GUID value{ 0x5EF6BD7D,0x677F,0x408D,{ 0xA9,0x6C,0xB1,0x95,0x07,0x75,0x04,0x66 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IVirtualizingPanelProtected>{ static constexpr GUID value{ 0xC9C9AB42,0xC232,0x479D,{ 0xA7,0xC9,0x5E,0x76,0x11,0x19,0x6A,0x45 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IVirtualizingStackPanel>{ static constexpr GUID value{ 0x7567CD9A,0xA3B4,0x4DEA,{ 0xBB,0x11,0x54,0x9E,0x2C,0x2F,0x91,0x9D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>{ static constexpr GUID value{ 0xCBE6F72C,0x2892,0x46D1,{ 0x98,0x7F,0x58,0xCA,0x10,0x81,0xF0,0x40 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics>{ static constexpr GUID value{ 0x8314E778,0x91D3,0x4D56,{ 0xAC,0x09,0x22,0x3A,0xDC,0xD2,0xBD,0x3F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebView>{ static constexpr GUID value{ 0x5862CC46,0x1F7D,0x479B,{ 0x92,0xA6,0xDE,0x78,0x58,0xFE,0x8D,0x54 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebView2>{ static constexpr GUID value{ 0xD481759E,0x3EFF,0x4462,{ 0x82,0x3D,0xFD,0x52,0xF9,0xBA,0x4C,0xC8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebView3>{ static constexpr GUID value{ 0xC497789B,0xB499,0x4D69,{ 0xB5,0xC2,0xAE,0x9D,0x5D,0x6D,0x59,0x4E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebView4>{ static constexpr GUID value{ 0xE28243BC,0x67F3,0x462A,{ 0xB4,0xE0,0x3B,0xBF,0x6C,0x3D,0xAB,0x0B } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebView5>{ static constexpr GUID value{ 0x8C9884A6,0x2F3B,0x4A55,{ 0xA4,0x63,0x84,0x44,0xC2,0x09,0x5D,0x00 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebView6>{ static constexpr GUID value{ 0x38CCD942,0x2536,0x467C,{ 0xA2,0x11,0xAF,0x35,0x9C,0x3B,0x4F,0xDA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewBrush>{ static constexpr GUID value{ 0x40E86F75,0x0CF4,0x4B72,{ 0xA4,0xD6,0xCF,0x5D,0x15,0x78,0x01,0x16 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewBrushStatics>{ static constexpr GUID value{ 0xD74DAA24,0x1D05,0x463E,{ 0xB0,0x28,0x6B,0xAA,0x44,0x20,0xE7,0x62 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs>{ static constexpr GUID value{ 0x6E2980BB,0x98B8,0x413E,{ 0x81,0x29,0x97,0x1C,0x6F,0x7E,0x4C,0x8A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs>{ static constexpr GUID value{ 0xC47EBA15,0xDC6B,0x4B36,{ 0x9D,0x80,0x82,0xFB,0x88,0x17,0xB9,0x88 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>{ static constexpr GUID value{ 0xA3DCC461,0x7350,0x4D3A,{ 0x8F,0xB9,0x40,0xEE,0xEC,0x27,0x46,0xC2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewFactory4>{ static constexpr GUID value{ 0x82EDAC58,0xEE6A,0x4C9B,{ 0xA3,0xA0,0x93,0x47,0xA7,0xD0,0xEF,0x4C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs>{ static constexpr GUID value{ 0xF3F020AB,0xA46C,0x42B0,{ 0x9E,0xFE,0x69,0x76,0x4D,0x5C,0xFF,0xA6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs>{ static constexpr GUID value{ 0x11E6F20B,0xEBA7,0x44C0,{ 0x88,0x9B,0xED,0xEB,0x6A,0x06,0x4D,0xDD } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs>{ static constexpr GUID value{ 0xAF09609A,0x129C,0x4170,{ 0x9E,0x9C,0xE2,0xCD,0xF0,0x25,0xDC,0xA4 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs>{ static constexpr GUID value{ 0x94CB8668,0x8367,0x43D5,{ 0x91,0xBB,0x96,0xEB,0xA3,0x7E,0xC7,0x84 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs>{ static constexpr GUID value{ 0x470FA818,0x6862,0x44D9,{ 0xB3,0xD1,0xC0,0x69,0x63,0x73,0xDE,0x35 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewPermissionRequest>{ static constexpr GUID value{ 0x17B76332,0x66C4,0x4131,{ 0x99,0x9E,0xDF,0x7D,0xE2,0x0A,0x8C,0x9C } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs>{ static constexpr GUID value{ 0xDADECFD0,0x6E1E,0x473F,{ 0xB0,0xBE,0xB0,0x24,0x04,0xD6,0xA8,0x6D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewSeparateProcessLostEventArgs>{ static constexpr GUID value{ 0xA405700A,0xC482,0x40B5,{ 0xAA,0xEA,0xE1,0x0C,0xFA,0x9F,0x5A,0xBE } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewSettings>{ static constexpr GUID value{ 0x1D50AD4D,0xABF6,0x4785,{ 0x8D,0xF3,0xFD,0xEB,0xC1,0x27,0x03,0x01 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewStatics>{ static constexpr GUID value{ 0xA0B561DE,0x5FDB,0x443B,{ 0xB9,0xF0,0x5C,0x30,0xF6,0xB7,0xA1,0xF4 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewStatics2>{ static constexpr GUID value{ 0x322F8780,0xE812,0x466B,{ 0x9E,0x50,0x8E,0x9F,0xEC,0x24,0x01,0x8A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewStatics3>{ static constexpr GUID value{ 0x129BEF8A,0x4509,0x4374,{ 0xB0,0xD1,0xA7,0x10,0x4D,0x0C,0x3A,0x2F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewStatics4>{ static constexpr GUID value{ 0x44B197B0,0xB746,0x40F3,{ 0x99,0x36,0x4E,0xBB,0xFF,0x6B,0x47,0xB8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewStatics5>{ static constexpr GUID value{ 0x08A0B8D1,0x508A,0x4DB8,{ 0x97,0xEF,0x0F,0xA5,0x05,0xE1,0x9E,0xC2 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs>{ static constexpr GUID value{ 0xB9C9E1A7,0x620F,0x4895,{ 0x93,0x5D,0x10,0xFB,0xAC,0x6F,0xD2,0x9E } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs>{ static constexpr GUID value{ 0x37BC16E1,0x6062,0x4678,{ 0xB2,0x0B,0x6C,0x36,0xAC,0x9C,0x59,0xAC } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2>{ static constexpr GUID value{ 0x9ABE1154,0x36F0,0x4268,{ 0x8D,0x88,0x12,0x1E,0xED,0xF4,0x5E,0x6A } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWrapGrid>{ static constexpr GUID value{ 0x0552178B,0x7567,0x47C2,{ 0xBD,0x5C,0xAD,0x83,0x94,0xC8,0x28,0xBA } }; };
template <> struct guid<Windows::UI::Xaml::Controls::IWrapGridStatics>{ static constexpr GUID value{ 0xD04A6B97,0x13CB,0x479C,{ 0xA2,0x85,0xE4,0xE5,0x68,0x46,0xC4,0xCB } }; };
template <> struct guid<Windows::UI::Xaml::Controls::BackClickEventHandler>{ static constexpr GUID value{ 0xFA9BC21F,0x9892,0x482E,{ 0xAB,0xF6,0xEB,0x2D,0x60,0x7D,0x32,0xDE } }; };
template <> struct guid<Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler>{ static constexpr GUID value{ 0x8D745891,0x4DE3,0x49CB,{ 0x97,0x4B,0x08,0x38,0x71,0xA3,0xAF,0xE6 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler>{ static constexpr GUID value{ 0xCACAD0D6,0x0F0D,0x4870,{ 0x88,0x4D,0xF2,0xDE,0xDF,0x67,0x42,0x88 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler>{ static constexpr GUID value{ 0xDF945151,0x745C,0x4446,{ 0xB2,0xFC,0x21,0x6D,0x76,0x58,0x47,0xA0 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::DragItemsStartingEventHandler>{ static constexpr GUID value{ 0x3AAEAB4C,0x14CB,0x4434,{ 0xBE,0xCC,0x88,0xA8,0x58,0x5C,0x2F,0x89 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler>{ static constexpr GUID value{ 0xAFE17B9B,0x9C63,0x4583,{ 0x88,0xE4,0xC5,0x90,0x19,0xB7,0xF4,0x9D } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ItemClickEventHandler>{ static constexpr GUID value{ 0x3DF6D14E,0xE18A,0x4A75,{ 0x93,0x95,0x62,0x7C,0x5F,0x3C,0xD4,0x89 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ListViewItemToKeyHandler>{ static constexpr GUID value{ 0x6AF5DA76,0x7E8B,0x4A91,{ 0x9A,0x56,0x46,0x0C,0xB4,0x7D,0x52,0x3F } }; };
template <> struct guid<Windows::UI::Xaml::Controls::ListViewKeyToItemHandler>{ static constexpr GUID value{ 0x26FD5855,0xB530,0x4688,{ 0xB9,0xF0,0x42,0x82,0x49,0x17,0x8E,0xF8 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::NotifyEventHandler>{ static constexpr GUID value{ 0xC2FDD1F8,0x7105,0x4A74,{ 0xA1,0x09,0xDE,0x29,0xDF,0xF5,0x6B,0x98 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler>{ static constexpr GUID value{ 0x6BECAA6A,0x63F8,0x47FF,{ 0xB6,0xAC,0x76,0xE7,0xDA,0x24,0x7D,0x67 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::SelectionChangedEventHandler>{ static constexpr GUID value{ 0xE1A05352,0x5AA0,0x42CA,{ 0x9C,0xD9,0x06,0x8A,0x14,0xDB,0x6E,0x68 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler>{ static constexpr GUID value{ 0x1FA9161D,0x5D73,0x44FB,{ 0x81,0xAC,0xD1,0xC9,0x38,0x49,0x19,0xD4 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::TextChangedEventHandler>{ static constexpr GUID value{ 0x8EB35B97,0xAD87,0x40E8,{ 0x81,0x8B,0x77,0xDB,0x24,0x75,0x95,0x66 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::TextControlPasteEventHandler>{ static constexpr GUID value{ 0xD56DB359,0x6F77,0x4296,{ 0xAB,0x9C,0x79,0x49,0x39,0x44,0x43,0x65 } }; };
template <> struct guid<Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler>{ static constexpr GUID value{ 0xA31EAFE1,0x41DC,0x47F8,{ 0xAE,0x22,0x97,0x06,0xC8,0xF1,0x43,0xD4 } }; };
template <> struct default_interface<Windows::UI::Xaml::Controls::AppBar>{ using type = Windows::UI::Xaml::Controls::IAppBar; };
template <> struct default_interface<Windows::UI::Xaml::Controls::AppBarButton>{ using type = Windows::UI::Xaml::Controls::IAppBarButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::AppBarSeparator>{ using type = Windows::UI::Xaml::Controls::IAppBarSeparator; };
template <> struct default_interface<Windows::UI::Xaml::Controls::AppBarToggleButton>{ using type = Windows::UI::Xaml::Controls::IAppBarToggleButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::AutoSuggestBox>{ using type = Windows::UI::Xaml::Controls::IAutoSuggestBox; };
template <> struct default_interface<Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>{ using type = Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs>{ using type = Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::BackClickEventArgs>{ using type = Windows::UI::Xaml::Controls::IBackClickEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::BitmapIcon>{ using type = Windows::UI::Xaml::Controls::IBitmapIcon; };
template <> struct default_interface<Windows::UI::Xaml::Controls::BitmapIconSource>{ using type = Windows::UI::Xaml::Controls::IBitmapIconSource; };
template <> struct default_interface<Windows::UI::Xaml::Controls::Border>{ using type = Windows::UI::Xaml::Controls::IBorder; };
template <> struct default_interface<Windows::UI::Xaml::Controls::Button>{ using type = Windows::UI::Xaml::Controls::IButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::CalendarDatePicker>{ using type = Windows::UI::Xaml::Controls::ICalendarDatePicker; };
template <> struct default_interface<Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::CalendarView>{ using type = Windows::UI::Xaml::Controls::ICalendarView; };
template <> struct default_interface<Windows::UI::Xaml::Controls::CalendarViewDayItem>{ using type = Windows::UI::Xaml::Controls::ICalendarViewDayItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs>{ using type = Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::Canvas>{ using type = Windows::UI::Xaml::Controls::ICanvas; };
template <> struct default_interface<Windows::UI::Xaml::Controls::CaptureElement>{ using type = Windows::UI::Xaml::Controls::ICaptureElement; };
template <> struct default_interface<Windows::UI::Xaml::Controls::CheckBox>{ using type = Windows::UI::Xaml::Controls::ICheckBox; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>{ using type = Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs>{ using type = Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>{ using type = Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ColorChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::IColorChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ColorPicker>{ using type = Windows::UI::Xaml::Controls::IColorPicker; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ColumnDefinition>{ using type = Windows::UI::Xaml::Controls::IColumnDefinition; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ColumnDefinitionCollection>{ using type = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::ColumnDefinition>; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ComboBox>{ using type = Windows::UI::Xaml::Controls::IComboBox; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ComboBoxItem>{ using type = Windows::UI::Xaml::Controls::IComboBoxItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::CommandBar>{ using type = Windows::UI::Xaml::Controls::ICommandBar; };
template <> struct default_interface<Windows::UI::Xaml::Controls::CommandBarOverflowPresenter>{ using type = Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs>{ using type = Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ContentControl>{ using type = Windows::UI::Xaml::Controls::IContentControl; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ContentDialog>{ using type = Windows::UI::Xaml::Controls::IContentDialog; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ContentDialogButtonClickDeferral>{ using type = Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>{ using type = Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs>{ using type = Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ContentDialogClosingDeferral>{ using type = Windows::UI::Xaml::Controls::IContentDialogClosingDeferral; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs>{ using type = Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs>{ using type = Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ContentLinkChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::IContentLinkChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ContentPresenter>{ using type = Windows::UI::Xaml::Controls::IContentPresenter; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ContextMenuEventArgs>{ using type = Windows::UI::Xaml::Controls::IContextMenuEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::Control>{ using type = Windows::UI::Xaml::Controls::IControl; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ControlTemplate>{ using type = Windows::UI::Xaml::Controls::IControlTemplate; };
template <> struct default_interface<Windows::UI::Xaml::Controls::DataTemplateSelector>{ using type = Windows::UI::Xaml::Controls::IDataTemplateSelector; };
template <> struct default_interface<Windows::UI::Xaml::Controls::DatePickedEventArgs>{ using type = Windows::UI::Xaml::Controls::IDatePickedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::DatePicker>{ using type = Windows::UI::Xaml::Controls::IDatePicker; };
template <> struct default_interface<Windows::UI::Xaml::Controls::DatePickerFlyout>{ using type = Windows::UI::Xaml::Controls::IDatePickerFlyout; };
template <> struct default_interface<Windows::UI::Xaml::Controls::DatePickerFlyoutItem>{ using type = Windows::UI::Xaml::Controls::IDatePickerFlyoutItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::DatePickerFlyoutPresenter>{ using type = Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter; };
template <> struct default_interface<Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs>{ using type = Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::DragItemsStartingEventArgs>{ using type = Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs>{ using type = Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::FlipView>{ using type = Windows::UI::Xaml::Controls::IFlipView; };
template <> struct default_interface<Windows::UI::Xaml::Controls::FlipViewItem>{ using type = Windows::UI::Xaml::Controls::IFlipViewItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::Flyout>{ using type = Windows::UI::Xaml::Controls::IFlyout; };
template <> struct default_interface<Windows::UI::Xaml::Controls::FlyoutPresenter>{ using type = Windows::UI::Xaml::Controls::IFlyoutPresenter; };
template <> struct default_interface<Windows::UI::Xaml::Controls::FocusDisengagedEventArgs>{ using type = Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::FocusEngagedEventArgs>{ using type = Windows::UI::Xaml::Controls::IFocusEngagedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::FontIcon>{ using type = Windows::UI::Xaml::Controls::IFontIcon; };
template <> struct default_interface<Windows::UI::Xaml::Controls::FontIconSource>{ using type = Windows::UI::Xaml::Controls::IFontIconSource; };
template <> struct default_interface<Windows::UI::Xaml::Controls::Frame>{ using type = Windows::UI::Xaml::Controls::IFrame; };
template <> struct default_interface<Windows::UI::Xaml::Controls::Grid>{ using type = Windows::UI::Xaml::Controls::IGrid; };
template <> struct default_interface<Windows::UI::Xaml::Controls::GridView>{ using type = Windows::UI::Xaml::Controls::IGridView; };
template <> struct default_interface<Windows::UI::Xaml::Controls::GridViewHeaderItem>{ using type = Windows::UI::Xaml::Controls::IGridViewHeaderItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::GridViewItem>{ using type = Windows::UI::Xaml::Controls::IGridViewItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::GroupItem>{ using type = Windows::UI::Xaml::Controls::IGroupItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::GroupStyle>{ using type = Windows::UI::Xaml::Controls::IGroupStyle; };
template <> struct default_interface<Windows::UI::Xaml::Controls::GroupStyleSelector>{ using type = Windows::UI::Xaml::Controls::IGroupStyleSelector; };
template <> struct default_interface<Windows::UI::Xaml::Controls::HandwritingPanelClosedEventArgs>{ using type = Windows::UI::Xaml::Controls::IHandwritingPanelClosedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::HandwritingPanelOpenedEventArgs>{ using type = Windows::UI::Xaml::Controls::IHandwritingPanelOpenedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::HandwritingView>{ using type = Windows::UI::Xaml::Controls::IHandwritingView; };
template <> struct default_interface<Windows::UI::Xaml::Controls::Hub>{ using type = Windows::UI::Xaml::Controls::IHub; };
template <> struct default_interface<Windows::UI::Xaml::Controls::HubSection>{ using type = Windows::UI::Xaml::Controls::IHubSection; };
template <> struct default_interface<Windows::UI::Xaml::Controls::HubSectionCollection>{ using type = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection>; };
template <> struct default_interface<Windows::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>{ using type = Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::HyperlinkButton>{ using type = Windows::UI::Xaml::Controls::IHyperlinkButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::IconElement>{ using type = Windows::UI::Xaml::Controls::IIconElement; };
template <> struct default_interface<Windows::UI::Xaml::Controls::IconSource>{ using type = Windows::UI::Xaml::Controls::IIconSource; };
template <> struct default_interface<Windows::UI::Xaml::Controls::Image>{ using type = Windows::UI::Xaml::Controls::IImage; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkCanvas>{ using type = Windows::UI::Xaml::Controls::IInkCanvas; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbar>{ using type = Windows::UI::Xaml::Controls::IInkToolbar; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarBallpointPenButton>{ using type = Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarCustomPen>{ using type = Windows::UI::Xaml::Controls::IInkToolbarCustomPen; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarCustomPenButton>{ using type = Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarCustomToggleButton>{ using type = Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarCustomToolButton>{ using type = Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarEraserButton>{ using type = Windows::UI::Xaml::Controls::IInkToolbarEraserButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarFlyoutItem>{ using type = Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarHighlighterButton>{ using type = Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarIsStencilButtonCheckedChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::IInkToolbarIsStencilButtonCheckedChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarMenuButton>{ using type = Windows::UI::Xaml::Controls::IInkToolbarMenuButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarPenButton>{ using type = Windows::UI::Xaml::Controls::IInkToolbarPenButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarPenConfigurationControl>{ using type = Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarPencilButton>{ using type = Windows::UI::Xaml::Controls::IInkToolbarPencilButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarRulerButton>{ using type = Windows::UI::Xaml::Controls::IInkToolbarRulerButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarStencilButton>{ using type = Windows::UI::Xaml::Controls::IInkToolbarStencilButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarToggleButton>{ using type = Windows::UI::Xaml::Controls::IInkToolbarToggleButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::InkToolbarToolButton>{ using type = Windows::UI::Xaml::Controls::IInkToolbarToolButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ItemClickEventArgs>{ using type = Windows::UI::Xaml::Controls::IItemClickEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ItemCollection>{ using type = Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ItemContainerGenerator>{ using type = Windows::UI::Xaml::Controls::IItemContainerGenerator; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ItemsControl>{ using type = Windows::UI::Xaml::Controls::IItemsControl; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ItemsPanelTemplate>{ using type = Windows::UI::Xaml::Controls::IItemsPanelTemplate; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ItemsPickedEventArgs>{ using type = Windows::UI::Xaml::Controls::IItemsPickedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ItemsPresenter>{ using type = Windows::UI::Xaml::Controls::IItemsPresenter; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ItemsStackPanel>{ using type = Windows::UI::Xaml::Controls::IItemsStackPanel; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ItemsWrapGrid>{ using type = Windows::UI::Xaml::Controls::IItemsWrapGrid; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ListBox>{ using type = Windows::UI::Xaml::Controls::IListBox; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ListBoxItem>{ using type = Windows::UI::Xaml::Controls::IListBoxItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ListPickerFlyout>{ using type = Windows::UI::Xaml::Controls::IListPickerFlyout; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ListPickerFlyoutPresenter>{ using type = Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ListView>{ using type = Windows::UI::Xaml::Controls::IListView; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ListViewBase>{ using type = Windows::UI::Xaml::Controls::IListViewBase; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ListViewBaseHeaderItem>{ using type = Windows::UI::Xaml::Controls::IListViewBaseHeaderItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ListViewHeaderItem>{ using type = Windows::UI::Xaml::Controls::IListViewHeaderItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ListViewItem>{ using type = Windows::UI::Xaml::Controls::IListViewItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ListViewPersistenceHelper>{ using type = Windows::UI::Xaml::Controls::IListViewPersistenceHelper; };
template <> struct default_interface<Windows::UI::Xaml::Controls::MediaElement>{ using type = Windows::UI::Xaml::Controls::IMediaElement; };
template <> struct default_interface<Windows::UI::Xaml::Controls::MediaPlayerElement>{ using type = Windows::UI::Xaml::Controls::IMediaPlayerElement; };
template <> struct default_interface<Windows::UI::Xaml::Controls::MediaPlayerPresenter>{ using type = Windows::UI::Xaml::Controls::IMediaPlayerPresenter; };
template <> struct default_interface<Windows::UI::Xaml::Controls::MediaTransportControls>{ using type = Windows::UI::Xaml::Controls::IMediaTransportControls; };
template <> struct default_interface<Windows::UI::Xaml::Controls::MediaTransportControlsHelper>{ using type = Windows::UI::Xaml::Controls::IMediaTransportControlsHelper; };
template <> struct default_interface<Windows::UI::Xaml::Controls::MenuFlyout>{ using type = Windows::UI::Xaml::Controls::IMenuFlyout; };
template <> struct default_interface<Windows::UI::Xaml::Controls::MenuFlyoutItem>{ using type = Windows::UI::Xaml::Controls::IMenuFlyoutItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::MenuFlyoutItemBase>{ using type = Windows::UI::Xaml::Controls::IMenuFlyoutItemBase; };
template <> struct default_interface<Windows::UI::Xaml::Controls::MenuFlyoutPresenter>{ using type = Windows::UI::Xaml::Controls::IMenuFlyoutPresenter; };
template <> struct default_interface<Windows::UI::Xaml::Controls::MenuFlyoutSeparator>{ using type = Windows::UI::Xaml::Controls::IMenuFlyoutSeparator; };
template <> struct default_interface<Windows::UI::Xaml::Controls::MenuFlyoutSubItem>{ using type = Windows::UI::Xaml::Controls::IMenuFlyoutSubItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::NavigationView>{ using type = Windows::UI::Xaml::Controls::INavigationView; };
template <> struct default_interface<Windows::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>{ using type = Windows::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::NavigationViewItem>{ using type = Windows::UI::Xaml::Controls::INavigationViewItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::NavigationViewItemBase>{ using type = Windows::UI::Xaml::Controls::INavigationViewItemBase; };
template <> struct default_interface<Windows::UI::Xaml::Controls::NavigationViewItemHeader>{ using type = Windows::UI::Xaml::Controls::INavigationViewItemHeader; };
template <> struct default_interface<Windows::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>{ using type = Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::NavigationViewItemSeparator>{ using type = Windows::UI::Xaml::Controls::INavigationViewItemSeparator; };
template <> struct default_interface<Windows::UI::Xaml::Controls::NavigationViewList>{ using type = Windows::UI::Xaml::Controls::INavigationViewList; };
template <> struct default_interface<Windows::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>{ using type = Windows::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::NotifyEventArgs>{ using type = Windows::UI::Xaml::Controls::INotifyEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::Page>{ using type = Windows::UI::Xaml::Controls::IPage; };
template <> struct default_interface<Windows::UI::Xaml::Controls::Panel>{ using type = Windows::UI::Xaml::Controls::IPanel; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ParallaxView>{ using type = Windows::UI::Xaml::Controls::IParallaxView; };
template <> struct default_interface<Windows::UI::Xaml::Controls::PasswordBox>{ using type = Windows::UI::Xaml::Controls::IPasswordBox; };
template <> struct default_interface<Windows::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs>{ using type = Windows::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::PathIcon>{ using type = Windows::UI::Xaml::Controls::IPathIcon; };
template <> struct default_interface<Windows::UI::Xaml::Controls::PathIconSource>{ using type = Windows::UI::Xaml::Controls::IPathIconSource; };
template <> struct default_interface<Windows::UI::Xaml::Controls::PersonPicture>{ using type = Windows::UI::Xaml::Controls::IPersonPicture; };
template <> struct default_interface<Windows::UI::Xaml::Controls::PickerConfirmedEventArgs>{ using type = Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::PickerFlyout>{ using type = Windows::UI::Xaml::Controls::IPickerFlyout; };
template <> struct default_interface<Windows::UI::Xaml::Controls::PickerFlyoutPresenter>{ using type = Windows::UI::Xaml::Controls::IPickerFlyoutPresenter; };
template <> struct default_interface<Windows::UI::Xaml::Controls::Pivot>{ using type = Windows::UI::Xaml::Controls::IPivot; };
template <> struct default_interface<Windows::UI::Xaml::Controls::PivotItem>{ using type = Windows::UI::Xaml::Controls::IPivotItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::PivotItemEventArgs>{ using type = Windows::UI::Xaml::Controls::IPivotItemEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ProgressBar>{ using type = Windows::UI::Xaml::Controls::IProgressBar; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ProgressRing>{ using type = Windows::UI::Xaml::Controls::IProgressRing; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RadioButton>{ using type = Windows::UI::Xaml::Controls::IRadioButton; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RatingControl>{ using type = Windows::UI::Xaml::Controls::IRatingControl; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RatingItemFontInfo>{ using type = Windows::UI::Xaml::Controls::IRatingItemFontInfo; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RatingItemImageInfo>{ using type = Windows::UI::Xaml::Controls::IRatingItemImageInfo; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RatingItemInfo>{ using type = Windows::UI::Xaml::Controls::IRatingItemInfo; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RefreshContainer>{ using type = Windows::UI::Xaml::Controls::IRefreshContainer; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RefreshRequestedEventArgs>{ using type = Windows::UI::Xaml::Controls::IRefreshRequestedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RefreshStateChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::IRefreshStateChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RefreshVisualizer>{ using type = Windows::UI::Xaml::Controls::IRefreshVisualizer; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RelativePanel>{ using type = Windows::UI::Xaml::Controls::IRelativePanel; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RichEditBox>{ using type = Windows::UI::Xaml::Controls::IRichEditBox; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs>{ using type = Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RichTextBlock>{ using type = Windows::UI::Xaml::Controls::IRichTextBlock; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RichTextBlockOverflow>{ using type = Windows::UI::Xaml::Controls::IRichTextBlockOverflow; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RowDefinition>{ using type = Windows::UI::Xaml::Controls::IRowDefinition; };
template <> struct default_interface<Windows::UI::Xaml::Controls::RowDefinitionCollection>{ using type = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::RowDefinition>; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ScrollContentPresenter>{ using type = Windows::UI::Xaml::Controls::IScrollContentPresenter; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ScrollViewer>{ using type = Windows::UI::Xaml::Controls::IScrollViewer; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ScrollViewerView>{ using type = Windows::UI::Xaml::Controls::IScrollViewerView; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs>{ using type = Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SearchBox>{ using type = Windows::UI::Xaml::Controls::ISearchBox; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs>{ using type = Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs>{ using type = Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs>{ using type = Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SectionsInViewChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SelectionChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::ISelectionChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SemanticZoom>{ using type = Windows::UI::Xaml::Controls::ISemanticZoom; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SemanticZoomLocation>{ using type = Windows::UI::Xaml::Controls::ISemanticZoomLocation; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SettingsFlyout>{ using type = Windows::UI::Xaml::Controls::ISettingsFlyout; };
template <> struct default_interface<Windows::UI::Xaml::Controls::Slider>{ using type = Windows::UI::Xaml::Controls::ISlider; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SplitView>{ using type = Windows::UI::Xaml::Controls::ISplitView; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs>{ using type = Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::StackPanel>{ using type = Windows::UI::Xaml::Controls::IStackPanel; };
template <> struct default_interface<Windows::UI::Xaml::Controls::StyleSelector>{ using type = Windows::UI::Xaml::Controls::IStyleSelector; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SwapChainBackgroundPanel>{ using type = Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SwapChainPanel>{ using type = Windows::UI::Xaml::Controls::ISwapChainPanel; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SwipeControl>{ using type = Windows::UI::Xaml::Controls::ISwipeControl; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SwipeItem>{ using type = Windows::UI::Xaml::Controls::ISwipeItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SwipeItemInvokedEventArgs>{ using type = Windows::UI::Xaml::Controls::ISwipeItemInvokedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SwipeItems>{ using type = Windows::UI::Xaml::Controls::ISwipeItems; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SymbolIcon>{ using type = Windows::UI::Xaml::Controls::ISymbolIcon; };
template <> struct default_interface<Windows::UI::Xaml::Controls::SymbolIconSource>{ using type = Windows::UI::Xaml::Controls::ISymbolIconSource; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TextBlock>{ using type = Windows::UI::Xaml::Controls::ITextBlock; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TextBox>{ using type = Windows::UI::Xaml::Controls::ITextBox; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs>{ using type = Windows::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs>{ using type = Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TextChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::ITextChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs>{ using type = Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs>{ using type = Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs>{ using type = Windows::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs>{ using type = Windows::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TextControlPasteEventArgs>{ using type = Windows::UI::Xaml::Controls::ITextControlPasteEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TimePickedEventArgs>{ using type = Windows::UI::Xaml::Controls::ITimePickedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TimePicker>{ using type = Windows::UI::Xaml::Controls::ITimePicker; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TimePickerFlyout>{ using type = Windows::UI::Xaml::Controls::ITimePickerFlyout; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TimePickerFlyoutPresenter>{ using type = Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs>{ using type = Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem>{ using type = Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ToggleSwitch>{ using type = Windows::UI::Xaml::Controls::IToggleSwitch; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ToolTip>{ using type = Windows::UI::Xaml::Controls::IToolTip; };
template <> struct default_interface<Windows::UI::Xaml::Controls::ToolTipService>{ using type = Windows::UI::Xaml::Controls::IToolTipService; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TreeView>{ using type = Windows::UI::Xaml::Controls::ITreeView; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TreeViewCollapsedEventArgs>{ using type = Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TreeViewExpandingEventArgs>{ using type = Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TreeViewItem>{ using type = Windows::UI::Xaml::Controls::ITreeViewItem; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>{ using type = Windows::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TreeViewItemTemplateSettings>{ using type = Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettings; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TreeViewList>{ using type = Windows::UI::Xaml::Controls::ITreeViewList; };
template <> struct default_interface<Windows::UI::Xaml::Controls::TreeViewNode>{ using type = Windows::UI::Xaml::Controls::ITreeViewNode; };
template <> struct default_interface<Windows::UI::Xaml::Controls::UIElementCollection>{ using type = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::UIElement>; };
template <> struct default_interface<Windows::UI::Xaml::Controls::UserControl>{ using type = Windows::UI::Xaml::Controls::IUserControl; };
template <> struct default_interface<Windows::UI::Xaml::Controls::VariableSizedWrapGrid>{ using type = Windows::UI::Xaml::Controls::IVariableSizedWrapGrid; };
template <> struct default_interface<Windows::UI::Xaml::Controls::Viewbox>{ using type = Windows::UI::Xaml::Controls::IViewbox; };
template <> struct default_interface<Windows::UI::Xaml::Controls::VirtualizingPanel>{ using type = Windows::UI::Xaml::Controls::IVirtualizingPanel; };
template <> struct default_interface<Windows::UI::Xaml::Controls::VirtualizingStackPanel>{ using type = Windows::UI::Xaml::Controls::IVirtualizingStackPanel; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebView>{ using type = Windows::UI::Xaml::Controls::IWebView; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebViewBrush>{ using type = Windows::UI::Xaml::Controls::IWebViewBrush; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs>{ using type = Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs>{ using type = Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest>{ using type = Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs>{ using type = Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs>{ using type = Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebViewNavigationFailedEventArgs>{ using type = Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs>{ using type = Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs>{ using type = Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebViewPermissionRequest>{ using type = Windows::UI::Xaml::Controls::IWebViewPermissionRequest; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs>{ using type = Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebViewSeparateProcessLostEventArgs>{ using type = Windows::UI::Xaml::Controls::IWebViewSeparateProcessLostEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebViewSettings>{ using type = Windows::UI::Xaml::Controls::IWebViewSettings; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs>{ using type = Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs>{ using type = Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs; };
template <> struct default_interface<Windows::UI::Xaml::Controls::WrapGrid>{ using type = Windows::UI::Xaml::Controls::IWrapGrid; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBar
{
    bool IsOpen() const;
    void IsOpen(bool value) const;
    bool IsSticky() const;
    void IsSticky(bool value) const;
    event_token Opened(Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    using Opened_revoker = event_revoker<Windows::UI::Xaml::Controls::IAppBar>;
    Opened_revoker Opened(auto_revoke_t, Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    void Opened(event_token const& token) const;
    event_token Closed(Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    using Closed_revoker = event_revoker<Windows::UI::Xaml::Controls::IAppBar>;
    Closed_revoker Closed(auto_revoke_t, Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    void Closed(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBar> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBar<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBar2
{
    Windows::UI::Xaml::Controls::AppBarClosedDisplayMode ClosedDisplayMode() const;
    void ClosedDisplayMode(Windows::UI::Xaml::Controls::AppBarClosedDisplayMode const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBar2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBar2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBar3
{
    Windows::UI::Xaml::Controls::Primitives::AppBarTemplateSettings TemplateSettings() const;
    event_token Opening(Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    using Opening_revoker = event_revoker<Windows::UI::Xaml::Controls::IAppBar3>;
    Opening_revoker Opening(auto_revoke_t, Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    void Opening(event_token const& token) const;
    event_token Closing(Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    using Closing_revoker = event_revoker<Windows::UI::Xaml::Controls::IAppBar3>;
    Closing_revoker Closing(auto_revoke_t, Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    void Closing(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBar3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBar3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBar4
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode LightDismissOverlayMode() const;
    void LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBar4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBar4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarButton
{
    hstring Label() const;
    void Label(param::hstring const& value) const;
    Windows::UI::Xaml::Controls::IconElement Icon() const;
    void Icon(Windows::UI::Xaml::Controls::IconElement const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarButton3
{
    Windows::UI::Xaml::Controls::CommandBarLabelPosition LabelPosition() const;
    void LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarButton3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButton3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarButton4
{
    hstring KeyboardAcceleratorTextOverride() const;
    void KeyboardAcceleratorTextOverride(param::hstring const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarButton4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButton4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarButton5
{
    Windows::UI::Xaml::Controls::Primitives::AppBarButtonTemplateSettings TemplateSettings() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarButton5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButton5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarButtonFactory
{
    Windows::UI::Xaml::Controls::AppBarButton CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarButtonStatics
{
    Windows::UI::Xaml::DependencyProperty LabelProperty() const;
    Windows::UI::Xaml::DependencyProperty IconProperty() const;
    Windows::UI::Xaml::DependencyProperty IsCompactProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarButtonStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButtonStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarButtonStatics3
{
    Windows::UI::Xaml::DependencyProperty LabelPositionProperty() const;
    Windows::UI::Xaml::DependencyProperty IsInOverflowProperty() const;
    Windows::UI::Xaml::DependencyProperty DynamicOverflowOrderProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarButtonStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButtonStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarButtonStatics4
{
    Windows::UI::Xaml::DependencyProperty KeyboardAcceleratorTextOverrideProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarButtonStatics4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarButtonStatics4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarFactory
{
    Windows::UI::Xaml::Controls::AppBar CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarOverrides
{
    void OnClosed(Windows::Foundation::IInspectable const& e) const;
    void OnOpened(Windows::Foundation::IInspectable const& e) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarOverrides> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarOverrides<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarOverrides3
{
    void OnClosing(Windows::Foundation::IInspectable const& e) const;
    void OnOpening(Windows::Foundation::IInspectable const& e) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarOverrides3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarOverrides3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarSeparator
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarSeparator> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarSeparator<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarSeparatorFactory
{
    Windows::UI::Xaml::Controls::AppBarSeparator CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarSeparatorFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarSeparatorFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarSeparatorStatics
{
    Windows::UI::Xaml::DependencyProperty IsCompactProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarSeparatorStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarSeparatorStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarSeparatorStatics3
{
    Windows::UI::Xaml::DependencyProperty IsInOverflowProperty() const;
    Windows::UI::Xaml::DependencyProperty DynamicOverflowOrderProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarSeparatorStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarStatics
{
    Windows::UI::Xaml::DependencyProperty IsOpenProperty() const;
    Windows::UI::Xaml::DependencyProperty IsStickyProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarStatics2
{
    Windows::UI::Xaml::DependencyProperty ClosedDisplayModeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarStatics4
{
    Windows::UI::Xaml::DependencyProperty LightDismissOverlayModeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarStatics4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarStatics4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButton
{
    hstring Label() const;
    void Label(param::hstring const& value) const;
    Windows::UI::Xaml::Controls::IconElement Icon() const;
    void Icon(Windows::UI::Xaml::Controls::IconElement const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarToggleButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButton3
{
    Windows::UI::Xaml::Controls::CommandBarLabelPosition LabelPosition() const;
    void LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarToggleButton3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButton3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButton4
{
    hstring KeyboardAcceleratorTextOverride() const;
    void KeyboardAcceleratorTextOverride(param::hstring const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarToggleButton4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButton4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButton5
{
    Windows::UI::Xaml::Controls::Primitives::AppBarToggleButtonTemplateSettings TemplateSettings() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarToggleButton5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButton5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonFactory
{
    Windows::UI::Xaml::Controls::AppBarToggleButton CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonStatics
{
    Windows::UI::Xaml::DependencyProperty LabelProperty() const;
    Windows::UI::Xaml::DependencyProperty IconProperty() const;
    Windows::UI::Xaml::DependencyProperty IsCompactProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonStatics3
{
    Windows::UI::Xaml::DependencyProperty LabelPositionProperty() const;
    Windows::UI::Xaml::DependencyProperty IsInOverflowProperty() const;
    Windows::UI::Xaml::DependencyProperty DynamicOverflowOrderProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonStatics4
{
    Windows::UI::Xaml::DependencyProperty KeyboardAcceleratorTextOverrideProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAppBarToggleButtonStatics4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBox
{
    double MaxSuggestionListHeight() const;
    void MaxSuggestionListHeight(double value) const;
    bool IsSuggestionListOpen() const;
    void IsSuggestionListOpen(bool value) const;
    hstring TextMemberPath() const;
    void TextMemberPath(param::hstring const& value) const;
    hstring Text() const;
    void Text(param::hstring const& value) const;
    bool UpdateTextOnSelect() const;
    void UpdateTextOnSelect(bool value) const;
    hstring PlaceholderText() const;
    void PlaceholderText(param::hstring const& value) const;
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    bool AutoMaximizeSuggestionArea() const;
    void AutoMaximizeSuggestionArea(bool value) const;
    Windows::UI::Xaml::Style TextBoxStyle() const;
    void TextBoxStyle(Windows::UI::Xaml::Style const& value) const;
    event_token SuggestionChosen(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs> const& value) const;
    using SuggestionChosen_revoker = event_revoker<Windows::UI::Xaml::Controls::IAutoSuggestBox>;
    SuggestionChosen_revoker SuggestionChosen(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs> const& value) const;
    void SuggestionChosen(event_token const& token) const;
    event_token TextChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs> const& value) const;
    using TextChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IAutoSuggestBox>;
    TextChanged_revoker TextChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs> const& value) const;
    void TextChanged(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAutoSuggestBox> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBox<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBox2
{
    Windows::UI::Xaml::Controls::IconElement QueryIcon() const;
    void QueryIcon(Windows::UI::Xaml::Controls::IconElement const& value) const;
    event_token QuerySubmitted(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs> const& value) const;
    using QuerySubmitted_revoker = event_revoker<Windows::UI::Xaml::Controls::IAutoSuggestBox2>;
    QuerySubmitted_revoker QuerySubmitted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs> const& value) const;
    void QuerySubmitted(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAutoSuggestBox2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBox2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBox3
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode LightDismissOverlayMode() const;
    void LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAutoSuggestBox3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBox3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxQuerySubmittedEventArgs
{
    hstring QueryText() const;
    Windows::Foundation::IInspectable ChosenSuggestion() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxQuerySubmittedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxStatics
{
    Windows::UI::Xaml::DependencyProperty MaxSuggestionListHeightProperty() const;
    Windows::UI::Xaml::DependencyProperty IsSuggestionListOpenProperty() const;
    Windows::UI::Xaml::DependencyProperty TextMemberPathProperty() const;
    Windows::UI::Xaml::DependencyProperty TextProperty() const;
    Windows::UI::Xaml::DependencyProperty UpdateTextOnSelectProperty() const;
    Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty AutoMaximizeSuggestionAreaProperty() const;
    Windows::UI::Xaml::DependencyProperty TextBoxStyleProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxStatics2
{
    Windows::UI::Xaml::DependencyProperty QueryIconProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxStatics3
{
    Windows::UI::Xaml::DependencyProperty LightDismissOverlayModeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxSuggestionChosenEventArgs
{
    Windows::Foundation::IInspectable SelectedItem() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxSuggestionChosenEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxTextChangedEventArgs
{
    Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason Reason() const;
    void Reason(Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason const& value) const;
    bool CheckCurrent() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxTextChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxTextChangedEventArgsStatics
{
    Windows::UI::Xaml::DependencyProperty ReasonProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IAutoSuggestBoxTextChangedEventArgsStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IBackClickEventArgs
{
    bool Handled() const;
    void Handled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IBackClickEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBackClickEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IBitmapIcon
{
    Windows::Foundation::Uri UriSource() const;
    void UriSource(Windows::Foundation::Uri const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IBitmapIcon> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIcon<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IBitmapIcon2
{
    bool ShowAsMonochrome() const;
    void ShowAsMonochrome(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IBitmapIcon2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIcon2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IBitmapIconFactory
{
    Windows::UI::Xaml::Controls::BitmapIcon CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IBitmapIconFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIconFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IBitmapIconSource
{
    Windows::Foundation::Uri UriSource() const;
    void UriSource(Windows::Foundation::Uri const& value) const;
    bool ShowAsMonochrome() const;
    void ShowAsMonochrome(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IBitmapIconSource> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIconSource<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IBitmapIconSourceFactory
{
    Windows::UI::Xaml::Controls::BitmapIconSource CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IBitmapIconSourceFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIconSourceFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IBitmapIconSourceStatics
{
    Windows::UI::Xaml::DependencyProperty UriSourceProperty() const;
    Windows::UI::Xaml::DependencyProperty ShowAsMonochromeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IBitmapIconSourceStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIconSourceStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IBitmapIconStatics
{
    Windows::UI::Xaml::DependencyProperty UriSourceProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IBitmapIconStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIconStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IBitmapIconStatics2
{
    Windows::UI::Xaml::DependencyProperty ShowAsMonochromeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IBitmapIconStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBitmapIconStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IBorder
{
    Windows::UI::Xaml::Media::Brush BorderBrush() const;
    void BorderBrush(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Thickness BorderThickness() const;
    void BorderThickness(Windows::UI::Xaml::Thickness const& value) const;
    Windows::UI::Xaml::Media::Brush Background() const;
    void Background(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::CornerRadius CornerRadius() const;
    void CornerRadius(Windows::UI::Xaml::CornerRadius const& value) const;
    Windows::UI::Xaml::Thickness Padding() const;
    void Padding(Windows::UI::Xaml::Thickness const& value) const;
    Windows::UI::Xaml::UIElement Child() const;
    void Child(Windows::UI::Xaml::UIElement const& value) const;
    Windows::UI::Xaml::Media::Animation::TransitionCollection ChildTransitions() const;
    void ChildTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IBorder> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBorder<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IBorderStatics
{
    Windows::UI::Xaml::DependencyProperty BorderBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty BorderThicknessProperty() const;
    Windows::UI::Xaml::DependencyProperty BackgroundProperty() const;
    Windows::UI::Xaml::DependencyProperty CornerRadiusProperty() const;
    Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
    Windows::UI::Xaml::DependencyProperty ChildTransitionsProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IBorderStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IBorderStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IButton
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IButtonFactory
{
    Windows::UI::Xaml::Controls::Button CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IButtonStaticsWithFlyout
{
    Windows::UI::Xaml::DependencyProperty FlyoutProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IButtonStaticsWithFlyout<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IButtonWithFlyout
{
    Windows::UI::Xaml::Controls::Primitives::FlyoutBase Flyout() const;
    void Flyout(Windows::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IButtonWithFlyout> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IButtonWithFlyout<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICalendarDatePicker
{
    Windows::Foundation::IReference<Windows::Foundation::DateTime> Date() const;
    void Date(optional<Windows::Foundation::DateTime> const& value) const;
    bool IsCalendarOpen() const;
    void IsCalendarOpen(bool value) const;
    hstring DateFormat() const;
    void DateFormat(param::hstring const& value) const;
    hstring PlaceholderText() const;
    void PlaceholderText(param::hstring const& value) const;
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::Style CalendarViewStyle() const;
    void CalendarViewStyle(Windows::UI::Xaml::Style const& value) const;
    Windows::Foundation::DateTime MinDate() const;
    void MinDate(Windows::Foundation::DateTime const& value) const;
    Windows::Foundation::DateTime MaxDate() const;
    void MaxDate(Windows::Foundation::DateTime const& value) const;
    bool IsTodayHighlighted() const;
    void IsTodayHighlighted(bool value) const;
    Windows::UI::Xaml::Controls::CalendarViewDisplayMode DisplayMode() const;
    void DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode const& value) const;
    Windows::Globalization::DayOfWeek FirstDayOfWeek() const;
    void FirstDayOfWeek(Windows::Globalization::DayOfWeek const& value) const;
    hstring DayOfWeekFormat() const;
    void DayOfWeekFormat(param::hstring const& value) const;
    hstring CalendarIdentifier() const;
    void CalendarIdentifier(param::hstring const& value) const;
    bool IsOutOfScopeEnabled() const;
    void IsOutOfScopeEnabled(bool value) const;
    bool IsGroupLabelVisible() const;
    void IsGroupLabelVisible(bool value) const;
    event_token CalendarViewDayItemChanging(Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler const& value) const;
    using CalendarViewDayItemChanging_revoker = event_revoker<Windows::UI::Xaml::Controls::ICalendarDatePicker>;
    CalendarViewDayItemChanging_revoker CalendarViewDayItemChanging(auto_revoke_t, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler const& value) const;
    void CalendarViewDayItemChanging(event_token const& token) const;
    event_token DateChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarDatePicker, Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs> const& value) const;
    using DateChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::ICalendarDatePicker>;
    DateChanged_revoker DateChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarDatePicker, Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs> const& value) const;
    void DateChanged(event_token const& token) const;
    event_token Opened(Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    using Opened_revoker = event_revoker<Windows::UI::Xaml::Controls::ICalendarDatePicker>;
    Opened_revoker Opened(auto_revoke_t, Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    void Opened(event_token const& token) const;
    event_token Closed(Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    using Closed_revoker = event_revoker<Windows::UI::Xaml::Controls::ICalendarDatePicker>;
    Closed_revoker Closed(auto_revoke_t, Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    void Closed(event_token const& token) const;
    void SetDisplayDate(Windows::Foundation::DateTime const& date) const;
    void SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICalendarDatePicker> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarDatePicker<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICalendarDatePicker2
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode LightDismissOverlayMode() const;
    void LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICalendarDatePicker2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarDatePicker2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICalendarDatePickerDateChangedEventArgs
{
    Windows::Foundation::IReference<Windows::Foundation::DateTime> NewDate() const;
    Windows::Foundation::IReference<Windows::Foundation::DateTime> OldDate() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarDatePickerDateChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICalendarDatePickerFactory
{
    Windows::UI::Xaml::Controls::CalendarDatePicker CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICalendarDatePickerFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarDatePickerFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICalendarDatePickerStatics
{
    Windows::UI::Xaml::DependencyProperty DateProperty() const;
    Windows::UI::Xaml::DependencyProperty IsCalendarOpenProperty() const;
    Windows::UI::Xaml::DependencyProperty DateFormatProperty() const;
    Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty CalendarViewStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty MinDateProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxDateProperty() const;
    Windows::UI::Xaml::DependencyProperty IsTodayHighlightedProperty() const;
    Windows::UI::Xaml::DependencyProperty DisplayModeProperty() const;
    Windows::UI::Xaml::DependencyProperty FirstDayOfWeekProperty() const;
    Windows::UI::Xaml::DependencyProperty DayOfWeekFormatProperty() const;
    Windows::UI::Xaml::DependencyProperty CalendarIdentifierProperty() const;
    Windows::UI::Xaml::DependencyProperty IsOutOfScopeEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsGroupLabelVisibleProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICalendarDatePickerStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarDatePickerStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICalendarDatePickerStatics2
{
    Windows::UI::Xaml::DependencyProperty LightDismissOverlayModeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarDatePickerStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICalendarView
{
    hstring CalendarIdentifier() const;
    void CalendarIdentifier(param::hstring const& value) const;
    hstring DayOfWeekFormat() const;
    void DayOfWeekFormat(param::hstring const& value) const;
    bool IsGroupLabelVisible() const;
    void IsGroupLabelVisible(bool value) const;
    Windows::UI::Xaml::Controls::CalendarViewDisplayMode DisplayMode() const;
    void DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode const& value) const;
    Windows::Globalization::DayOfWeek FirstDayOfWeek() const;
    void FirstDayOfWeek(Windows::Globalization::DayOfWeek const& value) const;
    bool IsOutOfScopeEnabled() const;
    void IsOutOfScopeEnabled(bool value) const;
    bool IsTodayHighlighted() const;
    void IsTodayHighlighted(bool value) const;
    Windows::Foundation::DateTime MaxDate() const;
    void MaxDate(Windows::Foundation::DateTime const& value) const;
    Windows::Foundation::DateTime MinDate() const;
    void MinDate(Windows::Foundation::DateTime const& value) const;
    int32_t NumberOfWeeksInView() const;
    void NumberOfWeeksInView(int32_t value) const;
    Windows::Foundation::Collections::IVector<Windows::Foundation::DateTime> SelectedDates() const;
    Windows::UI::Xaml::Controls::CalendarViewSelectionMode SelectionMode() const;
    void SelectionMode(Windows::UI::Xaml::Controls::CalendarViewSelectionMode const& value) const;
    Windows::UI::Xaml::Controls::Primitives::CalendarViewTemplateSettings TemplateSettings() const;
    Windows::UI::Xaml::Media::Brush FocusBorderBrush() const;
    void FocusBorderBrush(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush SelectedHoverBorderBrush() const;
    void SelectedHoverBorderBrush(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush SelectedPressedBorderBrush() const;
    void SelectedPressedBorderBrush(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush SelectedBorderBrush() const;
    void SelectedBorderBrush(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush HoverBorderBrush() const;
    void HoverBorderBrush(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush PressedBorderBrush() const;
    void PressedBorderBrush(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush CalendarItemBorderBrush() const;
    void CalendarItemBorderBrush(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush OutOfScopeBackground() const;
    void OutOfScopeBackground(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush CalendarItemBackground() const;
    void CalendarItemBackground(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush PressedForeground() const;
    void PressedForeground(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush TodayForeground() const;
    void TodayForeground(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush BlackoutForeground() const;
    void BlackoutForeground(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush SelectedForeground() const;
    void SelectedForeground(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush OutOfScopeForeground() const;
    void OutOfScopeForeground(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush CalendarItemForeground() const;
    void CalendarItemForeground(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::FontFamily DayItemFontFamily() const;
    void DayItemFontFamily(Windows::UI::Xaml::Media::FontFamily const& value) const;
    double DayItemFontSize() const;
    void DayItemFontSize(double value) const;
    Windows::UI::Text::FontStyle DayItemFontStyle() const;
    void DayItemFontStyle(Windows::UI::Text::FontStyle const& value) const;
    Windows::UI::Text::FontWeight DayItemFontWeight() const;
    void DayItemFontWeight(Windows::UI::Text::FontWeight const& value) const;
    Windows::UI::Text::FontWeight TodayFontWeight() const;
    void TodayFontWeight(Windows::UI::Text::FontWeight const& value) const;
    Windows::UI::Xaml::Media::FontFamily FirstOfMonthLabelFontFamily() const;
    void FirstOfMonthLabelFontFamily(Windows::UI::Xaml::Media::FontFamily const& value) const;
    double FirstOfMonthLabelFontSize() const;
    void FirstOfMonthLabelFontSize(double value) const;
    Windows::UI::Text::FontStyle FirstOfMonthLabelFontStyle() const;
    void FirstOfMonthLabelFontStyle(Windows::UI::Text::FontStyle const& value) const;
    Windows::UI::Text::FontWeight FirstOfMonthLabelFontWeight() const;
    void FirstOfMonthLabelFontWeight(Windows::UI::Text::FontWeight const& value) const;
    Windows::UI::Xaml::Media::FontFamily MonthYearItemFontFamily() const;
    void MonthYearItemFontFamily(Windows::UI::Xaml::Media::FontFamily const& value) const;
    double MonthYearItemFontSize() const;
    void MonthYearItemFontSize(double value) const;
    Windows::UI::Text::FontStyle MonthYearItemFontStyle() const;
    void MonthYearItemFontStyle(Windows::UI::Text::FontStyle const& value) const;
    Windows::UI::Text::FontWeight MonthYearItemFontWeight() const;
    void MonthYearItemFontWeight(Windows::UI::Text::FontWeight const& value) const;
    Windows::UI::Xaml::Media::FontFamily FirstOfYearDecadeLabelFontFamily() const;
    void FirstOfYearDecadeLabelFontFamily(Windows::UI::Xaml::Media::FontFamily const& value) const;
    double FirstOfYearDecadeLabelFontSize() const;
    void FirstOfYearDecadeLabelFontSize(double value) const;
    Windows::UI::Text::FontStyle FirstOfYearDecadeLabelFontStyle() const;
    void FirstOfYearDecadeLabelFontStyle(Windows::UI::Text::FontStyle const& value) const;
    Windows::UI::Text::FontWeight FirstOfYearDecadeLabelFontWeight() const;
    void FirstOfYearDecadeLabelFontWeight(Windows::UI::Text::FontWeight const& value) const;
    Windows::UI::Xaml::HorizontalAlignment HorizontalDayItemAlignment() const;
    void HorizontalDayItemAlignment(Windows::UI::Xaml::HorizontalAlignment const& value) const;
    Windows::UI::Xaml::VerticalAlignment VerticalDayItemAlignment() const;
    void VerticalDayItemAlignment(Windows::UI::Xaml::VerticalAlignment const& value) const;
    Windows::UI::Xaml::HorizontalAlignment HorizontalFirstOfMonthLabelAlignment() const;
    void HorizontalFirstOfMonthLabelAlignment(Windows::UI::Xaml::HorizontalAlignment const& value) const;
    Windows::UI::Xaml::VerticalAlignment VerticalFirstOfMonthLabelAlignment() const;
    void VerticalFirstOfMonthLabelAlignment(Windows::UI::Xaml::VerticalAlignment const& value) const;
    Windows::UI::Xaml::Thickness CalendarItemBorderThickness() const;
    void CalendarItemBorderThickness(Windows::UI::Xaml::Thickness const& value) const;
    Windows::UI::Xaml::Style CalendarViewDayItemStyle() const;
    void CalendarViewDayItemStyle(Windows::UI::Xaml::Style const& value) const;
    event_token CalendarViewDayItemChanging(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> const& value) const;
    using CalendarViewDayItemChanging_revoker = event_revoker<Windows::UI::Xaml::Controls::ICalendarView>;
    CalendarViewDayItemChanging_revoker CalendarViewDayItemChanging(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> const& value) const;
    void CalendarViewDayItemChanging(event_token const& token) const;
    event_token SelectedDatesChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs> const& value) const;
    using SelectedDatesChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::ICalendarView>;
    SelectedDatesChanged_revoker SelectedDatesChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs> const& value) const;
    void SelectedDatesChanged(event_token const& token) const;
    void SetDisplayDate(Windows::Foundation::DateTime const& date) const;
    void SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICalendarView> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarView<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICalendarViewDayItem
{
    bool IsBlackout() const;
    void IsBlackout(bool value) const;
    Windows::Foundation::DateTime Date() const;
    void SetDensityColors(param::iterable<Windows::UI::Color> const& colors) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICalendarViewDayItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarViewDayItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICalendarViewDayItemChangingEventArgs
{
    bool InRecycleQueue() const;
    Windows::UI::Xaml::Controls::CalendarViewDayItem Item() const;
    uint32_t Phase() const;
    void RegisterUpdateCallback(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> const& callback) const;
    void RegisterUpdateCallback(uint32_t callbackPhase, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> const& callback) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarViewDayItemChangingEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICalendarViewDayItemFactory
{
    Windows::UI::Xaml::Controls::CalendarViewDayItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarViewDayItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICalendarViewDayItemStatics
{
    Windows::UI::Xaml::DependencyProperty IsBlackoutProperty() const;
    Windows::UI::Xaml::DependencyProperty DateProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarViewDayItemStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICalendarViewFactory
{
    Windows::UI::Xaml::Controls::CalendarView CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICalendarViewFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarViewFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICalendarViewSelectedDatesChangedEventArgs
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::DateTime> AddedDates() const;
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::DateTime> RemovedDates() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarViewSelectedDatesChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICalendarViewStatics
{
    Windows::UI::Xaml::DependencyProperty CalendarIdentifierProperty() const;
    Windows::UI::Xaml::DependencyProperty DayOfWeekFormatProperty() const;
    Windows::UI::Xaml::DependencyProperty IsGroupLabelVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty DisplayModeProperty() const;
    Windows::UI::Xaml::DependencyProperty FirstDayOfWeekProperty() const;
    Windows::UI::Xaml::DependencyProperty IsOutOfScopeEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsTodayHighlightedProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxDateProperty() const;
    Windows::UI::Xaml::DependencyProperty MinDateProperty() const;
    Windows::UI::Xaml::DependencyProperty NumberOfWeeksInViewProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedDatesProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectionModeProperty() const;
    Windows::UI::Xaml::DependencyProperty TemplateSettingsProperty() const;
    Windows::UI::Xaml::DependencyProperty FocusBorderBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedHoverBorderBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedPressedBorderBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedBorderBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty HoverBorderBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty PressedBorderBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty CalendarItemBorderBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty OutOfScopeBackgroundProperty() const;
    Windows::UI::Xaml::DependencyProperty CalendarItemBackgroundProperty() const;
    Windows::UI::Xaml::DependencyProperty PressedForegroundProperty() const;
    Windows::UI::Xaml::DependencyProperty TodayForegroundProperty() const;
    Windows::UI::Xaml::DependencyProperty BlackoutForegroundProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedForegroundProperty() const;
    Windows::UI::Xaml::DependencyProperty OutOfScopeForegroundProperty() const;
    Windows::UI::Xaml::DependencyProperty CalendarItemForegroundProperty() const;
    Windows::UI::Xaml::DependencyProperty DayItemFontFamilyProperty() const;
    Windows::UI::Xaml::DependencyProperty DayItemFontSizeProperty() const;
    Windows::UI::Xaml::DependencyProperty DayItemFontStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty DayItemFontWeightProperty() const;
    Windows::UI::Xaml::DependencyProperty TodayFontWeightProperty() const;
    Windows::UI::Xaml::DependencyProperty FirstOfMonthLabelFontFamilyProperty() const;
    Windows::UI::Xaml::DependencyProperty FirstOfMonthLabelFontSizeProperty() const;
    Windows::UI::Xaml::DependencyProperty FirstOfMonthLabelFontStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty FirstOfMonthLabelFontWeightProperty() const;
    Windows::UI::Xaml::DependencyProperty MonthYearItemFontFamilyProperty() const;
    Windows::UI::Xaml::DependencyProperty MonthYearItemFontSizeProperty() const;
    Windows::UI::Xaml::DependencyProperty MonthYearItemFontStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty MonthYearItemFontWeightProperty() const;
    Windows::UI::Xaml::DependencyProperty FirstOfYearDecadeLabelFontFamilyProperty() const;
    Windows::UI::Xaml::DependencyProperty FirstOfYearDecadeLabelFontSizeProperty() const;
    Windows::UI::Xaml::DependencyProperty FirstOfYearDecadeLabelFontStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty FirstOfYearDecadeLabelFontWeightProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalDayItemAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalDayItemAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalFirstOfMonthLabelAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalFirstOfMonthLabelAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty CalendarItemBorderThicknessProperty() const;
    Windows::UI::Xaml::DependencyProperty CalendarViewDayItemStyleProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICalendarViewStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICalendarViewStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICandidateWindowBoundsChangedEventArgs
{
    Windows::Foundation::Rect Bounds() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICandidateWindowBoundsChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICanvas
{
};
template <> struct consume<Windows::UI::Xaml::Controls::ICanvas> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICanvas<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICanvasFactory
{
    Windows::UI::Xaml::Controls::Canvas CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICanvasFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICanvasFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICanvasStatics
{
    Windows::UI::Xaml::DependencyProperty LeftProperty() const;
    double GetLeft(Windows::UI::Xaml::UIElement const& element) const;
    void SetLeft(Windows::UI::Xaml::UIElement const& element, double length) const;
    Windows::UI::Xaml::DependencyProperty TopProperty() const;
    double GetTop(Windows::UI::Xaml::UIElement const& element) const;
    void SetTop(Windows::UI::Xaml::UIElement const& element, double length) const;
    Windows::UI::Xaml::DependencyProperty ZIndexProperty() const;
    int32_t GetZIndex(Windows::UI::Xaml::UIElement const& element) const;
    void SetZIndex(Windows::UI::Xaml::UIElement const& element, int32_t value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICanvasStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICanvasStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICaptureElement
{
    Windows::Media::Capture::MediaCapture Source() const;
    void Source(Windows::Media::Capture::MediaCapture const& value) const;
    Windows::UI::Xaml::Media::Stretch Stretch() const;
    void Stretch(Windows::UI::Xaml::Media::Stretch const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICaptureElement> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICaptureElement<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICaptureElementStatics
{
    Windows::UI::Xaml::DependencyProperty SourceProperty() const;
    Windows::UI::Xaml::DependencyProperty StretchProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICaptureElementStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICaptureElementStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICheckBox
{
};
template <> struct consume<Windows::UI::Xaml::Controls::ICheckBox> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICheckBox<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICheckBoxFactory
{
    Windows::UI::Xaml::Controls::CheckBox CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICheckBoxFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICheckBoxFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IChoosingGroupHeaderContainerEventArgs
{
    Windows::UI::Xaml::Controls::ListViewBaseHeaderItem GroupHeaderContainer() const;
    void GroupHeaderContainer(Windows::UI::Xaml::Controls::ListViewBaseHeaderItem const& value) const;
    int32_t GroupIndex() const;
    Windows::Foundation::IInspectable Group() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IChoosingGroupHeaderContainerEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IChoosingItemContainerEventArgs
{
    int32_t ItemIndex() const;
    Windows::Foundation::IInspectable Item() const;
    Windows::UI::Xaml::Controls::Primitives::SelectorItem ItemContainer() const;
    void ItemContainer(Windows::UI::Xaml::Controls::Primitives::SelectorItem const& value) const;
    bool IsContainerPrepared() const;
    void IsContainerPrepared(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IChoosingItemContainerEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICleanUpVirtualizedItemEventArgs
{
    Windows::Foundation::IInspectable Value() const;
    Windows::UI::Xaml::UIElement UIElement() const;
    bool Cancel() const;
    void Cancel(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICleanUpVirtualizedItemEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IColorChangedEventArgs
{
    Windows::UI::Color OldColor() const;
    Windows::UI::Color NewColor() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IColorChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IColorChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IColorPicker
{
    Windows::UI::Color Color() const;
    void Color(Windows::UI::Color const& value) const;
    Windows::Foundation::IReference<Windows::UI::Color> PreviousColor() const;
    void PreviousColor(optional<Windows::UI::Color> const& value) const;
    bool IsAlphaEnabled() const;
    void IsAlphaEnabled(bool value) const;
    bool IsColorSpectrumVisible() const;
    void IsColorSpectrumVisible(bool value) const;
    bool IsColorPreviewVisible() const;
    void IsColorPreviewVisible(bool value) const;
    bool IsColorSliderVisible() const;
    void IsColorSliderVisible(bool value) const;
    bool IsAlphaSliderVisible() const;
    void IsAlphaSliderVisible(bool value) const;
    bool IsMoreButtonVisible() const;
    void IsMoreButtonVisible(bool value) const;
    bool IsColorChannelTextInputVisible() const;
    void IsColorChannelTextInputVisible(bool value) const;
    bool IsAlphaTextInputVisible() const;
    void IsAlphaTextInputVisible(bool value) const;
    bool IsHexInputVisible() const;
    void IsHexInputVisible(bool value) const;
    int32_t MinHue() const;
    void MinHue(int32_t value) const;
    int32_t MaxHue() const;
    void MaxHue(int32_t value) const;
    int32_t MinSaturation() const;
    void MinSaturation(int32_t value) const;
    int32_t MaxSaturation() const;
    void MaxSaturation(int32_t value) const;
    int32_t MinValue() const;
    void MinValue(int32_t value) const;
    int32_t MaxValue() const;
    void MaxValue(int32_t value) const;
    Windows::UI::Xaml::Controls::ColorSpectrumShape ColorSpectrumShape() const;
    void ColorSpectrumShape(Windows::UI::Xaml::Controls::ColorSpectrumShape const& value) const;
    Windows::UI::Xaml::Controls::ColorSpectrumComponents ColorSpectrumComponents() const;
    void ColorSpectrumComponents(Windows::UI::Xaml::Controls::ColorSpectrumComponents const& value) const;
    event_token ColorChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ColorPicker, Windows::UI::Xaml::Controls::ColorChangedEventArgs> const& value) const;
    using ColorChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IColorPicker>;
    ColorChanged_revoker ColorChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ColorPicker, Windows::UI::Xaml::Controls::ColorChangedEventArgs> const& value) const;
    void ColorChanged(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IColorPicker> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IColorPicker<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IColorPickerFactory
{
    Windows::UI::Xaml::Controls::ColorPicker CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IColorPickerFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IColorPickerFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IColorPickerStatics
{
    Windows::UI::Xaml::DependencyProperty ColorProperty() const;
    Windows::UI::Xaml::DependencyProperty PreviousColorProperty() const;
    Windows::UI::Xaml::DependencyProperty IsAlphaEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsColorSpectrumVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsColorPreviewVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsColorSliderVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsAlphaSliderVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsMoreButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsColorChannelTextInputVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsAlphaTextInputVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsHexInputVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty MinHueProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxHueProperty() const;
    Windows::UI::Xaml::DependencyProperty MinSaturationProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxSaturationProperty() const;
    Windows::UI::Xaml::DependencyProperty MinValueProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxValueProperty() const;
    Windows::UI::Xaml::DependencyProperty ColorSpectrumShapeProperty() const;
    Windows::UI::Xaml::DependencyProperty ColorSpectrumComponentsProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IColorPickerStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IColorPickerStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IColumnDefinition
{
    Windows::UI::Xaml::GridLength Width() const;
    void Width(Windows::UI::Xaml::GridLength const& value) const;
    double MaxWidth() const;
    void MaxWidth(double value) const;
    double MinWidth() const;
    void MinWidth(double value) const;
    double ActualWidth() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IColumnDefinition> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IColumnDefinition<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IColumnDefinitionStatics
{
    Windows::UI::Xaml::DependencyProperty WidthProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxWidthProperty() const;
    Windows::UI::Xaml::DependencyProperty MinWidthProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IColumnDefinitionStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IColumnDefinitionStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IComboBox
{
    bool IsDropDownOpen() const;
    void IsDropDownOpen(bool value) const;
    bool IsEditable() const;
    bool IsSelectionBoxHighlighted() const;
    double MaxDropDownHeight() const;
    void MaxDropDownHeight(double value) const;
    Windows::Foundation::IInspectable SelectionBoxItem() const;
    Windows::UI::Xaml::DataTemplate SelectionBoxItemTemplate() const;
    Windows::UI::Xaml::Controls::Primitives::ComboBoxTemplateSettings TemplateSettings() const;
    event_token DropDownClosed(Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    using DropDownClosed_revoker = event_revoker<Windows::UI::Xaml::Controls::IComboBox>;
    DropDownClosed_revoker DropDownClosed(auto_revoke_t, Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    void DropDownClosed(event_token const& token) const;
    event_token DropDownOpened(Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    using DropDownOpened_revoker = event_revoker<Windows::UI::Xaml::Controls::IComboBox>;
    DropDownOpened_revoker DropDownOpened(auto_revoke_t, Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    void DropDownOpened(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IComboBox> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBox<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IComboBox2
{
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    hstring PlaceholderText() const;
    void PlaceholderText(param::hstring const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IComboBox2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBox2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IComboBox3
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode LightDismissOverlayMode() const;
    void LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
    bool IsTextSearchEnabled() const;
    void IsTextSearchEnabled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IComboBox3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBox3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IComboBox4
{
    Windows::UI::Xaml::Controls::ComboBoxSelectionChangedTrigger SelectionChangedTrigger() const;
    void SelectionChangedTrigger(Windows::UI::Xaml::Controls::ComboBoxSelectionChangedTrigger const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IComboBox4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBox4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IComboBox5
{
    Windows::UI::Xaml::Media::Brush PlaceholderForeground() const;
    void PlaceholderForeground(Windows::UI::Xaml::Media::Brush const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IComboBox5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBox5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IComboBoxFactory
{
    Windows::UI::Xaml::Controls::ComboBox CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IComboBoxFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IComboBoxItem
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IComboBoxItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IComboBoxItemFactory
{
    Windows::UI::Xaml::Controls::ComboBoxItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IComboBoxItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IComboBoxOverrides
{
    void OnDropDownClosed(Windows::Foundation::IInspectable const& e) const;
    void OnDropDownOpened(Windows::Foundation::IInspectable const& e) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IComboBoxOverrides> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxOverrides<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IComboBoxStatics
{
    Windows::UI::Xaml::DependencyProperty IsDropDownOpenProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxDropDownHeightProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IComboBoxStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IComboBoxStatics2
{
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IComboBoxStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IComboBoxStatics3
{
    Windows::UI::Xaml::DependencyProperty LightDismissOverlayModeProperty() const;
    Windows::UI::Xaml::DependencyProperty IsTextSearchEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IComboBoxStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IComboBoxStatics4
{
    Windows::UI::Xaml::DependencyProperty SelectionChangedTriggerProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IComboBoxStatics4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxStatics4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IComboBoxStatics5
{
    Windows::UI::Xaml::DependencyProperty PlaceholderForegroundProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IComboBoxStatics5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IComboBoxStatics5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICommandBar
{
    Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> PrimaryCommands() const;
    Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> SecondaryCommands() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICommandBar> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBar<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICommandBar2
{
    Windows::UI::Xaml::Style CommandBarOverflowPresenterStyle() const;
    void CommandBarOverflowPresenterStyle(Windows::UI::Xaml::Style const& value) const;
    Windows::UI::Xaml::Controls::Primitives::CommandBarTemplateSettings CommandBarTemplateSettings() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICommandBar2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBar2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICommandBar3
{
    Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition DefaultLabelPosition() const;
    void DefaultLabelPosition(Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition const& value) const;
    Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility OverflowButtonVisibility() const;
    void OverflowButtonVisibility(Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility const& value) const;
    bool IsDynamicOverflowEnabled() const;
    void IsDynamicOverflowEnabled(bool value) const;
    event_token DynamicOverflowItemsChanging(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CommandBar, Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs> const& value) const;
    using DynamicOverflowItemsChanging_revoker = event_revoker<Windows::UI::Xaml::Controls::ICommandBar3>;
    DynamicOverflowItemsChanging_revoker DynamicOverflowItemsChanging(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CommandBar, Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs> const& value) const;
    void DynamicOverflowItemsChanging(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICommandBar3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBar3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICommandBarElement
{
    bool IsCompact() const;
    void IsCompact(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICommandBarElement> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarElement<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICommandBarElement2
{
    bool IsInOverflow() const;
    int32_t DynamicOverflowOrder() const;
    void DynamicOverflowOrder(int32_t value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICommandBarElement2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarElement2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICommandBarFactory
{
    Windows::UI::Xaml::Controls::CommandBar CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICommandBarFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICommandBarOverflowPresenter
{
};
template <> struct consume<Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarOverflowPresenter<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICommandBarOverflowPresenterFactory
{
    Windows::UI::Xaml::Controls::CommandBarOverflowPresenter CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarOverflowPresenterFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICommandBarStatics
{
    Windows::UI::Xaml::DependencyProperty PrimaryCommandsProperty() const;
    Windows::UI::Xaml::DependencyProperty SecondaryCommandsProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICommandBarStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICommandBarStatics2
{
    Windows::UI::Xaml::DependencyProperty CommandBarOverflowPresenterStyleProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICommandBarStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ICommandBarStatics3
{
    Windows::UI::Xaml::DependencyProperty DefaultLabelPositionProperty() const;
    Windows::UI::Xaml::DependencyProperty OverflowButtonVisibilityProperty() const;
    Windows::UI::Xaml::DependencyProperty IsDynamicOverflowEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ICommandBarStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ICommandBarStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContainerContentChangingEventArgs
{
    Windows::UI::Xaml::Controls::Primitives::SelectorItem ItemContainer() const;
    bool InRecycleQueue() const;
    int32_t ItemIndex() const;
    Windows::Foundation::IInspectable Item() const;
    uint32_t Phase() const;
    bool Handled() const;
    void Handled(bool value) const;
    void RegisterUpdateCallback(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> const& callback) const;
    void RegisterUpdateCallback(uint32_t callbackPhase, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> const& callback) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContainerContentChangingEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentControl
{
    Windows::Foundation::IInspectable Content() const;
    void Content(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate ContentTemplate() const;
    void ContentTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::Controls::DataTemplateSelector ContentTemplateSelector() const;
    void ContentTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
    Windows::UI::Xaml::Media::Animation::TransitionCollection ContentTransitions() const;
    void ContentTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentControl> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentControl<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentControl2
{
    Windows::UI::Xaml::UIElement ContentTemplateRoot() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentControl2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentControl2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentControlFactory
{
    Windows::UI::Xaml::Controls::ContentControl CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentControlFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentControlFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentControlOverrides
{
    void OnContentChanged(Windows::Foundation::IInspectable const& oldContent, Windows::Foundation::IInspectable const& newContent) const;
    void OnContentTemplateChanged(Windows::UI::Xaml::DataTemplate const& oldContentTemplate, Windows::UI::Xaml::DataTemplate const& newContentTemplate) const;
    void OnContentTemplateSelectorChanged(Windows::UI::Xaml::Controls::DataTemplateSelector const& oldContentTemplateSelector, Windows::UI::Xaml::Controls::DataTemplateSelector const& newContentTemplateSelector) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentControlOverrides> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentControlOverrides<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentControlStatics
{
    Windows::UI::Xaml::DependencyProperty ContentProperty() const;
    Windows::UI::Xaml::DependencyProperty ContentTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty ContentTemplateSelectorProperty() const;
    Windows::UI::Xaml::DependencyProperty ContentTransitionsProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentControlStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentControlStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentDialog
{
    Windows::Foundation::IInspectable Title() const;
    void Title(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate TitleTemplate() const;
    void TitleTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    bool FullSizeDesired() const;
    void FullSizeDesired(bool value) const;
    hstring PrimaryButtonText() const;
    void PrimaryButtonText(param::hstring const& value) const;
    hstring SecondaryButtonText() const;
    void SecondaryButtonText(param::hstring const& value) const;
    Windows::UI::Xaml::Input::ICommand PrimaryButtonCommand() const;
    void PrimaryButtonCommand(Windows::UI::Xaml::Input::ICommand const& value) const;
    Windows::UI::Xaml::Input::ICommand SecondaryButtonCommand() const;
    void SecondaryButtonCommand(Windows::UI::Xaml::Input::ICommand const& value) const;
    Windows::Foundation::IInspectable PrimaryButtonCommandParameter() const;
    void PrimaryButtonCommandParameter(Windows::Foundation::IInspectable const& value) const;
    Windows::Foundation::IInspectable SecondaryButtonCommandParameter() const;
    void SecondaryButtonCommandParameter(Windows::Foundation::IInspectable const& value) const;
    bool IsPrimaryButtonEnabled() const;
    void IsPrimaryButtonEnabled(bool value) const;
    bool IsSecondaryButtonEnabled() const;
    void IsSecondaryButtonEnabled(bool value) const;
    event_token Closing(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs> const& value) const;
    using Closing_revoker = event_revoker<Windows::UI::Xaml::Controls::IContentDialog>;
    Closing_revoker Closing(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs> const& value) const;
    void Closing(event_token const& token) const;
    event_token Closed(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs> const& value) const;
    using Closed_revoker = event_revoker<Windows::UI::Xaml::Controls::IContentDialog>;
    Closed_revoker Closed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs> const& value) const;
    void Closed(event_token const& token) const;
    event_token Opened(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs> const& value) const;
    using Opened_revoker = event_revoker<Windows::UI::Xaml::Controls::IContentDialog>;
    Opened_revoker Opened(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs> const& value) const;
    void Opened(event_token const& token) const;
    event_token PrimaryButtonClick(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& value) const;
    using PrimaryButtonClick_revoker = event_revoker<Windows::UI::Xaml::Controls::IContentDialog>;
    PrimaryButtonClick_revoker PrimaryButtonClick(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& value) const;
    void PrimaryButtonClick(event_token const& token) const;
    event_token SecondaryButtonClick(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& value) const;
    using SecondaryButtonClick_revoker = event_revoker<Windows::UI::Xaml::Controls::IContentDialog>;
    SecondaryButtonClick_revoker SecondaryButtonClick(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& value) const;
    void SecondaryButtonClick(event_token const& token) const;
    void Hide() const;
    Windows::Foundation::IAsyncOperation<Windows::UI::Xaml::Controls::ContentDialogResult> ShowAsync() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentDialog> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialog<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentDialog2
{
    hstring CloseButtonText() const;
    void CloseButtonText(param::hstring const& value) const;
    Windows::UI::Xaml::Input::ICommand CloseButtonCommand() const;
    void CloseButtonCommand(Windows::UI::Xaml::Input::ICommand const& value) const;
    Windows::Foundation::IInspectable CloseButtonCommandParameter() const;
    void CloseButtonCommandParameter(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::Style PrimaryButtonStyle() const;
    void PrimaryButtonStyle(Windows::UI::Xaml::Style const& value) const;
    Windows::UI::Xaml::Style SecondaryButtonStyle() const;
    void SecondaryButtonStyle(Windows::UI::Xaml::Style const& value) const;
    Windows::UI::Xaml::Style CloseButtonStyle() const;
    void CloseButtonStyle(Windows::UI::Xaml::Style const& value) const;
    Windows::UI::Xaml::Controls::ContentDialogButton DefaultButton() const;
    void DefaultButton(Windows::UI::Xaml::Controls::ContentDialogButton const& value) const;
    event_token CloseButtonClick(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& value) const;
    using CloseButtonClick_revoker = event_revoker<Windows::UI::Xaml::Controls::IContentDialog2>;
    CloseButtonClick_revoker CloseButtonClick(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& value) const;
    void CloseButtonClick(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentDialog2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialog2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentDialog3
{
    Windows::Foundation::IAsyncOperation<Windows::UI::Xaml::Controls::ContentDialogResult> ShowAsync(Windows::UI::Xaml::Controls::ContentDialogPlacement const& placement) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentDialog3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialog3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentDialogButtonClickDeferral
{
    void Complete() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogButtonClickDeferral<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentDialogButtonClickEventArgs
{
    bool Cancel() const;
    void Cancel(bool value) const;
    Windows::UI::Xaml::Controls::ContentDialogButtonClickDeferral GetDeferral() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogButtonClickEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentDialogClosedEventArgs
{
    Windows::UI::Xaml::Controls::ContentDialogResult Result() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogClosedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentDialogClosingDeferral
{
    void Complete() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentDialogClosingDeferral> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogClosingDeferral<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentDialogClosingEventArgs
{
    Windows::UI::Xaml::Controls::ContentDialogResult Result() const;
    bool Cancel() const;
    void Cancel(bool value) const;
    Windows::UI::Xaml::Controls::ContentDialogClosingDeferral GetDeferral() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogClosingEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentDialogFactory
{
    Windows::UI::Xaml::Controls::ContentDialog CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentDialogFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentDialogOpenedEventArgs
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogOpenedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentDialogStatics
{
    Windows::UI::Xaml::DependencyProperty TitleProperty() const;
    Windows::UI::Xaml::DependencyProperty TitleTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty FullSizeDesiredProperty() const;
    Windows::UI::Xaml::DependencyProperty PrimaryButtonTextProperty() const;
    Windows::UI::Xaml::DependencyProperty SecondaryButtonTextProperty() const;
    Windows::UI::Xaml::DependencyProperty PrimaryButtonCommandProperty() const;
    Windows::UI::Xaml::DependencyProperty SecondaryButtonCommandProperty() const;
    Windows::UI::Xaml::DependencyProperty PrimaryButtonCommandParameterProperty() const;
    Windows::UI::Xaml::DependencyProperty SecondaryButtonCommandParameterProperty() const;
    Windows::UI::Xaml::DependencyProperty IsPrimaryButtonEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsSecondaryButtonEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentDialogStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentDialogStatics2
{
    Windows::UI::Xaml::DependencyProperty CloseButtonTextProperty() const;
    Windows::UI::Xaml::DependencyProperty CloseButtonCommandProperty() const;
    Windows::UI::Xaml::DependencyProperty CloseButtonCommandParameterProperty() const;
    Windows::UI::Xaml::DependencyProperty PrimaryButtonStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty SecondaryButtonStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty CloseButtonStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty DefaultButtonProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentDialogStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentDialogStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentLinkChangedEventArgs
{
    Windows::UI::Xaml::Controls::ContentLinkChangeKind ChangeKind() const;
    Windows::UI::Text::ContentLinkInfo ContentLinkInfo() const;
    Windows::UI::Xaml::Documents::TextRange TextRange() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentLinkChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentLinkChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentPresenter
{
    Windows::Foundation::IInspectable Content() const;
    void Content(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate ContentTemplate() const;
    void ContentTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::Controls::DataTemplateSelector ContentTemplateSelector() const;
    void ContentTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
    Windows::UI::Xaml::Media::Animation::TransitionCollection ContentTransitions() const;
    void ContentTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
    double FontSize() const;
    void FontSize(double value) const;
    Windows::UI::Xaml::Media::FontFamily FontFamily() const;
    void FontFamily(Windows::UI::Xaml::Media::FontFamily const& value) const;
    Windows::UI::Text::FontWeight FontWeight() const;
    void FontWeight(Windows::UI::Text::FontWeight const& value) const;
    Windows::UI::Text::FontStyle FontStyle() const;
    void FontStyle(Windows::UI::Text::FontStyle const& value) const;
    Windows::UI::Text::FontStretch FontStretch() const;
    void FontStretch(Windows::UI::Text::FontStretch const& value) const;
    int32_t CharacterSpacing() const;
    void CharacterSpacing(int32_t value) const;
    Windows::UI::Xaml::Media::Brush Foreground() const;
    void Foreground(Windows::UI::Xaml::Media::Brush const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentPresenter> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenter<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentPresenter2
{
    Windows::UI::Xaml::OpticalMarginAlignment OpticalMarginAlignment() const;
    void OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment const& value) const;
    Windows::UI::Xaml::TextLineBounds TextLineBounds() const;
    void TextLineBounds(Windows::UI::Xaml::TextLineBounds const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentPresenter2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenter2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentPresenter3
{
    bool IsTextScaleFactorEnabled() const;
    void IsTextScaleFactorEnabled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentPresenter3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenter3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentPresenter4
{
    Windows::UI::Xaml::TextWrapping TextWrapping() const;
    void TextWrapping(Windows::UI::Xaml::TextWrapping const& value) const;
    int32_t MaxLines() const;
    void MaxLines(int32_t value) const;
    Windows::UI::Xaml::LineStackingStrategy LineStackingStrategy() const;
    void LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy const& value) const;
    double LineHeight() const;
    void LineHeight(double value) const;
    Windows::UI::Xaml::Media::Brush BorderBrush() const;
    void BorderBrush(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Thickness BorderThickness() const;
    void BorderThickness(Windows::UI::Xaml::Thickness const& value) const;
    Windows::UI::Xaml::CornerRadius CornerRadius() const;
    void CornerRadius(Windows::UI::Xaml::CornerRadius const& value) const;
    Windows::UI::Xaml::Thickness Padding() const;
    void Padding(Windows::UI::Xaml::Thickness const& value) const;
    Windows::UI::Xaml::Media::Brush Background() const;
    void Background(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::HorizontalAlignment HorizontalContentAlignment() const;
    void HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment const& value) const;
    Windows::UI::Xaml::VerticalAlignment VerticalContentAlignment() const;
    void VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentPresenter4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenter4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentPresenterFactory
{
    Windows::UI::Xaml::Controls::ContentPresenter CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentPresenterFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenterFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentPresenterOverrides
{
    void OnContentTemplateChanged(Windows::UI::Xaml::DataTemplate const& oldContentTemplate, Windows::UI::Xaml::DataTemplate const& newContentTemplate) const;
    void OnContentTemplateSelectorChanged(Windows::UI::Xaml::Controls::DataTemplateSelector const& oldContentTemplateSelector, Windows::UI::Xaml::Controls::DataTemplateSelector const& newContentTemplateSelector) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentPresenterOverrides> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenterOverrides<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentPresenterStatics
{
    Windows::UI::Xaml::DependencyProperty ContentProperty() const;
    Windows::UI::Xaml::DependencyProperty ContentTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty ContentTemplateSelectorProperty() const;
    Windows::UI::Xaml::DependencyProperty ContentTransitionsProperty() const;
    Windows::UI::Xaml::DependencyProperty FontSizeProperty() const;
    Windows::UI::Xaml::DependencyProperty FontFamilyProperty() const;
    Windows::UI::Xaml::DependencyProperty FontWeightProperty() const;
    Windows::UI::Xaml::DependencyProperty FontStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty FontStretchProperty() const;
    Windows::UI::Xaml::DependencyProperty CharacterSpacingProperty() const;
    Windows::UI::Xaml::DependencyProperty ForegroundProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentPresenterStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenterStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentPresenterStatics2
{
    Windows::UI::Xaml::DependencyProperty OpticalMarginAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty TextLineBoundsProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentPresenterStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenterStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentPresenterStatics3
{
    Windows::UI::Xaml::DependencyProperty IsTextScaleFactorEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentPresenterStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenterStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContentPresenterStatics4
{
    Windows::UI::Xaml::DependencyProperty TextWrappingProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxLinesProperty() const;
    Windows::UI::Xaml::DependencyProperty LineStackingStrategyProperty() const;
    Windows::UI::Xaml::DependencyProperty LineHeightProperty() const;
    Windows::UI::Xaml::DependencyProperty BorderBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty BorderThicknessProperty() const;
    Windows::UI::Xaml::DependencyProperty CornerRadiusProperty() const;
    Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
    Windows::UI::Xaml::DependencyProperty BackgroundProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalContentAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalContentAlignmentProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContentPresenterStatics4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContentPresenterStatics4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IContextMenuEventArgs
{
    bool Handled() const;
    void Handled(bool value) const;
    double CursorLeft() const;
    double CursorTop() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IContextMenuEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IContextMenuEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IControl
{
    double FontSize() const;
    void FontSize(double value) const;
    Windows::UI::Xaml::Media::FontFamily FontFamily() const;
    void FontFamily(Windows::UI::Xaml::Media::FontFamily const& value) const;
    Windows::UI::Text::FontWeight FontWeight() const;
    void FontWeight(Windows::UI::Text::FontWeight const& value) const;
    Windows::UI::Text::FontStyle FontStyle() const;
    void FontStyle(Windows::UI::Text::FontStyle const& value) const;
    Windows::UI::Text::FontStretch FontStretch() const;
    void FontStretch(Windows::UI::Text::FontStretch const& value) const;
    int32_t CharacterSpacing() const;
    void CharacterSpacing(int32_t value) const;
    Windows::UI::Xaml::Media::Brush Foreground() const;
    void Foreground(Windows::UI::Xaml::Media::Brush const& value) const;
    bool IsTabStop() const;
    void IsTabStop(bool value) const;
    bool IsEnabled() const;
    void IsEnabled(bool value) const;
    int32_t TabIndex() const;
    void TabIndex(int32_t value) const;
    Windows::UI::Xaml::Input::KeyboardNavigationMode TabNavigation() const;
    void TabNavigation(Windows::UI::Xaml::Input::KeyboardNavigationMode const& value) const;
    Windows::UI::Xaml::Controls::ControlTemplate Template() const;
    void Template(Windows::UI::Xaml::Controls::ControlTemplate const& value) const;
    Windows::UI::Xaml::Thickness Padding() const;
    void Padding(Windows::UI::Xaml::Thickness const& value) const;
    Windows::UI::Xaml::HorizontalAlignment HorizontalContentAlignment() const;
    void HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment const& value) const;
    Windows::UI::Xaml::VerticalAlignment VerticalContentAlignment() const;
    void VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment const& value) const;
    Windows::UI::Xaml::Media::Brush Background() const;
    void Background(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Thickness BorderThickness() const;
    void BorderThickness(Windows::UI::Xaml::Thickness const& value) const;
    Windows::UI::Xaml::Media::Brush BorderBrush() const;
    void BorderBrush(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::FocusState FocusState() const;
    event_token IsEnabledChanged(Windows::UI::Xaml::DependencyPropertyChangedEventHandler const& value) const;
    using IsEnabledChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IControl>;
    IsEnabledChanged_revoker IsEnabledChanged(auto_revoke_t, Windows::UI::Xaml::DependencyPropertyChangedEventHandler const& value) const;
    void IsEnabledChanged(event_token const& token) const;
    bool ApplyTemplate() const;
    bool Focus(Windows::UI::Xaml::FocusState const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IControl> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControl<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IControl2
{
    bool IsTextScaleFactorEnabled() const;
    void IsTextScaleFactorEnabled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IControl2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControl2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IControl3
{
    bool UseSystemFocusVisuals() const;
    void UseSystemFocusVisuals(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IControl3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControl3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IControl4
{
    bool IsFocusEngagementEnabled() const;
    void IsFocusEngagementEnabled(bool value) const;
    bool IsFocusEngaged() const;
    void IsFocusEngaged(bool value) const;
    Windows::UI::Xaml::Controls::RequiresPointer RequiresPointer() const;
    void RequiresPointer(Windows::UI::Xaml::Controls::RequiresPointer const& value) const;
    Windows::UI::Xaml::DependencyObject XYFocusLeft() const;
    void XYFocusLeft(Windows::UI::Xaml::DependencyObject const& value) const;
    Windows::UI::Xaml::DependencyObject XYFocusRight() const;
    void XYFocusRight(Windows::UI::Xaml::DependencyObject const& value) const;
    Windows::UI::Xaml::DependencyObject XYFocusUp() const;
    void XYFocusUp(Windows::UI::Xaml::DependencyObject const& value) const;
    Windows::UI::Xaml::DependencyObject XYFocusDown() const;
    void XYFocusDown(Windows::UI::Xaml::DependencyObject const& value) const;
    Windows::UI::Xaml::ElementSoundMode ElementSoundMode() const;
    void ElementSoundMode(Windows::UI::Xaml::ElementSoundMode const& value) const;
    event_token FocusEngaged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusEngagedEventArgs> const& value) const;
    using FocusEngaged_revoker = event_revoker<Windows::UI::Xaml::Controls::IControl4>;
    FocusEngaged_revoker FocusEngaged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusEngagedEventArgs> const& value) const;
    void FocusEngaged(event_token const& token) const;
    event_token FocusDisengaged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusDisengagedEventArgs> const& value) const;
    using FocusDisengaged_revoker = event_revoker<Windows::UI::Xaml::Controls::IControl4>;
    FocusDisengaged_revoker FocusDisengaged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusDisengagedEventArgs> const& value) const;
    void FocusDisengaged(event_token const& token) const;
    void RemoveFocusEngagement() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IControl4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControl4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IControl5
{
    Windows::Foundation::Uri DefaultStyleResourceUri() const;
    void DefaultStyleResourceUri(Windows::Foundation::Uri const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IControl5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControl5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IControlFactory
{
    Windows::UI::Xaml::Controls::Control CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IControlFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IControlOverrides
{
    void OnPointerEntered(Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
    void OnPointerPressed(Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
    void OnPointerMoved(Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
    void OnPointerReleased(Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
    void OnPointerExited(Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
    void OnPointerCaptureLost(Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
    void OnPointerCanceled(Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
    void OnPointerWheelChanged(Windows::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
    void OnTapped(Windows::UI::Xaml::Input::TappedRoutedEventArgs const& e) const;
    void OnDoubleTapped(Windows::UI::Xaml::Input::DoubleTappedRoutedEventArgs const& e) const;
    void OnHolding(Windows::UI::Xaml::Input::HoldingRoutedEventArgs const& e) const;
    void OnRightTapped(Windows::UI::Xaml::Input::RightTappedRoutedEventArgs const& e) const;
    void OnManipulationStarting(Windows::UI::Xaml::Input::ManipulationStartingRoutedEventArgs const& e) const;
    void OnManipulationInertiaStarting(Windows::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs const& e) const;
    void OnManipulationStarted(Windows::UI::Xaml::Input::ManipulationStartedRoutedEventArgs const& e) const;
    void OnManipulationDelta(Windows::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs const& e) const;
    void OnManipulationCompleted(Windows::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs const& e) const;
    void OnKeyUp(Windows::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
    void OnKeyDown(Windows::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
    void OnGotFocus(Windows::UI::Xaml::RoutedEventArgs const& e) const;
    void OnLostFocus(Windows::UI::Xaml::RoutedEventArgs const& e) const;
    void OnDragEnter(Windows::UI::Xaml::DragEventArgs const& e) const;
    void OnDragLeave(Windows::UI::Xaml::DragEventArgs const& e) const;
    void OnDragOver(Windows::UI::Xaml::DragEventArgs const& e) const;
    void OnDrop(Windows::UI::Xaml::DragEventArgs const& e) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IControlOverrides> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlOverrides<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IControlOverrides6
{
    void OnPreviewKeyDown(Windows::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
    void OnPreviewKeyUp(Windows::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
    void OnCharacterReceived(Windows::UI::Xaml::Input::CharacterReceivedRoutedEventArgs const& e) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IControlOverrides6> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlOverrides6<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IControlProtected
{
    Windows::Foundation::IInspectable DefaultStyleKey() const;
    void DefaultStyleKey(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DependencyObject GetTemplateChild(param::hstring const& childName) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IControlProtected> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlProtected<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IControlStatics
{
    Windows::UI::Xaml::DependencyProperty FontSizeProperty() const;
    Windows::UI::Xaml::DependencyProperty FontFamilyProperty() const;
    Windows::UI::Xaml::DependencyProperty FontWeightProperty() const;
    Windows::UI::Xaml::DependencyProperty FontStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty FontStretchProperty() const;
    Windows::UI::Xaml::DependencyProperty CharacterSpacingProperty() const;
    Windows::UI::Xaml::DependencyProperty ForegroundProperty() const;
    Windows::UI::Xaml::DependencyProperty IsTabStopProperty() const;
    Windows::UI::Xaml::DependencyProperty IsEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty TabIndexProperty() const;
    Windows::UI::Xaml::DependencyProperty TabNavigationProperty() const;
    Windows::UI::Xaml::DependencyProperty TemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalContentAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalContentAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty BackgroundProperty() const;
    Windows::UI::Xaml::DependencyProperty BorderThicknessProperty() const;
    Windows::UI::Xaml::DependencyProperty BorderBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty DefaultStyleKeyProperty() const;
    Windows::UI::Xaml::DependencyProperty FocusStateProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IControlStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IControlStatics2
{
    Windows::UI::Xaml::DependencyProperty IsTextScaleFactorEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IControlStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IControlStatics3
{
    Windows::UI::Xaml::DependencyProperty UseSystemFocusVisualsProperty() const;
    Windows::UI::Xaml::DependencyProperty IsTemplateFocusTargetProperty() const;
    bool GetIsTemplateFocusTarget(Windows::UI::Xaml::FrameworkElement const& element) const;
    void SetIsTemplateFocusTarget(Windows::UI::Xaml::FrameworkElement const& element, bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IControlStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IControlStatics4
{
    Windows::UI::Xaml::DependencyProperty IsFocusEngagementEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsFocusEngagedProperty() const;
    Windows::UI::Xaml::DependencyProperty RequiresPointerProperty() const;
    Windows::UI::Xaml::DependencyProperty XYFocusLeftProperty() const;
    Windows::UI::Xaml::DependencyProperty XYFocusRightProperty() const;
    Windows::UI::Xaml::DependencyProperty XYFocusUpProperty() const;
    Windows::UI::Xaml::DependencyProperty XYFocusDownProperty() const;
    Windows::UI::Xaml::DependencyProperty ElementSoundModeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IControlStatics4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlStatics4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IControlStatics5
{
    Windows::UI::Xaml::DependencyProperty DefaultStyleResourceUriProperty() const;
    Windows::UI::Xaml::DependencyProperty IsTemplateKeyTipTargetProperty() const;
    bool GetIsTemplateKeyTipTarget(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetIsTemplateKeyTipTarget(Windows::UI::Xaml::DependencyObject const& element, bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IControlStatics5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlStatics5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IControlTemplate
{
    Windows::UI::Xaml::Interop::TypeName TargetType() const;
    void TargetType(Windows::UI::Xaml::Interop::TypeName const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IControlTemplate> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IControlTemplate<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDataTemplateSelector
{
    Windows::UI::Xaml::DataTemplate SelectTemplate(Windows::Foundation::IInspectable const& item, Windows::UI::Xaml::DependencyObject const& container) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDataTemplateSelector> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDataTemplateSelector<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDataTemplateSelector2
{
    Windows::UI::Xaml::DataTemplate SelectTemplate(Windows::Foundation::IInspectable const& item) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDataTemplateSelector2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDataTemplateSelector2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDataTemplateSelectorFactory
{
    Windows::UI::Xaml::Controls::DataTemplateSelector CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDataTemplateSelectorFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDataTemplateSelectorOverrides
{
    Windows::UI::Xaml::DataTemplate SelectTemplateCore(Windows::Foundation::IInspectable const& item, Windows::UI::Xaml::DependencyObject const& container) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDataTemplateSelectorOverrides<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDataTemplateSelectorOverrides2
{
    Windows::UI::Xaml::DataTemplate SelectTemplateCore(Windows::Foundation::IInspectable const& item) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDataTemplateSelectorOverrides2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDatePickedEventArgs
{
    Windows::Foundation::DateTime OldDate() const;
    Windows::Foundation::DateTime NewDate() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDatePickedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDatePicker
{
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    hstring CalendarIdentifier() const;
    void CalendarIdentifier(param::hstring const& value) const;
    Windows::Foundation::DateTime Date() const;
    void Date(Windows::Foundation::DateTime const& value) const;
    bool DayVisible() const;
    void DayVisible(bool value) const;
    bool MonthVisible() const;
    void MonthVisible(bool value) const;
    bool YearVisible() const;
    void YearVisible(bool value) const;
    hstring DayFormat() const;
    void DayFormat(param::hstring const& value) const;
    hstring MonthFormat() const;
    void MonthFormat(param::hstring const& value) const;
    hstring YearFormat() const;
    void YearFormat(param::hstring const& value) const;
    Windows::Foundation::DateTime MinYear() const;
    void MinYear(Windows::Foundation::DateTime const& value) const;
    Windows::Foundation::DateTime MaxYear() const;
    void MaxYear(Windows::Foundation::DateTime const& value) const;
    Windows::UI::Xaml::Controls::Orientation Orientation() const;
    void Orientation(Windows::UI::Xaml::Controls::Orientation const& value) const;
    event_token DateChanged(Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs> const& value) const;
    using DateChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IDatePicker>;
    DateChanged_revoker DateChanged(auto_revoke_t, Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs> const& value) const;
    void DateChanged(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDatePicker> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePicker<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDatePicker2
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode LightDismissOverlayMode() const;
    void LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDatePicker2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePicker2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDatePickerFactory
{
    Windows::UI::Xaml::Controls::DatePicker CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDatePickerFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyout
{
    hstring CalendarIdentifier() const;
    void CalendarIdentifier(param::hstring const& value) const;
    Windows::Foundation::DateTime Date() const;
    void Date(Windows::Foundation::DateTime const& value) const;
    bool DayVisible() const;
    void DayVisible(bool value) const;
    bool MonthVisible() const;
    void MonthVisible(bool value) const;
    bool YearVisible() const;
    void YearVisible(bool value) const;
    Windows::Foundation::DateTime MinYear() const;
    void MinYear(Windows::Foundation::DateTime const& value) const;
    Windows::Foundation::DateTime MaxYear() const;
    void MaxYear(Windows::Foundation::DateTime const& value) const;
    event_token DatePicked(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::DatePickerFlyout, Windows::UI::Xaml::Controls::DatePickedEventArgs> const& value) const;
    using DatePicked_revoker = event_revoker<Windows::UI::Xaml::Controls::IDatePickerFlyout>;
    DatePicked_revoker DatePicked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::DatePickerFlyout, Windows::UI::Xaml::Controls::DatePickedEventArgs> const& value) const;
    void DatePicked(event_token const& token) const;
    Windows::Foundation::IAsyncOperation<Windows::Foundation::IReference<Windows::Foundation::DateTime>> ShowAtAsync(Windows::UI::Xaml::FrameworkElement const& target) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDatePickerFlyout> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyout<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyout2
{
    hstring DayFormat() const;
    void DayFormat(param::hstring const& value) const;
    hstring MonthFormat() const;
    void MonthFormat(param::hstring const& value) const;
    hstring YearFormat() const;
    void YearFormat(param::hstring const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDatePickerFlyout2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyout2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutItem
{
    hstring PrimaryText() const;
    void PrimaryText(param::hstring const& value) const;
    hstring SecondaryText() const;
    void SecondaryText(param::hstring const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDatePickerFlyoutItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutItemStatics
{
    Windows::UI::Xaml::DependencyProperty PrimaryTextProperty() const;
    Windows::UI::Xaml::DependencyProperty SecondaryTextProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutItemStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutPresenter
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutPresenter<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutStatics
{
    Windows::UI::Xaml::DependencyProperty CalendarIdentifierProperty() const;
    Windows::UI::Xaml::DependencyProperty DateProperty() const;
    Windows::UI::Xaml::DependencyProperty DayVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty MonthVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty YearVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty MinYearProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxYearProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutStatics2
{
    Windows::UI::Xaml::DependencyProperty DayFormatProperty() const;
    Windows::UI::Xaml::DependencyProperty MonthFormatProperty() const;
    Windows::UI::Xaml::DependencyProperty YearFormatProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerFlyoutStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDatePickerStatics
{
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty CalendarIdentifierProperty() const;
    Windows::UI::Xaml::DependencyProperty DateProperty() const;
    Windows::UI::Xaml::DependencyProperty DayVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty MonthVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty YearVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty DayFormatProperty() const;
    Windows::UI::Xaml::DependencyProperty MonthFormatProperty() const;
    Windows::UI::Xaml::DependencyProperty YearFormatProperty() const;
    Windows::UI::Xaml::DependencyProperty MinYearProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxYearProperty() const;
    Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDatePickerStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDatePickerStatics2
{
    Windows::UI::Xaml::DependencyProperty LightDismissOverlayModeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDatePickerStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDatePickerValueChangedEventArgs
{
    Windows::Foundation::DateTime OldDate() const;
    Windows::Foundation::DateTime NewDate() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDatePickerValueChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDragItemsCompletedEventArgs
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable> Items() const;
    Windows::ApplicationModel::DataTransfer::DataPackageOperation DropResult() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDragItemsCompletedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDragItemsStartingEventArgs
{
    bool Cancel() const;
    void Cancel(bool value) const;
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> Items() const;
    Windows::ApplicationModel::DataTransfer::DataPackage Data() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDragItemsStartingEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IDynamicOverflowItemsChangingEventArgs
{
    Windows::UI::Xaml::Controls::CommandBarDynamicOverflowAction Action() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IDynamicOverflowItemsChangingEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFlipView
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IFlipView> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlipView<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFlipView2
{
    bool UseTouchAnimationsForAllNavigation() const;
    void UseTouchAnimationsForAllNavigation(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFlipView2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlipView2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFlipViewFactory
{
    Windows::UI::Xaml::Controls::FlipView CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFlipViewFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlipViewFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFlipViewItem
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IFlipViewItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlipViewItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFlipViewItemFactory
{
    Windows::UI::Xaml::Controls::FlipViewItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFlipViewItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlipViewItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFlipViewStatics2
{
    Windows::UI::Xaml::DependencyProperty UseTouchAnimationsForAllNavigationProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFlipViewStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlipViewStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFlyout
{
    Windows::UI::Xaml::UIElement Content() const;
    void Content(Windows::UI::Xaml::UIElement const& value) const;
    Windows::UI::Xaml::Style FlyoutPresenterStyle() const;
    void FlyoutPresenterStyle(Windows::UI::Xaml::Style const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFlyout> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlyout<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFlyoutFactory
{
    Windows::UI::Xaml::Controls::Flyout CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFlyoutFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlyoutFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFlyoutPresenter
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IFlyoutPresenter> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlyoutPresenter<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFlyoutPresenterFactory
{
    Windows::UI::Xaml::Controls::FlyoutPresenter CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFlyoutPresenterFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlyoutPresenterFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFlyoutStatics
{
    Windows::UI::Xaml::DependencyProperty ContentProperty() const;
    Windows::UI::Xaml::DependencyProperty FlyoutPresenterStyleProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFlyoutStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFlyoutStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFocusDisengagedEventArgs
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFocusDisengagedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFocusEngagedEventArgs
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IFocusEngagedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFocusEngagedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFocusEngagedEventArgs2
{
    bool Handled() const;
    void Handled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFocusEngagedEventArgs2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFocusEngagedEventArgs2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFontIcon
{
    hstring Glyph() const;
    void Glyph(param::hstring const& value) const;
    double FontSize() const;
    void FontSize(double value) const;
    Windows::UI::Xaml::Media::FontFamily FontFamily() const;
    void FontFamily(Windows::UI::Xaml::Media::FontFamily const& value) const;
    Windows::UI::Text::FontWeight FontWeight() const;
    void FontWeight(Windows::UI::Text::FontWeight const& value) const;
    Windows::UI::Text::FontStyle FontStyle() const;
    void FontStyle(Windows::UI::Text::FontStyle const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFontIcon> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIcon<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFontIcon2
{
    bool IsTextScaleFactorEnabled() const;
    void IsTextScaleFactorEnabled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFontIcon2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIcon2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFontIcon3
{
    bool MirroredWhenRightToLeft() const;
    void MirroredWhenRightToLeft(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFontIcon3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIcon3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFontIconFactory
{
    Windows::UI::Xaml::Controls::FontIcon CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFontIconFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIconFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFontIconSource
{
    hstring Glyph() const;
    void Glyph(param::hstring const& value) const;
    double FontSize() const;
    void FontSize(double value) const;
    Windows::UI::Xaml::Media::FontFamily FontFamily() const;
    void FontFamily(Windows::UI::Xaml::Media::FontFamily const& value) const;
    Windows::UI::Text::FontWeight FontWeight() const;
    void FontWeight(Windows::UI::Text::FontWeight const& value) const;
    Windows::UI::Text::FontStyle FontStyle() const;
    void FontStyle(Windows::UI::Text::FontStyle const& value) const;
    bool IsTextScaleFactorEnabled() const;
    void IsTextScaleFactorEnabled(bool value) const;
    bool MirroredWhenRightToLeft() const;
    void MirroredWhenRightToLeft(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFontIconSource> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIconSource<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFontIconSourceFactory
{
    Windows::UI::Xaml::Controls::FontIconSource CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFontIconSourceFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIconSourceFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFontIconSourceStatics
{
    Windows::UI::Xaml::DependencyProperty GlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty FontSizeProperty() const;
    Windows::UI::Xaml::DependencyProperty FontFamilyProperty() const;
    Windows::UI::Xaml::DependencyProperty FontWeightProperty() const;
    Windows::UI::Xaml::DependencyProperty FontStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsTextScaleFactorEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty MirroredWhenRightToLeftProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFontIconSourceStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIconSourceStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFontIconStatics
{
    Windows::UI::Xaml::DependencyProperty GlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty FontSizeProperty() const;
    Windows::UI::Xaml::DependencyProperty FontFamilyProperty() const;
    Windows::UI::Xaml::DependencyProperty FontWeightProperty() const;
    Windows::UI::Xaml::DependencyProperty FontStyleProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFontIconStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIconStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFontIconStatics2
{
    Windows::UI::Xaml::DependencyProperty IsTextScaleFactorEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFontIconStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIconStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFontIconStatics3
{
    Windows::UI::Xaml::DependencyProperty MirroredWhenRightToLeftProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFontIconStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFontIconStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFrame
{
    int32_t CacheSize() const;
    void CacheSize(int32_t value) const;
    bool CanGoBack() const;
    bool CanGoForward() const;
    Windows::UI::Xaml::Interop::TypeName CurrentSourcePageType() const;
    Windows::UI::Xaml::Interop::TypeName SourcePageType() const;
    void SourcePageType(Windows::UI::Xaml::Interop::TypeName const& value) const;
    int32_t BackStackDepth() const;
    event_token Navigated(Windows::UI::Xaml::Navigation::NavigatedEventHandler const& value) const;
    using Navigated_revoker = event_revoker<Windows::UI::Xaml::Controls::IFrame>;
    Navigated_revoker Navigated(auto_revoke_t, Windows::UI::Xaml::Navigation::NavigatedEventHandler const& value) const;
    void Navigated(event_token const& token) const;
    event_token Navigating(Windows::UI::Xaml::Navigation::NavigatingCancelEventHandler const& value) const;
    using Navigating_revoker = event_revoker<Windows::UI::Xaml::Controls::IFrame>;
    Navigating_revoker Navigating(auto_revoke_t, Windows::UI::Xaml::Navigation::NavigatingCancelEventHandler const& value) const;
    void Navigating(event_token const& token) const;
    event_token NavigationFailed(Windows::UI::Xaml::Navigation::NavigationFailedEventHandler const& value) const;
    using NavigationFailed_revoker = event_revoker<Windows::UI::Xaml::Controls::IFrame>;
    NavigationFailed_revoker NavigationFailed(auto_revoke_t, Windows::UI::Xaml::Navigation::NavigationFailedEventHandler const& value) const;
    void NavigationFailed(event_token const& token) const;
    event_token NavigationStopped(Windows::UI::Xaml::Navigation::NavigationStoppedEventHandler const& value) const;
    using NavigationStopped_revoker = event_revoker<Windows::UI::Xaml::Controls::IFrame>;
    NavigationStopped_revoker NavigationStopped(auto_revoke_t, Windows::UI::Xaml::Navigation::NavigationStoppedEventHandler const& value) const;
    void NavigationStopped(event_token const& token) const;
    void GoBack() const;
    void GoForward() const;
    bool Navigate(Windows::UI::Xaml::Interop::TypeName const& sourcePageType, Windows::Foundation::IInspectable const& parameter) const;
    hstring GetNavigationState() const;
    void SetNavigationState(param::hstring const& navigationState) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFrame> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrame<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFrame2
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry> BackStack() const;
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry> ForwardStack() const;
    bool Navigate(Windows::UI::Xaml::Interop::TypeName const& sourcePageType, Windows::Foundation::IInspectable const& parameter, Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo const& infoOverride) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFrame2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrame2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFrame3
{
    void GoBack(Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo const& transitionInfoOverride) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFrame3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrame3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFrame4
{
    void SetNavigationState(param::hstring const& navigationState, bool suppressNavigate) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFrame4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrame4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFrameFactory
{
    Windows::UI::Xaml::Controls::Frame CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFrameFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrameFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFrameStatics
{
    Windows::UI::Xaml::DependencyProperty CacheSizeProperty() const;
    Windows::UI::Xaml::DependencyProperty CanGoBackProperty() const;
    Windows::UI::Xaml::DependencyProperty CanGoForwardProperty() const;
    Windows::UI::Xaml::DependencyProperty CurrentSourcePageTypeProperty() const;
    Windows::UI::Xaml::DependencyProperty SourcePageTypeProperty() const;
    Windows::UI::Xaml::DependencyProperty BackStackDepthProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFrameStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrameStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IFrameStatics2
{
    Windows::UI::Xaml::DependencyProperty BackStackProperty() const;
    Windows::UI::Xaml::DependencyProperty ForwardStackProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IFrameStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IFrameStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGrid
{
    Windows::UI::Xaml::Controls::RowDefinitionCollection RowDefinitions() const;
    Windows::UI::Xaml::Controls::ColumnDefinitionCollection ColumnDefinitions() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGrid> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGrid<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGrid2
{
    Windows::UI::Xaml::Media::Brush BorderBrush() const;
    void BorderBrush(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Thickness BorderThickness() const;
    void BorderThickness(Windows::UI::Xaml::Thickness const& value) const;
    Windows::UI::Xaml::CornerRadius CornerRadius() const;
    void CornerRadius(Windows::UI::Xaml::CornerRadius const& value) const;
    Windows::UI::Xaml::Thickness Padding() const;
    void Padding(Windows::UI::Xaml::Thickness const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGrid2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGrid2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGrid3
{
    double RowSpacing() const;
    void RowSpacing(double value) const;
    double ColumnSpacing() const;
    void ColumnSpacing(double value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGrid3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGrid3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGridFactory
{
    Windows::UI::Xaml::Controls::Grid CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGridFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGridStatics
{
    Windows::UI::Xaml::DependencyProperty RowProperty() const;
    int32_t GetRow(Windows::UI::Xaml::FrameworkElement const& element) const;
    void SetRow(Windows::UI::Xaml::FrameworkElement const& element, int32_t value) const;
    Windows::UI::Xaml::DependencyProperty ColumnProperty() const;
    int32_t GetColumn(Windows::UI::Xaml::FrameworkElement const& element) const;
    void SetColumn(Windows::UI::Xaml::FrameworkElement const& element, int32_t value) const;
    Windows::UI::Xaml::DependencyProperty RowSpanProperty() const;
    int32_t GetRowSpan(Windows::UI::Xaml::FrameworkElement const& element) const;
    void SetRowSpan(Windows::UI::Xaml::FrameworkElement const& element, int32_t value) const;
    Windows::UI::Xaml::DependencyProperty ColumnSpanProperty() const;
    int32_t GetColumnSpan(Windows::UI::Xaml::FrameworkElement const& element) const;
    void SetColumnSpan(Windows::UI::Xaml::FrameworkElement const& element, int32_t value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGridStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGridStatics2
{
    Windows::UI::Xaml::DependencyProperty BorderBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty BorderThicknessProperty() const;
    Windows::UI::Xaml::DependencyProperty CornerRadiusProperty() const;
    Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGridStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGridStatics3
{
    Windows::UI::Xaml::DependencyProperty RowSpacingProperty() const;
    Windows::UI::Xaml::DependencyProperty ColumnSpacingProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGridStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGridView
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IGridView> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridView<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGridViewFactory
{
    Windows::UI::Xaml::Controls::GridView CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGridViewFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridViewFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGridViewHeaderItem
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IGridViewHeaderItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridViewHeaderItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGridViewHeaderItemFactory
{
    Windows::UI::Xaml::Controls::GridViewHeaderItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridViewHeaderItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGridViewItem
{
    Windows::UI::Xaml::Controls::Primitives::GridViewItemTemplateSettings TemplateSettings() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGridViewItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridViewItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGridViewItemFactory
{
    Windows::UI::Xaml::Controls::GridViewItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGridViewItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGridViewItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGroupItem
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IGroupItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGroupItemFactory
{
    Windows::UI::Xaml::Controls::GroupItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGroupItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGroupStyle
{
    Windows::UI::Xaml::Controls::ItemsPanelTemplate Panel() const;
    void Panel(Windows::UI::Xaml::Controls::ItemsPanelTemplate const& value) const;
    [[deprecated("ContainerStyle may be altered or unavailable for releases after Windows 8.1, and is not supported for ItemsControl.GroupStyle.")]] Windows::UI::Xaml::Style ContainerStyle() const;
    [[deprecated("ContainerStyle may be altered or unavailable for releases after Windows 8.1, and is not supported for ItemsControl.GroupStyle.")]] void ContainerStyle(Windows::UI::Xaml::Style const& value) const;
    [[deprecated("ContainerStyleSelector may be altered or unavailable for releases after Windows 8.1, and is not supported for ItemsControl.GroupStyle.")]] Windows::UI::Xaml::Controls::StyleSelector ContainerStyleSelector() const;
    [[deprecated("ContainerStyleSelector may be altered or unavailable for releases after Windows 8.1, and is not supported for ItemsControl.GroupStyle.")]] void ContainerStyleSelector(Windows::UI::Xaml::Controls::StyleSelector const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::Controls::DataTemplateSelector HeaderTemplateSelector() const;
    void HeaderTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
    bool HidesIfEmpty() const;
    void HidesIfEmpty(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGroupStyle> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupStyle<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGroupStyle2
{
    Windows::UI::Xaml::Style HeaderContainerStyle() const;
    void HeaderContainerStyle(Windows::UI::Xaml::Style const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGroupStyle2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupStyle2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGroupStyleFactory
{
    Windows::UI::Xaml::Controls::GroupStyle CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGroupStyleFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupStyleFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGroupStyleSelector
{
    Windows::UI::Xaml::Controls::GroupStyle SelectGroupStyle(Windows::Foundation::IInspectable const& group, uint32_t level) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGroupStyleSelector> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupStyleSelector<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGroupStyleSelectorFactory
{
    Windows::UI::Xaml::Controls::GroupStyleSelector CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupStyleSelectorFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IGroupStyleSelectorOverrides
{
    Windows::UI::Xaml::Controls::GroupStyle SelectGroupStyleCore(Windows::Foundation::IInspectable const& group, uint32_t level) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IGroupStyleSelectorOverrides<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IHandwritingPanelClosedEventArgs
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IHandwritingPanelClosedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHandwritingPanelClosedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IHandwritingPanelOpenedEventArgs
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IHandwritingPanelOpenedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHandwritingPanelOpenedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IHandwritingView
{
    Windows::UI::Xaml::UIElement PlacementTarget() const;
    void PlacementTarget(Windows::UI::Xaml::UIElement const& value) const;
    Windows::UI::Xaml::Controls::HandwritingPanelPlacementAlignment PlacementAlignment() const;
    void PlacementAlignment(Windows::UI::Xaml::Controls::HandwritingPanelPlacementAlignment const& value) const;
    bool IsOpen() const;
    bool AreCandidatesEnabled() const;
    void AreCandidatesEnabled(bool value) const;
    event_token Opened(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::HandwritingView, Windows::UI::Xaml::Controls::HandwritingPanelOpenedEventArgs> const& value) const;
    using Opened_revoker = event_revoker<Windows::UI::Xaml::Controls::IHandwritingView>;
    Opened_revoker Opened(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::HandwritingView, Windows::UI::Xaml::Controls::HandwritingPanelOpenedEventArgs> const& value) const;
    void Opened(event_token const& token) const;
    event_token Closed(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::HandwritingView, Windows::UI::Xaml::Controls::HandwritingPanelClosedEventArgs> const& value) const;
    using Closed_revoker = event_revoker<Windows::UI::Xaml::Controls::IHandwritingView>;
    Closed_revoker Closed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::HandwritingView, Windows::UI::Xaml::Controls::HandwritingPanelClosedEventArgs> const& value) const;
    void Closed(event_token const& token) const;
    bool TryClose() const;
    bool TryOpen() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IHandwritingView> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHandwritingView<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IHandwritingViewFactory
{
    Windows::UI::Xaml::Controls::HandwritingView CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IHandwritingViewFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHandwritingViewFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IHandwritingViewStatics
{
    Windows::UI::Xaml::DependencyProperty PlacementTargetProperty() const;
    Windows::UI::Xaml::DependencyProperty PlacementAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty IsOpenProperty() const;
    Windows::UI::Xaml::DependencyProperty AreCandidatesEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IHandwritingViewStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHandwritingViewStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IHub
{
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::Controls::Orientation Orientation() const;
    void Orientation(Windows::UI::Xaml::Controls::Orientation const& value) const;
    int32_t DefaultSectionIndex() const;
    void DefaultSectionIndex(int32_t value) const;
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> Sections() const;
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> SectionsInView() const;
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> SectionHeaders() const;
    event_token SectionHeaderClick(Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler const& value) const;
    using SectionHeaderClick_revoker = event_revoker<Windows::UI::Xaml::Controls::IHub>;
    SectionHeaderClick_revoker SectionHeaderClick(auto_revoke_t, Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler const& value) const;
    void SectionHeaderClick(event_token const& token) const;
    event_token SectionsInViewChanged(Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler const& value) const;
    using SectionsInViewChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IHub>;
    SectionsInViewChanged_revoker SectionsInViewChanged(auto_revoke_t, Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler const& value) const;
    void SectionsInViewChanged(event_token const& token) const;
    void ScrollToSection(Windows::UI::Xaml::Controls::HubSection const& section) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IHub> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHub<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IHubFactory
{
    Windows::UI::Xaml::Controls::Hub CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IHubFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHubFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IHubSection
{
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::DataTemplate ContentTemplate() const;
    void ContentTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    bool IsHeaderInteractive() const;
    void IsHeaderInteractive(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IHubSection> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHubSection<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IHubSectionFactory
{
    Windows::UI::Xaml::Controls::HubSection CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IHubSectionFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHubSectionFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IHubSectionHeaderClickEventArgs
{
    Windows::UI::Xaml::Controls::HubSection Section() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHubSectionHeaderClickEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IHubSectionStatics
{
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty ContentTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty IsHeaderInteractiveProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IHubSectionStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHubSectionStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IHubStatics
{
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
    Windows::UI::Xaml::DependencyProperty DefaultSectionIndexProperty() const;
    Windows::UI::Xaml::DependencyProperty SemanticZoomOwnerProperty() const;
    Windows::UI::Xaml::DependencyProperty IsActiveViewProperty() const;
    Windows::UI::Xaml::DependencyProperty IsZoomedInViewProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IHubStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHubStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IHyperlinkButton
{
    Windows::Foundation::Uri NavigateUri() const;
    void NavigateUri(Windows::Foundation::Uri const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IHyperlinkButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHyperlinkButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IHyperlinkButtonFactory
{
    Windows::UI::Xaml::Controls::HyperlinkButton CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IHyperlinkButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHyperlinkButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IHyperlinkButtonStatics
{
    Windows::UI::Xaml::DependencyProperty NavigateUriProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IHyperlinkButtonStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IHyperlinkButtonStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IIconElement
{
    Windows::UI::Xaml::Media::Brush Foreground() const;
    void Foreground(Windows::UI::Xaml::Media::Brush const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IIconElement> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIconElement<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IIconElementFactory
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IIconElementFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIconElementFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IIconElementStatics
{
    Windows::UI::Xaml::DependencyProperty ForegroundProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IIconElementStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIconElementStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IIconSource
{
    Windows::UI::Xaml::Media::Brush Foreground() const;
    void Foreground(Windows::UI::Xaml::Media::Brush const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IIconSource> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIconSource<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IIconSourceFactory
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IIconSourceFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIconSourceFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IIconSourceStatics
{
    Windows::UI::Xaml::DependencyProperty ForegroundProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IIconSourceStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIconSourceStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IImage
{
    Windows::UI::Xaml::Media::ImageSource Source() const;
    void Source(Windows::UI::Xaml::Media::ImageSource const& value) const;
    Windows::UI::Xaml::Media::Stretch Stretch() const;
    void Stretch(Windows::UI::Xaml::Media::Stretch const& value) const;
    Windows::UI::Xaml::Thickness NineGrid() const;
    void NineGrid(Windows::UI::Xaml::Thickness const& value) const;
    [[deprecated("PlayToSource may be altered or unavailable for releases after Windows 10.0. Instead, use GetAsCastingSource.")]] Windows::Media::PlayTo::PlayToSource PlayToSource() const;
    event_token ImageFailed(Windows::UI::Xaml::ExceptionRoutedEventHandler const& value) const;
    using ImageFailed_revoker = event_revoker<Windows::UI::Xaml::Controls::IImage>;
    ImageFailed_revoker ImageFailed(auto_revoke_t, Windows::UI::Xaml::ExceptionRoutedEventHandler const& value) const;
    void ImageFailed(event_token const& token) const;
    event_token ImageOpened(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using ImageOpened_revoker = event_revoker<Windows::UI::Xaml::Controls::IImage>;
    ImageOpened_revoker ImageOpened(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void ImageOpened(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IImage> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IImage<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IImage2
{
    Windows::Media::Casting::CastingSource GetAsCastingSource() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IImage2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IImage2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IImage3
{
    Windows::UI::Composition::CompositionBrush GetAlphaMask() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IImage3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IImage3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IImageStatics
{
    Windows::UI::Xaml::DependencyProperty SourceProperty() const;
    Windows::UI::Xaml::DependencyProperty StretchProperty() const;
    Windows::UI::Xaml::DependencyProperty NineGridProperty() const;
    [[deprecated("PlayToSource may be altered or unavailable for releases after Windows 10.0. Instead, use GetAsCastingSource.")]] Windows::UI::Xaml::DependencyProperty PlayToSourceProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IImageStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IImageStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkCanvas
{
    Windows::UI::Input::Inking::InkPresenter InkPresenter() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkCanvas> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkCanvas<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkCanvasFactory
{
    Windows::UI::Xaml::Controls::InkCanvas CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkCanvasFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkCanvasFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbar
{
    Windows::UI::Xaml::Controls::InkToolbarInitialControls InitialControls() const;
    void InitialControls(Windows::UI::Xaml::Controls::InkToolbarInitialControls const& value) const;
    Windows::UI::Xaml::DependencyObjectCollection Children() const;
    Windows::UI::Xaml::Controls::InkToolbarToolButton ActiveTool() const;
    void ActiveTool(Windows::UI::Xaml::Controls::InkToolbarToolButton const& value) const;
    Windows::UI::Input::Inking::InkDrawingAttributes InkDrawingAttributes() const;
    bool IsRulerButtonChecked() const;
    void IsRulerButtonChecked(bool value) const;
    Windows::UI::Xaml::Controls::InkCanvas TargetInkCanvas() const;
    void TargetInkCanvas(Windows::UI::Xaml::Controls::InkCanvas const& value) const;
    event_token ActiveToolChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> const& value) const;
    using ActiveToolChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IInkToolbar>;
    ActiveToolChanged_revoker ActiveToolChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> const& value) const;
    void ActiveToolChanged(event_token const& token) const;
    event_token InkDrawingAttributesChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> const& value) const;
    using InkDrawingAttributesChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IInkToolbar>;
    InkDrawingAttributesChanged_revoker InkDrawingAttributesChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> const& value) const;
    void InkDrawingAttributesChanged(event_token const& token) const;
    event_token EraseAllClicked(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> const& value) const;
    using EraseAllClicked_revoker = event_revoker<Windows::UI::Xaml::Controls::IInkToolbar>;
    EraseAllClicked_revoker EraseAllClicked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> const& value) const;
    void EraseAllClicked(event_token const& token) const;
    [[deprecated("InkToolbarRulerButton is replaced by InkToolbarStencilButton starting from Windows 10 Creators Update. For more info, see MSDN.")]] event_token IsRulerButtonCheckedChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> const& value) const;
    using IsRulerButtonCheckedChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IInkToolbar>;
    [[deprecated("InkToolbarRulerButton is replaced by InkToolbarStencilButton starting from Windows 10 Creators Update. For more info, see MSDN.")]] IsRulerButtonCheckedChanged_revoker IsRulerButtonCheckedChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::Foundation::IInspectable> const& value) const;
    [[deprecated("InkToolbarRulerButton is replaced by InkToolbarStencilButton starting from Windows 10 Creators Update. For more info, see MSDN.")]] void IsRulerButtonCheckedChanged(event_token const& token) const;
    Windows::UI::Xaml::Controls::InkToolbarToolButton GetToolButton(Windows::UI::Xaml::Controls::InkToolbarTool const& tool) const;
    Windows::UI::Xaml::Controls::InkToolbarToggleButton GetToggleButton(Windows::UI::Xaml::Controls::InkToolbarToggle const& tool) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbar> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbar<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbar2
{
    bool IsStencilButtonChecked() const;
    void IsStencilButtonChecked(bool value) const;
    Windows::UI::Xaml::Controls::InkToolbarButtonFlyoutPlacement ButtonFlyoutPlacement() const;
    void ButtonFlyoutPlacement(Windows::UI::Xaml::Controls::InkToolbarButtonFlyoutPlacement const& value) const;
    Windows::UI::Xaml::Controls::Orientation Orientation() const;
    void Orientation(Windows::UI::Xaml::Controls::Orientation const& value) const;
    event_token IsStencilButtonCheckedChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::UI::Xaml::Controls::InkToolbarIsStencilButtonCheckedChangedEventArgs> const& value) const;
    using IsStencilButtonCheckedChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IInkToolbar2>;
    IsStencilButtonCheckedChanged_revoker IsStencilButtonCheckedChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::UI::Xaml::Controls::InkToolbarIsStencilButtonCheckedChangedEventArgs> const& value) const;
    void IsStencilButtonCheckedChanged(event_token const& token) const;
    Windows::UI::Xaml::Controls::InkToolbarMenuButton GetMenuButton(Windows::UI::Xaml::Controls::InkToolbarMenuKind const& menu) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbar2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbar2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarBallpointPenButton
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarBallpointPenButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarBallpointPenButtonFactory
{
    Windows::UI::Xaml::Controls::InkToolbarBallpointPenButton CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarBallpointPenButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPen
{
    Windows::UI::Input::Inking::InkDrawingAttributes CreateInkDrawingAttributes(Windows::UI::Xaml::Media::Brush const& brush, double strokeWidth) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarCustomPen> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPen<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenButton
{
    Windows::UI::Xaml::Controls::InkToolbarCustomPen CustomPen() const;
    void CustomPen(Windows::UI::Xaml::Controls::InkToolbarCustomPen const& value) const;
    Windows::UI::Xaml::UIElement ConfigurationContent() const;
    void ConfigurationContent(Windows::UI::Xaml::UIElement const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenButtonFactory
{
    Windows::UI::Xaml::Controls::InkToolbarCustomPenButton CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenButtonStatics
{
    Windows::UI::Xaml::DependencyProperty CustomPenProperty() const;
    Windows::UI::Xaml::DependencyProperty ConfigurationContentProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenButtonStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenFactory
{
    Windows::UI::Xaml::Controls::InkToolbarCustomPen CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenOverrides
{
    Windows::UI::Input::Inking::InkDrawingAttributes CreateInkDrawingAttributesCore(Windows::UI::Xaml::Media::Brush const& brush, double strokeWidth) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomPenOverrides<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToggleButton
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToggleButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToggleButtonFactory
{
    Windows::UI::Xaml::Controls::InkToolbarCustomToggleButton CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToggleButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToolButton
{
    Windows::UI::Xaml::UIElement ConfigurationContent() const;
    void ConfigurationContent(Windows::UI::Xaml::UIElement const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToolButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToolButtonFactory
{
    Windows::UI::Xaml::Controls::InkToolbarCustomToolButton CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToolButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToolButtonStatics
{
    Windows::UI::Xaml::DependencyProperty ConfigurationContentProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarCustomToolButtonStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButton
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarEraserButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButton2
{
    bool IsClearAllVisible() const;
    void IsClearAllVisible(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarEraserButton2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButton2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButtonFactory
{
    Windows::UI::Xaml::Controls::InkToolbarEraserButton CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButtonStatics2
{
    Windows::UI::Xaml::DependencyProperty IsClearAllVisibleProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarEraserButtonStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarEraserButtonStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarFactory
{
    Windows::UI::Xaml::Controls::InkToolbar CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarFlyoutItem
{
    Windows::UI::Xaml::Controls::InkToolbarFlyoutItemKind Kind() const;
    void Kind(Windows::UI::Xaml::Controls::InkToolbarFlyoutItemKind const& value) const;
    bool IsChecked() const;
    void IsChecked(bool value) const;
    event_token Checked(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbarFlyoutItem, Windows::Foundation::IInspectable> const& value) const;
    using Checked_revoker = event_revoker<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem>;
    Checked_revoker Checked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbarFlyoutItem, Windows::Foundation::IInspectable> const& value) const;
    void Checked(event_token const& token) const;
    event_token Unchecked(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbarFlyoutItem, Windows::Foundation::IInspectable> const& value) const;
    using Unchecked_revoker = event_revoker<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem>;
    Unchecked_revoker Unchecked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbarFlyoutItem, Windows::Foundation::IInspectable> const& value) const;
    void Unchecked(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarFlyoutItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarFlyoutItemFactory
{
    Windows::UI::Xaml::Controls::InkToolbarFlyoutItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarFlyoutItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarFlyoutItemStatics
{
    Windows::UI::Xaml::DependencyProperty KindProperty() const;
    Windows::UI::Xaml::DependencyProperty IsCheckedProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarFlyoutItemStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarHighlighterButton
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarHighlighterButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarHighlighterButtonFactory
{
    Windows::UI::Xaml::Controls::InkToolbarHighlighterButton CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarHighlighterButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarIsStencilButtonCheckedChangedEventArgs
{
    Windows::UI::Xaml::Controls::InkToolbarStencilButton StencilButton() const;
    Windows::UI::Xaml::Controls::InkToolbarStencilKind StencilKind() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarIsStencilButtonCheckedChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarIsStencilButtonCheckedChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarMenuButton
{
    Windows::UI::Xaml::Controls::InkToolbarMenuKind MenuKind() const;
    bool IsExtensionGlyphShown() const;
    void IsExtensionGlyphShown(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarMenuButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarMenuButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarMenuButtonFactory
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarMenuButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarMenuButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarMenuButtonStatics
{
    Windows::UI::Xaml::DependencyProperty IsExtensionGlyphShownProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarMenuButtonStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarMenuButtonStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarPenButton
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Brush> Palette() const;
    void Palette(param::vector<Windows::UI::Xaml::Media::Brush> const& value) const;
    double MinStrokeWidth() const;
    void MinStrokeWidth(double value) const;
    double MaxStrokeWidth() const;
    void MaxStrokeWidth(double value) const;
    Windows::UI::Xaml::Media::Brush SelectedBrush() const;
    int32_t SelectedBrushIndex() const;
    void SelectedBrushIndex(int32_t value) const;
    double SelectedStrokeWidth() const;
    void SelectedStrokeWidth(double value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarPenButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPenButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarPenButtonFactory
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPenButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarPenButtonStatics
{
    Windows::UI::Xaml::DependencyProperty PaletteProperty() const;
    Windows::UI::Xaml::DependencyProperty MinStrokeWidthProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxStrokeWidthProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedBrushIndexProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedStrokeWidthProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPenButtonStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarPenConfigurationControl
{
    Windows::UI::Xaml::Controls::InkToolbarPenButton PenButton() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPenConfigurationControl<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarPenConfigurationControlFactory
{
    Windows::UI::Xaml::Controls::InkToolbarPenConfigurationControl CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPenConfigurationControlFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarPenConfigurationControlStatics
{
    Windows::UI::Xaml::DependencyProperty PenButtonProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPenConfigurationControlStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarPencilButton
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarPencilButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPencilButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarPencilButtonFactory
{
    Windows::UI::Xaml::Controls::InkToolbarPencilButton CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarPencilButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarRulerButton
{
    [[deprecated("InkToolbarRulerButton is deprecated starting from Windows 10 Creators Update. Please use InkToolbarStencilButton going forward. For more info, see MSDN.")]] Windows::UI::Input::Inking::InkPresenterRuler Ruler() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarRulerButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarRulerButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarRulerButtonFactory
{
    [[deprecated("InkToolbarRulerButton is deprecated starting from Windows 10 Creators Update. Please use InkToolbarStencilButton going forward. For more info, see MSDN.")]] Windows::UI::Xaml::Controls::InkToolbarRulerButton CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarRulerButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarRulerButtonStatics
{
    [[deprecated("InkToolbarRulerButton is deprecated starting from Windows 10 Creators Update. Please use InkToolbarStencilButton going forward. For more info, see MSDN.")]] Windows::UI::Xaml::DependencyProperty RulerProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarRulerButtonStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarStatics
{
    Windows::UI::Xaml::DependencyProperty InitialControlsProperty() const;
    Windows::UI::Xaml::DependencyProperty ChildrenProperty() const;
    Windows::UI::Xaml::DependencyProperty ActiveToolProperty() const;
    Windows::UI::Xaml::DependencyProperty InkDrawingAttributesProperty() const;
    Windows::UI::Xaml::DependencyProperty IsRulerButtonCheckedProperty() const;
    Windows::UI::Xaml::DependencyProperty TargetInkCanvasProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarStatics2
{
    Windows::UI::Xaml::DependencyProperty IsStencilButtonCheckedProperty() const;
    Windows::UI::Xaml::DependencyProperty ButtonFlyoutPlacementProperty() const;
    Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarStencilButton
{
    Windows::UI::Input::Inking::InkPresenterRuler Ruler() const;
    Windows::UI::Input::Inking::InkPresenterProtractor Protractor() const;
    Windows::UI::Xaml::Controls::InkToolbarStencilKind SelectedStencil() const;
    void SelectedStencil(Windows::UI::Xaml::Controls::InkToolbarStencilKind const& value) const;
    bool IsRulerItemVisible() const;
    void IsRulerItemVisible(bool value) const;
    bool IsProtractorItemVisible() const;
    void IsProtractorItemVisible(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarStencilButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarStencilButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarStencilButtonFactory
{
    Windows::UI::Xaml::Controls::InkToolbarStencilButton CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarStencilButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarStencilButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarStencilButtonStatics
{
    Windows::UI::Xaml::DependencyProperty RulerProperty() const;
    Windows::UI::Xaml::DependencyProperty ProtractorProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedStencilProperty() const;
    Windows::UI::Xaml::DependencyProperty IsRulerItemVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsProtractorItemVisibleProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarStencilButtonStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarStencilButtonStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarToggleButton
{
    Windows::UI::Xaml::Controls::InkToolbarToggle ToggleKind() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarToggleButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarToggleButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarToggleButtonFactory
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarToggleButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarToolButton
{
    Windows::UI::Xaml::Controls::InkToolbarTool ToolKind() const;
    bool IsExtensionGlyphShown() const;
    void IsExtensionGlyphShown(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarToolButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarToolButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarToolButtonFactory
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarToolButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInkToolbarToolButtonStatics
{
    Windows::UI::Xaml::DependencyProperty IsExtensionGlyphShownProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInkToolbarToolButtonStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IInsertionPanel
{
    void GetInsertionIndexes(Windows::Foundation::Point const& position, int32_t& first, int32_t& second) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IInsertionPanel> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IInsertionPanel<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IIsTextTrimmedChangedEventArgs
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IIsTextTrimmedChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemClickEventArgs
{
    Windows::Foundation::IInspectable ClickedItem() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemClickEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemClickEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemContainerGenerator
{
    event_token ItemsChanged(Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler const& value) const;
    using ItemsChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IItemContainerGenerator>;
    ItemsChanged_revoker ItemsChanged(auto_revoke_t, Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler const& value) const;
    void ItemsChanged(event_token const& token) const;
    [[deprecated("ItemFromContainer may be altered or unavailable for releases after Windows 8.1. Instead, use ItemsControl.ItemFromContainer.")]] Windows::Foundation::IInspectable ItemFromContainer(Windows::UI::Xaml::DependencyObject const& container) const;
    [[deprecated("ContainerFromItem may be altered or unavailable for releases after Windows 8.1. Instead, use ItemsControl.ContainerFromItem.")]] Windows::UI::Xaml::DependencyObject ContainerFromItem(Windows::Foundation::IInspectable const& item) const;
    [[deprecated("IndexFromContainer may be altered or unavailable for releases after Windows 8.1. Instead, use ItemsControl.IndexFromContainer.")]] int32_t IndexFromContainer(Windows::UI::Xaml::DependencyObject const& container) const;
    [[deprecated("ContainerFromIndex may be altered or unavailable for releases after Windows 8.1. Instead, use ItemsControl.ContainerFromIndex.")]] Windows::UI::Xaml::DependencyObject ContainerFromIndex(int32_t index) const;
    Windows::UI::Xaml::Controls::ItemContainerGenerator GetItemContainerGeneratorForPanel(Windows::UI::Xaml::Controls::Panel const& panel) const;
    void StartAt(Windows::UI::Xaml::Controls::Primitives::GeneratorPosition const& position, Windows::UI::Xaml::Controls::Primitives::GeneratorDirection const& direction, bool allowStartAtRealizedItem) const;
    void Stop() const;
    Windows::UI::Xaml::DependencyObject GenerateNext(bool& isNewlyRealized) const;
    void PrepareItemContainer(Windows::UI::Xaml::DependencyObject const& container) const;
    void RemoveAll() const;
    void Remove(Windows::UI::Xaml::Controls::Primitives::GeneratorPosition const& position, int32_t count) const;
    Windows::UI::Xaml::Controls::Primitives::GeneratorPosition GeneratorPositionFromIndex(int32_t itemIndex) const;
    int32_t IndexFromGeneratorPosition(Windows::UI::Xaml::Controls::Primitives::GeneratorPosition const& position) const;
    void Recycle(Windows::UI::Xaml::Controls::Primitives::GeneratorPosition const& position, int32_t count) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemContainerGenerator> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemContainerGenerator<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemContainerMapping
{
    Windows::Foundation::IInspectable ItemFromContainer(Windows::UI::Xaml::DependencyObject const& container) const;
    Windows::UI::Xaml::DependencyObject ContainerFromItem(Windows::Foundation::IInspectable const& item) const;
    int32_t IndexFromContainer(Windows::UI::Xaml::DependencyObject const& container) const;
    Windows::UI::Xaml::DependencyObject ContainerFromIndex(int32_t index) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemContainerMapping> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemContainerMapping<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsControl
{
    Windows::Foundation::IInspectable ItemsSource() const;
    void ItemsSource(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::Controls::ItemCollection Items() const;
    Windows::UI::Xaml::DataTemplate ItemTemplate() const;
    void ItemTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::Controls::DataTemplateSelector ItemTemplateSelector() const;
    void ItemTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
    Windows::UI::Xaml::Controls::ItemsPanelTemplate ItemsPanel() const;
    void ItemsPanel(Windows::UI::Xaml::Controls::ItemsPanelTemplate const& value) const;
    hstring DisplayMemberPath() const;
    void DisplayMemberPath(param::hstring const& value) const;
    Windows::UI::Xaml::Style ItemContainerStyle() const;
    void ItemContainerStyle(Windows::UI::Xaml::Style const& value) const;
    Windows::UI::Xaml::Controls::StyleSelector ItemContainerStyleSelector() const;
    void ItemContainerStyleSelector(Windows::UI::Xaml::Controls::StyleSelector const& value) const;
    Windows::UI::Xaml::Controls::ItemContainerGenerator ItemContainerGenerator() const;
    Windows::UI::Xaml::Media::Animation::TransitionCollection ItemContainerTransitions() const;
    void ItemContainerTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
    Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::GroupStyle> GroupStyle() const;
    Windows::UI::Xaml::Controls::GroupStyleSelector GroupStyleSelector() const;
    void GroupStyleSelector(Windows::UI::Xaml::Controls::GroupStyleSelector const& value) const;
    bool IsGrouping() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsControl> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsControl<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsControl2
{
    Windows::UI::Xaml::Controls::Panel ItemsPanelRoot() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsControl2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsControl2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsControl3
{
    Windows::UI::Xaml::DependencyObject GroupHeaderContainerFromItemContainer(Windows::UI::Xaml::DependencyObject const& itemContainer) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsControl3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsControl3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsControlFactory
{
    Windows::UI::Xaml::Controls::ItemsControl CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsControlFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsControlFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsControlOverrides
{
    bool IsItemItsOwnContainerOverride(Windows::Foundation::IInspectable const& item) const;
    Windows::UI::Xaml::DependencyObject GetContainerForItemOverride() const;
    void ClearContainerForItemOverride(Windows::UI::Xaml::DependencyObject const& element, Windows::Foundation::IInspectable const& item) const;
    void PrepareContainerForItemOverride(Windows::UI::Xaml::DependencyObject const& element, Windows::Foundation::IInspectable const& item) const;
    void OnItemsChanged(Windows::Foundation::IInspectable const& e) const;
    void OnItemContainerStyleChanged(Windows::UI::Xaml::Style const& oldItemContainerStyle, Windows::UI::Xaml::Style const& newItemContainerStyle) const;
    void OnItemContainerStyleSelectorChanged(Windows::UI::Xaml::Controls::StyleSelector const& oldItemContainerStyleSelector, Windows::UI::Xaml::Controls::StyleSelector const& newItemContainerStyleSelector) const;
    void OnItemTemplateChanged(Windows::UI::Xaml::DataTemplate const& oldItemTemplate, Windows::UI::Xaml::DataTemplate const& newItemTemplate) const;
    void OnItemTemplateSelectorChanged(Windows::UI::Xaml::Controls::DataTemplateSelector const& oldItemTemplateSelector, Windows::UI::Xaml::Controls::DataTemplateSelector const& newItemTemplateSelector) const;
    void OnGroupStyleSelectorChanged(Windows::UI::Xaml::Controls::GroupStyleSelector const& oldGroupStyleSelector, Windows::UI::Xaml::Controls::GroupStyleSelector const& newGroupStyleSelector) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsControlOverrides> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsControlOverrides<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsControlStatics
{
    Windows::UI::Xaml::DependencyProperty ItemsSourceProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemTemplateSelectorProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemsPanelProperty() const;
    Windows::UI::Xaml::DependencyProperty DisplayMemberPathProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemContainerStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemContainerStyleSelectorProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemContainerTransitionsProperty() const;
    Windows::UI::Xaml::DependencyProperty GroupStyleSelectorProperty() const;
    Windows::UI::Xaml::DependencyProperty IsGroupingProperty() const;
    Windows::UI::Xaml::Controls::ItemsControl GetItemsOwner(Windows::UI::Xaml::DependencyObject const& element) const;
    Windows::UI::Xaml::Controls::ItemsControl ItemsControlFromItemContainer(Windows::UI::Xaml::DependencyObject const& container) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsControlStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsControlStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsPanelTemplate
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsPanelTemplate> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsPanelTemplate<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsPickedEventArgs
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> AddedItems() const;
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> RemovedItems() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsPickedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsPickedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsPresenter
{
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::Media::Animation::TransitionCollection HeaderTransitions() const;
    void HeaderTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
    Windows::UI::Xaml::Thickness Padding() const;
    void Padding(Windows::UI::Xaml::Thickness const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsPresenter> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsPresenter<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsPresenter2
{
    Windows::Foundation::IInspectable Footer() const;
    void Footer(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate FooterTemplate() const;
    void FooterTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::Media::Animation::TransitionCollection FooterTransitions() const;
    void FooterTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsPresenter2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsPresenter2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsPresenterStatics
{
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTransitionsProperty() const;
    Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsPresenterStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsPresenterStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsPresenterStatics2
{
    Windows::UI::Xaml::DependencyProperty FooterProperty() const;
    Windows::UI::Xaml::DependencyProperty FooterTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty FooterTransitionsProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsPresenterStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsPresenterStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsStackPanel
{
    Windows::UI::Xaml::Thickness GroupPadding() const;
    void GroupPadding(Windows::UI::Xaml::Thickness const& value) const;
    Windows::UI::Xaml::Controls::Orientation Orientation() const;
    void Orientation(Windows::UI::Xaml::Controls::Orientation const& value) const;
    int32_t FirstCacheIndex() const;
    int32_t FirstVisibleIndex() const;
    int32_t LastVisibleIndex() const;
    int32_t LastCacheIndex() const;
    Windows::UI::Xaml::Controls::PanelScrollingDirection ScrollingDirection() const;
    Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement GroupHeaderPlacement() const;
    void GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement const& value) const;
    Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode ItemsUpdatingScrollMode() const;
    void ItemsUpdatingScrollMode(Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode const& value) const;
    double CacheLength() const;
    void CacheLength(double value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsStackPanel> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsStackPanel<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsStackPanel2
{
    bool AreStickyGroupHeadersEnabled() const;
    void AreStickyGroupHeadersEnabled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsStackPanel2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsStackPanel2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsStackPanelStatics
{
    Windows::UI::Xaml::DependencyProperty GroupPaddingProperty() const;
    Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
    Windows::UI::Xaml::DependencyProperty GroupHeaderPlacementProperty() const;
    Windows::UI::Xaml::DependencyProperty CacheLengthProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsStackPanelStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsStackPanelStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsStackPanelStatics2
{
    Windows::UI::Xaml::DependencyProperty AreStickyGroupHeadersEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsStackPanelStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsStackPanelStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsWrapGrid
{
    Windows::UI::Xaml::Thickness GroupPadding() const;
    void GroupPadding(Windows::UI::Xaml::Thickness const& value) const;
    Windows::UI::Xaml::Controls::Orientation Orientation() const;
    void Orientation(Windows::UI::Xaml::Controls::Orientation const& value) const;
    int32_t MaximumRowsOrColumns() const;
    void MaximumRowsOrColumns(int32_t value) const;
    double ItemWidth() const;
    void ItemWidth(double value) const;
    double ItemHeight() const;
    void ItemHeight(double value) const;
    int32_t FirstCacheIndex() const;
    int32_t FirstVisibleIndex() const;
    int32_t LastVisibleIndex() const;
    int32_t LastCacheIndex() const;
    Windows::UI::Xaml::Controls::PanelScrollingDirection ScrollingDirection() const;
    Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement GroupHeaderPlacement() const;
    void GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement const& value) const;
    double CacheLength() const;
    void CacheLength(double value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsWrapGrid> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsWrapGrid<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsWrapGrid2
{
    bool AreStickyGroupHeadersEnabled() const;
    void AreStickyGroupHeadersEnabled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsWrapGrid2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsWrapGrid2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsWrapGridStatics
{
    Windows::UI::Xaml::DependencyProperty GroupPaddingProperty() const;
    Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
    Windows::UI::Xaml::DependencyProperty MaximumRowsOrColumnsProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemWidthProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemHeightProperty() const;
    Windows::UI::Xaml::DependencyProperty GroupHeaderPlacementProperty() const;
    Windows::UI::Xaml::DependencyProperty CacheLengthProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsWrapGridStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsWrapGridStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IItemsWrapGridStatics2
{
    Windows::UI::Xaml::DependencyProperty AreStickyGroupHeadersEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IItemsWrapGridStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IItemsWrapGridStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListBox
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> SelectedItems() const;
    Windows::UI::Xaml::Controls::SelectionMode SelectionMode() const;
    void SelectionMode(Windows::UI::Xaml::Controls::SelectionMode const& value) const;
    void ScrollIntoView(Windows::Foundation::IInspectable const& item) const;
    void SelectAll() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListBox> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListBox<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListBox2
{
    bool SingleSelectionFollowsFocus() const;
    void SingleSelectionFollowsFocus(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListBox2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListBox2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListBoxFactory
{
    Windows::UI::Xaml::Controls::ListBox CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListBoxFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListBoxFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListBoxItem
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IListBoxItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListBoxItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListBoxItemFactory
{
    Windows::UI::Xaml::Controls::ListBoxItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListBoxItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListBoxItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListBoxStatics
{
    Windows::UI::Xaml::DependencyProperty SelectionModeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListBoxStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListBoxStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListBoxStatics2
{
    Windows::UI::Xaml::DependencyProperty SingleSelectionFollowsFocusProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListBoxStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListBoxStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListPickerFlyout
{
    Windows::Foundation::IInspectable ItemsSource() const;
    void ItemsSource(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate ItemTemplate() const;
    void ItemTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    hstring DisplayMemberPath() const;
    void DisplayMemberPath(param::hstring const& value) const;
    Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode SelectionMode() const;
    void SelectionMode(Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode const& value) const;
    int32_t SelectedIndex() const;
    void SelectedIndex(int32_t value) const;
    Windows::Foundation::IInspectable SelectedItem() const;
    void SelectedItem(Windows::Foundation::IInspectable const& value) const;
    Windows::Foundation::IInspectable SelectedValue() const;
    void SelectedValue(Windows::Foundation::IInspectable const& value) const;
    hstring SelectedValuePath() const;
    void SelectedValuePath(param::hstring const& value) const;
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> SelectedItems() const;
    event_token ItemsPicked(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListPickerFlyout, Windows::UI::Xaml::Controls::ItemsPickedEventArgs> const& value) const;
    using ItemsPicked_revoker = event_revoker<Windows::UI::Xaml::Controls::IListPickerFlyout>;
    ItemsPicked_revoker ItemsPicked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListPickerFlyout, Windows::UI::Xaml::Controls::ItemsPickedEventArgs> const& value) const;
    void ItemsPicked(event_token const& token) const;
    Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable>> ShowAtAsync(Windows::UI::Xaml::FrameworkElement const& target) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListPickerFlyout> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListPickerFlyout<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListPickerFlyoutPresenter
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListPickerFlyoutPresenter<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListPickerFlyoutStatics
{
    Windows::UI::Xaml::DependencyProperty ItemsSourceProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty DisplayMemberPathProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectionModeProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedIndexProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedItemProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedValueProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedValuePathProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListPickerFlyoutStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListPickerFlyoutStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListView
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IListView> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListView<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewBase
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> SelectedItems() const;
    Windows::UI::Xaml::Controls::ListViewSelectionMode SelectionMode() const;
    void SelectionMode(Windows::UI::Xaml::Controls::ListViewSelectionMode const& value) const;
    bool IsSwipeEnabled() const;
    void IsSwipeEnabled(bool value) const;
    bool CanDragItems() const;
    void CanDragItems(bool value) const;
    bool CanReorderItems() const;
    void CanReorderItems(bool value) const;
    bool IsItemClickEnabled() const;
    void IsItemClickEnabled(bool value) const;
    double DataFetchSize() const;
    void DataFetchSize(double value) const;
    double IncrementalLoadingThreshold() const;
    void IncrementalLoadingThreshold(double value) const;
    Windows::UI::Xaml::Controls::IncrementalLoadingTrigger IncrementalLoadingTrigger() const;
    void IncrementalLoadingTrigger(Windows::UI::Xaml::Controls::IncrementalLoadingTrigger const& value) const;
    event_token ItemClick(Windows::UI::Xaml::Controls::ItemClickEventHandler const& value) const;
    using ItemClick_revoker = event_revoker<Windows::UI::Xaml::Controls::IListViewBase>;
    ItemClick_revoker ItemClick(auto_revoke_t, Windows::UI::Xaml::Controls::ItemClickEventHandler const& value) const;
    void ItemClick(event_token const& token) const;
    event_token DragItemsStarting(Windows::UI::Xaml::Controls::DragItemsStartingEventHandler const& value) const;
    using DragItemsStarting_revoker = event_revoker<Windows::UI::Xaml::Controls::IListViewBase>;
    DragItemsStarting_revoker DragItemsStarting(auto_revoke_t, Windows::UI::Xaml::Controls::DragItemsStartingEventHandler const& value) const;
    void DragItemsStarting(event_token const& token) const;
    void ScrollIntoView(Windows::Foundation::IInspectable const& item) const;
    void SelectAll() const;
    Windows::Foundation::IAsyncOperation<Windows::UI::Xaml::Data::LoadMoreItemsResult> LoadMoreItemsAsync() const;
    void ScrollIntoView(Windows::Foundation::IInspectable const& item, Windows::UI::Xaml::Controls::ScrollIntoViewAlignment const& alignment) const;
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::Media::Animation::TransitionCollection HeaderTransitions() const;
    void HeaderTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewBase> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBase<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewBase2
{
    bool ShowsScrollingPlaceholders() const;
    void ShowsScrollingPlaceholders(bool value) const;
    event_token ContainerContentChanging(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> const& value) const;
    using ContainerContentChanging_revoker = event_revoker<Windows::UI::Xaml::Controls::IListViewBase2>;
    ContainerContentChanging_revoker ContainerContentChanging(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> const& value) const;
    void ContainerContentChanging(event_token const& token) const;
    void SetDesiredContainerUpdateDuration(Windows::Foundation::TimeSpan const& duration) const;
    Windows::Foundation::IInspectable Footer() const;
    void Footer(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate FooterTemplate() const;
    void FooterTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::Media::Animation::TransitionCollection FooterTransitions() const;
    void FooterTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewBase2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBase2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewBase3
{
    Windows::UI::Xaml::Controls::ListViewReorderMode ReorderMode() const;
    void ReorderMode(Windows::UI::Xaml::Controls::ListViewReorderMode const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewBase3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBase3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewBase4
{
    Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::Data::ItemIndexRange> SelectedRanges() const;
    bool IsMultiSelectCheckBoxEnabled() const;
    void IsMultiSelectCheckBoxEnabled(bool value) const;
    event_token DragItemsCompleted(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs> const& value) const;
    using DragItemsCompleted_revoker = event_revoker<Windows::UI::Xaml::Controls::IListViewBase4>;
    DragItemsCompleted_revoker DragItemsCompleted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs> const& value) const;
    void DragItemsCompleted(event_token const& token) const;
    event_token ChoosingItemContainer(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs> const& value) const;
    using ChoosingItemContainer_revoker = event_revoker<Windows::UI::Xaml::Controls::IListViewBase4>;
    ChoosingItemContainer_revoker ChoosingItemContainer(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs> const& value) const;
    void ChoosingItemContainer(event_token const& token) const;
    event_token ChoosingGroupHeaderContainer(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs> const& value) const;
    using ChoosingGroupHeaderContainer_revoker = event_revoker<Windows::UI::Xaml::Controls::IListViewBase4>;
    ChoosingGroupHeaderContainer_revoker ChoosingGroupHeaderContainer(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs> const& value) const;
    void ChoosingGroupHeaderContainer(event_token const& token) const;
    void SelectRange(Windows::UI::Xaml::Data::ItemIndexRange const& itemIndexRange) const;
    void DeselectRange(Windows::UI::Xaml::Data::ItemIndexRange const& itemIndexRange) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewBase4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBase4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewBase5
{
    bool SingleSelectionFollowsFocus() const;
    void SingleSelectionFollowsFocus(bool value) const;
    bool IsDragSource() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewBase5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBase5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewBase6
{
    Windows::Foundation::IAsyncOperation<bool> TryStartConnectedAnimationAsync(Windows::UI::Xaml::Media::Animation::ConnectedAnimation const& animation, Windows::Foundation::IInspectable const& item, param::hstring const& elementName) const;
    Windows::UI::Xaml::Media::Animation::ConnectedAnimation PrepareConnectedAnimation(param::hstring const& key, Windows::Foundation::IInspectable const& item, param::hstring const& elementName) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewBase6> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBase6<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewBaseFactory
{
    Windows::UI::Xaml::Controls::ListViewBase CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewBaseFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewBaseHeaderItem
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewBaseHeaderItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseHeaderItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewBaseHeaderItemFactory
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseHeaderItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewBaseStatics
{
    Windows::UI::Xaml::DependencyProperty SelectionModeProperty() const;
    Windows::UI::Xaml::DependencyProperty IsSwipeEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty CanDragItemsProperty() const;
    Windows::UI::Xaml::DependencyProperty CanReorderItemsProperty() const;
    Windows::UI::Xaml::DependencyProperty IsItemClickEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty DataFetchSizeProperty() const;
    Windows::UI::Xaml::DependencyProperty IncrementalLoadingThresholdProperty() const;
    Windows::UI::Xaml::DependencyProperty IncrementalLoadingTriggerProperty() const;
    Windows::UI::Xaml::DependencyProperty SemanticZoomOwnerProperty() const;
    Windows::UI::Xaml::DependencyProperty IsActiveViewProperty() const;
    Windows::UI::Xaml::DependencyProperty IsZoomedInViewProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTransitionsProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewBaseStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewBaseStatics2
{
    Windows::UI::Xaml::DependencyProperty ShowsScrollingPlaceholdersProperty() const;
    Windows::UI::Xaml::DependencyProperty FooterProperty() const;
    Windows::UI::Xaml::DependencyProperty FooterTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty FooterTransitionsProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewBaseStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewBaseStatics3
{
    Windows::UI::Xaml::DependencyProperty ReorderModeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewBaseStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewBaseStatics4
{
    Windows::UI::Xaml::DependencyProperty IsMultiSelectCheckBoxEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewBaseStatics4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseStatics4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewBaseStatics5
{
    Windows::UI::Xaml::DependencyProperty SingleSelectionFollowsFocusProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewBaseStatics5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewBaseStatics5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewFactory
{
    Windows::UI::Xaml::Controls::ListView CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewHeaderItem
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewHeaderItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewHeaderItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewHeaderItemFactory
{
    Windows::UI::Xaml::Controls::ListViewHeaderItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewHeaderItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewHeaderItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewItem
{
    Windows::UI::Xaml::Controls::Primitives::ListViewItemTemplateSettings TemplateSettings() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewItemFactory
{
    Windows::UI::Xaml::Controls::ListViewItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewPersistenceHelper
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewPersistenceHelper> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewPersistenceHelper<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IListViewPersistenceHelperStatics
{
    hstring GetRelativeScrollPosition(Windows::UI::Xaml::Controls::ListViewBase const& listViewBase, Windows::UI::Xaml::Controls::ListViewItemToKeyHandler const& itemToKeyHandler) const;
    Windows::Foundation::IAsyncAction SetRelativeScrollPositionAsync(Windows::UI::Xaml::Controls::ListViewBase const& listViewBase, param::hstring const& relativeScrollPosition, Windows::UI::Xaml::Controls::ListViewKeyToItemHandler const& keyToItemHandler) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IListViewPersistenceHelperStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaElement
{
    Windows::UI::Xaml::Media::ImageSource PosterSource() const;
    void PosterSource(Windows::UI::Xaml::Media::ImageSource const& value) const;
    Windows::Foundation::Uri Source() const;
    void Source(Windows::Foundation::Uri const& value) const;
    bool IsMuted() const;
    void IsMuted(bool value) const;
    bool IsAudioOnly() const;
    bool AutoPlay() const;
    void AutoPlay(bool value) const;
    double Volume() const;
    void Volume(double value) const;
    double Balance() const;
    void Balance(double value) const;
    int32_t NaturalVideoHeight() const;
    int32_t NaturalVideoWidth() const;
    Windows::UI::Xaml::Duration NaturalDuration() const;
    Windows::Foundation::TimeSpan Position() const;
    void Position(Windows::Foundation::TimeSpan const& value) const;
    double DownloadProgress() const;
    double BufferingProgress() const;
    double DownloadProgressOffset() const;
    Windows::UI::Xaml::Media::MediaElementState CurrentState() const;
    Windows::UI::Xaml::Media::TimelineMarkerCollection Markers() const;
    bool CanSeek() const;
    bool CanPause() const;
    int32_t AudioStreamCount() const;
    Windows::Foundation::IReference<int32_t> AudioStreamIndex() const;
    void AudioStreamIndex(optional<int32_t> const& value) const;
    double PlaybackRate() const;
    void PlaybackRate(double value) const;
    bool IsLooping() const;
    void IsLooping(bool value) const;
    [[deprecated("PlayToSource may be altered or unavailable for releases after Windows 10.0. Instead, use GetAsCastingSource.")]] Windows::Media::PlayTo::PlayToSource PlayToSource() const;
    double DefaultPlaybackRate() const;
    void DefaultPlaybackRate(double value) const;
    int32_t AspectRatioWidth() const;
    int32_t AspectRatioHeight() const;
    bool RealTimePlayback() const;
    void RealTimePlayback(bool value) const;
    Windows::UI::Xaml::Media::AudioCategory AudioCategory() const;
    void AudioCategory(Windows::UI::Xaml::Media::AudioCategory const& value) const;
    Windows::UI::Xaml::Media::AudioDeviceType AudioDeviceType() const;
    void AudioDeviceType(Windows::UI::Xaml::Media::AudioDeviceType const& value) const;
    Windows::Media::Protection::MediaProtectionManager ProtectionManager() const;
    void ProtectionManager(Windows::Media::Protection::MediaProtectionManager const& value) const;
    Windows::UI::Xaml::Media::Stereo3DVideoPackingMode Stereo3DVideoPackingMode() const;
    void Stereo3DVideoPackingMode(Windows::UI::Xaml::Media::Stereo3DVideoPackingMode const& value) const;
    Windows::UI::Xaml::Media::Stereo3DVideoRenderMode Stereo3DVideoRenderMode() const;
    void Stereo3DVideoRenderMode(Windows::UI::Xaml::Media::Stereo3DVideoRenderMode const& value) const;
    bool IsStereo3DVideo() const;
    event_token MediaOpened(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using MediaOpened_revoker = event_revoker<Windows::UI::Xaml::Controls::IMediaElement>;
    MediaOpened_revoker MediaOpened(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void MediaOpened(event_token const& token) const;
    event_token MediaEnded(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using MediaEnded_revoker = event_revoker<Windows::UI::Xaml::Controls::IMediaElement>;
    MediaEnded_revoker MediaEnded(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void MediaEnded(event_token const& token) const;
    event_token MediaFailed(Windows::UI::Xaml::ExceptionRoutedEventHandler const& value) const;
    using MediaFailed_revoker = event_revoker<Windows::UI::Xaml::Controls::IMediaElement>;
    MediaFailed_revoker MediaFailed(auto_revoke_t, Windows::UI::Xaml::ExceptionRoutedEventHandler const& value) const;
    void MediaFailed(event_token const& token) const;
    event_token DownloadProgressChanged(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using DownloadProgressChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IMediaElement>;
    DownloadProgressChanged_revoker DownloadProgressChanged(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void DownloadProgressChanged(event_token const& token) const;
    event_token BufferingProgressChanged(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using BufferingProgressChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IMediaElement>;
    BufferingProgressChanged_revoker BufferingProgressChanged(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void BufferingProgressChanged(event_token const& token) const;
    event_token CurrentStateChanged(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using CurrentStateChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IMediaElement>;
    CurrentStateChanged_revoker CurrentStateChanged(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void CurrentStateChanged(event_token const& token) const;
    event_token MarkerReached(Windows::UI::Xaml::Media::TimelineMarkerRoutedEventHandler const& value) const;
    using MarkerReached_revoker = event_revoker<Windows::UI::Xaml::Controls::IMediaElement>;
    MarkerReached_revoker MarkerReached(auto_revoke_t, Windows::UI::Xaml::Media::TimelineMarkerRoutedEventHandler const& value) const;
    void MarkerReached(event_token const& token) const;
    event_token RateChanged(Windows::UI::Xaml::Media::RateChangedRoutedEventHandler const& value) const;
    using RateChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IMediaElement>;
    RateChanged_revoker RateChanged(auto_revoke_t, Windows::UI::Xaml::Media::RateChangedRoutedEventHandler const& value) const;
    void RateChanged(event_token const& token) const;
    event_token VolumeChanged(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using VolumeChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IMediaElement>;
    VolumeChanged_revoker VolumeChanged(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void VolumeChanged(event_token const& token) const;
    event_token SeekCompleted(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using SeekCompleted_revoker = event_revoker<Windows::UI::Xaml::Controls::IMediaElement>;
    SeekCompleted_revoker SeekCompleted(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void SeekCompleted(event_token const& token) const;
    void Stop() const;
    void Play() const;
    void Pause() const;
    Windows::UI::Xaml::Media::MediaCanPlayResponse CanPlayType(param::hstring const& type) const;
    void SetSource(Windows::Storage::Streams::IRandomAccessStream const& stream, param::hstring const& mimeType) const;
    hstring GetAudioStreamLanguage(optional<int32_t> const& index) const;
    void AddAudioEffect(param::hstring const& effectID, bool effectOptional, Windows::Foundation::Collections::IPropertySet const& effectConfiguration) const;
    void AddVideoEffect(param::hstring const& effectID, bool effectOptional, Windows::Foundation::Collections::IPropertySet const& effectConfiguration) const;
    void RemoveAllEffects() const;
    Windows::UI::Xaml::Media::Stereo3DVideoPackingMode ActualStereo3DVideoPackingMode() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaElement> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaElement<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaElement2
{
    bool AreTransportControlsEnabled() const;
    void AreTransportControlsEnabled(bool value) const;
    Windows::UI::Xaml::Media::Stretch Stretch() const;
    void Stretch(Windows::UI::Xaml::Media::Stretch const& value) const;
    bool IsFullWindow() const;
    void IsFullWindow(bool value) const;
    void SetMediaStreamSource(Windows::Media::Core::IMediaSource const& source) const;
    [[deprecated("PlayToPreferredSourceUri may be altered or unavailable for releases after Windows 10.0. Instead, use GetAsCastingSource().PreferredSourceUri.")]] Windows::Foundation::Uri PlayToPreferredSourceUri() const;
    [[deprecated("PlayToPreferredSourceUri may be altered or unavailable for releases after Windows 10.0. Instead, use GetAsCastingSource().PreferredSourceUri.")]] void PlayToPreferredSourceUri(Windows::Foundation::Uri const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaElement2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaElement2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaElement3
{
    Windows::UI::Xaml::Controls::MediaTransportControls TransportControls() const;
    void TransportControls(Windows::UI::Xaml::Controls::MediaTransportControls const& value) const;
    event_token PartialMediaFailureDetected(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaElement, Windows::UI::Xaml::Media::PartialMediaFailureDetectedEventArgs> const& value) const;
    using PartialMediaFailureDetected_revoker = event_revoker<Windows::UI::Xaml::Controls::IMediaElement3>;
    PartialMediaFailureDetected_revoker PartialMediaFailureDetected(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaElement, Windows::UI::Xaml::Media::PartialMediaFailureDetectedEventArgs> const& value) const;
    void PartialMediaFailureDetected(event_token const& token) const;
    void SetPlaybackSource(Windows::Media::Playback::IMediaPlaybackSource const& source) const;
    Windows::Media::Casting::CastingSource GetAsCastingSource() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaElement3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaElement3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaElementStatics
{
    Windows::UI::Xaml::DependencyProperty PosterSourceProperty() const;
    Windows::UI::Xaml::DependencyProperty SourceProperty() const;
    Windows::UI::Xaml::DependencyProperty IsMutedProperty() const;
    Windows::UI::Xaml::DependencyProperty IsAudioOnlyProperty() const;
    Windows::UI::Xaml::DependencyProperty AutoPlayProperty() const;
    Windows::UI::Xaml::DependencyProperty VolumeProperty() const;
    Windows::UI::Xaml::DependencyProperty BalanceProperty() const;
    Windows::UI::Xaml::DependencyProperty NaturalVideoHeightProperty() const;
    Windows::UI::Xaml::DependencyProperty NaturalVideoWidthProperty() const;
    Windows::UI::Xaml::DependencyProperty NaturalDurationProperty() const;
    Windows::UI::Xaml::DependencyProperty PositionProperty() const;
    Windows::UI::Xaml::DependencyProperty DownloadProgressProperty() const;
    Windows::UI::Xaml::DependencyProperty BufferingProgressProperty() const;
    Windows::UI::Xaml::DependencyProperty DownloadProgressOffsetProperty() const;
    Windows::UI::Xaml::DependencyProperty CurrentStateProperty() const;
    Windows::UI::Xaml::DependencyProperty CanSeekProperty() const;
    Windows::UI::Xaml::DependencyProperty CanPauseProperty() const;
    Windows::UI::Xaml::DependencyProperty AudioStreamCountProperty() const;
    Windows::UI::Xaml::DependencyProperty AudioStreamIndexProperty() const;
    Windows::UI::Xaml::DependencyProperty PlaybackRateProperty() const;
    Windows::UI::Xaml::DependencyProperty IsLoopingProperty() const;
    [[deprecated("PlayToSource may be altered or unavailable for releases after Windows 10.0. Instead, use GetAsCastingSource.")]] Windows::UI::Xaml::DependencyProperty PlayToSourceProperty() const;
    Windows::UI::Xaml::DependencyProperty DefaultPlaybackRateProperty() const;
    Windows::UI::Xaml::DependencyProperty AspectRatioWidthProperty() const;
    Windows::UI::Xaml::DependencyProperty AspectRatioHeightProperty() const;
    Windows::UI::Xaml::DependencyProperty RealTimePlaybackProperty() const;
    Windows::UI::Xaml::DependencyProperty AudioCategoryProperty() const;
    Windows::UI::Xaml::DependencyProperty AudioDeviceTypeProperty() const;
    Windows::UI::Xaml::DependencyProperty ProtectionManagerProperty() const;
    Windows::UI::Xaml::DependencyProperty Stereo3DVideoPackingModeProperty() const;
    Windows::UI::Xaml::DependencyProperty Stereo3DVideoRenderModeProperty() const;
    Windows::UI::Xaml::DependencyProperty IsStereo3DVideoProperty() const;
    Windows::UI::Xaml::DependencyProperty ActualStereo3DVideoPackingModeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaElementStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaElementStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaElementStatics2
{
    Windows::UI::Xaml::DependencyProperty AreTransportControlsEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty StretchProperty() const;
    Windows::UI::Xaml::DependencyProperty IsFullWindowProperty() const;
    [[deprecated("PlayToPreferredSourceUri may be altered or unavailable for releases after Windows 10.0. Instead, use GetAsCastingSource().PreferredSourceUri.")]] Windows::UI::Xaml::DependencyProperty PlayToPreferredSourceUriProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaElementStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaElementStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaPlayerElement
{
    Windows::Media::Playback::IMediaPlaybackSource Source() const;
    void Source(Windows::Media::Playback::IMediaPlaybackSource const& value) const;
    Windows::UI::Xaml::Controls::MediaTransportControls TransportControls() const;
    void TransportControls(Windows::UI::Xaml::Controls::MediaTransportControls const& value) const;
    bool AreTransportControlsEnabled() const;
    void AreTransportControlsEnabled(bool value) const;
    Windows::UI::Xaml::Media::ImageSource PosterSource() const;
    void PosterSource(Windows::UI::Xaml::Media::ImageSource const& value) const;
    Windows::UI::Xaml::Media::Stretch Stretch() const;
    void Stretch(Windows::UI::Xaml::Media::Stretch const& value) const;
    bool AutoPlay() const;
    void AutoPlay(bool value) const;
    bool IsFullWindow() const;
    void IsFullWindow(bool value) const;
    Windows::Media::Playback::MediaPlayer MediaPlayer() const;
    void SetMediaPlayer(Windows::Media::Playback::MediaPlayer const& mediaPlayer) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaPlayerElement> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaPlayerElement<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaPlayerElementFactory
{
    Windows::UI::Xaml::Controls::MediaPlayerElement CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaPlayerElementFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaPlayerElementFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaPlayerElementStatics
{
    Windows::UI::Xaml::DependencyProperty SourceProperty() const;
    Windows::UI::Xaml::DependencyProperty AreTransportControlsEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty PosterSourceProperty() const;
    Windows::UI::Xaml::DependencyProperty StretchProperty() const;
    Windows::UI::Xaml::DependencyProperty AutoPlayProperty() const;
    Windows::UI::Xaml::DependencyProperty IsFullWindowProperty() const;
    Windows::UI::Xaml::DependencyProperty MediaPlayerProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaPlayerElementStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaPlayerElementStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaPlayerPresenter
{
    Windows::Media::Playback::MediaPlayer MediaPlayer() const;
    void MediaPlayer(Windows::Media::Playback::MediaPlayer const& value) const;
    Windows::UI::Xaml::Media::Stretch Stretch() const;
    void Stretch(Windows::UI::Xaml::Media::Stretch const& value) const;
    bool IsFullWindow() const;
    void IsFullWindow(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaPlayerPresenter> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaPlayerPresenter<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaPlayerPresenterFactory
{
    Windows::UI::Xaml::Controls::MediaPlayerPresenter CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaPlayerPresenterFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaPlayerPresenterStatics
{
    Windows::UI::Xaml::DependencyProperty MediaPlayerProperty() const;
    Windows::UI::Xaml::DependencyProperty StretchProperty() const;
    Windows::UI::Xaml::DependencyProperty IsFullWindowProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaPlayerPresenterStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaTransportControls
{
    bool IsFullWindowButtonVisible() const;
    void IsFullWindowButtonVisible(bool value) const;
    bool IsFullWindowEnabled() const;
    void IsFullWindowEnabled(bool value) const;
    bool IsZoomButtonVisible() const;
    void IsZoomButtonVisible(bool value) const;
    bool IsZoomEnabled() const;
    void IsZoomEnabled(bool value) const;
    bool IsFastForwardButtonVisible() const;
    void IsFastForwardButtonVisible(bool value) const;
    bool IsFastForwardEnabled() const;
    void IsFastForwardEnabled(bool value) const;
    bool IsFastRewindButtonVisible() const;
    void IsFastRewindButtonVisible(bool value) const;
    bool IsFastRewindEnabled() const;
    void IsFastRewindEnabled(bool value) const;
    bool IsStopButtonVisible() const;
    void IsStopButtonVisible(bool value) const;
    bool IsStopEnabled() const;
    void IsStopEnabled(bool value) const;
    bool IsVolumeButtonVisible() const;
    void IsVolumeButtonVisible(bool value) const;
    bool IsVolumeEnabled() const;
    void IsVolumeEnabled(bool value) const;
    bool IsPlaybackRateButtonVisible() const;
    void IsPlaybackRateButtonVisible(bool value) const;
    bool IsPlaybackRateEnabled() const;
    void IsPlaybackRateEnabled(bool value) const;
    bool IsSeekBarVisible() const;
    void IsSeekBarVisible(bool value) const;
    bool IsSeekEnabled() const;
    void IsSeekEnabled(bool value) const;
    bool IsCompact() const;
    void IsCompact(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaTransportControls> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControls<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaTransportControls2
{
    bool IsSkipForwardButtonVisible() const;
    void IsSkipForwardButtonVisible(bool value) const;
    bool IsSkipForwardEnabled() const;
    void IsSkipForwardEnabled(bool value) const;
    bool IsSkipBackwardButtonVisible() const;
    void IsSkipBackwardButtonVisible(bool value) const;
    bool IsSkipBackwardEnabled() const;
    void IsSkipBackwardEnabled(bool value) const;
    bool IsNextTrackButtonVisible() const;
    void IsNextTrackButtonVisible(bool value) const;
    bool IsPreviousTrackButtonVisible() const;
    void IsPreviousTrackButtonVisible(bool value) const;
    Windows::UI::Xaml::Media::FastPlayFallbackBehaviour FastPlayFallbackBehaviour() const;
    void FastPlayFallbackBehaviour(Windows::UI::Xaml::Media::FastPlayFallbackBehaviour const& value) const;
    event_token ThumbnailRequested(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaTransportControls, Windows::UI::Xaml::Media::MediaTransportControlsThumbnailRequestedEventArgs> const& value) const;
    using ThumbnailRequested_revoker = event_revoker<Windows::UI::Xaml::Controls::IMediaTransportControls2>;
    ThumbnailRequested_revoker ThumbnailRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaTransportControls, Windows::UI::Xaml::Media::MediaTransportControlsThumbnailRequestedEventArgs> const& value) const;
    void ThumbnailRequested(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaTransportControls2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControls2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaTransportControls3
{
    bool ShowAndHideAutomatically() const;
    void ShowAndHideAutomatically(bool value) const;
    bool IsRepeatEnabled() const;
    void IsRepeatEnabled(bool value) const;
    bool IsRepeatButtonVisible() const;
    void IsRepeatButtonVisible(bool value) const;
    void Show() const;
    void Hide() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaTransportControls3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControls3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaTransportControls4
{
    bool IsCompactOverlayButtonVisible() const;
    void IsCompactOverlayButtonVisible(bool value) const;
    bool IsCompactOverlayEnabled() const;
    void IsCompactOverlayEnabled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaTransportControls4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControls4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaTransportControlsFactory
{
    Windows::UI::Xaml::Controls::MediaTransportControls CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaTransportControlsFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControlsFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaTransportControlsHelper
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaTransportControlsHelper> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControlsHelper<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaTransportControlsHelperStatics
{
    Windows::UI::Xaml::DependencyProperty DropoutOrderProperty() const;
    Windows::Foundation::IReference<int32_t> GetDropoutOrder(Windows::UI::Xaml::UIElement const& element) const;
    void SetDropoutOrder(Windows::UI::Xaml::UIElement const& element, optional<int32_t> const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControlsHelperStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics
{
    Windows::UI::Xaml::DependencyProperty IsFullWindowButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsFullWindowEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsZoomButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsZoomEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsFastForwardButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsFastForwardEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsFastRewindButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsFastRewindEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsStopButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsStopEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsVolumeButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsVolumeEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsPlaybackRateButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsPlaybackRateEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsSeekBarVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsSeekEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsCompactProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics2
{
    Windows::UI::Xaml::DependencyProperty IsSkipForwardButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsSkipForwardEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsSkipBackwardButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsSkipBackwardEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsNextTrackButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsPreviousTrackButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty FastPlayFallbackBehaviourProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics3
{
    Windows::UI::Xaml::DependencyProperty ShowAndHideAutomaticallyProperty() const;
    Windows::UI::Xaml::DependencyProperty IsRepeatEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsRepeatButtonVisibleProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics4
{
    Windows::UI::Xaml::DependencyProperty IsCompactOverlayButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsCompactOverlayEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMediaTransportControlsStatics4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyout
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase> Items() const;
    Windows::UI::Xaml::Style MenuFlyoutPresenterStyle() const;
    void MenuFlyoutPresenterStyle(Windows::UI::Xaml::Style const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyout> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyout<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyout2
{
    void ShowAt(Windows::UI::Xaml::UIElement const& targetElement, Windows::Foundation::Point const& point) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyout2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyout2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutFactory
{
    Windows::UI::Xaml::Controls::MenuFlyout CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItem
{
    hstring Text() const;
    void Text(param::hstring const& value) const;
    Windows::UI::Xaml::Input::ICommand Command() const;
    void Command(Windows::UI::Xaml::Input::ICommand const& value) const;
    Windows::Foundation::IInspectable CommandParameter() const;
    void CommandParameter(Windows::Foundation::IInspectable const& value) const;
    event_token Click(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using Click_revoker = event_revoker<Windows::UI::Xaml::Controls::IMenuFlyoutItem>;
    Click_revoker Click(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void Click(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItem2
{
    Windows::UI::Xaml::Controls::IconElement Icon() const;
    void Icon(Windows::UI::Xaml::Controls::IconElement const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutItem2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItem2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItem3
{
    hstring KeyboardAcceleratorTextOverride() const;
    void KeyboardAcceleratorTextOverride(param::hstring const& value) const;
    Windows::UI::Xaml::Controls::Primitives::MenuFlyoutItemTemplateSettings TemplateSettings() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutItem3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItem3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemBase
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutItemBase> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemBase<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemBaseFactory
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemBaseFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemFactory
{
    Windows::UI::Xaml::Controls::MenuFlyoutItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemStatics
{
    Windows::UI::Xaml::DependencyProperty TextProperty() const;
    Windows::UI::Xaml::DependencyProperty CommandProperty() const;
    Windows::UI::Xaml::DependencyProperty CommandParameterProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemStatics2
{
    Windows::UI::Xaml::DependencyProperty IconProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemStatics3
{
    Windows::UI::Xaml::DependencyProperty KeyboardAcceleratorTextOverrideProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutItemStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenter
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutPresenter> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenter<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenter2
{
    Windows::UI::Xaml::Controls::Primitives::MenuFlyoutPresenterTemplateSettings TemplateSettings() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenter2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenterFactory
{
    Windows::UI::Xaml::Controls::MenuFlyoutPresenter CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutPresenterFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutSeparator
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutSeparator> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutSeparator<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutSeparatorFactory
{
    Windows::UI::Xaml::Controls::MenuFlyoutSeparator CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutSeparatorFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutStatics
{
    Windows::UI::Xaml::DependencyProperty MenuFlyoutPresenterStyleProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItem
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase> Items() const;
    hstring Text() const;
    void Text(param::hstring const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutSubItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItem2
{
    Windows::UI::Xaml::Controls::IconElement Icon() const;
    void Icon(Windows::UI::Xaml::Controls::IconElement const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutSubItem2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItem2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItemStatics
{
    Windows::UI::Xaml::DependencyProperty TextProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItemStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItemStatics2
{
    Windows::UI::Xaml::DependencyProperty IconProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IMenuFlyoutSubItemStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigate
{
    bool Navigate(Windows::UI::Xaml::Interop::TypeName const& sourcePageType) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigate> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigate<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationView
{
    bool IsPaneOpen() const;
    void IsPaneOpen(bool value) const;
    double CompactModeThresholdWidth() const;
    void CompactModeThresholdWidth(double value) const;
    double ExpandedModeThresholdWidth() const;
    void ExpandedModeThresholdWidth(double value) const;
    Windows::UI::Xaml::UIElement PaneFooter() const;
    void PaneFooter(Windows::UI::Xaml::UIElement const& value) const;
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::Controls::NavigationViewDisplayMode DisplayMode() const;
    bool IsSettingsVisible() const;
    void IsSettingsVisible(bool value) const;
    bool IsPaneToggleButtonVisible() const;
    void IsPaneToggleButtonVisible(bool value) const;
    bool AlwaysShowHeader() const;
    void AlwaysShowHeader(bool value) const;
    double CompactPaneLength() const;
    void CompactPaneLength(double value) const;
    double OpenPaneLength() const;
    void OpenPaneLength(double value) const;
    Windows::UI::Xaml::Style PaneToggleButtonStyle() const;
    void PaneToggleButtonStyle(Windows::UI::Xaml::Style const& value) const;
    Windows::Foundation::IInspectable SelectedItem() const;
    void SelectedItem(Windows::Foundation::IInspectable const& value) const;
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> MenuItems() const;
    Windows::Foundation::IInspectable MenuItemsSource() const;
    void MenuItemsSource(Windows::Foundation::IInspectable const& value) const;
    Windows::Foundation::IInspectable SettingsItem() const;
    Windows::UI::Xaml::Controls::AutoSuggestBox AutoSuggestBox() const;
    void AutoSuggestBox(Windows::UI::Xaml::Controls::AutoSuggestBox const& value) const;
    Windows::UI::Xaml::DataTemplate MenuItemTemplate() const;
    void MenuItemTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::Controls::DataTemplateSelector MenuItemTemplateSelector() const;
    void MenuItemTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
    Windows::UI::Xaml::Style MenuItemContainerStyle() const;
    void MenuItemContainerStyle(Windows::UI::Xaml::Style const& value) const;
    Windows::UI::Xaml::Controls::StyleSelector MenuItemContainerStyleSelector() const;
    void MenuItemContainerStyleSelector(Windows::UI::Xaml::Controls::StyleSelector const& value) const;
    Windows::Foundation::IInspectable MenuItemFromContainer(Windows::UI::Xaml::DependencyObject const& container) const;
    Windows::UI::Xaml::DependencyObject ContainerFromMenuItem(Windows::Foundation::IInspectable const& item) const;
    event_token SelectionChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> const& value) const;
    using SelectionChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::INavigationView>;
    SelectionChanged_revoker SelectionChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> const& value) const;
    void SelectionChanged(event_token const& token) const;
    event_token ItemInvoked(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> const& value) const;
    using ItemInvoked_revoker = event_revoker<Windows::UI::Xaml::Controls::INavigationView>;
    ItemInvoked_revoker ItemInvoked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> const& value) const;
    void ItemInvoked(event_token const& token) const;
    event_token DisplayModeChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> const& value) const;
    using DisplayModeChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::INavigationView>;
    DisplayModeChanged_revoker DisplayModeChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> const& value) const;
    void DisplayModeChanged(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationView> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationView<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationView2
{
    Windows::UI::Xaml::Controls::NavigationViewBackButtonVisible IsBackButtonVisible() const;
    void IsBackButtonVisible(Windows::UI::Xaml::Controls::NavigationViewBackButtonVisible const& value) const;
    bool IsBackEnabled() const;
    void IsBackEnabled(bool value) const;
    hstring PaneTitle() const;
    void PaneTitle(param::hstring const& value) const;
    event_token BackRequested(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> const& value) const;
    using BackRequested_revoker = event_revoker<Windows::UI::Xaml::Controls::INavigationView2>;
    BackRequested_revoker BackRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> const& value) const;
    void BackRequested(event_token const& token) const;
    event_token PaneClosed(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& value) const;
    using PaneClosed_revoker = event_revoker<Windows::UI::Xaml::Controls::INavigationView2>;
    PaneClosed_revoker PaneClosed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& value) const;
    void PaneClosed(event_token const& token) const;
    event_token PaneClosing(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> const& value) const;
    using PaneClosing_revoker = event_revoker<Windows::UI::Xaml::Controls::INavigationView2>;
    PaneClosing_revoker PaneClosing(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> const& value) const;
    void PaneClosing(event_token const& token) const;
    event_token PaneOpened(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& value) const;
    using PaneOpened_revoker = event_revoker<Windows::UI::Xaml::Controls::INavigationView2>;
    PaneOpened_revoker PaneOpened(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& value) const;
    void PaneOpened(event_token const& token) const;
    event_token PaneOpening(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& value) const;
    using PaneOpening_revoker = event_revoker<Windows::UI::Xaml::Controls::INavigationView2>;
    PaneOpening_revoker PaneOpening(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& value) const;
    void PaneOpening(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationView2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationView2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewBackRequestedEventArgs
{
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewBackRequestedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewDisplayModeChangedEventArgs
{
    Windows::UI::Xaml::Controls::NavigationViewDisplayMode DisplayMode() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewDisplayModeChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewFactory
{
    Windows::UI::Xaml::Controls::NavigationView CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewItem
{
    Windows::UI::Xaml::Controls::IconElement Icon() const;
    void Icon(Windows::UI::Xaml::Controls::IconElement const& value) const;
    double CompactPaneLength() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewItemBase
{
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewItemBase> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemBase<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewItemBaseFactory
{
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewItemBaseFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemBaseFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewItemFactory
{
    Windows::UI::Xaml::Controls::NavigationViewItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewItemHeader
{
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewItemHeader> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemHeader<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewItemHeaderFactory
{
    Windows::UI::Xaml::Controls::NavigationViewItemHeader CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewItemHeaderFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemHeaderFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs
{
    Windows::Foundation::IInspectable InvokedItem() const;
    bool IsSettingsInvoked() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewItemSeparator
{
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewItemSeparator> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemSeparator<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewItemSeparatorFactory
{
    Windows::UI::Xaml::Controls::NavigationViewItemSeparator CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewItemSeparatorFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemSeparatorFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewItemStatics
{
    Windows::UI::Xaml::DependencyProperty IconProperty() const;
    Windows::UI::Xaml::DependencyProperty CompactPaneLengthProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewItemStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewItemStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewList
{
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewList> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewList<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewListFactory
{
    Windows::UI::Xaml::Controls::NavigationViewList CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewListFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewListFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewPaneClosingEventArgs
{
    bool Cancel() const;
    void Cancel(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewPaneClosingEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs
{
    Windows::Foundation::IInspectable SelectedItem() const;
    bool IsSettingsSelected() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewStatics
{
    Windows::UI::Xaml::DependencyProperty IsPaneOpenProperty() const;
    Windows::UI::Xaml::DependencyProperty CompactModeThresholdWidthProperty() const;
    Windows::UI::Xaml::DependencyProperty ExpandedModeThresholdWidthProperty() const;
    Windows::UI::Xaml::DependencyProperty PaneFooterProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty DisplayModeProperty() const;
    Windows::UI::Xaml::DependencyProperty IsSettingsVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsPaneToggleButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty AlwaysShowHeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty CompactPaneLengthProperty() const;
    Windows::UI::Xaml::DependencyProperty OpenPaneLengthProperty() const;
    Windows::UI::Xaml::DependencyProperty PaneToggleButtonStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty MenuItemsProperty() const;
    Windows::UI::Xaml::DependencyProperty MenuItemsSourceProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedItemProperty() const;
    Windows::UI::Xaml::DependencyProperty SettingsItemProperty() const;
    Windows::UI::Xaml::DependencyProperty AutoSuggestBoxProperty() const;
    Windows::UI::Xaml::DependencyProperty MenuItemTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty MenuItemTemplateSelectorProperty() const;
    Windows::UI::Xaml::DependencyProperty MenuItemContainerStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty MenuItemContainerStyleSelectorProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INavigationViewStatics2
{
    Windows::UI::Xaml::DependencyProperty IsBackButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsBackEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty PaneTitleProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INavigationViewStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INavigationViewStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INotifyEventArgs
{
    hstring Value() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INotifyEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INotifyEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_INotifyEventArgs2
{
    Windows::Foundation::Uri CallingUri() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::INotifyEventArgs2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_INotifyEventArgs2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPage
{
    Windows::UI::Xaml::Controls::Frame Frame() const;
    Windows::UI::Xaml::Navigation::NavigationCacheMode NavigationCacheMode() const;
    void NavigationCacheMode(Windows::UI::Xaml::Navigation::NavigationCacheMode const& value) const;
    Windows::UI::Xaml::Controls::AppBar TopAppBar() const;
    void TopAppBar(Windows::UI::Xaml::Controls::AppBar const& value) const;
    Windows::UI::Xaml::Controls::AppBar BottomAppBar() const;
    void BottomAppBar(Windows::UI::Xaml::Controls::AppBar const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPage> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPage<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPageFactory
{
    Windows::UI::Xaml::Controls::Page CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPageFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPageFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPageOverrides
{
    void OnNavigatedFrom(Windows::UI::Xaml::Navigation::NavigationEventArgs const& e) const;
    void OnNavigatedTo(Windows::UI::Xaml::Navigation::NavigationEventArgs const& e) const;
    void OnNavigatingFrom(Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs const& e) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPageOverrides> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPageOverrides<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPageStatics
{
    Windows::UI::Xaml::DependencyProperty FrameProperty() const;
    Windows::UI::Xaml::DependencyProperty TopAppBarProperty() const;
    Windows::UI::Xaml::DependencyProperty BottomAppBarProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPageStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPageStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPanel
{
    Windows::UI::Xaml::Controls::UIElementCollection Children() const;
    Windows::UI::Xaml::Media::Brush Background() const;
    void Background(Windows::UI::Xaml::Media::Brush const& value) const;
    bool IsItemsHost() const;
    Windows::UI::Xaml::Media::Animation::TransitionCollection ChildrenTransitions() const;
    void ChildrenTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPanel> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPanel<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPanelFactory
{
    Windows::UI::Xaml::Controls::Panel CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPanelFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPanelFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPanelStatics
{
    Windows::UI::Xaml::DependencyProperty BackgroundProperty() const;
    Windows::UI::Xaml::DependencyProperty IsItemsHostProperty() const;
    Windows::UI::Xaml::DependencyProperty ChildrenTransitionsProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPanelStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPanelStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IParallaxView
{
    Windows::UI::Xaml::UIElement Child() const;
    void Child(Windows::UI::Xaml::UIElement const& value) const;
    double HorizontalShift() const;
    void HorizontalShift(double value) const;
    double HorizontalSourceEndOffset() const;
    void HorizontalSourceEndOffset(double value) const;
    Windows::UI::Xaml::Controls::ParallaxSourceOffsetKind HorizontalSourceOffsetKind() const;
    void HorizontalSourceOffsetKind(Windows::UI::Xaml::Controls::ParallaxSourceOffsetKind const& value) const;
    double HorizontalSourceStartOffset() const;
    void HorizontalSourceStartOffset(double value) const;
    bool IsHorizontalShiftClamped() const;
    void IsHorizontalShiftClamped(bool value) const;
    bool IsVerticalShiftClamped() const;
    void IsVerticalShiftClamped(bool value) const;
    double MaxHorizontalShiftRatio() const;
    void MaxHorizontalShiftRatio(double value) const;
    double MaxVerticalShiftRatio() const;
    void MaxVerticalShiftRatio(double value) const;
    Windows::UI::Xaml::UIElement Source() const;
    void Source(Windows::UI::Xaml::UIElement const& value) const;
    double VerticalShift() const;
    void VerticalShift(double value) const;
    double VerticalSourceEndOffset() const;
    void VerticalSourceEndOffset(double value) const;
    Windows::UI::Xaml::Controls::ParallaxSourceOffsetKind VerticalSourceOffsetKind() const;
    void VerticalSourceOffsetKind(Windows::UI::Xaml::Controls::ParallaxSourceOffsetKind const& value) const;
    double VerticalSourceStartOffset() const;
    void VerticalSourceStartOffset(double value) const;
    void RefreshAutomaticHorizontalOffsets() const;
    void RefreshAutomaticVerticalOffsets() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IParallaxView> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IParallaxView<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IParallaxViewFactory
{
    Windows::UI::Xaml::Controls::ParallaxView CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IParallaxViewFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IParallaxViewFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IParallaxViewStatics
{
    Windows::UI::Xaml::DependencyProperty ChildProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalSourceEndOffsetProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalSourceOffsetKindProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalSourceStartOffsetProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxHorizontalShiftRatioProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalShiftProperty() const;
    Windows::UI::Xaml::DependencyProperty IsHorizontalShiftClampedProperty() const;
    Windows::UI::Xaml::DependencyProperty IsVerticalShiftClampedProperty() const;
    Windows::UI::Xaml::DependencyProperty SourceProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalSourceEndOffsetProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalSourceOffsetKindProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalSourceStartOffsetProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxVerticalShiftRatioProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalShiftProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IParallaxViewStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IParallaxViewStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPasswordBox
{
    hstring Password() const;
    void Password(param::hstring const& value) const;
    hstring PasswordChar() const;
    void PasswordChar(param::hstring const& value) const;
    [[deprecated("IsPasswordRevealButtonEnabledProperty may be altered or unavailable for releases after Windows 10.0. Instead, use PasswordRevealModeProperty.")]] bool IsPasswordRevealButtonEnabled() const;
    [[deprecated("IsPasswordRevealButtonEnabledProperty may be altered or unavailable for releases after Windows 10.0. Instead, use PasswordRevealModeProperty.")]] void IsPasswordRevealButtonEnabled(bool value) const;
    int32_t MaxLength() const;
    void MaxLength(int32_t value) const;
    event_token PasswordChanged(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using PasswordChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IPasswordBox>;
    PasswordChanged_revoker PasswordChanged(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void PasswordChanged(event_token const& token) const;
    event_token ContextMenuOpening(Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& value) const;
    using ContextMenuOpening_revoker = event_revoker<Windows::UI::Xaml::Controls::IPasswordBox>;
    ContextMenuOpening_revoker ContextMenuOpening(auto_revoke_t, Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& value) const;
    void ContextMenuOpening(event_token const& token) const;
    void SelectAll() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPasswordBox> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBox<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPasswordBox2
{
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    hstring PlaceholderText() const;
    void PlaceholderText(param::hstring const& value) const;
    Windows::UI::Xaml::Media::SolidColorBrush SelectionHighlightColor() const;
    void SelectionHighlightColor(Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
    bool PreventKeyboardDisplayOnProgrammaticFocus() const;
    void PreventKeyboardDisplayOnProgrammaticFocus(bool value) const;
    event_token Paste(Windows::UI::Xaml::Controls::TextControlPasteEventHandler const& value) const;
    using Paste_revoker = event_revoker<Windows::UI::Xaml::Controls::IPasswordBox2>;
    Paste_revoker Paste(auto_revoke_t, Windows::UI::Xaml::Controls::TextControlPasteEventHandler const& value) const;
    void Paste(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPasswordBox2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBox2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPasswordBox3
{
    Windows::UI::Xaml::Controls::PasswordRevealMode PasswordRevealMode() const;
    void PasswordRevealMode(Windows::UI::Xaml::Controls::PasswordRevealMode const& value) const;
    Windows::UI::Xaml::TextReadingOrder TextReadingOrder() const;
    void TextReadingOrder(Windows::UI::Xaml::TextReadingOrder const& value) const;
    Windows::UI::Xaml::Input::InputScope InputScope() const;
    void InputScope(Windows::UI::Xaml::Input::InputScope const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPasswordBox3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBox3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPasswordBox4
{
    event_token PasswordChanging(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::PasswordBox, Windows::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs> const& value) const;
    using PasswordChanging_revoker = event_revoker<Windows::UI::Xaml::Controls::IPasswordBox4>;
    PasswordChanging_revoker PasswordChanging(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::PasswordBox, Windows::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs> const& value) const;
    void PasswordChanging(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPasswordBox4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBox4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPasswordBoxPasswordChangingEventArgs
{
    bool IsContentChanging() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBoxPasswordChangingEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPasswordBoxStatics
{
    Windows::UI::Xaml::DependencyProperty PasswordProperty() const;
    Windows::UI::Xaml::DependencyProperty PasswordCharProperty() const;
    [[deprecated("IsPasswordRevealButtonEnabledProperty may be altered or unavailable for releases after Windows 10.0. Instead, use PasswordRevealModeProperty.")]] Windows::UI::Xaml::DependencyProperty IsPasswordRevealButtonEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxLengthProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPasswordBoxStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBoxStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPasswordBoxStatics2
{
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectionHighlightColorProperty() const;
    Windows::UI::Xaml::DependencyProperty PreventKeyboardDisplayOnProgrammaticFocusProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPasswordBoxStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBoxStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPasswordBoxStatics3
{
    Windows::UI::Xaml::DependencyProperty PasswordRevealModeProperty() const;
    Windows::UI::Xaml::DependencyProperty TextReadingOrderProperty() const;
    Windows::UI::Xaml::DependencyProperty InputScopeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPasswordBoxStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPasswordBoxStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPathIcon
{
    Windows::UI::Xaml::Media::Geometry Data() const;
    void Data(Windows::UI::Xaml::Media::Geometry const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPathIcon> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPathIcon<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPathIconFactory
{
    Windows::UI::Xaml::Controls::PathIcon CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPathIconFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPathIconFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPathIconSource
{
    Windows::UI::Xaml::Media::Geometry Data() const;
    void Data(Windows::UI::Xaml::Media::Geometry const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPathIconSource> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPathIconSource<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPathIconSourceFactory
{
    Windows::UI::Xaml::Controls::PathIconSource CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPathIconSourceFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPathIconSourceFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPathIconSourceStatics
{
    Windows::UI::Xaml::DependencyProperty DataProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPathIconSourceStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPathIconSourceStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPathIconStatics
{
    Windows::UI::Xaml::DependencyProperty DataProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPathIconStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPathIconStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPersonPicture
{
    int32_t BadgeNumber() const;
    void BadgeNumber(int32_t value) const;
    hstring BadgeGlyph() const;
    void BadgeGlyph(param::hstring const& value) const;
    Windows::UI::Xaml::Media::ImageSource BadgeImageSource() const;
    void BadgeImageSource(Windows::UI::Xaml::Media::ImageSource const& value) const;
    hstring BadgeText() const;
    void BadgeText(param::hstring const& value) const;
    bool IsGroup() const;
    void IsGroup(bool value) const;
    Windows::ApplicationModel::Contacts::Contact Contact() const;
    void Contact(Windows::ApplicationModel::Contacts::Contact const& value) const;
    hstring DisplayName() const;
    void DisplayName(param::hstring const& value) const;
    hstring Initials() const;
    void Initials(param::hstring const& value) const;
    bool PreferSmallImage() const;
    void PreferSmallImage(bool value) const;
    Windows::UI::Xaml::Media::ImageSource ProfilePicture() const;
    void ProfilePicture(Windows::UI::Xaml::Media::ImageSource const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPersonPicture> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPersonPicture<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPersonPictureFactory
{
    Windows::UI::Xaml::Controls::PersonPicture CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPersonPictureFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPersonPictureFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPersonPictureStatics
{
    Windows::UI::Xaml::DependencyProperty BadgeNumberProperty() const;
    Windows::UI::Xaml::DependencyProperty BadgeGlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty BadgeImageSourceProperty() const;
    Windows::UI::Xaml::DependencyProperty BadgeTextProperty() const;
    Windows::UI::Xaml::DependencyProperty IsGroupProperty() const;
    Windows::UI::Xaml::DependencyProperty ContactProperty() const;
    Windows::UI::Xaml::DependencyProperty DisplayNameProperty() const;
    Windows::UI::Xaml::DependencyProperty InitialsProperty() const;
    Windows::UI::Xaml::DependencyProperty PreferSmallImageProperty() const;
    Windows::UI::Xaml::DependencyProperty ProfilePictureProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPersonPictureStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPersonPictureStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPickerConfirmedEventArgs
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPickerConfirmedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPickerFlyout
{
    Windows::UI::Xaml::UIElement Content() const;
    void Content(Windows::UI::Xaml::UIElement const& value) const;
    bool ConfirmationButtonsVisible() const;
    void ConfirmationButtonsVisible(bool value) const;
    event_token Confirmed(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::PickerFlyout, Windows::UI::Xaml::Controls::PickerConfirmedEventArgs> const& value) const;
    using Confirmed_revoker = event_revoker<Windows::UI::Xaml::Controls::IPickerFlyout>;
    Confirmed_revoker Confirmed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::PickerFlyout, Windows::UI::Xaml::Controls::PickerConfirmedEventArgs> const& value) const;
    void Confirmed(event_token const& token) const;
    Windows::Foundation::IAsyncOperation<bool> ShowAtAsync(Windows::UI::Xaml::FrameworkElement const& target) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPickerFlyout> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPickerFlyout<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPickerFlyoutPresenter
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IPickerFlyoutPresenter> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPickerFlyoutPresenter<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPickerFlyoutStatics
{
    Windows::UI::Xaml::DependencyProperty ContentProperty() const;
    Windows::UI::Xaml::DependencyProperty ConfirmationButtonsVisibleProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPickerFlyoutStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPickerFlyoutStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPivot
{
    Windows::Foundation::IInspectable Title() const;
    void Title(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate TitleTemplate() const;
    void TitleTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    int32_t SelectedIndex() const;
    void SelectedIndex(int32_t value) const;
    Windows::Foundation::IInspectable SelectedItem() const;
    void SelectedItem(Windows::Foundation::IInspectable const& value) const;
    bool IsLocked() const;
    void IsLocked(bool value) const;
    event_token SelectionChanged(Windows::UI::Xaml::Controls::SelectionChangedEventHandler const& value) const;
    using SelectionChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IPivot>;
    SelectionChanged_revoker SelectionChanged(auto_revoke_t, Windows::UI::Xaml::Controls::SelectionChangedEventHandler const& value) const;
    void SelectionChanged(event_token const& token) const;
    event_token PivotItemLoading(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> const& value) const;
    using PivotItemLoading_revoker = event_revoker<Windows::UI::Xaml::Controls::IPivot>;
    PivotItemLoading_revoker PivotItemLoading(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> const& value) const;
    void PivotItemLoading(event_token const& token) const;
    event_token PivotItemLoaded(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> const& value) const;
    using PivotItemLoaded_revoker = event_revoker<Windows::UI::Xaml::Controls::IPivot>;
    PivotItemLoaded_revoker PivotItemLoaded(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> const& value) const;
    void PivotItemLoaded(event_token const& token) const;
    event_token PivotItemUnloading(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> const& value) const;
    using PivotItemUnloading_revoker = event_revoker<Windows::UI::Xaml::Controls::IPivot>;
    PivotItemUnloading_revoker PivotItemUnloading(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> const& value) const;
    void PivotItemUnloading(event_token const& token) const;
    event_token PivotItemUnloaded(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> const& value) const;
    using PivotItemUnloaded_revoker = event_revoker<Windows::UI::Xaml::Controls::IPivot>;
    PivotItemUnloaded_revoker PivotItemUnloaded(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> const& value) const;
    void PivotItemUnloaded(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPivot> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivot<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPivot2
{
    Windows::Foundation::IInspectable LeftHeader() const;
    void LeftHeader(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate LeftHeaderTemplate() const;
    void LeftHeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::Foundation::IInspectable RightHeader() const;
    void RightHeader(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate RightHeaderTemplate() const;
    void RightHeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPivot2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivot2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPivot3
{
    Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement HeaderFocusVisualPlacement() const;
    void HeaderFocusVisualPlacement(Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement const& value) const;
    bool IsHeaderItemsCarouselEnabled() const;
    void IsHeaderItemsCarouselEnabled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPivot3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivot3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPivotFactory
{
    Windows::UI::Xaml::Controls::Pivot CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPivotFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPivotItem
{
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPivotItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPivotItemEventArgs
{
    Windows::UI::Xaml::Controls::PivotItem Item() const;
    void Item(Windows::UI::Xaml::Controls::PivotItem const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPivotItemEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotItemEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPivotItemFactory
{
    Windows::UI::Xaml::Controls::PivotItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPivotItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPivotItemStatics
{
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPivotItemStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotItemStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPivotStatics
{
    Windows::UI::Xaml::DependencyProperty TitleProperty() const;
    Windows::UI::Xaml::DependencyProperty TitleTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedIndexProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedItemProperty() const;
    Windows::UI::Xaml::DependencyProperty IsLockedProperty() const;
    Windows::UI::Xaml::DependencyProperty SlideInAnimationGroupProperty() const;
    Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup GetSlideInAnimationGroup(Windows::UI::Xaml::FrameworkElement const& element) const;
    void SetSlideInAnimationGroup(Windows::UI::Xaml::FrameworkElement const& element, Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPivotStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPivotStatics2
{
    Windows::UI::Xaml::DependencyProperty LeftHeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty LeftHeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty RightHeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty RightHeaderTemplateProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPivotStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IPivotStatics3
{
    Windows::UI::Xaml::DependencyProperty HeaderFocusVisualPlacementProperty() const;
    Windows::UI::Xaml::DependencyProperty IsHeaderItemsCarouselEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IPivotStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IPivotStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IProgressBar
{
    bool IsIndeterminate() const;
    void IsIndeterminate(bool value) const;
    bool ShowError() const;
    void ShowError(bool value) const;
    bool ShowPaused() const;
    void ShowPaused(bool value) const;
    Windows::UI::Xaml::Controls::Primitives::ProgressBarTemplateSettings TemplateSettings() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IProgressBar> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IProgressBar<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IProgressBarFactory
{
    Windows::UI::Xaml::Controls::ProgressBar CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IProgressBarFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IProgressBarFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IProgressBarStatics
{
    Windows::UI::Xaml::DependencyProperty IsIndeterminateProperty() const;
    Windows::UI::Xaml::DependencyProperty ShowErrorProperty() const;
    Windows::UI::Xaml::DependencyProperty ShowPausedProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IProgressBarStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IProgressBarStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IProgressRing
{
    bool IsActive() const;
    void IsActive(bool value) const;
    Windows::UI::Xaml::Controls::Primitives::ProgressRingTemplateSettings TemplateSettings() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IProgressRing> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IProgressRing<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IProgressRingStatics
{
    Windows::UI::Xaml::DependencyProperty IsActiveProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IProgressRingStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IProgressRingStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRadioButton
{
    hstring GroupName() const;
    void GroupName(param::hstring const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRadioButton> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRadioButton<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRadioButtonFactory
{
    Windows::UI::Xaml::Controls::RadioButton CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRadioButtonFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRadioButtonFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRadioButtonStatics
{
    Windows::UI::Xaml::DependencyProperty GroupNameProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRadioButtonStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRadioButtonStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRatingControl
{
    hstring Caption() const;
    void Caption(param::hstring const& value) const;
    int32_t InitialSetValue() const;
    void InitialSetValue(int32_t value) const;
    bool IsClearEnabled() const;
    void IsClearEnabled(bool value) const;
    bool IsReadOnly() const;
    void IsReadOnly(bool value) const;
    int32_t MaxRating() const;
    void MaxRating(int32_t value) const;
    double PlaceholderValue() const;
    void PlaceholderValue(double value) const;
    Windows::UI::Xaml::Controls::RatingItemInfo ItemInfo() const;
    void ItemInfo(Windows::UI::Xaml::Controls::RatingItemInfo const& value) const;
    double Value() const;
    void Value(double value) const;
    event_token ValueChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RatingControl, Windows::Foundation::IInspectable> const& value) const;
    using ValueChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IRatingControl>;
    ValueChanged_revoker ValueChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RatingControl, Windows::Foundation::IInspectable> const& value) const;
    void ValueChanged(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRatingControl> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingControl<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRatingControlFactory
{
    Windows::UI::Xaml::Controls::RatingControl CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRatingControlFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingControlFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRatingControlStatics
{
    Windows::UI::Xaml::DependencyProperty CaptionProperty() const;
    Windows::UI::Xaml::DependencyProperty InitialSetValueProperty() const;
    Windows::UI::Xaml::DependencyProperty IsClearEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsReadOnlyProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxRatingProperty() const;
    Windows::UI::Xaml::DependencyProperty PlaceholderValueProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemInfoProperty() const;
    Windows::UI::Xaml::DependencyProperty ValueProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRatingControlStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingControlStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRatingItemFontInfo
{
    hstring DisabledGlyph() const;
    void DisabledGlyph(param::hstring const& value) const;
    hstring Glyph() const;
    void Glyph(param::hstring const& value) const;
    hstring PointerOverGlyph() const;
    void PointerOverGlyph(param::hstring const& value) const;
    hstring PointerOverPlaceholderGlyph() const;
    void PointerOverPlaceholderGlyph(param::hstring const& value) const;
    hstring PlaceholderGlyph() const;
    void PlaceholderGlyph(param::hstring const& value) const;
    hstring UnsetGlyph() const;
    void UnsetGlyph(param::hstring const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRatingItemFontInfo> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemFontInfo<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRatingItemFontInfoFactory
{
    Windows::UI::Xaml::Controls::RatingItemFontInfo CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRatingItemFontInfoFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemFontInfoFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRatingItemFontInfoStatics
{
    Windows::UI::Xaml::DependencyProperty DisabledGlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty GlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty PlaceholderGlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty PointerOverGlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty PointerOverPlaceholderGlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty UnsetGlyphProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRatingItemFontInfoStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemFontInfoStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRatingItemImageInfo
{
    Windows::UI::Xaml::Media::ImageSource DisabledImage() const;
    void DisabledImage(Windows::UI::Xaml::Media::ImageSource const& value) const;
    Windows::UI::Xaml::Media::ImageSource Image() const;
    void Image(Windows::UI::Xaml::Media::ImageSource const& value) const;
    Windows::UI::Xaml::Media::ImageSource PlaceholderImage() const;
    void PlaceholderImage(Windows::UI::Xaml::Media::ImageSource const& value) const;
    Windows::UI::Xaml::Media::ImageSource PointerOverImage() const;
    void PointerOverImage(Windows::UI::Xaml::Media::ImageSource const& value) const;
    Windows::UI::Xaml::Media::ImageSource PointerOverPlaceholderImage() const;
    void PointerOverPlaceholderImage(Windows::UI::Xaml::Media::ImageSource const& value) const;
    Windows::UI::Xaml::Media::ImageSource UnsetImage() const;
    void UnsetImage(Windows::UI::Xaml::Media::ImageSource const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRatingItemImageInfo> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemImageInfo<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRatingItemImageInfoFactory
{
    Windows::UI::Xaml::Controls::RatingItemImageInfo CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRatingItemImageInfoFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemImageInfoFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRatingItemImageInfoStatics
{
    Windows::UI::Xaml::DependencyProperty DisabledImageProperty() const;
    Windows::UI::Xaml::DependencyProperty ImageProperty() const;
    Windows::UI::Xaml::DependencyProperty PlaceholderImageProperty() const;
    Windows::UI::Xaml::DependencyProperty PointerOverImageProperty() const;
    Windows::UI::Xaml::DependencyProperty PointerOverPlaceholderImageProperty() const;
    Windows::UI::Xaml::DependencyProperty UnsetImageProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRatingItemImageInfoStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemImageInfoStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRatingItemInfo
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IRatingItemInfo> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemInfo<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRatingItemInfoFactory
{
    Windows::UI::Xaml::Controls::RatingItemInfo CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRatingItemInfoFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRatingItemInfoFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRefreshContainer
{
    Windows::UI::Xaml::Controls::RefreshVisualizer Visualizer() const;
    void Visualizer(Windows::UI::Xaml::Controls::RefreshVisualizer const& value) const;
    Windows::UI::Xaml::Controls::RefreshPullDirection PullDirection() const;
    void PullDirection(Windows::UI::Xaml::Controls::RefreshPullDirection const& value) const;
    event_token RefreshRequested(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RefreshContainer, Windows::UI::Xaml::Controls::RefreshRequestedEventArgs> const& value) const;
    using RefreshRequested_revoker = event_revoker<Windows::UI::Xaml::Controls::IRefreshContainer>;
    RefreshRequested_revoker RefreshRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RefreshContainer, Windows::UI::Xaml::Controls::RefreshRequestedEventArgs> const& value) const;
    void RefreshRequested(event_token const& token) const;
    void RequestRefresh() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRefreshContainer> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshContainer<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRefreshContainerFactory
{
    Windows::UI::Xaml::Controls::RefreshContainer CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRefreshContainerFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshContainerFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRefreshContainerStatics
{
    Windows::UI::Xaml::DependencyProperty VisualizerProperty() const;
    Windows::UI::Xaml::DependencyProperty PullDirectionProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRefreshContainerStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshContainerStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRefreshInteractionRatioChangedEventArgs
{
    double InteractionRatio() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshInteractionRatioChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRefreshRequestedEventArgs
{
    Windows::Foundation::Deferral GetDeferral() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRefreshRequestedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshRequestedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRefreshStateChangedEventArgs
{
    Windows::UI::Xaml::Controls::RefreshVisualizerState OldState() const;
    Windows::UI::Xaml::Controls::RefreshVisualizerState NewState() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRefreshStateChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshStateChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRefreshVisualizer
{
    void RequestRefresh() const;
    Windows::UI::Xaml::Controls::RefreshVisualizerOrientation Orientation() const;
    void Orientation(Windows::UI::Xaml::Controls::RefreshVisualizerOrientation const& value) const;
    Windows::UI::Xaml::UIElement Content() const;
    void Content(Windows::UI::Xaml::UIElement const& value) const;
    Windows::UI::Xaml::Controls::RefreshVisualizerState State() const;
    event_token RefreshRequested(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RefreshVisualizer, Windows::UI::Xaml::Controls::RefreshRequestedEventArgs> const& value) const;
    using RefreshRequested_revoker = event_revoker<Windows::UI::Xaml::Controls::IRefreshVisualizer>;
    RefreshRequested_revoker RefreshRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RefreshVisualizer, Windows::UI::Xaml::Controls::RefreshRequestedEventArgs> const& value) const;
    void RefreshRequested(event_token const& token) const;
    event_token RefreshStateChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RefreshVisualizer, Windows::UI::Xaml::Controls::RefreshStateChangedEventArgs> const& value) const;
    using RefreshStateChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IRefreshVisualizer>;
    RefreshStateChanged_revoker RefreshStateChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RefreshVisualizer, Windows::UI::Xaml::Controls::RefreshStateChangedEventArgs> const& value) const;
    void RefreshStateChanged(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRefreshVisualizer> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshVisualizer<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRefreshVisualizerFactory
{
    Windows::UI::Xaml::Controls::RefreshVisualizer CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRefreshVisualizerFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshVisualizerFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRefreshVisualizerStatics
{
    Windows::UI::Xaml::DependencyProperty InfoProviderProperty() const;
    Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
    Windows::UI::Xaml::DependencyProperty ContentProperty() const;
    Windows::UI::Xaml::DependencyProperty StateProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRefreshVisualizerStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRefreshVisualizerStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRelativePanel
{
    Windows::UI::Xaml::Media::Brush BorderBrush() const;
    void BorderBrush(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Thickness BorderThickness() const;
    void BorderThickness(Windows::UI::Xaml::Thickness const& value) const;
    Windows::UI::Xaml::CornerRadius CornerRadius() const;
    void CornerRadius(Windows::UI::Xaml::CornerRadius const& value) const;
    Windows::UI::Xaml::Thickness Padding() const;
    void Padding(Windows::UI::Xaml::Thickness const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRelativePanel> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRelativePanel<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRelativePanelFactory
{
    Windows::UI::Xaml::Controls::RelativePanel CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRelativePanelFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRelativePanelFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRelativePanelStatics
{
    Windows::UI::Xaml::DependencyProperty LeftOfProperty() const;
    Windows::Foundation::IInspectable GetLeftOf(Windows::UI::Xaml::UIElement const& element) const;
    void SetLeftOf(Windows::UI::Xaml::UIElement const& element, Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DependencyProperty AboveProperty() const;
    Windows::Foundation::IInspectable GetAbove(Windows::UI::Xaml::UIElement const& element) const;
    void SetAbove(Windows::UI::Xaml::UIElement const& element, Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DependencyProperty RightOfProperty() const;
    Windows::Foundation::IInspectable GetRightOf(Windows::UI::Xaml::UIElement const& element) const;
    void SetRightOf(Windows::UI::Xaml::UIElement const& element, Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DependencyProperty BelowProperty() const;
    Windows::Foundation::IInspectable GetBelow(Windows::UI::Xaml::UIElement const& element) const;
    void SetBelow(Windows::UI::Xaml::UIElement const& element, Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DependencyProperty AlignHorizontalCenterWithProperty() const;
    Windows::Foundation::IInspectable GetAlignHorizontalCenterWith(Windows::UI::Xaml::UIElement const& element) const;
    void SetAlignHorizontalCenterWith(Windows::UI::Xaml::UIElement const& element, Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DependencyProperty AlignVerticalCenterWithProperty() const;
    Windows::Foundation::IInspectable GetAlignVerticalCenterWith(Windows::UI::Xaml::UIElement const& element) const;
    void SetAlignVerticalCenterWith(Windows::UI::Xaml::UIElement const& element, Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DependencyProperty AlignLeftWithProperty() const;
    Windows::Foundation::IInspectable GetAlignLeftWith(Windows::UI::Xaml::UIElement const& element) const;
    void SetAlignLeftWith(Windows::UI::Xaml::UIElement const& element, Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DependencyProperty AlignTopWithProperty() const;
    Windows::Foundation::IInspectable GetAlignTopWith(Windows::UI::Xaml::UIElement const& element) const;
    void SetAlignTopWith(Windows::UI::Xaml::UIElement const& element, Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DependencyProperty AlignRightWithProperty() const;
    Windows::Foundation::IInspectable GetAlignRightWith(Windows::UI::Xaml::UIElement const& element) const;
    void SetAlignRightWith(Windows::UI::Xaml::UIElement const& element, Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DependencyProperty AlignBottomWithProperty() const;
    Windows::Foundation::IInspectable GetAlignBottomWith(Windows::UI::Xaml::UIElement const& element) const;
    void SetAlignBottomWith(Windows::UI::Xaml::UIElement const& element, Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DependencyProperty AlignLeftWithPanelProperty() const;
    bool GetAlignLeftWithPanel(Windows::UI::Xaml::UIElement const& element) const;
    void SetAlignLeftWithPanel(Windows::UI::Xaml::UIElement const& element, bool value) const;
    Windows::UI::Xaml::DependencyProperty AlignTopWithPanelProperty() const;
    bool GetAlignTopWithPanel(Windows::UI::Xaml::UIElement const& element) const;
    void SetAlignTopWithPanel(Windows::UI::Xaml::UIElement const& element, bool value) const;
    Windows::UI::Xaml::DependencyProperty AlignRightWithPanelProperty() const;
    bool GetAlignRightWithPanel(Windows::UI::Xaml::UIElement const& element) const;
    void SetAlignRightWithPanel(Windows::UI::Xaml::UIElement const& element, bool value) const;
    Windows::UI::Xaml::DependencyProperty AlignBottomWithPanelProperty() const;
    bool GetAlignBottomWithPanel(Windows::UI::Xaml::UIElement const& element) const;
    void SetAlignBottomWithPanel(Windows::UI::Xaml::UIElement const& element, bool value) const;
    Windows::UI::Xaml::DependencyProperty AlignHorizontalCenterWithPanelProperty() const;
    bool GetAlignHorizontalCenterWithPanel(Windows::UI::Xaml::UIElement const& element) const;
    void SetAlignHorizontalCenterWithPanel(Windows::UI::Xaml::UIElement const& element, bool value) const;
    Windows::UI::Xaml::DependencyProperty AlignVerticalCenterWithPanelProperty() const;
    bool GetAlignVerticalCenterWithPanel(Windows::UI::Xaml::UIElement const& element) const;
    void SetAlignVerticalCenterWithPanel(Windows::UI::Xaml::UIElement const& element, bool value) const;
    Windows::UI::Xaml::DependencyProperty BorderBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty BorderThicknessProperty() const;
    Windows::UI::Xaml::DependencyProperty CornerRadiusProperty() const;
    Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRelativePanelStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRelativePanelStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBox
{
    bool IsReadOnly() const;
    void IsReadOnly(bool value) const;
    bool AcceptsReturn() const;
    void AcceptsReturn(bool value) const;
    Windows::UI::Xaml::TextAlignment TextAlignment() const;
    void TextAlignment(Windows::UI::Xaml::TextAlignment const& value) const;
    Windows::UI::Xaml::TextWrapping TextWrapping() const;
    void TextWrapping(Windows::UI::Xaml::TextWrapping const& value) const;
    bool IsSpellCheckEnabled() const;
    void IsSpellCheckEnabled(bool value) const;
    bool IsTextPredictionEnabled() const;
    void IsTextPredictionEnabled(bool value) const;
    Windows::UI::Text::ITextDocument Document() const;
    Windows::UI::Xaml::Input::InputScope InputScope() const;
    void InputScope(Windows::UI::Xaml::Input::InputScope const& value) const;
    event_token TextChanged(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using TextChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichEditBox>;
    TextChanged_revoker TextChanged(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void TextChanged(event_token const& token) const;
    event_token SelectionChanged(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using SelectionChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichEditBox>;
    SelectionChanged_revoker SelectionChanged(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void SelectionChanged(event_token const& token) const;
    event_token ContextMenuOpening(Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& value) const;
    using ContextMenuOpening_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichEditBox>;
    ContextMenuOpening_revoker ContextMenuOpening(auto_revoke_t, Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& value) const;
    void ContextMenuOpening(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBox> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBox<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBox2
{
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    hstring PlaceholderText() const;
    void PlaceholderText(param::hstring const& value) const;
    Windows::UI::Xaml::Media::SolidColorBrush SelectionHighlightColor() const;
    void SelectionHighlightColor(Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
    bool PreventKeyboardDisplayOnProgrammaticFocus() const;
    void PreventKeyboardDisplayOnProgrammaticFocus(bool value) const;
    bool IsColorFontEnabled() const;
    void IsColorFontEnabled(bool value) const;
    event_token Paste(Windows::UI::Xaml::Controls::TextControlPasteEventHandler const& value) const;
    using Paste_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichEditBox2>;
    Paste_revoker Paste(auto_revoke_t, Windows::UI::Xaml::Controls::TextControlPasteEventHandler const& value) const;
    void Paste(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBox2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBox2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBox3
{
    event_token TextCompositionStarted(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> const& value) const;
    using TextCompositionStarted_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichEditBox3>;
    TextCompositionStarted_revoker TextCompositionStarted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> const& value) const;
    void TextCompositionStarted(event_token const& token) const;
    event_token TextCompositionChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> const& value) const;
    using TextCompositionChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichEditBox3>;
    TextCompositionChanged_revoker TextCompositionChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> const& value) const;
    void TextCompositionChanged(event_token const& token) const;
    event_token TextCompositionEnded(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> const& value) const;
    using TextCompositionEnded_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichEditBox3>;
    TextCompositionEnded_revoker TextCompositionEnded(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> const& value) const;
    void TextCompositionEnded(event_token const& token) const;
    Windows::UI::Xaml::TextReadingOrder TextReadingOrder() const;
    void TextReadingOrder(Windows::UI::Xaml::TextReadingOrder const& value) const;
    Windows::UI::Xaml::Controls::CandidateWindowAlignment DesiredCandidateWindowAlignment() const;
    void DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment const& value) const;
    event_token CandidateWindowBoundsChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> const& value) const;
    using CandidateWindowBoundsChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichEditBox3>;
    CandidateWindowBoundsChanged_revoker CandidateWindowBoundsChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> const& value) const;
    void CandidateWindowBoundsChanged(event_token const& token) const;
    event_token TextChanging(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs> const& value) const;
    using TextChanging_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichEditBox3>;
    TextChanging_revoker TextChanging(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs> const& value) const;
    void TextChanging(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBox3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBox3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBox4
{
    Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> GetLinguisticAlternativesAsync() const;
    Windows::UI::Xaml::Controls::RichEditClipboardFormat ClipboardCopyFormat() const;
    void ClipboardCopyFormat(Windows::UI::Xaml::Controls::RichEditClipboardFormat const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBox4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBox4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBox5
{
    Windows::UI::Xaml::Media::SolidColorBrush SelectionHighlightColorWhenNotFocused() const;
    void SelectionHighlightColorWhenNotFocused(Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
    int32_t MaxLength() const;
    void MaxLength(int32_t value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBox5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBox5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBox6
{
    Windows::UI::Xaml::TextAlignment HorizontalTextAlignment() const;
    void HorizontalTextAlignment(Windows::UI::Xaml::TextAlignment const& value) const;
    Windows::UI::Xaml::Controls::CharacterCasing CharacterCasing() const;
    void CharacterCasing(Windows::UI::Xaml::Controls::CharacterCasing const& value) const;
    Windows::UI::Xaml::Controls::DisabledFormattingAccelerators DisabledFormattingAccelerators() const;
    void DisabledFormattingAccelerators(Windows::UI::Xaml::Controls::DisabledFormattingAccelerators const& value) const;
    event_token CopyingToClipboard(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs> const& value) const;
    using CopyingToClipboard_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichEditBox6>;
    CopyingToClipboard_revoker CopyingToClipboard(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs> const& value) const;
    void CopyingToClipboard(event_token const& token) const;
    event_token CuttingToClipboard(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs> const& value) const;
    using CuttingToClipboard_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichEditBox6>;
    CuttingToClipboard_revoker CuttingToClipboard(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs> const& value) const;
    void CuttingToClipboard(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBox6> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBox6<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBox7
{
    Windows::UI::Xaml::Media::SolidColorBrush ContentLinkForegroundColor() const;
    void ContentLinkForegroundColor(Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
    Windows::UI::Xaml::Media::SolidColorBrush ContentLinkBackgroundColor() const;
    void ContentLinkBackgroundColor(Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
    Windows::UI::Xaml::Documents::ContentLinkProviderCollection ContentLinkProviders() const;
    void ContentLinkProviders(Windows::UI::Xaml::Documents::ContentLinkProviderCollection const& value) const;
    Windows::UI::Xaml::Controls::HandwritingView HandwritingView() const;
    void HandwritingView(Windows::UI::Xaml::Controls::HandwritingView const& value) const;
    bool IsHandwritingViewEnabled() const;
    void IsHandwritingViewEnabled(bool value) const;
    event_token ContentLinkChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::ContentLinkChangedEventArgs> const& value) const;
    using ContentLinkChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichEditBox7>;
    ContentLinkChanged_revoker ContentLinkChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::ContentLinkChangedEventArgs> const& value) const;
    void ContentLinkChanged(event_token const& token) const;
    event_token ContentLinkInvoked(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Documents::ContentLinkInvokedEventArgs> const& value) const;
    using ContentLinkInvoked_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichEditBox7>;
    ContentLinkInvoked_revoker ContentLinkInvoked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Documents::ContentLinkInvokedEventArgs> const& value) const;
    void ContentLinkInvoked(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBox7> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBox7<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBoxFactory
{
    Windows::UI::Xaml::Controls::RichEditBox CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBoxFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics
{
    Windows::UI::Xaml::DependencyProperty IsReadOnlyProperty() const;
    Windows::UI::Xaml::DependencyProperty AcceptsReturnProperty() const;
    Windows::UI::Xaml::DependencyProperty TextAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty TextWrappingProperty() const;
    Windows::UI::Xaml::DependencyProperty IsSpellCheckEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsTextPredictionEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty InputScopeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBoxStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics2
{
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectionHighlightColorProperty() const;
    Windows::UI::Xaml::DependencyProperty PreventKeyboardDisplayOnProgrammaticFocusProperty() const;
    Windows::UI::Xaml::DependencyProperty IsColorFontEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBoxStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics3
{
    Windows::UI::Xaml::DependencyProperty DesiredCandidateWindowAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty TextReadingOrderProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBoxStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics4
{
    Windows::UI::Xaml::DependencyProperty ClipboardCopyFormatProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBoxStatics4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics5
{
    Windows::UI::Xaml::DependencyProperty SelectionHighlightColorWhenNotFocusedProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxLengthProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBoxStatics5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics6
{
    Windows::UI::Xaml::DependencyProperty HorizontalTextAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty CharacterCasingProperty() const;
    Windows::UI::Xaml::DependencyProperty DisabledFormattingAcceleratorsProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBoxStatics6> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics6<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics7
{
    Windows::UI::Xaml::DependencyProperty ContentLinkForegroundColorProperty() const;
    Windows::UI::Xaml::DependencyProperty ContentLinkBackgroundColorProperty() const;
    Windows::UI::Xaml::DependencyProperty ContentLinkProvidersProperty() const;
    Windows::UI::Xaml::DependencyProperty HandwritingViewProperty() const;
    Windows::UI::Xaml::DependencyProperty IsHandwritingViewEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBoxStatics7> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxStatics7<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBoxTextChangingEventArgs
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxTextChangingEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichEditBoxTextChangingEventArgs2
{
    bool IsContentChanging() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichEditBoxTextChangingEventArgs2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlock
{
    double FontSize() const;
    void FontSize(double value) const;
    Windows::UI::Xaml::Media::FontFamily FontFamily() const;
    void FontFamily(Windows::UI::Xaml::Media::FontFamily const& value) const;
    Windows::UI::Text::FontWeight FontWeight() const;
    void FontWeight(Windows::UI::Text::FontWeight const& value) const;
    Windows::UI::Text::FontStyle FontStyle() const;
    void FontStyle(Windows::UI::Text::FontStyle const& value) const;
    Windows::UI::Text::FontStretch FontStretch() const;
    void FontStretch(Windows::UI::Text::FontStretch const& value) const;
    Windows::UI::Xaml::Media::Brush Foreground() const;
    void Foreground(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::TextWrapping TextWrapping() const;
    void TextWrapping(Windows::UI::Xaml::TextWrapping const& value) const;
    Windows::UI::Xaml::TextTrimming TextTrimming() const;
    void TextTrimming(Windows::UI::Xaml::TextTrimming const& value) const;
    Windows::UI::Xaml::TextAlignment TextAlignment() const;
    void TextAlignment(Windows::UI::Xaml::TextAlignment const& value) const;
    Windows::UI::Xaml::Documents::BlockCollection Blocks() const;
    Windows::UI::Xaml::Thickness Padding() const;
    void Padding(Windows::UI::Xaml::Thickness const& value) const;
    double LineHeight() const;
    void LineHeight(double value) const;
    Windows::UI::Xaml::LineStackingStrategy LineStackingStrategy() const;
    void LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy const& value) const;
    int32_t CharacterSpacing() const;
    void CharacterSpacing(int32_t value) const;
    Windows::UI::Xaml::Controls::RichTextBlockOverflow OverflowContentTarget() const;
    void OverflowContentTarget(Windows::UI::Xaml::Controls::RichTextBlockOverflow const& value) const;
    bool IsTextSelectionEnabled() const;
    void IsTextSelectionEnabled(bool value) const;
    bool HasOverflowContent() const;
    hstring SelectedText() const;
    Windows::UI::Xaml::Documents::TextPointer ContentStart() const;
    Windows::UI::Xaml::Documents::TextPointer ContentEnd() const;
    Windows::UI::Xaml::Documents::TextPointer SelectionStart() const;
    Windows::UI::Xaml::Documents::TextPointer SelectionEnd() const;
    double BaselineOffset() const;
    event_token SelectionChanged(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using SelectionChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichTextBlock>;
    SelectionChanged_revoker SelectionChanged(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void SelectionChanged(event_token const& token) const;
    event_token ContextMenuOpening(Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& value) const;
    using ContextMenuOpening_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichTextBlock>;
    ContextMenuOpening_revoker ContextMenuOpening(auto_revoke_t, Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& value) const;
    void ContextMenuOpening(event_token const& token) const;
    void SelectAll() const;
    void Select(Windows::UI::Xaml::Documents::TextPointer const& start, Windows::UI::Xaml::Documents::TextPointer const& end) const;
    Windows::UI::Xaml::Documents::TextPointer GetPositionFromPoint(Windows::Foundation::Point const& point) const;
    bool Focus(Windows::UI::Xaml::FocusState const& value) const;
    double TextIndent() const;
    void TextIndent(double value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlock> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlock<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlock2
{
    int32_t MaxLines() const;
    void MaxLines(int32_t value) const;
    Windows::UI::Xaml::TextLineBounds TextLineBounds() const;
    void TextLineBounds(Windows::UI::Xaml::TextLineBounds const& value) const;
    Windows::UI::Xaml::Media::SolidColorBrush SelectionHighlightColor() const;
    void SelectionHighlightColor(Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
    Windows::UI::Xaml::OpticalMarginAlignment OpticalMarginAlignment() const;
    void OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment const& value) const;
    bool IsColorFontEnabled() const;
    void IsColorFontEnabled(bool value) const;
    Windows::UI::Xaml::TextReadingOrder TextReadingOrder() const;
    void TextReadingOrder(Windows::UI::Xaml::TextReadingOrder const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlock2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlock2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlock3
{
    bool IsTextScaleFactorEnabled() const;
    void IsTextScaleFactorEnabled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlock3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlock3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlock4
{
    Windows::UI::Text::TextDecorations TextDecorations() const;
    void TextDecorations(Windows::UI::Text::TextDecorations const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlock4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlock4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlock5
{
    bool IsTextTrimmed() const;
    Windows::UI::Xaml::TextAlignment HorizontalTextAlignment() const;
    void HorizontalTextAlignment(Windows::UI::Xaml::TextAlignment const& value) const;
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Documents::TextHighlighter> TextHighlighters() const;
    event_token IsTextTrimmedChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichTextBlock, Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& value) const;
    using IsTextTrimmedChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichTextBlock5>;
    IsTextTrimmedChanged_revoker IsTextTrimmedChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichTextBlock, Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& value) const;
    void IsTextTrimmedChanged(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlock5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlock5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflow
{
    Windows::UI::Xaml::Controls::RichTextBlockOverflow OverflowContentTarget() const;
    void OverflowContentTarget(Windows::UI::Xaml::Controls::RichTextBlockOverflow const& value) const;
    Windows::UI::Xaml::Thickness Padding() const;
    void Padding(Windows::UI::Xaml::Thickness const& value) const;
    Windows::UI::Xaml::Controls::RichTextBlock ContentSource() const;
    bool HasOverflowContent() const;
    Windows::UI::Xaml::Documents::TextPointer ContentStart() const;
    Windows::UI::Xaml::Documents::TextPointer ContentEnd() const;
    double BaselineOffset() const;
    Windows::UI::Xaml::Documents::TextPointer GetPositionFromPoint(Windows::Foundation::Point const& point) const;
    bool Focus(Windows::UI::Xaml::FocusState const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlockOverflow> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflow<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflow2
{
    int32_t MaxLines() const;
    void MaxLines(int32_t value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlockOverflow2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflow2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflow3
{
    bool IsTextTrimmed() const;
    event_token IsTextTrimmedChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichTextBlockOverflow, Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& value) const;
    using IsTextTrimmedChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IRichTextBlockOverflow3>;
    IsTextTrimmedChanged_revoker IsTextTrimmedChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichTextBlockOverflow, Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& value) const;
    void IsTextTrimmedChanged(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlockOverflow3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflow3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflowStatics
{
    Windows::UI::Xaml::DependencyProperty OverflowContentTargetProperty() const;
    Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
    Windows::UI::Xaml::DependencyProperty HasOverflowContentProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflowStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflowStatics2
{
    Windows::UI::Xaml::DependencyProperty MaxLinesProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflowStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflowStatics3
{
    Windows::UI::Xaml::DependencyProperty IsTextTrimmedProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockOverflowStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics
{
    Windows::UI::Xaml::DependencyProperty FontSizeProperty() const;
    Windows::UI::Xaml::DependencyProperty FontFamilyProperty() const;
    Windows::UI::Xaml::DependencyProperty FontWeightProperty() const;
    Windows::UI::Xaml::DependencyProperty FontStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty FontStretchProperty() const;
    Windows::UI::Xaml::DependencyProperty ForegroundProperty() const;
    Windows::UI::Xaml::DependencyProperty TextWrappingProperty() const;
    Windows::UI::Xaml::DependencyProperty TextTrimmingProperty() const;
    Windows::UI::Xaml::DependencyProperty TextAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
    Windows::UI::Xaml::DependencyProperty LineHeightProperty() const;
    Windows::UI::Xaml::DependencyProperty LineStackingStrategyProperty() const;
    Windows::UI::Xaml::DependencyProperty CharacterSpacingProperty() const;
    Windows::UI::Xaml::DependencyProperty OverflowContentTargetProperty() const;
    Windows::UI::Xaml::DependencyProperty IsTextSelectionEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty HasOverflowContentProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedTextProperty() const;
    Windows::UI::Xaml::DependencyProperty TextIndentProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlockStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics2
{
    Windows::UI::Xaml::DependencyProperty MaxLinesProperty() const;
    Windows::UI::Xaml::DependencyProperty TextLineBoundsProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectionHighlightColorProperty() const;
    Windows::UI::Xaml::DependencyProperty OpticalMarginAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty IsColorFontEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty TextReadingOrderProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlockStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics3
{
    Windows::UI::Xaml::DependencyProperty IsTextScaleFactorEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlockStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics4
{
    Windows::UI::Xaml::DependencyProperty TextDecorationsProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlockStatics4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics5
{
    Windows::UI::Xaml::DependencyProperty IsTextTrimmedProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalTextAlignmentProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRichTextBlockStatics5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRichTextBlockStatics5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRowDefinition
{
    Windows::UI::Xaml::GridLength Height() const;
    void Height(Windows::UI::Xaml::GridLength const& value) const;
    double MaxHeight() const;
    void MaxHeight(double value) const;
    double MinHeight() const;
    void MinHeight(double value) const;
    double ActualHeight() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRowDefinition> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRowDefinition<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IRowDefinitionStatics
{
    Windows::UI::Xaml::DependencyProperty HeightProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxHeightProperty() const;
    Windows::UI::Xaml::DependencyProperty MinHeightProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IRowDefinitionStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IRowDefinitionStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IScrollContentPresenter
{
    bool CanVerticallyScroll() const;
    void CanVerticallyScroll(bool value) const;
    bool CanHorizontallyScroll() const;
    void CanHorizontallyScroll(bool value) const;
    double ExtentWidth() const;
    double ExtentHeight() const;
    double ViewportWidth() const;
    double ViewportHeight() const;
    double HorizontalOffset() const;
    double VerticalOffset() const;
    Windows::Foundation::IInspectable ScrollOwner() const;
    void ScrollOwner(Windows::Foundation::IInspectable const& value) const;
    void LineUp() const;
    void LineDown() const;
    void LineLeft() const;
    void LineRight() const;
    void PageUp() const;
    void PageDown() const;
    void PageLeft() const;
    void PageRight() const;
    void MouseWheelUp() const;
    void MouseWheelDown() const;
    void MouseWheelLeft() const;
    void MouseWheelRight() const;
    void SetHorizontalOffset(double offset) const;
    void SetVerticalOffset(double offset) const;
    Windows::Foundation::Rect MakeVisible(Windows::UI::Xaml::UIElement const& visual, Windows::Foundation::Rect const& rectangle) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IScrollContentPresenter> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollContentPresenter<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IScrollViewer
{
    Windows::UI::Xaml::Controls::ScrollBarVisibility HorizontalScrollBarVisibility() const;
    void HorizontalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility const& value) const;
    Windows::UI::Xaml::Controls::ScrollBarVisibility VerticalScrollBarVisibility() const;
    void VerticalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility const& value) const;
    bool IsHorizontalRailEnabled() const;
    void IsHorizontalRailEnabled(bool value) const;
    bool IsVerticalRailEnabled() const;
    void IsVerticalRailEnabled(bool value) const;
    bool IsHorizontalScrollChainingEnabled() const;
    void IsHorizontalScrollChainingEnabled(bool value) const;
    bool IsVerticalScrollChainingEnabled() const;
    void IsVerticalScrollChainingEnabled(bool value) const;
    bool IsZoomChainingEnabled() const;
    void IsZoomChainingEnabled(bool value) const;
    bool IsScrollInertiaEnabled() const;
    void IsScrollInertiaEnabled(bool value) const;
    bool IsZoomInertiaEnabled() const;
    void IsZoomInertiaEnabled(bool value) const;
    Windows::UI::Xaml::Controls::ScrollMode HorizontalScrollMode() const;
    void HorizontalScrollMode(Windows::UI::Xaml::Controls::ScrollMode const& value) const;
    Windows::UI::Xaml::Controls::ScrollMode VerticalScrollMode() const;
    void VerticalScrollMode(Windows::UI::Xaml::Controls::ScrollMode const& value) const;
    Windows::UI::Xaml::Controls::ZoomMode ZoomMode() const;
    void ZoomMode(Windows::UI::Xaml::Controls::ZoomMode const& value) const;
    Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment HorizontalSnapPointsAlignment() const;
    void HorizontalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment const& value) const;
    Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment VerticalSnapPointsAlignment() const;
    void VerticalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment const& value) const;
    Windows::UI::Xaml::Controls::SnapPointsType HorizontalSnapPointsType() const;
    void HorizontalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType const& value) const;
    Windows::UI::Xaml::Controls::SnapPointsType VerticalSnapPointsType() const;
    void VerticalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType const& value) const;
    Windows::UI::Xaml::Controls::SnapPointsType ZoomSnapPointsType() const;
    void ZoomSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType const& value) const;
    double HorizontalOffset() const;
    double ViewportWidth() const;
    double ScrollableWidth() const;
    Windows::UI::Xaml::Visibility ComputedHorizontalScrollBarVisibility() const;
    double ExtentWidth() const;
    double VerticalOffset() const;
    double ViewportHeight() const;
    double ScrollableHeight() const;
    Windows::UI::Xaml::Visibility ComputedVerticalScrollBarVisibility() const;
    double ExtentHeight() const;
    float MinZoomFactor() const;
    void MinZoomFactor(float value) const;
    float MaxZoomFactor() const;
    void MaxZoomFactor(float value) const;
    float ZoomFactor() const;
    Windows::Foundation::Collections::IVector<float> ZoomSnapPoints() const;
    event_token ViewChanged(Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs> const& value) const;
    using ViewChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IScrollViewer>;
    ViewChanged_revoker ViewChanged(auto_revoke_t, Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs> const& value) const;
    void ViewChanged(event_token const& token) const;
    [[deprecated("ScrollToHorizontalOffset may be altered or unavailable for releases after Windows 8.1. Instead, use ChangeView.")]] void ScrollToHorizontalOffset(double offset) const;
    [[deprecated("ScrollToVerticalOffset may be altered or unavailable for releases after Windows 8.1. Instead, use ChangeView.")]] void ScrollToVerticalOffset(double offset) const;
    [[deprecated("ZoomToFactor may be altered or unavailable for releases after Windows 8.1. Instead, use ChangeView.")]] void ZoomToFactor(float factor) const;
    void InvalidateScrollInfo() const;
    bool IsDeferredScrollingEnabled() const;
    void IsDeferredScrollingEnabled(bool value) const;
    bool BringIntoViewOnFocusChange() const;
    void BringIntoViewOnFocusChange(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IScrollViewer> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewer<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IScrollViewer2
{
    Windows::UI::Xaml::UIElement TopLeftHeader() const;
    void TopLeftHeader(Windows::UI::Xaml::UIElement const& value) const;
    Windows::UI::Xaml::UIElement LeftHeader() const;
    void LeftHeader(Windows::UI::Xaml::UIElement const& value) const;
    Windows::UI::Xaml::UIElement TopHeader() const;
    void TopHeader(Windows::UI::Xaml::UIElement const& value) const;
    event_token ViewChanging(Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs> const& value) const;
    using ViewChanging_revoker = event_revoker<Windows::UI::Xaml::Controls::IScrollViewer2>;
    ViewChanging_revoker ViewChanging(auto_revoke_t, Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs> const& value) const;
    void ViewChanging(event_token const& token) const;
    bool ChangeView(optional<double> const& horizontalOffset, optional<double> const& verticalOffset, optional<float> const& zoomFactor) const;
    bool ChangeView(optional<double> const& horizontalOffset, optional<double> const& verticalOffset, optional<float> const& zoomFactor, bool disableAnimation) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IScrollViewer2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewer2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IScrollViewer3
{
    event_token DirectManipulationStarted(Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    using DirectManipulationStarted_revoker = event_revoker<Windows::UI::Xaml::Controls::IScrollViewer3>;
    DirectManipulationStarted_revoker DirectManipulationStarted(auto_revoke_t, Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    void DirectManipulationStarted(event_token const& token) const;
    event_token DirectManipulationCompleted(Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    using DirectManipulationCompleted_revoker = event_revoker<Windows::UI::Xaml::Controls::IScrollViewer3>;
    DirectManipulationCompleted_revoker DirectManipulationCompleted(auto_revoke_t, Windows::Foundation::EventHandler<Windows::Foundation::IInspectable> const& value) const;
    void DirectManipulationCompleted(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IScrollViewer3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewer3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IScrollViewerStatics
{
    Windows::UI::Xaml::DependencyProperty HorizontalSnapPointsAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalSnapPointsAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalSnapPointsTypeProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalSnapPointsTypeProperty() const;
    Windows::UI::Xaml::DependencyProperty ZoomSnapPointsTypeProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalOffsetProperty() const;
    Windows::UI::Xaml::DependencyProperty ViewportWidthProperty() const;
    Windows::UI::Xaml::DependencyProperty ScrollableWidthProperty() const;
    Windows::UI::Xaml::DependencyProperty ComputedHorizontalScrollBarVisibilityProperty() const;
    Windows::UI::Xaml::DependencyProperty ExtentWidthProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalOffsetProperty() const;
    Windows::UI::Xaml::DependencyProperty ViewportHeightProperty() const;
    Windows::UI::Xaml::DependencyProperty ScrollableHeightProperty() const;
    Windows::UI::Xaml::DependencyProperty ComputedVerticalScrollBarVisibilityProperty() const;
    Windows::UI::Xaml::DependencyProperty ExtentHeightProperty() const;
    Windows::UI::Xaml::DependencyProperty MinZoomFactorProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxZoomFactorProperty() const;
    Windows::UI::Xaml::DependencyProperty ZoomFactorProperty() const;
    Windows::UI::Xaml::DependencyProperty ZoomSnapPointsProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalScrollBarVisibilityProperty() const;
    Windows::UI::Xaml::Controls::ScrollBarVisibility GetHorizontalScrollBarVisibility(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetHorizontalScrollBarVisibility(Windows::UI::Xaml::DependencyObject const& element, Windows::UI::Xaml::Controls::ScrollBarVisibility const& horizontalScrollBarVisibility) const;
    Windows::UI::Xaml::DependencyProperty VerticalScrollBarVisibilityProperty() const;
    Windows::UI::Xaml::Controls::ScrollBarVisibility GetVerticalScrollBarVisibility(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetVerticalScrollBarVisibility(Windows::UI::Xaml::DependencyObject const& element, Windows::UI::Xaml::Controls::ScrollBarVisibility const& verticalScrollBarVisibility) const;
    Windows::UI::Xaml::DependencyProperty IsHorizontalRailEnabledProperty() const;
    bool GetIsHorizontalRailEnabled(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetIsHorizontalRailEnabled(Windows::UI::Xaml::DependencyObject const& element, bool isHorizontalRailEnabled) const;
    Windows::UI::Xaml::DependencyProperty IsVerticalRailEnabledProperty() const;
    bool GetIsVerticalRailEnabled(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetIsVerticalRailEnabled(Windows::UI::Xaml::DependencyObject const& element, bool isVerticalRailEnabled) const;
    Windows::UI::Xaml::DependencyProperty IsHorizontalScrollChainingEnabledProperty() const;
    bool GetIsHorizontalScrollChainingEnabled(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetIsHorizontalScrollChainingEnabled(Windows::UI::Xaml::DependencyObject const& element, bool isHorizontalScrollChainingEnabled) const;
    Windows::UI::Xaml::DependencyProperty IsVerticalScrollChainingEnabledProperty() const;
    bool GetIsVerticalScrollChainingEnabled(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetIsVerticalScrollChainingEnabled(Windows::UI::Xaml::DependencyObject const& element, bool isVerticalScrollChainingEnabled) const;
    Windows::UI::Xaml::DependencyProperty IsZoomChainingEnabledProperty() const;
    bool GetIsZoomChainingEnabled(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetIsZoomChainingEnabled(Windows::UI::Xaml::DependencyObject const& element, bool isZoomChainingEnabled) const;
    Windows::UI::Xaml::DependencyProperty IsScrollInertiaEnabledProperty() const;
    bool GetIsScrollInertiaEnabled(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetIsScrollInertiaEnabled(Windows::UI::Xaml::DependencyObject const& element, bool isScrollInertiaEnabled) const;
    Windows::UI::Xaml::DependencyProperty IsZoomInertiaEnabledProperty() const;
    bool GetIsZoomInertiaEnabled(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetIsZoomInertiaEnabled(Windows::UI::Xaml::DependencyObject const& element, bool isZoomInertiaEnabled) const;
    Windows::UI::Xaml::DependencyProperty HorizontalScrollModeProperty() const;
    Windows::UI::Xaml::Controls::ScrollMode GetHorizontalScrollMode(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetHorizontalScrollMode(Windows::UI::Xaml::DependencyObject const& element, Windows::UI::Xaml::Controls::ScrollMode const& horizontalScrollMode) const;
    Windows::UI::Xaml::DependencyProperty VerticalScrollModeProperty() const;
    Windows::UI::Xaml::Controls::ScrollMode GetVerticalScrollMode(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetVerticalScrollMode(Windows::UI::Xaml::DependencyObject const& element, Windows::UI::Xaml::Controls::ScrollMode const& verticalScrollMode) const;
    Windows::UI::Xaml::DependencyProperty ZoomModeProperty() const;
    Windows::UI::Xaml::Controls::ZoomMode GetZoomMode(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetZoomMode(Windows::UI::Xaml::DependencyObject const& element, Windows::UI::Xaml::Controls::ZoomMode const& zoomMode) const;
    Windows::UI::Xaml::DependencyProperty IsDeferredScrollingEnabledProperty() const;
    bool GetIsDeferredScrollingEnabled(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetIsDeferredScrollingEnabled(Windows::UI::Xaml::DependencyObject const& element, bool isDeferredScrollingEnabled) const;
    Windows::UI::Xaml::DependencyProperty BringIntoViewOnFocusChangeProperty() const;
    bool GetBringIntoViewOnFocusChange(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetBringIntoViewOnFocusChange(Windows::UI::Xaml::DependencyObject const& element, bool bringIntoViewOnFocusChange) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IScrollViewerStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewerStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IScrollViewerStatics2
{
    Windows::UI::Xaml::DependencyProperty TopLeftHeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty LeftHeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty TopHeaderProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IScrollViewerStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewerStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IScrollViewerView
{
    double HorizontalOffset() const;
    double VerticalOffset() const;
    float ZoomFactor() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IScrollViewerView> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewerView<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IScrollViewerViewChangedEventArgs
{
    bool IsIntermediate() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewerViewChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IScrollViewerViewChangingEventArgs
{
    Windows::UI::Xaml::Controls::ScrollViewerView NextView() const;
    Windows::UI::Xaml::Controls::ScrollViewerView FinalView() const;
    bool IsInertial() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IScrollViewerViewChangingEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISearchBox
{
    bool SearchHistoryEnabled() const;
    void SearchHistoryEnabled(bool value) const;
    hstring SearchHistoryContext() const;
    void SearchHistoryContext(param::hstring const& value) const;
    hstring PlaceholderText() const;
    void PlaceholderText(param::hstring const& value) const;
    hstring QueryText() const;
    void QueryText(param::hstring const& value) const;
    bool FocusOnKeyboardInput() const;
    void FocusOnKeyboardInput(bool value) const;
    bool ChooseSuggestionOnEnter() const;
    void ChooseSuggestionOnEnter(bool value) const;
    event_token QueryChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs> const& value) const;
    using QueryChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::ISearchBox>;
    QueryChanged_revoker QueryChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs> const& value) const;
    void QueryChanged(event_token const& token) const;
    event_token SuggestionsRequested(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs> const& value) const;
    using SuggestionsRequested_revoker = event_revoker<Windows::UI::Xaml::Controls::ISearchBox>;
    SuggestionsRequested_revoker SuggestionsRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs> const& value) const;
    void SuggestionsRequested(event_token const& token) const;
    event_token QuerySubmitted(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs> const& value) const;
    using QuerySubmitted_revoker = event_revoker<Windows::UI::Xaml::Controls::ISearchBox>;
    QuerySubmitted_revoker QuerySubmitted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs> const& value) const;
    void QuerySubmitted(event_token const& token) const;
    event_token ResultSuggestionChosen(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs> const& value) const;
    using ResultSuggestionChosen_revoker = event_revoker<Windows::UI::Xaml::Controls::ISearchBox>;
    ResultSuggestionChosen_revoker ResultSuggestionChosen(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs> const& value) const;
    void ResultSuggestionChosen(event_token const& token) const;
    event_token PrepareForFocusOnKeyboardInput(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::RoutedEventArgs> const& value) const;
    using PrepareForFocusOnKeyboardInput_revoker = event_revoker<Windows::UI::Xaml::Controls::ISearchBox>;
    PrepareForFocusOnKeyboardInput_revoker PrepareForFocusOnKeyboardInput(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::RoutedEventArgs> const& value) const;
    void PrepareForFocusOnKeyboardInput(event_token const& token) const;
    void SetLocalContentSuggestionSettings(Windows::ApplicationModel::Search::LocalContentSuggestionSettings const& settings) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISearchBox> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISearchBox<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISearchBoxFactory
{
    Windows::UI::Xaml::Controls::SearchBox CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISearchBoxFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISearchBoxFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISearchBoxQueryChangedEventArgs
{
    hstring QueryText() const;
    hstring Language() const;
    Windows::ApplicationModel::Search::SearchQueryLinguisticDetails LinguisticDetails() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISearchBoxQueryChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISearchBoxQuerySubmittedEventArgs
{
    hstring QueryText() const;
    hstring Language() const;
    Windows::ApplicationModel::Search::SearchQueryLinguisticDetails LinguisticDetails() const;
    Windows::System::VirtualKeyModifiers KeyModifiers() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISearchBoxQuerySubmittedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISearchBoxResultSuggestionChosenEventArgs
{
    hstring Tag() const;
    Windows::System::VirtualKeyModifiers KeyModifiers() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISearchBoxResultSuggestionChosenEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISearchBoxStatics
{
    Windows::UI::Xaml::DependencyProperty SearchHistoryEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty SearchHistoryContextProperty() const;
    Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty() const;
    Windows::UI::Xaml::DependencyProperty QueryTextProperty() const;
    Windows::UI::Xaml::DependencyProperty FocusOnKeyboardInputProperty() const;
    Windows::UI::Xaml::DependencyProperty ChooseSuggestionOnEnterProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISearchBoxStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISearchBoxStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISearchBoxSuggestionsRequestedEventArgs
{
    hstring QueryText() const;
    hstring Language() const;
    Windows::ApplicationModel::Search::SearchQueryLinguisticDetails LinguisticDetails() const;
    Windows::ApplicationModel::Search::SearchSuggestionsRequest Request() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISearchBoxSuggestionsRequestedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISectionsInViewChangedEventArgs
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> AddedSections() const;
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> RemovedSections() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISectionsInViewChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISectionsInViewChangedEventArgsFactory
{
};
template <> struct consume<Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISectionsInViewChangedEventArgsFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISelectionChangedEventArgs
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> AddedItems() const;
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> RemovedItems() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISelectionChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISelectionChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISelectionChangedEventArgsFactory
{
    Windows::UI::Xaml::Controls::SelectionChangedEventArgs CreateInstanceWithRemovedItemsAndAddedItems(param::vector<Windows::Foundation::IInspectable> const& removedItems, param::vector<Windows::Foundation::IInspectable> const& addedItems, Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISelectionChangedEventArgsFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISemanticZoom
{
    Windows::UI::Xaml::Controls::ISemanticZoomInformation ZoomedInView() const;
    void ZoomedInView(Windows::UI::Xaml::Controls::ISemanticZoomInformation const& value) const;
    Windows::UI::Xaml::Controls::ISemanticZoomInformation ZoomedOutView() const;
    void ZoomedOutView(Windows::UI::Xaml::Controls::ISemanticZoomInformation const& value) const;
    bool IsZoomedInViewActive() const;
    void IsZoomedInViewActive(bool value) const;
    bool CanChangeViews() const;
    void CanChangeViews(bool value) const;
    event_token ViewChangeStarted(Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler const& value) const;
    using ViewChangeStarted_revoker = event_revoker<Windows::UI::Xaml::Controls::ISemanticZoom>;
    ViewChangeStarted_revoker ViewChangeStarted(auto_revoke_t, Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler const& value) const;
    void ViewChangeStarted(event_token const& token) const;
    event_token ViewChangeCompleted(Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler const& value) const;
    using ViewChangeCompleted_revoker = event_revoker<Windows::UI::Xaml::Controls::ISemanticZoom>;
    ViewChangeCompleted_revoker ViewChangeCompleted(auto_revoke_t, Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler const& value) const;
    void ViewChangeCompleted(event_token const& token) const;
    void ToggleActiveView() const;
    bool IsZoomOutButtonEnabled() const;
    void IsZoomOutButtonEnabled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISemanticZoom> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISemanticZoom<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISemanticZoomInformation
{
    Windows::UI::Xaml::Controls::SemanticZoom SemanticZoomOwner() const;
    void SemanticZoomOwner(Windows::UI::Xaml::Controls::SemanticZoom const& value) const;
    bool IsActiveView() const;
    void IsActiveView(bool value) const;
    bool IsZoomedInView() const;
    void IsZoomedInView(bool value) const;
    void InitializeViewChange() const;
    void CompleteViewChange() const;
    void MakeVisible(Windows::UI::Xaml::Controls::SemanticZoomLocation const& item) const;
    void StartViewChangeFrom(Windows::UI::Xaml::Controls::SemanticZoomLocation const& source, Windows::UI::Xaml::Controls::SemanticZoomLocation const& destination) const;
    void StartViewChangeTo(Windows::UI::Xaml::Controls::SemanticZoomLocation const& source, Windows::UI::Xaml::Controls::SemanticZoomLocation const& destination) const;
    void CompleteViewChangeFrom(Windows::UI::Xaml::Controls::SemanticZoomLocation const& source, Windows::UI::Xaml::Controls::SemanticZoomLocation const& destination) const;
    void CompleteViewChangeTo(Windows::UI::Xaml::Controls::SemanticZoomLocation const& source, Windows::UI::Xaml::Controls::SemanticZoomLocation const& destination) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISemanticZoomInformation> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISemanticZoomInformation<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISemanticZoomLocation
{
    Windows::Foundation::IInspectable Item() const;
    void Item(Windows::Foundation::IInspectable const& value) const;
    Windows::Foundation::Rect Bounds() const;
    void Bounds(Windows::Foundation::Rect const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISemanticZoomLocation> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISemanticZoomLocation<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISemanticZoomStatics
{
    Windows::UI::Xaml::DependencyProperty ZoomedInViewProperty() const;
    Windows::UI::Xaml::DependencyProperty ZoomedOutViewProperty() const;
    Windows::UI::Xaml::DependencyProperty IsZoomedInViewActiveProperty() const;
    Windows::UI::Xaml::DependencyProperty CanChangeViewsProperty() const;
    Windows::UI::Xaml::DependencyProperty IsZoomOutButtonEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISemanticZoomStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISemanticZoomStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISemanticZoomViewChangedEventArgs
{
    bool IsSourceZoomedInView() const;
    void IsSourceZoomedInView(bool value) const;
    Windows::UI::Xaml::Controls::SemanticZoomLocation SourceItem() const;
    void SourceItem(Windows::UI::Xaml::Controls::SemanticZoomLocation const& value) const;
    Windows::UI::Xaml::Controls::SemanticZoomLocation DestinationItem() const;
    void DestinationItem(Windows::UI::Xaml::Controls::SemanticZoomLocation const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISemanticZoomViewChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISettingsFlyout
{
    hstring Title() const;
    void Title(param::hstring const& value) const;
    Windows::UI::Xaml::Media::Brush HeaderBackground() const;
    void HeaderBackground(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush HeaderForeground() const;
    void HeaderForeground(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::ImageSource IconSource() const;
    void IconSource(Windows::UI::Xaml::Media::ImageSource const& value) const;
    Windows::UI::Xaml::Controls::Primitives::SettingsFlyoutTemplateSettings TemplateSettings() const;
    event_token BackClick(Windows::UI::Xaml::Controls::BackClickEventHandler const& value) const;
    using BackClick_revoker = event_revoker<Windows::UI::Xaml::Controls::ISettingsFlyout>;
    BackClick_revoker BackClick(auto_revoke_t, Windows::UI::Xaml::Controls::BackClickEventHandler const& value) const;
    void BackClick(event_token const& token) const;
    void Show() const;
    void ShowIndependent() const;
    void Hide() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISettingsFlyout> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISettingsFlyout<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISettingsFlyoutFactory
{
    Windows::UI::Xaml::Controls::SettingsFlyout CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISettingsFlyoutFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISettingsFlyoutFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISettingsFlyoutStatics
{
    Windows::UI::Xaml::DependencyProperty TitleProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderBackgroundProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderForegroundProperty() const;
    Windows::UI::Xaml::DependencyProperty IconSourceProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISettingsFlyoutStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISettingsFlyoutStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISlider
{
    double IntermediateValue() const;
    void IntermediateValue(double value) const;
    double StepFrequency() const;
    void StepFrequency(double value) const;
    Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo SnapsTo() const;
    void SnapsTo(Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo const& value) const;
    double TickFrequency() const;
    void TickFrequency(double value) const;
    Windows::UI::Xaml::Controls::Primitives::TickPlacement TickPlacement() const;
    void TickPlacement(Windows::UI::Xaml::Controls::Primitives::TickPlacement const& value) const;
    Windows::UI::Xaml::Controls::Orientation Orientation() const;
    void Orientation(Windows::UI::Xaml::Controls::Orientation const& value) const;
    bool IsDirectionReversed() const;
    void IsDirectionReversed(bool value) const;
    bool IsThumbToolTipEnabled() const;
    void IsThumbToolTipEnabled(bool value) const;
    Windows::UI::Xaml::Data::IValueConverter ThumbToolTipValueConverter() const;
    void ThumbToolTipValueConverter(Windows::UI::Xaml::Data::IValueConverter const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISlider> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISlider<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISlider2
{
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISlider2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISlider2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISliderFactory
{
    Windows::UI::Xaml::Controls::Slider CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISliderFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISliderFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISliderStatics
{
    Windows::UI::Xaml::DependencyProperty IntermediateValueProperty() const;
    Windows::UI::Xaml::DependencyProperty StepFrequencyProperty() const;
    Windows::UI::Xaml::DependencyProperty SnapsToProperty() const;
    Windows::UI::Xaml::DependencyProperty TickFrequencyProperty() const;
    Windows::UI::Xaml::DependencyProperty TickPlacementProperty() const;
    Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
    Windows::UI::Xaml::DependencyProperty IsDirectionReversedProperty() const;
    Windows::UI::Xaml::DependencyProperty IsThumbToolTipEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty ThumbToolTipValueConverterProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISliderStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISliderStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISliderStatics2
{
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISliderStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISliderStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISplitView
{
    Windows::UI::Xaml::UIElement Content() const;
    void Content(Windows::UI::Xaml::UIElement const& value) const;
    Windows::UI::Xaml::UIElement Pane() const;
    void Pane(Windows::UI::Xaml::UIElement const& value) const;
    bool IsPaneOpen() const;
    void IsPaneOpen(bool value) const;
    double OpenPaneLength() const;
    void OpenPaneLength(double value) const;
    double CompactPaneLength() const;
    void CompactPaneLength(double value) const;
    Windows::UI::Xaml::Controls::SplitViewPanePlacement PanePlacement() const;
    void PanePlacement(Windows::UI::Xaml::Controls::SplitViewPanePlacement const& value) const;
    Windows::UI::Xaml::Controls::SplitViewDisplayMode DisplayMode() const;
    void DisplayMode(Windows::UI::Xaml::Controls::SplitViewDisplayMode const& value) const;
    Windows::UI::Xaml::Controls::Primitives::SplitViewTemplateSettings TemplateSettings() const;
    Windows::UI::Xaml::Media::Brush PaneBackground() const;
    void PaneBackground(Windows::UI::Xaml::Media::Brush const& value) const;
    event_token PaneClosing(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs> const& value) const;
    using PaneClosing_revoker = event_revoker<Windows::UI::Xaml::Controls::ISplitView>;
    PaneClosing_revoker PaneClosing(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs> const& value) const;
    void PaneClosing(event_token const& token) const;
    event_token PaneClosed(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::Foundation::IInspectable> const& value) const;
    using PaneClosed_revoker = event_revoker<Windows::UI::Xaml::Controls::ISplitView>;
    PaneClosed_revoker PaneClosed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::Foundation::IInspectable> const& value) const;
    void PaneClosed(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISplitView> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitView<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISplitView2
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode LightDismissOverlayMode() const;
    void LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISplitView2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitView2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISplitView3
{
    event_token PaneOpening(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::Foundation::IInspectable> const& value) const;
    using PaneOpening_revoker = event_revoker<Windows::UI::Xaml::Controls::ISplitView3>;
    PaneOpening_revoker PaneOpening(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::Foundation::IInspectable> const& value) const;
    void PaneOpening(event_token const& token) const;
    event_token PaneOpened(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::Foundation::IInspectable> const& value) const;
    using PaneOpened_revoker = event_revoker<Windows::UI::Xaml::Controls::ISplitView3>;
    PaneOpened_revoker PaneOpened(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::Foundation::IInspectable> const& value) const;
    void PaneOpened(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISplitView3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitView3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISplitViewFactory
{
    Windows::UI::Xaml::Controls::SplitView CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISplitViewFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitViewFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISplitViewPaneClosingEventArgs
{
    bool Cancel() const;
    void Cancel(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitViewPaneClosingEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISplitViewStatics
{
    Windows::UI::Xaml::DependencyProperty ContentProperty() const;
    Windows::UI::Xaml::DependencyProperty PaneProperty() const;
    Windows::UI::Xaml::DependencyProperty IsPaneOpenProperty() const;
    Windows::UI::Xaml::DependencyProperty OpenPaneLengthProperty() const;
    Windows::UI::Xaml::DependencyProperty CompactPaneLengthProperty() const;
    Windows::UI::Xaml::DependencyProperty PanePlacementProperty() const;
    Windows::UI::Xaml::DependencyProperty DisplayModeProperty() const;
    Windows::UI::Xaml::DependencyProperty TemplateSettingsProperty() const;
    Windows::UI::Xaml::DependencyProperty PaneBackgroundProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISplitViewStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitViewStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISplitViewStatics2
{
    Windows::UI::Xaml::DependencyProperty LightDismissOverlayModeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISplitViewStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISplitViewStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IStackPanel
{
    bool AreScrollSnapPointsRegular() const;
    void AreScrollSnapPointsRegular(bool value) const;
    Windows::UI::Xaml::Controls::Orientation Orientation() const;
    void Orientation(Windows::UI::Xaml::Controls::Orientation const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IStackPanel> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanel<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IStackPanel2
{
    Windows::UI::Xaml::Media::Brush BorderBrush() const;
    void BorderBrush(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Thickness BorderThickness() const;
    void BorderThickness(Windows::UI::Xaml::Thickness const& value) const;
    Windows::UI::Xaml::CornerRadius CornerRadius() const;
    void CornerRadius(Windows::UI::Xaml::CornerRadius const& value) const;
    Windows::UI::Xaml::Thickness Padding() const;
    void Padding(Windows::UI::Xaml::Thickness const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IStackPanel2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanel2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IStackPanel4
{
    double Spacing() const;
    void Spacing(double value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IStackPanel4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanel4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IStackPanelFactory
{
    Windows::UI::Xaml::Controls::StackPanel CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IStackPanelFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanelFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IStackPanelStatics
{
    Windows::UI::Xaml::DependencyProperty AreScrollSnapPointsRegularProperty() const;
    Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IStackPanelStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanelStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IStackPanelStatics2
{
    Windows::UI::Xaml::DependencyProperty BorderBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty BorderThicknessProperty() const;
    Windows::UI::Xaml::DependencyProperty CornerRadiusProperty() const;
    Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IStackPanelStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanelStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IStackPanelStatics4
{
    Windows::UI::Xaml::DependencyProperty SpacingProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IStackPanelStatics4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStackPanelStatics4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IStyleSelector
{
    Windows::UI::Xaml::Style SelectStyle(Windows::Foundation::IInspectable const& item, Windows::UI::Xaml::DependencyObject const& container) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IStyleSelector> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStyleSelector<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IStyleSelectorFactory
{
    Windows::UI::Xaml::Controls::StyleSelector CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IStyleSelectorFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStyleSelectorFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IStyleSelectorOverrides
{
    Windows::UI::Xaml::Style SelectStyleCore(Windows::Foundation::IInspectable const& item, Windows::UI::Xaml::DependencyObject const& container) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IStyleSelectorOverrides> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IStyleSelectorOverrides<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwapChainBackgroundPanel
{
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwapChainBackgroundPanel<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwapChainBackgroundPanel2
{
    Windows::UI::Core::CoreIndependentInputSource CreateCoreIndependentInputSource(Windows::UI::Core::CoreInputDeviceTypes const& deviceTypes) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwapChainBackgroundPanel2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwapChainBackgroundPanelFactory
{
    Windows::UI::Xaml::Controls::SwapChainBackgroundPanel CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwapChainBackgroundPanelFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwapChainPanel
{
    float CompositionScaleX() const;
    float CompositionScaleY() const;
    event_token CompositionScaleChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SwapChainPanel, Windows::Foundation::IInspectable> const& value) const;
    using CompositionScaleChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::ISwapChainPanel>;
    CompositionScaleChanged_revoker CompositionScaleChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SwapChainPanel, Windows::Foundation::IInspectable> const& value) const;
    void CompositionScaleChanged(event_token const& token) const;
    Windows::UI::Core::CoreIndependentInputSource CreateCoreIndependentInputSource(Windows::UI::Core::CoreInputDeviceTypes const& deviceTypes) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwapChainPanel> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwapChainPanel<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwapChainPanelFactory
{
    Windows::UI::Xaml::Controls::SwapChainPanel CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwapChainPanelFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwapChainPanelFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwapChainPanelStatics
{
    Windows::UI::Xaml::DependencyProperty CompositionScaleXProperty() const;
    Windows::UI::Xaml::DependencyProperty CompositionScaleYProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwapChainPanelStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwapChainPanelStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwipeControl
{
    Windows::UI::Xaml::Controls::SwipeItems LeftItems() const;
    void LeftItems(Windows::UI::Xaml::Controls::SwipeItems const& value) const;
    Windows::UI::Xaml::Controls::SwipeItems RightItems() const;
    void RightItems(Windows::UI::Xaml::Controls::SwipeItems const& value) const;
    Windows::UI::Xaml::Controls::SwipeItems TopItems() const;
    void TopItems(Windows::UI::Xaml::Controls::SwipeItems const& value) const;
    Windows::UI::Xaml::Controls::SwipeItems BottomItems() const;
    void BottomItems(Windows::UI::Xaml::Controls::SwipeItems const& value) const;
    void Close() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwipeControl> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeControl<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwipeControlFactory
{
    Windows::UI::Xaml::Controls::SwipeControl CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwipeControlFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeControlFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwipeControlStatics
{
    Windows::UI::Xaml::DependencyProperty LeftItemsProperty() const;
    Windows::UI::Xaml::DependencyProperty RightItemsProperty() const;
    Windows::UI::Xaml::DependencyProperty TopItemsProperty() const;
    Windows::UI::Xaml::DependencyProperty BottomItemsProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwipeControlStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeControlStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwipeItem
{
    hstring Text() const;
    void Text(param::hstring const& value) const;
    Windows::UI::Xaml::Controls::IconSource IconSource() const;
    void IconSource(Windows::UI::Xaml::Controls::IconSource const& value) const;
    Windows::UI::Xaml::Media::Brush Background() const;
    void Background(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush Foreground() const;
    void Foreground(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Input::ICommand Command() const;
    void Command(Windows::UI::Xaml::Input::ICommand const& value) const;
    Windows::Foundation::IInspectable CommandParameter() const;
    void CommandParameter(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::Controls::SwipeBehaviorOnInvoked BehaviorOnInvoked() const;
    void BehaviorOnInvoked(Windows::UI::Xaml::Controls::SwipeBehaviorOnInvoked const& value) const;
    event_token Invoked(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SwipeItem, Windows::UI::Xaml::Controls::SwipeItemInvokedEventArgs> const& value) const;
    using Invoked_revoker = event_revoker<Windows::UI::Xaml::Controls::ISwipeItem>;
    Invoked_revoker Invoked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SwipeItem, Windows::UI::Xaml::Controls::SwipeItemInvokedEventArgs> const& value) const;
    void Invoked(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwipeItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwipeItemFactory
{
    Windows::UI::Xaml::Controls::SwipeItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwipeItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwipeItemInvokedEventArgs
{
    Windows::UI::Xaml::Controls::SwipeControl SwipeControl() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwipeItemInvokedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeItemInvokedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwipeItemStatics
{
    Windows::UI::Xaml::DependencyProperty IconSourceProperty() const;
    Windows::UI::Xaml::DependencyProperty TextProperty() const;
    Windows::UI::Xaml::DependencyProperty BackgroundProperty() const;
    Windows::UI::Xaml::DependencyProperty ForegroundProperty() const;
    Windows::UI::Xaml::DependencyProperty CommandProperty() const;
    Windows::UI::Xaml::DependencyProperty CommandParameterProperty() const;
    Windows::UI::Xaml::DependencyProperty BehaviorOnInvokedProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwipeItemStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeItemStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwipeItems
{
    Windows::UI::Xaml::Controls::SwipeMode Mode() const;
    void Mode(Windows::UI::Xaml::Controls::SwipeMode const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwipeItems> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeItems<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwipeItemsFactory
{
    Windows::UI::Xaml::Controls::SwipeItems CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwipeItemsFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeItemsFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISwipeItemsStatics
{
    Windows::UI::Xaml::DependencyProperty ModeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISwipeItemsStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISwipeItemsStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISymbolIcon
{
    Windows::UI::Xaml::Controls::Symbol Symbol() const;
    void Symbol(Windows::UI::Xaml::Controls::Symbol const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISymbolIcon> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISymbolIcon<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISymbolIconFactory
{
    Windows::UI::Xaml::Controls::SymbolIcon CreateInstanceWithSymbol(Windows::UI::Xaml::Controls::Symbol const& symbol) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISymbolIconFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISymbolIconFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISymbolIconSource
{
    Windows::UI::Xaml::Controls::Symbol Symbol() const;
    void Symbol(Windows::UI::Xaml::Controls::Symbol const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISymbolIconSource> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISymbolIconSource<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISymbolIconSourceFactory
{
    Windows::UI::Xaml::Controls::SymbolIconSource CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISymbolIconSourceFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISymbolIconSourceFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISymbolIconSourceStatics
{
    Windows::UI::Xaml::DependencyProperty SymbolProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISymbolIconSourceStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISymbolIconSourceStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ISymbolIconStatics
{
    Windows::UI::Xaml::DependencyProperty SymbolProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ISymbolIconStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ISymbolIconStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBlock
{
    double FontSize() const;
    void FontSize(double value) const;
    Windows::UI::Xaml::Media::FontFamily FontFamily() const;
    void FontFamily(Windows::UI::Xaml::Media::FontFamily const& value) const;
    Windows::UI::Text::FontWeight FontWeight() const;
    void FontWeight(Windows::UI::Text::FontWeight const& value) const;
    Windows::UI::Text::FontStyle FontStyle() const;
    void FontStyle(Windows::UI::Text::FontStyle const& value) const;
    Windows::UI::Text::FontStretch FontStretch() const;
    void FontStretch(Windows::UI::Text::FontStretch const& value) const;
    int32_t CharacterSpacing() const;
    void CharacterSpacing(int32_t value) const;
    Windows::UI::Xaml::Media::Brush Foreground() const;
    void Foreground(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::TextWrapping TextWrapping() const;
    void TextWrapping(Windows::UI::Xaml::TextWrapping const& value) const;
    Windows::UI::Xaml::TextTrimming TextTrimming() const;
    void TextTrimming(Windows::UI::Xaml::TextTrimming const& value) const;
    Windows::UI::Xaml::TextAlignment TextAlignment() const;
    void TextAlignment(Windows::UI::Xaml::TextAlignment const& value) const;
    hstring Text() const;
    void Text(param::hstring const& value) const;
    Windows::UI::Xaml::Documents::InlineCollection Inlines() const;
    Windows::UI::Xaml::Thickness Padding() const;
    void Padding(Windows::UI::Xaml::Thickness const& value) const;
    double LineHeight() const;
    void LineHeight(double value) const;
    Windows::UI::Xaml::LineStackingStrategy LineStackingStrategy() const;
    void LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy const& value) const;
    bool IsTextSelectionEnabled() const;
    void IsTextSelectionEnabled(bool value) const;
    hstring SelectedText() const;
    Windows::UI::Xaml::Documents::TextPointer ContentStart() const;
    Windows::UI::Xaml::Documents::TextPointer ContentEnd() const;
    Windows::UI::Xaml::Documents::TextPointer SelectionStart() const;
    Windows::UI::Xaml::Documents::TextPointer SelectionEnd() const;
    double BaselineOffset() const;
    event_token SelectionChanged(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using SelectionChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::ITextBlock>;
    SelectionChanged_revoker SelectionChanged(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void SelectionChanged(event_token const& token) const;
    event_token ContextMenuOpening(Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& value) const;
    using ContextMenuOpening_revoker = event_revoker<Windows::UI::Xaml::Controls::ITextBlock>;
    ContextMenuOpening_revoker ContextMenuOpening(auto_revoke_t, Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& value) const;
    void ContextMenuOpening(event_token const& token) const;
    void SelectAll() const;
    void Select(Windows::UI::Xaml::Documents::TextPointer const& start, Windows::UI::Xaml::Documents::TextPointer const& end) const;
    bool Focus(Windows::UI::Xaml::FocusState const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBlock> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlock<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBlock2
{
    Windows::UI::Xaml::Media::SolidColorBrush SelectionHighlightColor() const;
    void SelectionHighlightColor(Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
    int32_t MaxLines() const;
    void MaxLines(int32_t value) const;
    Windows::UI::Xaml::TextLineBounds TextLineBounds() const;
    void TextLineBounds(Windows::UI::Xaml::TextLineBounds const& value) const;
    Windows::UI::Xaml::OpticalMarginAlignment OpticalMarginAlignment() const;
    void OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment const& value) const;
    bool IsColorFontEnabled() const;
    void IsColorFontEnabled(bool value) const;
    Windows::UI::Xaml::TextReadingOrder TextReadingOrder() const;
    void TextReadingOrder(Windows::UI::Xaml::TextReadingOrder const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBlock2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlock2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBlock3
{
    bool IsTextScaleFactorEnabled() const;
    void IsTextScaleFactorEnabled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBlock3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlock3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBlock4
{
    Windows::UI::Composition::CompositionBrush GetAlphaMask() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBlock4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlock4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBlock5
{
    Windows::UI::Text::TextDecorations TextDecorations() const;
    void TextDecorations(Windows::UI::Text::TextDecorations const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBlock5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlock5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBlock6
{
    bool IsTextTrimmed() const;
    Windows::UI::Xaml::TextAlignment HorizontalTextAlignment() const;
    void HorizontalTextAlignment(Windows::UI::Xaml::TextAlignment const& value) const;
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Documents::TextHighlighter> TextHighlighters() const;
    event_token IsTextTrimmedChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBlock, Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& value) const;
    using IsTextTrimmedChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::ITextBlock6>;
    IsTextTrimmedChanged_revoker IsTextTrimmedChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBlock, Windows::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& value) const;
    void IsTextTrimmedChanged(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBlock6> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlock6<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBlockStatics
{
    Windows::UI::Xaml::DependencyProperty FontSizeProperty() const;
    Windows::UI::Xaml::DependencyProperty FontFamilyProperty() const;
    Windows::UI::Xaml::DependencyProperty FontWeightProperty() const;
    Windows::UI::Xaml::DependencyProperty FontStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty FontStretchProperty() const;
    Windows::UI::Xaml::DependencyProperty CharacterSpacingProperty() const;
    Windows::UI::Xaml::DependencyProperty ForegroundProperty() const;
    Windows::UI::Xaml::DependencyProperty TextWrappingProperty() const;
    Windows::UI::Xaml::DependencyProperty TextTrimmingProperty() const;
    Windows::UI::Xaml::DependencyProperty TextAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty TextProperty() const;
    Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
    Windows::UI::Xaml::DependencyProperty LineHeightProperty() const;
    Windows::UI::Xaml::DependencyProperty LineStackingStrategyProperty() const;
    Windows::UI::Xaml::DependencyProperty IsTextSelectionEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedTextProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBlockStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlockStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBlockStatics2
{
    Windows::UI::Xaml::DependencyProperty SelectionHighlightColorProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxLinesProperty() const;
    Windows::UI::Xaml::DependencyProperty TextLineBoundsProperty() const;
    Windows::UI::Xaml::DependencyProperty OpticalMarginAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty IsColorFontEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty TextReadingOrderProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBlockStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlockStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBlockStatics3
{
    Windows::UI::Xaml::DependencyProperty IsTextScaleFactorEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBlockStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlockStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBlockStatics5
{
    Windows::UI::Xaml::DependencyProperty TextDecorationsProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBlockStatics5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlockStatics5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBlockStatics6
{
    Windows::UI::Xaml::DependencyProperty IsTextTrimmedProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalTextAlignmentProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBlockStatics6> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBlockStatics6<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBox
{
    hstring Text() const;
    void Text(param::hstring const& value) const;
    hstring SelectedText() const;
    void SelectedText(param::hstring const& value) const;
    int32_t SelectionLength() const;
    void SelectionLength(int32_t value) const;
    int32_t SelectionStart() const;
    void SelectionStart(int32_t value) const;
    int32_t MaxLength() const;
    void MaxLength(int32_t value) const;
    bool IsReadOnly() const;
    void IsReadOnly(bool value) const;
    bool AcceptsReturn() const;
    void AcceptsReturn(bool value) const;
    Windows::UI::Xaml::TextAlignment TextAlignment() const;
    void TextAlignment(Windows::UI::Xaml::TextAlignment const& value) const;
    Windows::UI::Xaml::TextWrapping TextWrapping() const;
    void TextWrapping(Windows::UI::Xaml::TextWrapping const& value) const;
    bool IsSpellCheckEnabled() const;
    void IsSpellCheckEnabled(bool value) const;
    bool IsTextPredictionEnabled() const;
    void IsTextPredictionEnabled(bool value) const;
    Windows::UI::Xaml::Input::InputScope InputScope() const;
    void InputScope(Windows::UI::Xaml::Input::InputScope const& value) const;
    event_token TextChanged(Windows::UI::Xaml::Controls::TextChangedEventHandler const& value) const;
    using TextChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::ITextBox>;
    TextChanged_revoker TextChanged(auto_revoke_t, Windows::UI::Xaml::Controls::TextChangedEventHandler const& value) const;
    void TextChanged(event_token const& token) const;
    event_token SelectionChanged(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using SelectionChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::ITextBox>;
    SelectionChanged_revoker SelectionChanged(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void SelectionChanged(event_token const& token) const;
    event_token ContextMenuOpening(Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& value) const;
    using ContextMenuOpening_revoker = event_revoker<Windows::UI::Xaml::Controls::ITextBox>;
    ContextMenuOpening_revoker ContextMenuOpening(auto_revoke_t, Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& value) const;
    void ContextMenuOpening(event_token const& token) const;
    void Select(int32_t start, int32_t length) const;
    void SelectAll() const;
    Windows::Foundation::Rect GetRectFromCharacterIndex(int32_t charIndex, bool trailingEdge) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBox> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBox<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBox2
{
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    hstring PlaceholderText() const;
    void PlaceholderText(param::hstring const& value) const;
    Windows::UI::Xaml::Media::SolidColorBrush SelectionHighlightColor() const;
    void SelectionHighlightColor(Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
    bool PreventKeyboardDisplayOnProgrammaticFocus() const;
    void PreventKeyboardDisplayOnProgrammaticFocus(bool value) const;
    bool IsColorFontEnabled() const;
    void IsColorFontEnabled(bool value) const;
    event_token Paste(Windows::UI::Xaml::Controls::TextControlPasteEventHandler const& value) const;
    using Paste_revoker = event_revoker<Windows::UI::Xaml::Controls::ITextBox2>;
    Paste_revoker Paste(auto_revoke_t, Windows::UI::Xaml::Controls::TextControlPasteEventHandler const& value) const;
    void Paste(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBox2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBox2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBox3
{
    event_token TextCompositionStarted(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> const& value) const;
    using TextCompositionStarted_revoker = event_revoker<Windows::UI::Xaml::Controls::ITextBox3>;
    TextCompositionStarted_revoker TextCompositionStarted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> const& value) const;
    void TextCompositionStarted(event_token const& token) const;
    event_token TextCompositionChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> const& value) const;
    using TextCompositionChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::ITextBox3>;
    TextCompositionChanged_revoker TextCompositionChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> const& value) const;
    void TextCompositionChanged(event_token const& token) const;
    event_token TextCompositionEnded(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> const& value) const;
    using TextCompositionEnded_revoker = event_revoker<Windows::UI::Xaml::Controls::ITextBox3>;
    TextCompositionEnded_revoker TextCompositionEnded(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> const& value) const;
    void TextCompositionEnded(event_token const& token) const;
    Windows::UI::Xaml::TextReadingOrder TextReadingOrder() const;
    void TextReadingOrder(Windows::UI::Xaml::TextReadingOrder const& value) const;
    Windows::UI::Xaml::Controls::CandidateWindowAlignment DesiredCandidateWindowAlignment() const;
    void DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment const& value) const;
    event_token CandidateWindowBoundsChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> const& value) const;
    using CandidateWindowBoundsChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::ITextBox3>;
    CandidateWindowBoundsChanged_revoker CandidateWindowBoundsChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> const& value) const;
    void CandidateWindowBoundsChanged(event_token const& token) const;
    event_token TextChanging(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs> const& value) const;
    using TextChanging_revoker = event_revoker<Windows::UI::Xaml::Controls::ITextBox3>;
    TextChanging_revoker TextChanging(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs> const& value) const;
    void TextChanging(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBox3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBox3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBox4
{
    Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> GetLinguisticAlternativesAsync() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBox4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBox4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBox5
{
    Windows::UI::Xaml::Media::SolidColorBrush SelectionHighlightColorWhenNotFocused() const;
    void SelectionHighlightColorWhenNotFocused(Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBox5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBox5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBox6
{
    Windows::UI::Xaml::TextAlignment HorizontalTextAlignment() const;
    void HorizontalTextAlignment(Windows::UI::Xaml::TextAlignment const& value) const;
    Windows::UI::Xaml::Controls::CharacterCasing CharacterCasing() const;
    void CharacterCasing(Windows::UI::Xaml::Controls::CharacterCasing const& value) const;
    Windows::UI::Xaml::Media::Brush PlaceholderForeground() const;
    void PlaceholderForeground(Windows::UI::Xaml::Media::Brush const& value) const;
    event_token CopyingToClipboard(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs> const& value) const;
    using CopyingToClipboard_revoker = event_revoker<Windows::UI::Xaml::Controls::ITextBox6>;
    CopyingToClipboard_revoker CopyingToClipboard(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs> const& value) const;
    void CopyingToClipboard(event_token const& token) const;
    event_token CuttingToClipboard(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs> const& value) const;
    using CuttingToClipboard_revoker = event_revoker<Windows::UI::Xaml::Controls::ITextBox6>;
    CuttingToClipboard_revoker CuttingToClipboard(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs> const& value) const;
    void CuttingToClipboard(event_token const& token) const;
    event_token BeforeTextChanging(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs> const& value) const;
    using BeforeTextChanging_revoker = event_revoker<Windows::UI::Xaml::Controls::ITextBox6>;
    BeforeTextChanging_revoker BeforeTextChanging(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs> const& value) const;
    void BeforeTextChanging(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBox6> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBox6<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBox7
{
    Windows::UI::Xaml::Controls::HandwritingView HandwritingView() const;
    void HandwritingView(Windows::UI::Xaml::Controls::HandwritingView const& value) const;
    bool IsHandwritingViewEnabled() const;
    void IsHandwritingViewEnabled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBox7> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBox7<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBoxBeforeTextChangingEventArgs
{
    hstring NewText() const;
    bool Cancel() const;
    void Cancel(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxBeforeTextChangingEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBoxFactory
{
    Windows::UI::Xaml::Controls::TextBox CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBoxFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBoxStatics
{
    Windows::UI::Xaml::DependencyProperty TextProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxLengthProperty() const;
    Windows::UI::Xaml::DependencyProperty IsReadOnlyProperty() const;
    Windows::UI::Xaml::DependencyProperty AcceptsReturnProperty() const;
    Windows::UI::Xaml::DependencyProperty TextAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty TextWrappingProperty() const;
    Windows::UI::Xaml::DependencyProperty IsSpellCheckEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsTextPredictionEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty InputScopeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBoxStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBoxStatics2
{
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectionHighlightColorProperty() const;
    Windows::UI::Xaml::DependencyProperty PreventKeyboardDisplayOnProgrammaticFocusProperty() const;
    Windows::UI::Xaml::DependencyProperty IsColorFontEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBoxStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBoxStatics3
{
    Windows::UI::Xaml::DependencyProperty DesiredCandidateWindowAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty TextReadingOrderProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBoxStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBoxStatics5
{
    Windows::UI::Xaml::DependencyProperty SelectionHighlightColorWhenNotFocusedProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBoxStatics5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxStatics5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBoxStatics6
{
    Windows::UI::Xaml::DependencyProperty HorizontalTextAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty CharacterCasingProperty() const;
    Windows::UI::Xaml::DependencyProperty PlaceholderForegroundProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBoxStatics6> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxStatics6<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBoxStatics7
{
    Windows::UI::Xaml::DependencyProperty HandwritingViewProperty() const;
    Windows::UI::Xaml::DependencyProperty IsHandwritingViewEnabledProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBoxStatics7> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxStatics7<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBoxTextChangingEventArgs
{
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxTextChangingEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextBoxTextChangingEventArgs2
{
    bool IsContentChanging() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextBoxTextChangingEventArgs2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextChangedEventArgs
{
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextCompositionChangedEventArgs
{
    int32_t StartIndex() const;
    int32_t Length() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextCompositionChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextCompositionEndedEventArgs
{
    int32_t StartIndex() const;
    int32_t Length() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextCompositionEndedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextCompositionStartedEventArgs
{
    int32_t StartIndex() const;
    int32_t Length() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextCompositionStartedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextControlCopyingToClipboardEventArgs
{
    bool Handled() const;
    void Handled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextControlCopyingToClipboardEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextControlCuttingToClipboardEventArgs
{
    bool Handled() const;
    void Handled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextControlCuttingToClipboardEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITextControlPasteEventArgs
{
    bool Handled() const;
    void Handled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITextControlPasteEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITextControlPasteEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITimePickedEventArgs
{
    Windows::Foundation::TimeSpan OldTime() const;
    Windows::Foundation::TimeSpan NewTime() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITimePickedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITimePicker
{
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    hstring ClockIdentifier() const;
    void ClockIdentifier(param::hstring const& value) const;
    int32_t MinuteIncrement() const;
    void MinuteIncrement(int32_t value) const;
    Windows::Foundation::TimeSpan Time() const;
    void Time(Windows::Foundation::TimeSpan const& value) const;
    event_token TimeChanged(Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs> const& value) const;
    using TimeChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::ITimePicker>;
    TimeChanged_revoker TimeChanged(auto_revoke_t, Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs> const& value) const;
    void TimeChanged(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITimePicker> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePicker<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITimePicker2
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode LightDismissOverlayMode() const;
    void LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITimePicker2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePicker2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITimePickerFactory
{
    Windows::UI::Xaml::Controls::TimePicker CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITimePickerFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITimePickerFlyout
{
    hstring ClockIdentifier() const;
    void ClockIdentifier(param::hstring const& value) const;
    Windows::Foundation::TimeSpan Time() const;
    void Time(Windows::Foundation::TimeSpan const& value) const;
    int32_t MinuteIncrement() const;
    void MinuteIncrement(int32_t value) const;
    event_token TimePicked(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TimePickerFlyout, Windows::UI::Xaml::Controls::TimePickedEventArgs> const& value) const;
    using TimePicked_revoker = event_revoker<Windows::UI::Xaml::Controls::ITimePickerFlyout>;
    TimePicked_revoker TimePicked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TimePickerFlyout, Windows::UI::Xaml::Controls::TimePickedEventArgs> const& value) const;
    void TimePicked(event_token const& token) const;
    Windows::Foundation::IAsyncOperation<Windows::Foundation::IReference<Windows::Foundation::TimeSpan>> ShowAtAsync(Windows::UI::Xaml::FrameworkElement const& target) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITimePickerFlyout> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerFlyout<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITimePickerFlyoutPresenter
{
};
template <> struct consume<Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerFlyoutPresenter<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITimePickerFlyoutStatics
{
    Windows::UI::Xaml::DependencyProperty ClockIdentifierProperty() const;
    Windows::UI::Xaml::DependencyProperty TimeProperty() const;
    Windows::UI::Xaml::DependencyProperty MinuteIncrementProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerFlyoutStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITimePickerStatics
{
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty ClockIdentifierProperty() const;
    Windows::UI::Xaml::DependencyProperty MinuteIncrementProperty() const;
    Windows::UI::Xaml::DependencyProperty TimeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITimePickerStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITimePickerStatics2
{
    Windows::UI::Xaml::DependencyProperty LightDismissOverlayModeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITimePickerStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITimePickerValueChangedEventArgs
{
    Windows::Foundation::TimeSpan OldTime() const;
    Windows::Foundation::TimeSpan NewTime() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITimePickerValueChangedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IToggleMenuFlyoutItem
{
    bool IsChecked() const;
    void IsChecked(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleMenuFlyoutItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IToggleMenuFlyoutItemFactory
{
    Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleMenuFlyoutItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IToggleMenuFlyoutItemStatics
{
    Windows::UI::Xaml::DependencyProperty IsCheckedProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleMenuFlyoutItemStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IToggleSwitch
{
    bool IsOn() const;
    void IsOn(bool value) const;
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::Foundation::IInspectable OnContent() const;
    void OnContent(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate OnContentTemplate() const;
    void OnContentTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::Foundation::IInspectable OffContent() const;
    void OffContent(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate OffContentTemplate() const;
    void OffContentTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::Controls::Primitives::ToggleSwitchTemplateSettings TemplateSettings() const;
    event_token Toggled(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using Toggled_revoker = event_revoker<Windows::UI::Xaml::Controls::IToggleSwitch>;
    Toggled_revoker Toggled(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void Toggled(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IToggleSwitch> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleSwitch<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IToggleSwitchOverrides
{
    void OnToggled() const;
    void OnOnContentChanged(Windows::Foundation::IInspectable const& oldContent, Windows::Foundation::IInspectable const& newContent) const;
    void OnOffContentChanged(Windows::Foundation::IInspectable const& oldContent, Windows::Foundation::IInspectable const& newContent) const;
    void OnHeaderChanged(Windows::Foundation::IInspectable const& oldContent, Windows::Foundation::IInspectable const& newContent) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IToggleSwitchOverrides> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleSwitchOverrides<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IToggleSwitchStatics
{
    Windows::UI::Xaml::DependencyProperty IsOnProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty OnContentProperty() const;
    Windows::UI::Xaml::DependencyProperty OnContentTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty OffContentProperty() const;
    Windows::UI::Xaml::DependencyProperty OffContentTemplateProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IToggleSwitchStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToggleSwitchStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IToolTip
{
    double HorizontalOffset() const;
    void HorizontalOffset(double value) const;
    bool IsOpen() const;
    void IsOpen(bool value) const;
    Windows::UI::Xaml::Controls::Primitives::PlacementMode Placement() const;
    void Placement(Windows::UI::Xaml::Controls::Primitives::PlacementMode const& value) const;
    Windows::UI::Xaml::UIElement PlacementTarget() const;
    void PlacementTarget(Windows::UI::Xaml::UIElement const& value) const;
    double VerticalOffset() const;
    void VerticalOffset(double value) const;
    Windows::UI::Xaml::Controls::Primitives::ToolTipTemplateSettings TemplateSettings() const;
    event_token Closed(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using Closed_revoker = event_revoker<Windows::UI::Xaml::Controls::IToolTip>;
    Closed_revoker Closed(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void Closed(event_token const& token) const;
    event_token Opened(Windows::UI::Xaml::RoutedEventHandler const& value) const;
    using Opened_revoker = event_revoker<Windows::UI::Xaml::Controls::IToolTip>;
    Opened_revoker Opened(auto_revoke_t, Windows::UI::Xaml::RoutedEventHandler const& value) const;
    void Opened(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IToolTip> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToolTip<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IToolTipFactory
{
    Windows::UI::Xaml::Controls::ToolTip CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IToolTipFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToolTipFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IToolTipService
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IToolTipService> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToolTipService<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IToolTipServiceStatics
{
    Windows::UI::Xaml::DependencyProperty PlacementProperty() const;
    Windows::UI::Xaml::Controls::Primitives::PlacementMode GetPlacement(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetPlacement(Windows::UI::Xaml::DependencyObject const& element, Windows::UI::Xaml::Controls::Primitives::PlacementMode const& value) const;
    Windows::UI::Xaml::DependencyProperty PlacementTargetProperty() const;
    Windows::UI::Xaml::UIElement GetPlacementTarget(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetPlacementTarget(Windows::UI::Xaml::DependencyObject const& element, Windows::UI::Xaml::UIElement const& value) const;
    Windows::UI::Xaml::DependencyProperty ToolTipProperty() const;
    Windows::Foundation::IInspectable GetToolTip(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetToolTip(Windows::UI::Xaml::DependencyObject const& element, Windows::Foundation::IInspectable const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IToolTipServiceStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToolTipServiceStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IToolTipStatics
{
    Windows::UI::Xaml::DependencyProperty HorizontalOffsetProperty() const;
    Windows::UI::Xaml::DependencyProperty IsOpenProperty() const;
    Windows::UI::Xaml::DependencyProperty PlacementProperty() const;
    Windows::UI::Xaml::DependencyProperty PlacementTargetProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalOffsetProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IToolTipStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IToolTipStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeView
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::TreeViewNode> RootNodes() const;
    Windows::UI::Xaml::Controls::TreeViewSelectionMode SelectionMode() const;
    void SelectionMode(Windows::UI::Xaml::Controls::TreeViewSelectionMode const& value) const;
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::TreeViewNode> SelectedNodes() const;
    void Expand(Windows::UI::Xaml::Controls::TreeViewNode const& value) const;
    void Collapse(Windows::UI::Xaml::Controls::TreeViewNode const& value) const;
    void SelectAll() const;
    event_token ItemInvoked(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TreeView, Windows::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> const& value) const;
    using ItemInvoked_revoker = event_revoker<Windows::UI::Xaml::Controls::ITreeView>;
    ItemInvoked_revoker ItemInvoked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TreeView, Windows::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> const& value) const;
    void ItemInvoked(event_token const& token) const;
    event_token Expanding(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TreeView, Windows::UI::Xaml::Controls::TreeViewExpandingEventArgs> const& value) const;
    using Expanding_revoker = event_revoker<Windows::UI::Xaml::Controls::ITreeView>;
    Expanding_revoker Expanding(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TreeView, Windows::UI::Xaml::Controls::TreeViewExpandingEventArgs> const& value) const;
    void Expanding(event_token const& token) const;
    event_token Collapsed(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TreeView, Windows::UI::Xaml::Controls::TreeViewCollapsedEventArgs> const& value) const;
    using Collapsed_revoker = event_revoker<Windows::UI::Xaml::Controls::ITreeView>;
    Collapsed_revoker Collapsed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TreeView, Windows::UI::Xaml::Controls::TreeViewCollapsedEventArgs> const& value) const;
    void Collapsed(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeView> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeView<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewCollapsedEventArgs
{
    Windows::UI::Xaml::Controls::TreeViewNode Node() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewCollapsedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewExpandingEventArgs
{
    Windows::UI::Xaml::Controls::TreeViewNode Node() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewExpandingEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewFactory
{
    Windows::UI::Xaml::Controls::TreeView CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewItem
{
    double GlyphOpacity() const;
    void GlyphOpacity(double value) const;
    Windows::UI::Xaml::Media::Brush GlyphBrush() const;
    void GlyphBrush(Windows::UI::Xaml::Media::Brush const& value) const;
    hstring ExpandedGlyph() const;
    void ExpandedGlyph(param::hstring const& value) const;
    hstring CollapsedGlyph() const;
    void CollapsedGlyph(param::hstring const& value) const;
    double GlyphSize() const;
    void GlyphSize(double value) const;
    bool IsExpanded() const;
    void IsExpanded(bool value) const;
    Windows::UI::Xaml::Controls::TreeViewItemTemplateSettings TreeViewItemTemplateSettings() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewItem> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItem<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewItemFactory
{
    Windows::UI::Xaml::Controls::TreeViewItem CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewItemFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItemFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewItemInvokedEventArgs
{
    Windows::Foundation::IInspectable InvokedItem() const;
    void Handled(bool value) const;
    bool Handled() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItemInvokedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewItemStatics
{
    Windows::UI::Xaml::DependencyProperty GlyphOpacityProperty() const;
    Windows::UI::Xaml::DependencyProperty GlyphBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty ExpandedGlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty CollapsedGlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty GlyphSizeProperty() const;
    Windows::UI::Xaml::DependencyProperty IsExpandedProperty() const;
    Windows::UI::Xaml::DependencyProperty TreeViewItemTemplateSettingsProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewItemStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItemStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewItemTemplateSettings
{
    Windows::UI::Xaml::Visibility ExpandedGlyphVisibility() const;
    Windows::UI::Xaml::Visibility CollapsedGlyphVisibility() const;
    Windows::UI::Xaml::Thickness Indentation() const;
    int32_t DragItemsCount() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettings> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItemTemplateSettings<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewItemTemplateSettingsFactory
{
    Windows::UI::Xaml::Controls::TreeViewItemTemplateSettings CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItemTemplateSettingsFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewItemTemplateSettingsStatics
{
    Windows::UI::Xaml::DependencyProperty ExpandedGlyphVisibilityProperty() const;
    Windows::UI::Xaml::DependencyProperty CollapsedGlyphVisibilityProperty() const;
    Windows::UI::Xaml::DependencyProperty IndentationProperty() const;
    Windows::UI::Xaml::DependencyProperty DragItemsCountProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewItemTemplateSettingsStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewList
{
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewList> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewList<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewListFactory
{
    Windows::UI::Xaml::Controls::TreeViewList CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewListFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewListFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewNode
{
    Windows::Foundation::IInspectable Content() const;
    void Content(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::Controls::TreeViewNode Parent() const;
    bool IsExpanded() const;
    void IsExpanded(bool value) const;
    bool HasChildren() const;
    int32_t Depth() const;
    bool HasUnrealizedChildren() const;
    void HasUnrealizedChildren(bool value) const;
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::TreeViewNode> Children() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewNode> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewNode<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewNodeFactory
{
    Windows::UI::Xaml::Controls::TreeViewNode CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewNodeFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewNodeFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewNodeStatics
{
    Windows::UI::Xaml::DependencyProperty ContentProperty() const;
    Windows::UI::Xaml::DependencyProperty DepthProperty() const;
    Windows::UI::Xaml::DependencyProperty IsExpandedProperty() const;
    Windows::UI::Xaml::DependencyProperty HasChildrenProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewNodeStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewNodeStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_ITreeViewStatics
{
    Windows::UI::Xaml::DependencyProperty SelectionModeProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::ITreeViewStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_ITreeViewStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IUIElementCollection
{
    void Move(uint32_t oldIndex, uint32_t newIndex) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IUIElementCollection> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IUIElementCollection<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IUserControl
{
    Windows::UI::Xaml::UIElement Content() const;
    void Content(Windows::UI::Xaml::UIElement const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IUserControl> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IUserControl<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IUserControlFactory
{
    Windows::UI::Xaml::Controls::UserControl CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IUserControlFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IUserControlFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IUserControlStatics
{
    Windows::UI::Xaml::DependencyProperty ContentProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IUserControlStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IUserControlStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IVariableSizedWrapGrid
{
    double ItemHeight() const;
    void ItemHeight(double value) const;
    double ItemWidth() const;
    void ItemWidth(double value) const;
    Windows::UI::Xaml::Controls::Orientation Orientation() const;
    void Orientation(Windows::UI::Xaml::Controls::Orientation const& value) const;
    Windows::UI::Xaml::HorizontalAlignment HorizontalChildrenAlignment() const;
    void HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment const& value) const;
    Windows::UI::Xaml::VerticalAlignment VerticalChildrenAlignment() const;
    void VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment const& value) const;
    int32_t MaximumRowsOrColumns() const;
    void MaximumRowsOrColumns(int32_t value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IVariableSizedWrapGrid> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVariableSizedWrapGrid<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IVariableSizedWrapGridStatics
{
    Windows::UI::Xaml::DependencyProperty ItemHeightProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemWidthProperty() const;
    Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalChildrenAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalChildrenAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty MaximumRowsOrColumnsProperty() const;
    Windows::UI::Xaml::DependencyProperty RowSpanProperty() const;
    int32_t GetRowSpan(Windows::UI::Xaml::UIElement const& element) const;
    void SetRowSpan(Windows::UI::Xaml::UIElement const& element, int32_t value) const;
    Windows::UI::Xaml::DependencyProperty ColumnSpanProperty() const;
    int32_t GetColumnSpan(Windows::UI::Xaml::UIElement const& element) const;
    void SetColumnSpan(Windows::UI::Xaml::UIElement const& element, int32_t value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVariableSizedWrapGridStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IViewbox
{
    Windows::UI::Xaml::UIElement Child() const;
    void Child(Windows::UI::Xaml::UIElement const& value) const;
    Windows::UI::Xaml::Media::Stretch Stretch() const;
    void Stretch(Windows::UI::Xaml::Media::Stretch const& value) const;
    Windows::UI::Xaml::Controls::StretchDirection StretchDirection() const;
    void StretchDirection(Windows::UI::Xaml::Controls::StretchDirection const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IViewbox> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IViewbox<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IViewboxStatics
{
    Windows::UI::Xaml::DependencyProperty StretchProperty() const;
    Windows::UI::Xaml::DependencyProperty StretchDirectionProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IViewboxStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IViewboxStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IVirtualizingPanel
{
    Windows::UI::Xaml::Controls::ItemContainerGenerator ItemContainerGenerator() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IVirtualizingPanel> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVirtualizingPanel<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IVirtualizingPanelFactory
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IVirtualizingPanelFactory> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVirtualizingPanelFactory<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IVirtualizingPanelOverrides
{
    void OnItemsChanged(Windows::Foundation::IInspectable const& sender, Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventArgs const& args) const;
    void OnClearChildren() const;
    void BringIndexIntoView(int32_t index) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVirtualizingPanelOverrides<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IVirtualizingPanelProtected
{
    void AddInternalChild(Windows::UI::Xaml::UIElement const& child) const;
    void InsertInternalChild(int32_t index, Windows::UI::Xaml::UIElement const& child) const;
    void RemoveInternalChildRange(int32_t index, int32_t range) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IVirtualizingPanelProtected> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVirtualizingPanelProtected<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IVirtualizingStackPanel
{
    bool AreScrollSnapPointsRegular() const;
    void AreScrollSnapPointsRegular(bool value) const;
    Windows::UI::Xaml::Controls::Orientation Orientation() const;
    void Orientation(Windows::UI::Xaml::Controls::Orientation const& value) const;
    event_token CleanUpVirtualizedItemEvent(Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler const& value) const;
    using CleanUpVirtualizedItemEvent_revoker = event_revoker<Windows::UI::Xaml::Controls::IVirtualizingStackPanel>;
    CleanUpVirtualizedItemEvent_revoker CleanUpVirtualizedItemEvent(auto_revoke_t, Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler const& value) const;
    void CleanUpVirtualizedItemEvent(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IVirtualizingStackPanel> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVirtualizingStackPanel<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IVirtualizingStackPanelOverrides
{
    void OnCleanUpVirtualizedItem(Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs const& e) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVirtualizingStackPanelOverrides<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IVirtualizingStackPanelStatics
{
    Windows::UI::Xaml::DependencyProperty AreScrollSnapPointsRegularProperty() const;
    Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
    Windows::UI::Xaml::DependencyProperty VirtualizationModeProperty() const;
    Windows::UI::Xaml::Controls::VirtualizationMode GetVirtualizationMode(Windows::UI::Xaml::DependencyObject const& element) const;
    void SetVirtualizationMode(Windows::UI::Xaml::DependencyObject const& element, Windows::UI::Xaml::Controls::VirtualizationMode const& value) const;
    Windows::UI::Xaml::DependencyProperty IsVirtualizingProperty() const;
    bool GetIsVirtualizing(Windows::UI::Xaml::DependencyObject const& o) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IVirtualizingStackPanelStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebView
{
    Windows::Foundation::Uri Source() const;
    void Source(Windows::Foundation::Uri const& value) const;
    [[deprecated("AllowedScriptNotifyUris is unavailable for releases beginning with Windows 8.1. Instead, list URIs under ApplicationContentUriRules in the package manifest. For more info, see the AllowedScriptNotifyUris documentation.")]] Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> AllowedScriptNotifyUris() const;
    [[deprecated("AllowedScriptNotifyUris is unavailable for releases beginning with Windows 8.1. Instead, list URIs under ApplicationContentUriRules in the package manifest. For more info, see the AllowedScriptNotifyUris documentation.")]] void AllowedScriptNotifyUris(param::vector<Windows::Foundation::Uri> const& value) const;
    [[deprecated("Use CaptureSelectedContentToDataPackageAsync instead of DataTransferPackage. For more info, see MSDN.")]] Windows::ApplicationModel::DataTransfer::DataPackage DataTransferPackage() const;
    [[deprecated("LoadCompleted may be altered or unavailable for releases after Windows 8.1. Instead, use NavigationCompleted.")]] event_token LoadCompleted(Windows::UI::Xaml::Navigation::LoadCompletedEventHandler const& value) const;
    using LoadCompleted_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView>;
    [[deprecated("LoadCompleted may be altered or unavailable for releases after Windows 8.1. Instead, use NavigationCompleted.")]] LoadCompleted_revoker LoadCompleted(auto_revoke_t, Windows::UI::Xaml::Navigation::LoadCompletedEventHandler const& value) const;
    [[deprecated("LoadCompleted may be altered or unavailable for releases after Windows 8.1. Instead, use NavigationCompleted.")]] void LoadCompleted(event_token const& token) const;
    event_token ScriptNotify(Windows::UI::Xaml::Controls::NotifyEventHandler const& value) const;
    using ScriptNotify_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView>;
    ScriptNotify_revoker ScriptNotify(auto_revoke_t, Windows::UI::Xaml::Controls::NotifyEventHandler const& value) const;
    void ScriptNotify(event_token const& token) const;
    [[deprecated("NavigationFailed may be altered or unavailable for releases after Windows 8.1. Instead, use NavigationCompleted.")]] event_token NavigationFailed(Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler const& value) const;
    using NavigationFailed_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView>;
    [[deprecated("NavigationFailed may be altered or unavailable for releases after Windows 8.1. Instead, use NavigationCompleted.")]] NavigationFailed_revoker NavigationFailed(auto_revoke_t, Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler const& value) const;
    [[deprecated("NavigationFailed may be altered or unavailable for releases after Windows 8.1. Instead, use NavigationCompleted.")]] void NavigationFailed(event_token const& token) const;
    [[deprecated("Use InvokeScriptAsync instead of InvokeScript. For more info, see MSDN.")]] hstring InvokeScript(param::hstring const& scriptName, array_view<hstring const> arguments) const;
    void Navigate(Windows::Foundation::Uri const& source) const;
    void NavigateToString(param::hstring const& text) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebView> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebView<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebView2
{
    bool CanGoBack() const;
    bool CanGoForward() const;
    hstring DocumentTitle() const;
    event_token NavigationStarting(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> const& value) const;
    using NavigationStarting_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView2>;
    NavigationStarting_revoker NavigationStarting(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> const& value) const;
    void NavigationStarting(event_token const& token) const;
    event_token ContentLoading(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> const& value) const;
    using ContentLoading_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView2>;
    ContentLoading_revoker ContentLoading(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> const& value) const;
    void ContentLoading(event_token const& token) const;
    event_token DOMContentLoaded(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> const& value) const;
    using DOMContentLoaded_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView2>;
    DOMContentLoaded_revoker DOMContentLoaded(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> const& value) const;
    void DOMContentLoaded(event_token const& token) const;
    void GoForward() const;
    void GoBack() const;
    void Refresh() const;
    void Stop() const;
    Windows::Foundation::IAsyncAction CapturePreviewToStreamAsync(Windows::Storage::Streams::IRandomAccessStream const& stream) const;
    Windows::Foundation::IAsyncOperation<hstring> InvokeScriptAsync(param::hstring const& scriptName, param::async_iterable<hstring> const& arguments) const;
    Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::DataTransfer::DataPackage> CaptureSelectedContentToDataPackageAsync() const;
    void NavigateToLocalStreamUri(Windows::Foundation::Uri const& source, Windows::Web::IUriToStreamResolver const& streamResolver) const;
    Windows::Foundation::Uri BuildLocalStreamUri(param::hstring const& contentIdentifier, param::hstring const& relativePath) const;
    Windows::UI::Color DefaultBackgroundColor() const;
    void DefaultBackgroundColor(Windows::UI::Color const& value) const;
    event_token NavigationCompleted(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> const& value) const;
    using NavigationCompleted_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView2>;
    NavigationCompleted_revoker NavigationCompleted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> const& value) const;
    void NavigationCompleted(event_token const& token) const;
    event_token FrameNavigationStarting(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> const& value) const;
    using FrameNavigationStarting_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView2>;
    FrameNavigationStarting_revoker FrameNavigationStarting(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> const& value) const;
    void FrameNavigationStarting(event_token const& token) const;
    event_token FrameContentLoading(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> const& value) const;
    using FrameContentLoading_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView2>;
    FrameContentLoading_revoker FrameContentLoading(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> const& value) const;
    void FrameContentLoading(event_token const& token) const;
    event_token FrameDOMContentLoaded(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> const& value) const;
    using FrameDOMContentLoaded_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView2>;
    FrameDOMContentLoaded_revoker FrameDOMContentLoaded(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> const& value) const;
    void FrameDOMContentLoaded(event_token const& token) const;
    event_token FrameNavigationCompleted(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> const& value) const;
    using FrameNavigationCompleted_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView2>;
    FrameNavigationCompleted_revoker FrameNavigationCompleted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> const& value) const;
    void FrameNavigationCompleted(event_token const& token) const;
    event_token LongRunningScriptDetected(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs> const& value) const;
    using LongRunningScriptDetected_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView2>;
    LongRunningScriptDetected_revoker LongRunningScriptDetected(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs> const& value) const;
    void LongRunningScriptDetected(event_token const& token) const;
    event_token UnsafeContentWarningDisplaying(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::Foundation::IInspectable> const& value) const;
    using UnsafeContentWarningDisplaying_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView2>;
    UnsafeContentWarningDisplaying_revoker UnsafeContentWarningDisplaying(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::Foundation::IInspectable> const& value) const;
    void UnsafeContentWarningDisplaying(event_token const& token) const;
    event_token UnviewableContentIdentified(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs> const& value) const;
    using UnviewableContentIdentified_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView2>;
    UnviewableContentIdentified_revoker UnviewableContentIdentified(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs> const& value) const;
    void UnviewableContentIdentified(event_token const& token) const;
    void NavigateWithHttpRequestMessage(Windows::Web::Http::HttpRequestMessage const& requestMessage) const;
    bool Focus(Windows::UI::Xaml::FocusState const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebView2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebView2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebView3
{
    bool ContainsFullScreenElement() const;
    event_token ContainsFullScreenElementChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::Foundation::IInspectable> const& value) const;
    using ContainsFullScreenElementChanged_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView3>;
    ContainsFullScreenElementChanged_revoker ContainsFullScreenElementChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::Foundation::IInspectable> const& value) const;
    void ContainsFullScreenElementChanged(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebView3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebView3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebView4
{
    Windows::UI::Xaml::Controls::WebViewExecutionMode ExecutionMode() const;
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest> DeferredPermissionRequests() const;
    Windows::UI::Xaml::Controls::WebViewSettings Settings() const;
    event_token UnsupportedUriSchemeIdentified(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs> const& value) const;
    using UnsupportedUriSchemeIdentified_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView4>;
    UnsupportedUriSchemeIdentified_revoker UnsupportedUriSchemeIdentified(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs> const& value) const;
    void UnsupportedUriSchemeIdentified(event_token const& token) const;
    event_token NewWindowRequested(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs> const& value) const;
    using NewWindowRequested_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView4>;
    NewWindowRequested_revoker NewWindowRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs> const& value) const;
    void NewWindowRequested(event_token const& token) const;
    event_token PermissionRequested(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs> const& value) const;
    using PermissionRequested_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView4>;
    PermissionRequested_revoker PermissionRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs> const& value) const;
    void PermissionRequested(event_token const& token) const;
    void AddWebAllowedObject(param::hstring const& name, Windows::Foundation::IInspectable const& pObject) const;
    Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest DeferredPermissionRequestById(uint32_t id) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebView4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebView4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebView5
{
    Windows::UI::Xaml::DependencyObject XYFocusLeft() const;
    void XYFocusLeft(Windows::UI::Xaml::DependencyObject const& value) const;
    Windows::UI::Xaml::DependencyObject XYFocusRight() const;
    void XYFocusRight(Windows::UI::Xaml::DependencyObject const& value) const;
    Windows::UI::Xaml::DependencyObject XYFocusUp() const;
    void XYFocusUp(Windows::UI::Xaml::DependencyObject const& value) const;
    Windows::UI::Xaml::DependencyObject XYFocusDown() const;
    void XYFocusDown(Windows::UI::Xaml::DependencyObject const& value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebView5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebView5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebView6
{
    event_token SeparateProcessLost(Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewSeparateProcessLostEventArgs> const& value) const;
    using SeparateProcessLost_revoker = event_revoker<Windows::UI::Xaml::Controls::IWebView6>;
    SeparateProcessLost_revoker SeparateProcessLost(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewSeparateProcessLostEventArgs> const& value) const;
    void SeparateProcessLost(event_token const& token) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebView6> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebView6<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewBrush
{
    hstring SourceName() const;
    void SourceName(param::hstring const& value) const;
    void Redraw() const;
    void SetSource(Windows::UI::Xaml::Controls::WebView const& source) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewBrush> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewBrush<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewBrushStatics
{
    Windows::UI::Xaml::DependencyProperty SourceNameProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewBrushStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewBrushStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewContentLoadingEventArgs
{
    Windows::Foundation::Uri Uri() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewContentLoadingEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewDOMContentLoadedEventArgs
{
    Windows::Foundation::Uri Uri() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewDOMContentLoadedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewDeferredPermissionRequest
{
    Windows::Foundation::Uri Uri() const;
    Windows::UI::Xaml::Controls::WebViewPermissionType PermissionType() const;
    uint32_t Id() const;
    void Allow() const;
    void Deny() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewDeferredPermissionRequest<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewFactory4
{
    Windows::UI::Xaml::Controls::WebView CreateInstanceWithExecutionMode(Windows::UI::Xaml::Controls::WebViewExecutionMode const& executionMode) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewFactory4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewFactory4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewLongRunningScriptDetectedEventArgs
{
    Windows::Foundation::TimeSpan ExecutionTime() const;
    bool StopPageScriptExecution() const;
    void StopPageScriptExecution(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewLongRunningScriptDetectedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewNavigationCompletedEventArgs
{
    Windows::Foundation::Uri Uri() const;
    bool IsSuccess() const;
    Windows::Web::WebErrorStatus WebErrorStatus() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewNavigationCompletedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewNavigationFailedEventArgs
{
    Windows::Foundation::Uri Uri() const;
    Windows::Web::WebErrorStatus WebErrorStatus() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewNavigationFailedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewNavigationStartingEventArgs
{
    Windows::Foundation::Uri Uri() const;
    bool Cancel() const;
    void Cancel(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewNavigationStartingEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewNewWindowRequestedEventArgs
{
    Windows::Foundation::Uri Uri() const;
    Windows::Foundation::Uri Referrer() const;
    bool Handled() const;
    void Handled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewNewWindowRequestedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewPermissionRequest
{
    Windows::Foundation::Uri Uri() const;
    Windows::UI::Xaml::Controls::WebViewPermissionType PermissionType() const;
    uint32_t Id() const;
    Windows::UI::Xaml::Controls::WebViewPermissionState State() const;
    void Defer() const;
    void Allow() const;
    void Deny() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewPermissionRequest> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewPermissionRequest<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewPermissionRequestedEventArgs
{
    Windows::UI::Xaml::Controls::WebViewPermissionRequest PermissionRequest() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewPermissionRequestedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewSeparateProcessLostEventArgs
{
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewSeparateProcessLostEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewSeparateProcessLostEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewSettings
{
    bool IsJavaScriptEnabled() const;
    void IsJavaScriptEnabled(bool value) const;
    bool IsIndexedDBEnabled() const;
    void IsIndexedDBEnabled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewSettings> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewSettings<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewStatics
{
    [[deprecated("AnyScriptNotifyUri is unavailable for releases beginning with Windows 8.1. Instead, list URIs under ApplicationContentUriRules in the package manifest. For more info, see the AnyScriptNotifyUri documentation.")]] Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> AnyScriptNotifyUri() const;
    Windows::UI::Xaml::DependencyProperty SourceProperty() const;
    [[deprecated("AllowedScriptNotifyUris is unavailable for releases beginning with Windows 8.1. Instead, list URIs under ApplicationContentUriRules in the package manifest. For more info, see the AllowedScriptNotifyUris documentation.")]] Windows::UI::Xaml::DependencyProperty AllowedScriptNotifyUrisProperty() const;
    [[deprecated("Use CaptureSelectedContentToDataPackageAsync instead of DataTransferPackage. For more info, see MSDN.")]] Windows::UI::Xaml::DependencyProperty DataTransferPackageProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewStatics<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewStatics2
{
    Windows::UI::Xaml::DependencyProperty CanGoBackProperty() const;
    Windows::UI::Xaml::DependencyProperty CanGoForwardProperty() const;
    Windows::UI::Xaml::DependencyProperty DocumentTitleProperty() const;
    Windows::UI::Xaml::DependencyProperty DefaultBackgroundColorProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewStatics2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewStatics2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewStatics3
{
    Windows::UI::Xaml::DependencyProperty ContainsFullScreenElementProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewStatics3> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewStatics3<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewStatics4
{
    Windows::UI::Xaml::Controls::WebViewExecutionMode DefaultExecutionMode() const;
    Windows::Foundation::IAsyncAction ClearTemporaryWebDataAsync() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewStatics4> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewStatics4<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewStatics5
{
    Windows::UI::Xaml::DependencyProperty XYFocusLeftProperty() const;
    Windows::UI::Xaml::DependencyProperty XYFocusRightProperty() const;
    Windows::UI::Xaml::DependencyProperty XYFocusUpProperty() const;
    Windows::UI::Xaml::DependencyProperty XYFocusDownProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewStatics5> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewStatics5<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewUnsupportedUriSchemeIdentifiedEventArgs
{
    Windows::Foundation::Uri Uri() const;
    bool Handled() const;
    void Handled(bool value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewUnsupportedUriSchemeIdentifiedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewUnviewableContentIdentifiedEventArgs
{
    Windows::Foundation::Uri Uri() const;
    Windows::Foundation::Uri Referrer() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewUnviewableContentIdentifiedEventArgs<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWebViewUnviewableContentIdentifiedEventArgs2
{
    hstring MediaType() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWebViewUnviewableContentIdentifiedEventArgs2<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWrapGrid
{
    double ItemWidth() const;
    void ItemWidth(double value) const;
    double ItemHeight() const;
    void ItemHeight(double value) const;
    Windows::UI::Xaml::Controls::Orientation Orientation() const;
    void Orientation(Windows::UI::Xaml::Controls::Orientation const& value) const;
    Windows::UI::Xaml::HorizontalAlignment HorizontalChildrenAlignment() const;
    void HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment const& value) const;
    Windows::UI::Xaml::VerticalAlignment VerticalChildrenAlignment() const;
    void VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment const& value) const;
    int32_t MaximumRowsOrColumns() const;
    void MaximumRowsOrColumns(int32_t value) const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWrapGrid> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWrapGrid<D>; };

template <typename D>
struct consume_Windows_UI_Xaml_Controls_IWrapGridStatics
{
    Windows::UI::Xaml::DependencyProperty ItemWidthProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemHeightProperty() const;
    Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalChildrenAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalChildrenAlignmentProperty() const;
    Windows::UI::Xaml::DependencyProperty MaximumRowsOrColumnsProperty() const;
};
template <> struct consume<Windows::UI::Xaml::Controls::IWrapGridStatics> { template <typename D> using type = consume_Windows_UI_Xaml_Controls_IWrapGridStatics<D>; };

template <> struct abi<Windows::UI::Xaml::Controls::IAppBar>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsOpen(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsOpen(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSticky(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsSticky(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_Opened(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Opened(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_Closed(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Closed(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBar2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ClosedDisplayMode(Windows::UI::Xaml::Controls::AppBarClosedDisplayMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_ClosedDisplayMode(Windows::UI::Xaml::Controls::AppBarClosedDisplayMode value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBar3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TemplateSettings(void** value) noexcept = 0;
    virtual HRESULT __stdcall add_Opening(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Opening(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_Closing(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Closing(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBar4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarButton>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Label(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_Label(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_Icon(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Icon(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarButton3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition* value) noexcept = 0;
    virtual HRESULT __stdcall put_LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarButton4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_KeyboardAcceleratorTextOverride(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_KeyboardAcceleratorTextOverride(HSTRING value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarButton5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TemplateSettings(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarButtonFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarButtonStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LabelProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IconProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsCompactProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarButtonStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LabelPositionProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsInOverflowProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DynamicOverflowOrderProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarButtonStatics4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_KeyboardAcceleratorTextOverrideProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarOverrides>{ struct type : IInspectable
{
    virtual HRESULT __stdcall OnClosed(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnOpened(void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarOverrides3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall OnClosing(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnOpening(void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarSeparator>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarSeparatorFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarSeparatorStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsCompactProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsInOverflowProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DynamicOverflowOrderProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsOpenProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsStickyProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ClosedDisplayModeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarStatics4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LightDismissOverlayModeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarToggleButton>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Label(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_Label(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_Icon(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Icon(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarToggleButton3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition* value) noexcept = 0;
    virtual HRESULT __stdcall put_LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarToggleButton4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_KeyboardAcceleratorTextOverride(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_KeyboardAcceleratorTextOverride(HSTRING value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarToggleButton5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TemplateSettings(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LabelProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IconProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsCompactProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LabelPositionProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsInOverflowProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DynamicOverflowOrderProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_KeyboardAcceleratorTextOverrideProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAutoSuggestBox>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MaxSuggestionListHeight(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxSuggestionListHeight(double value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSuggestionListOpen(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsSuggestionListOpen(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_TextMemberPath(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextMemberPath(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_Text(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_Text(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_UpdateTextOnSelect(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_UpdateTextOnSelect(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_PlaceholderText(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_AutoMaximizeSuggestionArea(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_AutoMaximizeSuggestionArea(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_TextBoxStyle(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_TextBoxStyle(void* value) noexcept = 0;
    virtual HRESULT __stdcall add_SuggestionChosen(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_SuggestionChosen(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_TextChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_TextChanged(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAutoSuggestBox2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_QueryIcon(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_QueryIcon(void* value) noexcept = 0;
    virtual HRESULT __stdcall add_QuerySubmitted(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_QuerySubmitted(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAutoSuggestBox3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_QueryText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall get_ChosenSuggestion(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MaxSuggestionListHeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSuggestionListOpenProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextMemberPathProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_UpdateTextOnSelectProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderTextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AutoMaximizeSuggestionAreaProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextBoxStyleProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_QueryIconProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LightDismissOverlayModeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectedItem(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Reason(Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason* value) noexcept = 0;
    virtual HRESULT __stdcall put_Reason(Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason value) noexcept = 0;
    virtual HRESULT __stdcall CheckCurrent(bool* returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ReasonProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IBackClickEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Handled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Handled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IBitmapIcon>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_UriSource(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_UriSource(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IBitmapIcon2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ShowAsMonochrome(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_ShowAsMonochrome(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IBitmapIconFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IBitmapIconSource>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_UriSource(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_UriSource(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ShowAsMonochrome(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_ShowAsMonochrome(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IBitmapIconSourceFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IBitmapIconSourceStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_UriSourceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ShowAsMonochromeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IBitmapIconStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_UriSourceProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IBitmapIconStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ShowAsMonochromeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IBorder>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_BorderBrush(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_BorderBrush(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderThickness(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_BorderThickness(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_Background(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Background(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius* value) noexcept = 0;
    virtual HRESULT __stdcall put_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius value) noexcept = 0;
    virtual HRESULT __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_Child(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Child(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ChildTransitions(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ChildTransitions(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IBorderStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_BorderBrushProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderThicknessProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BackgroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CornerRadiusProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaddingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ChildTransitionsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IButton>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IButtonFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_FlyoutProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IButtonWithFlyout>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Flyout(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Flyout(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICalendarDatePicker>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Date(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Date(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsCalendarOpen(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsCalendarOpen(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_DateFormat(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_DateFormat(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_PlaceholderText(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarViewStyle(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_CalendarViewStyle(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_MinDate(Windows::Foundation::DateTime* value) noexcept = 0;
    virtual HRESULT __stdcall put_MinDate(Windows::Foundation::DateTime value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxDate(Windows::Foundation::DateTime* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxDate(Windows::Foundation::DateTime value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTodayHighlighted(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsTodayHighlighted(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstDayOfWeek(Windows::Globalization::DayOfWeek* value) noexcept = 0;
    virtual HRESULT __stdcall put_FirstDayOfWeek(Windows::Globalization::DayOfWeek value) noexcept = 0;
    virtual HRESULT __stdcall get_DayOfWeekFormat(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_DayOfWeekFormat(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarIdentifier(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_CalendarIdentifier(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_IsOutOfScopeEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsOutOfScopeEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsGroupLabelVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsGroupLabelVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_CalendarViewDayItemChanging(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_CalendarViewDayItemChanging(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_DateChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_DateChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_Opened(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Opened(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_Closed(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Closed(event_token token) noexcept = 0;
    virtual HRESULT __stdcall SetDisplayDate(Windows::Foundation::DateTime date) noexcept = 0;
    virtual HRESULT __stdcall SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICalendarDatePicker2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_NewDate(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OldDate(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICalendarDatePickerFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICalendarDatePickerStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsCalendarOpenProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DateFormatProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderTextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarViewStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MinDateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxDateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTodayHighlightedProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DisplayModeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstDayOfWeekProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DayOfWeekFormatProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarIdentifierProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsOutOfScopeEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsGroupLabelVisibleProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LightDismissOverlayModeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICalendarView>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CalendarIdentifier(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_CalendarIdentifier(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_DayOfWeekFormat(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_DayOfWeekFormat(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_IsGroupLabelVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsGroupLabelVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstDayOfWeek(Windows::Globalization::DayOfWeek* value) noexcept = 0;
    virtual HRESULT __stdcall put_FirstDayOfWeek(Windows::Globalization::DayOfWeek value) noexcept = 0;
    virtual HRESULT __stdcall get_IsOutOfScopeEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsOutOfScopeEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTodayHighlighted(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsTodayHighlighted(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxDate(Windows::Foundation::DateTime* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxDate(Windows::Foundation::DateTime value) noexcept = 0;
    virtual HRESULT __stdcall get_MinDate(Windows::Foundation::DateTime* value) noexcept = 0;
    virtual HRESULT __stdcall put_MinDate(Windows::Foundation::DateTime value) noexcept = 0;
    virtual HRESULT __stdcall get_NumberOfWeeksInView(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_NumberOfWeeksInView(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedDates(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionMode(Windows::UI::Xaml::Controls::CalendarViewSelectionMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectionMode(Windows::UI::Xaml::Controls::CalendarViewSelectionMode value) noexcept = 0;
    virtual HRESULT __stdcall get_TemplateSettings(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FocusBorderBrush(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_FocusBorderBrush(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedHoverBorderBrush(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectedHoverBorderBrush(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedPressedBorderBrush(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectedPressedBorderBrush(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedBorderBrush(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectedBorderBrush(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HoverBorderBrush(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HoverBorderBrush(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PressedBorderBrush(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PressedBorderBrush(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarItemBorderBrush(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_CalendarItemBorderBrush(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_OutOfScopeBackground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_OutOfScopeBackground(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarItemBackground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_CalendarItemBackground(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PressedForeground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PressedForeground(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_TodayForeground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_TodayForeground(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_BlackoutForeground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_BlackoutForeground(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedForeground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectedForeground(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_OutOfScopeForeground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_OutOfScopeForeground(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarItemForeground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_CalendarItemForeground(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_DayItemFontFamily(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_DayItemFontFamily(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_DayItemFontSize(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_DayItemFontSize(double value) noexcept = 0;
    virtual HRESULT __stdcall get_DayItemFontStyle(Windows::UI::Text::FontStyle* value) noexcept = 0;
    virtual HRESULT __stdcall put_DayItemFontStyle(Windows::UI::Text::FontStyle value) noexcept = 0;
    virtual HRESULT __stdcall get_DayItemFontWeight(struct struct_Windows_UI_Text_FontWeight* value) noexcept = 0;
    virtual HRESULT __stdcall put_DayItemFontWeight(struct struct_Windows_UI_Text_FontWeight value) noexcept = 0;
    virtual HRESULT __stdcall get_TodayFontWeight(struct struct_Windows_UI_Text_FontWeight* value) noexcept = 0;
    virtual HRESULT __stdcall put_TodayFontWeight(struct struct_Windows_UI_Text_FontWeight value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfMonthLabelFontFamily(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_FirstOfMonthLabelFontFamily(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfMonthLabelFontSize(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_FirstOfMonthLabelFontSize(double value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfMonthLabelFontStyle(Windows::UI::Text::FontStyle* value) noexcept = 0;
    virtual HRESULT __stdcall put_FirstOfMonthLabelFontStyle(Windows::UI::Text::FontStyle value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfMonthLabelFontWeight(struct struct_Windows_UI_Text_FontWeight* value) noexcept = 0;
    virtual HRESULT __stdcall put_FirstOfMonthLabelFontWeight(struct struct_Windows_UI_Text_FontWeight value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthYearItemFontFamily(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_MonthYearItemFontFamily(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthYearItemFontSize(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_MonthYearItemFontSize(double value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthYearItemFontStyle(Windows::UI::Text::FontStyle* value) noexcept = 0;
    virtual HRESULT __stdcall put_MonthYearItemFontStyle(Windows::UI::Text::FontStyle value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthYearItemFontWeight(struct struct_Windows_UI_Text_FontWeight* value) noexcept = 0;
    virtual HRESULT __stdcall put_MonthYearItemFontWeight(struct struct_Windows_UI_Text_FontWeight value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfYearDecadeLabelFontFamily(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_FirstOfYearDecadeLabelFontFamily(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfYearDecadeLabelFontSize(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_FirstOfYearDecadeLabelFontSize(double value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfYearDecadeLabelFontStyle(Windows::UI::Text::FontStyle* value) noexcept = 0;
    virtual HRESULT __stdcall put_FirstOfYearDecadeLabelFontStyle(Windows::UI::Text::FontStyle value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfYearDecadeLabelFontWeight(struct struct_Windows_UI_Text_FontWeight* value) noexcept = 0;
    virtual HRESULT __stdcall put_FirstOfYearDecadeLabelFontWeight(struct struct_Windows_UI_Text_FontWeight value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalDayItemAlignment(Windows::UI::Xaml::HorizontalAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalDayItemAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalDayItemAlignment(Windows::UI::Xaml::VerticalAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_VerticalDayItemAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalFirstOfMonthLabelAlignment(Windows::UI::Xaml::HorizontalAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalFirstOfMonthLabelAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalFirstOfMonthLabelAlignment(Windows::UI::Xaml::VerticalAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_VerticalFirstOfMonthLabelAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarItemBorderThickness(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_CalendarItemBorderThickness(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarViewDayItemStyle(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_CalendarViewDayItemStyle(void* value) noexcept = 0;
    virtual HRESULT __stdcall add_CalendarViewDayItemChanging(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_CalendarViewDayItemChanging(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_SelectedDatesChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_SelectedDatesChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall SetDisplayDate(Windows::Foundation::DateTime date) noexcept = 0;
    virtual HRESULT __stdcall SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICalendarViewDayItem>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsBlackout(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsBlackout(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_Date(Windows::Foundation::DateTime* value) noexcept = 0;
    virtual HRESULT __stdcall SetDensityColors(void* colors) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_InRecycleQueue(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_Item(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Phase(uint32_t* value) noexcept = 0;
    virtual HRESULT __stdcall RegisterUpdateCallback(void* callback) noexcept = 0;
    virtual HRESULT __stdcall RegisterUpdateCallbackWithPhase(uint32_t callbackPhase, void* callback) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsBlackoutProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DateProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICalendarViewFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_AddedDates(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_RemovedDates(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICalendarViewStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CalendarIdentifierProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DayOfWeekFormatProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsGroupLabelVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DisplayModeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstDayOfWeekProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsOutOfScopeEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTodayHighlightedProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxDateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MinDateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_NumberOfWeeksInViewProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedDatesProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionModeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TemplateSettingsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FocusBorderBrushProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedHoverBorderBrushProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedPressedBorderBrushProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedBorderBrushProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HoverBorderBrushProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PressedBorderBrushProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarItemBorderBrushProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OutOfScopeBackgroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarItemBackgroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PressedForegroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TodayForegroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BlackoutForegroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedForegroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OutOfScopeForegroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarItemForegroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DayItemFontFamilyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DayItemFontSizeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DayItemFontStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DayItemFontWeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TodayFontWeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfMonthLabelFontFamilyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfMonthLabelFontSizeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfMonthLabelFontStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfMonthLabelFontWeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthYearItemFontFamilyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthYearItemFontSizeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthYearItemFontStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthYearItemFontWeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfYearDecadeLabelFontFamilyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfYearDecadeLabelFontSizeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfYearDecadeLabelFontStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstOfYearDecadeLabelFontWeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalDayItemAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalDayItemAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalFirstOfMonthLabelAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalFirstOfMonthLabelAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarItemBorderThicknessProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarViewDayItemStyleProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Bounds(Windows::Foundation::Rect* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICanvas>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICanvasFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICanvasStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LeftProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetLeft(void* element, double* length) noexcept = 0;
    virtual HRESULT __stdcall SetLeft(void* element, double length) noexcept = 0;
    virtual HRESULT __stdcall get_TopProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetTop(void* element, double* length) noexcept = 0;
    virtual HRESULT __stdcall SetTop(void* element, double length) noexcept = 0;
    virtual HRESULT __stdcall get_ZIndexProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetZIndex(void* element, int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall SetZIndex(void* element, int32_t value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICaptureElement>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Source(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Source(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch* value) noexcept = 0;
    virtual HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICaptureElementStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SourceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_StretchProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICheckBox>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICheckBoxFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_GroupHeaderContainer(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_GroupHeaderContainer(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_GroupIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_Group(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ItemIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_Item(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemContainer(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemContainer(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsContainerPrepared(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsContainerPrepared(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Value(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_UIElement(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Cancel(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Cancel(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IColorChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_OldColor(struct struct_Windows_UI_Color* result) noexcept = 0;
    virtual HRESULT __stdcall get_NewColor(struct struct_Windows_UI_Color* result) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IColorPicker>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Color(struct struct_Windows_UI_Color* result) noexcept = 0;
    virtual HRESULT __stdcall put_Color(struct struct_Windows_UI_Color value) noexcept = 0;
    virtual HRESULT __stdcall get_PreviousColor(void** result) noexcept = 0;
    virtual HRESULT __stdcall put_PreviousColor(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsAlphaEnabled(bool* result) noexcept = 0;
    virtual HRESULT __stdcall put_IsAlphaEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorSpectrumVisible(bool* result) noexcept = 0;
    virtual HRESULT __stdcall put_IsColorSpectrumVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorPreviewVisible(bool* result) noexcept = 0;
    virtual HRESULT __stdcall put_IsColorPreviewVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorSliderVisible(bool* result) noexcept = 0;
    virtual HRESULT __stdcall put_IsColorSliderVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsAlphaSliderVisible(bool* result) noexcept = 0;
    virtual HRESULT __stdcall put_IsAlphaSliderVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsMoreButtonVisible(bool* result) noexcept = 0;
    virtual HRESULT __stdcall put_IsMoreButtonVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorChannelTextInputVisible(bool* result) noexcept = 0;
    virtual HRESULT __stdcall put_IsColorChannelTextInputVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsAlphaTextInputVisible(bool* result) noexcept = 0;
    virtual HRESULT __stdcall put_IsAlphaTextInputVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsHexInputVisible(bool* result) noexcept = 0;
    virtual HRESULT __stdcall put_IsHexInputVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_MinHue(int32_t* result) noexcept = 0;
    virtual HRESULT __stdcall put_MinHue(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxHue(int32_t* result) noexcept = 0;
    virtual HRESULT __stdcall put_MaxHue(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_MinSaturation(int32_t* result) noexcept = 0;
    virtual HRESULT __stdcall put_MinSaturation(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxSaturation(int32_t* result) noexcept = 0;
    virtual HRESULT __stdcall put_MaxSaturation(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_MinValue(int32_t* result) noexcept = 0;
    virtual HRESULT __stdcall put_MinValue(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxValue(int32_t* result) noexcept = 0;
    virtual HRESULT __stdcall put_MaxValue(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_ColorSpectrumShape(Windows::UI::Xaml::Controls::ColorSpectrumShape* result) noexcept = 0;
    virtual HRESULT __stdcall put_ColorSpectrumShape(Windows::UI::Xaml::Controls::ColorSpectrumShape value) noexcept = 0;
    virtual HRESULT __stdcall get_ColorSpectrumComponents(Windows::UI::Xaml::Controls::ColorSpectrumComponents* result) noexcept = 0;
    virtual HRESULT __stdcall put_ColorSpectrumComponents(Windows::UI::Xaml::Controls::ColorSpectrumComponents value) noexcept = 0;
    virtual HRESULT __stdcall add_ColorChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ColorChanged(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IColorPickerFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IColorPickerStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ColorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PreviousColorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsAlphaEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorSpectrumVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorPreviewVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorSliderVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsAlphaSliderVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsMoreButtonVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorChannelTextInputVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsAlphaTextInputVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsHexInputVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MinHueProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxHueProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MinSaturationProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxSaturationProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MinValueProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxValueProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ColorSpectrumShapeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ColorSpectrumComponentsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IColumnDefinition>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Width(struct struct_Windows_UI_Xaml_GridLength* value) noexcept = 0;
    virtual HRESULT __stdcall put_Width(struct struct_Windows_UI_Xaml_GridLength value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxWidth(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxWidth(double value) noexcept = 0;
    virtual HRESULT __stdcall get_MinWidth(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_MinWidth(double value) noexcept = 0;
    virtual HRESULT __stdcall get_ActualWidth(double* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IColumnDefinitionStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_WidthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxWidthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MinWidthProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IComboBox>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsDropDownOpen(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsDropDownOpen(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsEditable(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSelectionBoxHighlighted(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxDropDownHeight(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxDropDownHeight(double value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionBoxItem(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionBoxItemTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TemplateSettings(void** value) noexcept = 0;
    virtual HRESULT __stdcall add_DropDownClosed(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_DropDownClosed(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_DropDownOpened(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_DropDownOpened(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IComboBox2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_PlaceholderText(HSTRING value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IComboBox3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTextSearchEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsTextSearchEnabled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IComboBox4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectionChangedTrigger(Windows::UI::Xaml::Controls::ComboBoxSelectionChangedTrigger* value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectionChangedTrigger(Windows::UI::Xaml::Controls::ComboBoxSelectionChangedTrigger value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IComboBox5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PlaceholderForeground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PlaceholderForeground(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IComboBoxFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IComboBoxItem>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IComboBoxItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IComboBoxOverrides>{ struct type : IInspectable
{
    virtual HRESULT __stdcall OnDropDownClosed(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnDropDownOpened(void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IComboBoxStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsDropDownOpenProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxDropDownHeightProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IComboBoxStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderTextProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IComboBoxStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LightDismissOverlayModeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTextSearchEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IComboBoxStatics4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectionChangedTriggerProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IComboBoxStatics5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PlaceholderForegroundProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICommandBar>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PrimaryCommands(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SecondaryCommands(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICommandBar2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CommandBarOverflowPresenterStyle(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_CommandBarOverflowPresenterStyle(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_CommandBarTemplateSettings(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICommandBar3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DefaultLabelPosition(Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition* value) noexcept = 0;
    virtual HRESULT __stdcall put_DefaultLabelPosition(Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition value) noexcept = 0;
    virtual HRESULT __stdcall get_OverflowButtonVisibility(Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility* value) noexcept = 0;
    virtual HRESULT __stdcall put_OverflowButtonVisibility(Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility value) noexcept = 0;
    virtual HRESULT __stdcall get_IsDynamicOverflowEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsDynamicOverflowEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_DynamicOverflowItemsChanging(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_DynamicOverflowItemsChanging(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICommandBarElement>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsCompact(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsCompact(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICommandBarElement2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsInOverflow(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_DynamicOverflowOrder(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_DynamicOverflowOrder(int32_t value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICommandBarFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICommandBarStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PrimaryCommandsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SecondaryCommandsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICommandBarStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CommandBarOverflowPresenterStyleProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ICommandBarStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DefaultLabelPositionProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OverflowButtonVisibilityProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsDynamicOverflowEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ItemContainer(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_InRecycleQueue(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_Item(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Phase(uint32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_Handled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Handled(bool value) noexcept = 0;
    virtual HRESULT __stdcall RegisterUpdateCallback(void* callback) noexcept = 0;
    virtual HRESULT __stdcall RegisterUpdateCallbackWithPhase(uint32_t callbackPhase, void* callback) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentControl>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Content(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Content(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ContentTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentTemplateSelector(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ContentTemplateSelector(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentTransitions(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ContentTransitions(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentControl2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ContentTemplateRoot(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentControlFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentControlOverrides>{ struct type : IInspectable
{
    virtual HRESULT __stdcall OnContentChanged(void* oldContent, void* newContent) noexcept = 0;
    virtual HRESULT __stdcall OnContentTemplateChanged(void* oldContentTemplate, void* newContentTemplate) noexcept = 0;
    virtual HRESULT __stdcall OnContentTemplateSelectorChanged(void* oldContentTemplateSelector, void* newContentTemplateSelector) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentControlStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ContentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentTemplateSelectorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentTransitionsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentDialog>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Title(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Title(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_TitleTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_TitleTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FullSizeDesired(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_FullSizeDesired(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_PrimaryButtonText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_PrimaryButtonText(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_SecondaryButtonText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_SecondaryButtonText(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_PrimaryButtonCommand(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PrimaryButtonCommand(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_SecondaryButtonCommand(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SecondaryButtonCommand(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PrimaryButtonCommandParameter(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PrimaryButtonCommandParameter(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_SecondaryButtonCommandParameter(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SecondaryButtonCommandParameter(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsPrimaryButtonEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsPrimaryButtonEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSecondaryButtonEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsSecondaryButtonEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_Closing(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Closing(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_Closed(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Closed(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_Opened(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Opened(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_PrimaryButtonClick(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PrimaryButtonClick(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_SecondaryButtonClick(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_SecondaryButtonClick(event_token token) noexcept = 0;
    virtual HRESULT __stdcall Hide() noexcept = 0;
    virtual HRESULT __stdcall ShowAsync(void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentDialog2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CloseButtonText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_CloseButtonText(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_CloseButtonCommand(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_CloseButtonCommand(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_CloseButtonCommandParameter(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_CloseButtonCommandParameter(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PrimaryButtonStyle(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PrimaryButtonStyle(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_SecondaryButtonStyle(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SecondaryButtonStyle(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_CloseButtonStyle(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_CloseButtonStyle(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_DefaultButton(Windows::UI::Xaml::Controls::ContentDialogButton* value) noexcept = 0;
    virtual HRESULT __stdcall put_DefaultButton(Windows::UI::Xaml::Controls::ContentDialogButton value) noexcept = 0;
    virtual HRESULT __stdcall add_CloseButtonClick(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_CloseButtonClick(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentDialog3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall ShowAsyncWithPlacement(Windows::UI::Xaml::Controls::ContentDialogPlacement placement, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral>{ struct type : IInspectable
{
    virtual HRESULT __stdcall Complete() noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Cancel(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Cancel(bool value) noexcept = 0;
    virtual HRESULT __stdcall GetDeferral(void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Result(Windows::UI::Xaml::Controls::ContentDialogResult* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentDialogClosingDeferral>{ struct type : IInspectable
{
    virtual HRESULT __stdcall Complete() noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Result(Windows::UI::Xaml::Controls::ContentDialogResult* value) noexcept = 0;
    virtual HRESULT __stdcall get_Cancel(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Cancel(bool value) noexcept = 0;
    virtual HRESULT __stdcall GetDeferral(void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentDialogFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentDialogStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TitleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TitleTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FullSizeDesiredProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PrimaryButtonTextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SecondaryButtonTextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PrimaryButtonCommandProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SecondaryButtonCommandProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PrimaryButtonCommandParameterProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SecondaryButtonCommandParameterProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsPrimaryButtonEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSecondaryButtonEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentDialogStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CloseButtonTextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CloseButtonCommandProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CloseButtonCommandParameterProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PrimaryButtonStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SecondaryButtonStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CloseButtonStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DefaultButtonProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentLinkChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ChangeKind(Windows::UI::Xaml::Controls::ContentLinkChangeKind* value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentLinkInfo(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextRange(struct struct_Windows_UI_Xaml_Documents_TextRange* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentPresenter>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Content(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Content(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ContentTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentTemplateSelector(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ContentTemplateSelector(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentTransitions(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ContentTransitions(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FontSize(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontSize(double value) noexcept = 0;
    virtual HRESULT __stdcall get_FontFamily(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_FontFamily(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStretch(Windows::UI::Text::FontStretch* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontStretch(Windows::UI::Text::FontStretch value) noexcept = 0;
    virtual HRESULT __stdcall get_CharacterSpacing(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_CharacterSpacing(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_Foreground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Foreground(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentPresenter2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_TextLineBounds(Windows::UI::Xaml::TextLineBounds* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextLineBounds(Windows::UI::Xaml::TextLineBounds value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentPresenter3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextScaleFactorEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentPresenter4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TextWrapping(Windows::UI::Xaml::TextWrapping* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextWrapping(Windows::UI::Xaml::TextWrapping value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxLines(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxLines(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy* value) noexcept = 0;
    virtual HRESULT __stdcall put_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) noexcept = 0;
    virtual HRESULT __stdcall get_LineHeight(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_LineHeight(double value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderBrush(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_BorderBrush(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderThickness(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_BorderThickness(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius* value) noexcept = 0;
    virtual HRESULT __stdcall put_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius value) noexcept = 0;
    virtual HRESULT __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_Background(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Background(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentPresenterFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentPresenterOverrides>{ struct type : IInspectable
{
    virtual HRESULT __stdcall OnContentTemplateChanged(void* oldContentTemplate, void* newContentTemplate) noexcept = 0;
    virtual HRESULT __stdcall OnContentTemplateSelectorChanged(void* oldContentTemplateSelector, void* newContentTemplateSelector) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentPresenterStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ContentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentTemplateSelectorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentTransitionsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontSizeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontFamilyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontWeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStretchProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CharacterSpacingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ForegroundProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentPresenterStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_OpticalMarginAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextLineBoundsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentPresenterStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContentPresenterStatics4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TextWrappingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxLinesProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_LineStackingStrategyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_LineHeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderBrushProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderThicknessProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CornerRadiusProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaddingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BackgroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalContentAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalContentAlignmentProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IContextMenuEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Handled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Handled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_CursorLeft(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_CursorTop(double* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IControl>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_FontSize(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontSize(double value) noexcept = 0;
    virtual HRESULT __stdcall get_FontFamily(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_FontFamily(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStretch(Windows::UI::Text::FontStretch* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontStretch(Windows::UI::Text::FontStretch value) noexcept = 0;
    virtual HRESULT __stdcall get_CharacterSpacing(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_CharacterSpacing(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_Foreground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Foreground(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTabStop(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsTabStop(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_TabIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_TabIndex(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_TabNavigation(Windows::UI::Xaml::Input::KeyboardNavigationMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_TabNavigation(Windows::UI::Xaml::Input::KeyboardNavigationMode value) noexcept = 0;
    virtual HRESULT __stdcall get_Template(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Template(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_Background(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Background(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderThickness(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_BorderThickness(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderBrush(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_BorderBrush(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FocusState(Windows::UI::Xaml::FocusState* value) noexcept = 0;
    virtual HRESULT __stdcall add_IsEnabledChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_IsEnabledChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall ApplyTemplate(bool* returnValue) noexcept = 0;
    virtual HRESULT __stdcall Focus(Windows::UI::Xaml::FocusState value, bool* returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IControl2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextScaleFactorEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IControl3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_UseSystemFocusVisuals(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_UseSystemFocusVisuals(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IControl4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsFocusEngagementEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsFocusEngagementEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFocusEngaged(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsFocusEngaged(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_RequiresPointer(Windows::UI::Xaml::Controls::RequiresPointer* value) noexcept = 0;
    virtual HRESULT __stdcall put_RequiresPointer(Windows::UI::Xaml::Controls::RequiresPointer value) noexcept = 0;
    virtual HRESULT __stdcall get_XYFocusLeft(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_XYFocusLeft(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_XYFocusRight(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_XYFocusRight(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_XYFocusUp(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_XYFocusUp(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_XYFocusDown(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_XYFocusDown(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ElementSoundMode(Windows::UI::Xaml::ElementSoundMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_ElementSoundMode(Windows::UI::Xaml::ElementSoundMode value) noexcept = 0;
    virtual HRESULT __stdcall add_FocusEngaged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_FocusEngaged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_FocusDisengaged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_FocusDisengaged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall RemoveFocusEngagement() noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IControl5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DefaultStyleResourceUri(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_DefaultStyleResourceUri(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IControlFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IControlOverrides>{ struct type : IInspectable
{
    virtual HRESULT __stdcall OnPointerEntered(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnPointerPressed(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnPointerMoved(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnPointerReleased(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnPointerExited(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnPointerCaptureLost(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnPointerCanceled(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnPointerWheelChanged(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnTapped(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnDoubleTapped(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnHolding(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnRightTapped(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnManipulationStarting(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnManipulationInertiaStarting(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnManipulationStarted(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnManipulationDelta(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnManipulationCompleted(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnKeyUp(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnKeyDown(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnGotFocus(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnLostFocus(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnDragEnter(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnDragLeave(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnDragOver(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnDrop(void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IControlOverrides6>{ struct type : IInspectable
{
    virtual HRESULT __stdcall OnPreviewKeyDown(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnPreviewKeyUp(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnCharacterReceived(void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IControlProtected>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DefaultStyleKey(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_DefaultStyleKey(void* value) noexcept = 0;
    virtual HRESULT __stdcall GetTemplateChild(HSTRING childName, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IControlStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_FontSizeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontFamilyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontWeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStretchProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CharacterSpacingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ForegroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTabStopProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TabIndexProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TabNavigationProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaddingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalContentAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalContentAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BackgroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderThicknessProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderBrushProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DefaultStyleKeyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FocusStateProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IControlStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IControlStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_UseSystemFocusVisualsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTemplateFocusTargetProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetIsTemplateFocusTarget(void* element, bool* value) noexcept = 0;
    virtual HRESULT __stdcall SetIsTemplateFocusTarget(void* element, bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IControlStatics4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsFocusEngagementEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFocusEngagedProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_RequiresPointerProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_XYFocusLeftProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_XYFocusRightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_XYFocusUpProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_XYFocusDownProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ElementSoundModeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IControlStatics5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DefaultStyleResourceUriProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTemplateKeyTipTargetProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetIsTemplateKeyTipTarget(void* element, bool* value) noexcept = 0;
    virtual HRESULT __stdcall SetIsTemplateKeyTipTarget(void* element, bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IControlTemplate>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TargetType(struct struct_Windows_UI_Xaml_Interop_TypeName* value) noexcept = 0;
    virtual HRESULT __stdcall put_TargetType(struct struct_Windows_UI_Xaml_Interop_TypeName value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDataTemplateSelector>{ struct type : IInspectable
{
    virtual HRESULT __stdcall SelectTemplate(void* item, void* container, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDataTemplateSelector2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall SelectTemplateForItem(void* item, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides>{ struct type : IInspectable
{
    virtual HRESULT __stdcall SelectTemplateCore(void* item, void* container, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall SelectTemplateForItemCore(void* item, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDatePickedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_OldDate(Windows::Foundation::DateTime* value) noexcept = 0;
    virtual HRESULT __stdcall get_NewDate(Windows::Foundation::DateTime* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDatePicker>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarIdentifier(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_CalendarIdentifier(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_Date(Windows::Foundation::DateTime* value) noexcept = 0;
    virtual HRESULT __stdcall put_Date(Windows::Foundation::DateTime value) noexcept = 0;
    virtual HRESULT __stdcall get_DayVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_DayVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_MonthVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_YearVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_YearVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_DayFormat(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_DayFormat(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthFormat(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_MonthFormat(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_YearFormat(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_YearFormat(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_MinYear(Windows::Foundation::DateTime* value) noexcept = 0;
    virtual HRESULT __stdcall put_MinYear(Windows::Foundation::DateTime value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxYear(Windows::Foundation::DateTime* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxYear(Windows::Foundation::DateTime value) noexcept = 0;
    virtual HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation* value) noexcept = 0;
    virtual HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept = 0;
    virtual HRESULT __stdcall add_DateChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_DateChanged(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDatePicker2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDatePickerFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDatePickerFlyout>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CalendarIdentifier(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_CalendarIdentifier(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_Date(Windows::Foundation::DateTime* value) noexcept = 0;
    virtual HRESULT __stdcall put_Date(Windows::Foundation::DateTime value) noexcept = 0;
    virtual HRESULT __stdcall get_DayVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_DayVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_MonthVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_YearVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_YearVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_MinYear(Windows::Foundation::DateTime* value) noexcept = 0;
    virtual HRESULT __stdcall put_MinYear(Windows::Foundation::DateTime value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxYear(Windows::Foundation::DateTime* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxYear(Windows::Foundation::DateTime value) noexcept = 0;
    virtual HRESULT __stdcall add_DatePicked(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_DatePicked(event_token token) noexcept = 0;
    virtual HRESULT __stdcall ShowAtAsync(void* target, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDatePickerFlyout2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DayFormat(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_DayFormat(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthFormat(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_MonthFormat(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_YearFormat(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_YearFormat(HSTRING value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDatePickerFlyoutItem>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PrimaryText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_PrimaryText(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_SecondaryText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_SecondaryText(HSTRING value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PrimaryTextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SecondaryTextProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CalendarIdentifierProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DayVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_YearVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MinYearProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxYearProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DayFormatProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthFormatProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_YearFormatProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDatePickerStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CalendarIdentifierProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DayVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_YearVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DayFormatProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MonthFormatProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_YearFormatProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MinYearProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxYearProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OrientationProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDatePickerStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LightDismissOverlayModeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_OldDate(Windows::Foundation::DateTime* value) noexcept = 0;
    virtual HRESULT __stdcall get_NewDate(Windows::Foundation::DateTime* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Items(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DropResult(Windows::ApplicationModel::DataTransfer::DataPackageOperation* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Cancel(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Cancel(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_Items(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Data(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Action(Windows::UI::Xaml::Controls::CommandBarDynamicOverflowAction* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFlipView>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFlipView2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_UseTouchAnimationsForAllNavigation(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_UseTouchAnimationsForAllNavigation(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFlipViewFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFlipViewItem>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFlipViewItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFlipViewStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_UseTouchAnimationsForAllNavigationProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFlyout>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Content(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Content(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FlyoutPresenterStyle(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_FlyoutPresenterStyle(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFlyoutFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFlyoutPresenter>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFlyoutPresenterFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFlyoutStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ContentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FlyoutPresenterStyleProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFocusEngagedEventArgs>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFocusEngagedEventArgs2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Handled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Handled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFontIcon>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Glyph(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_Glyph(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_FontSize(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontSize(double value) noexcept = 0;
    virtual HRESULT __stdcall get_FontFamily(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_FontFamily(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFontIcon2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextScaleFactorEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFontIcon3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MirroredWhenRightToLeft(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_MirroredWhenRightToLeft(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFontIconFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFontIconSource>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Glyph(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_Glyph(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_FontSize(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontSize(double value) noexcept = 0;
    virtual HRESULT __stdcall get_FontFamily(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_FontFamily(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTextScaleFactorEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_MirroredWhenRightToLeft(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_MirroredWhenRightToLeft(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFontIconSourceFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFontIconSourceStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_GlyphProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontSizeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontFamilyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontWeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MirroredWhenRightToLeftProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFontIconStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_GlyphProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontSizeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontFamilyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontWeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStyleProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFontIconStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFontIconStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MirroredWhenRightToLeftProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFrame>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CacheSize(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_CacheSize(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_CanGoBack(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_CanGoForward(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_CurrentSourcePageType(struct struct_Windows_UI_Xaml_Interop_TypeName* value) noexcept = 0;
    virtual HRESULT __stdcall get_SourcePageType(struct struct_Windows_UI_Xaml_Interop_TypeName* value) noexcept = 0;
    virtual HRESULT __stdcall put_SourcePageType(struct struct_Windows_UI_Xaml_Interop_TypeName value) noexcept = 0;
    virtual HRESULT __stdcall get_BackStackDepth(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall add_Navigated(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Navigated(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_Navigating(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Navigating(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_NavigationFailed(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_NavigationFailed(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_NavigationStopped(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_NavigationStopped(event_token token) noexcept = 0;
    virtual HRESULT __stdcall GoBack() noexcept = 0;
    virtual HRESULT __stdcall GoForward() noexcept = 0;
    virtual HRESULT __stdcall Navigate(struct struct_Windows_UI_Xaml_Interop_TypeName sourcePageType, void* parameter, bool* returnValue) noexcept = 0;
    virtual HRESULT __stdcall GetNavigationState(HSTRING* returnValue) noexcept = 0;
    virtual HRESULT __stdcall SetNavigationState(HSTRING navigationState) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFrame2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_BackStack(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ForwardStack(void** value) noexcept = 0;
    virtual HRESULT __stdcall Navigate(struct struct_Windows_UI_Xaml_Interop_TypeName sourcePageType, void* parameter, void* infoOverride, bool* returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFrame3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall GoBack(void* transitionInfoOverride) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFrame4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall SetNavigationStateWithNavigationControl(HSTRING navigationState, bool suppressNavigate) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFrameFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFrameStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CacheSizeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CanGoBackProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CanGoForwardProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CurrentSourcePageTypeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SourcePageTypeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BackStackDepthProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IFrameStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_BackStackProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ForwardStackProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGrid>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_RowDefinitions(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ColumnDefinitions(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGrid2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_BorderBrush(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_BorderBrush(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderThickness(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_BorderThickness(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius* value) noexcept = 0;
    virtual HRESULT __stdcall put_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius value) noexcept = 0;
    virtual HRESULT __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGrid3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_RowSpacing(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_RowSpacing(double value) noexcept = 0;
    virtual HRESULT __stdcall get_ColumnSpacing(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_ColumnSpacing(double value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGridFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGridStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_RowProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetRow(void* element, int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall SetRow(void* element, int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_ColumnProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetColumn(void* element, int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall SetColumn(void* element, int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_RowSpanProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetRowSpan(void* element, int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall SetRowSpan(void* element, int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_ColumnSpanProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetColumnSpan(void* element, int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall SetColumnSpan(void* element, int32_t value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGridStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_BorderBrushProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderThicknessProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CornerRadiusProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaddingProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGridStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_RowSpacingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ColumnSpacingProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGridView>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGridViewFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGridViewHeaderItem>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGridViewItem>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TemplateSettings(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGridViewItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGroupItem>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGroupItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGroupStyle>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Panel(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Panel(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ContainerStyle(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ContainerStyle(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ContainerStyleSelector(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ContainerStyleSelector(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateSelector(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplateSelector(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HidesIfEmpty(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_HidesIfEmpty(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGroupStyle2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HeaderContainerStyle(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderContainerStyle(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGroupStyleFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGroupStyleSelector>{ struct type : IInspectable
{
    virtual HRESULT __stdcall SelectGroupStyle(void* group, uint32_t level, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides>{ struct type : IInspectable
{
    virtual HRESULT __stdcall SelectGroupStyleCore(void* group, uint32_t level, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IHandwritingPanelClosedEventArgs>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IHandwritingPanelOpenedEventArgs>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IHandwritingView>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PlacementTarget(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PlacementTarget(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PlacementAlignment(Windows::UI::Xaml::Controls::HandwritingPanelPlacementAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_PlacementAlignment(Windows::UI::Xaml::Controls::HandwritingPanelPlacementAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_IsOpen(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_AreCandidatesEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_AreCandidatesEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_Opened(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Opened(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_Closed(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Closed(event_token token) noexcept = 0;
    virtual HRESULT __stdcall TryClose(bool* result) noexcept = 0;
    virtual HRESULT __stdcall TryOpen(bool* result) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IHandwritingViewFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IHandwritingViewStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PlacementTargetProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlacementAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsOpenProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AreCandidatesEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IHub>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation* value) noexcept = 0;
    virtual HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept = 0;
    virtual HRESULT __stdcall get_DefaultSectionIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_DefaultSectionIndex(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_Sections(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SectionsInView(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SectionHeaders(void** value) noexcept = 0;
    virtual HRESULT __stdcall add_SectionHeaderClick(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_SectionHeaderClick(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_SectionsInViewChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_SectionsInViewChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall ScrollToSection(void* section) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IHubFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IHubSection>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ContentTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsHeaderInteractive(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsHeaderInteractive(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IHubSectionFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Section(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IHubSectionStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsHeaderInteractiveProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IHubStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OrientationProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DefaultSectionIndexProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SemanticZoomOwnerProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsActiveViewProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsZoomedInViewProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IHyperlinkButton>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_NavigateUri(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_NavigateUri(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IHyperlinkButtonFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IHyperlinkButtonStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_NavigateUriProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IIconElement>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Foreground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Foreground(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IIconElementFactory>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IIconElementStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ForegroundProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IIconSource>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Foreground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Foreground(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IIconSourceFactory>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IIconSourceStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ForegroundProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IImage>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Source(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Source(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch* value) noexcept = 0;
    virtual HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept = 0;
    virtual HRESULT __stdcall get_NineGrid(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_NineGrid(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_PlayToSource(void** value) noexcept = 0;
    virtual HRESULT __stdcall add_ImageFailed(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ImageFailed(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_ImageOpened(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ImageOpened(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IImage2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall GetAsCastingSource(void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IImage3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall GetAlphaMask(void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IImageStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SourceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_StretchProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_NineGridProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlayToSourceProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkCanvas>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_InkPresenter(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkCanvasFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbar>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_InitialControls(Windows::UI::Xaml::Controls::InkToolbarInitialControls* value) noexcept = 0;
    virtual HRESULT __stdcall put_InitialControls(Windows::UI::Xaml::Controls::InkToolbarInitialControls value) noexcept = 0;
    virtual HRESULT __stdcall get_Children(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ActiveTool(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ActiveTool(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_InkDrawingAttributes(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsRulerButtonChecked(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsRulerButtonChecked(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_TargetInkCanvas(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_TargetInkCanvas(void* value) noexcept = 0;
    virtual HRESULT __stdcall add_ActiveToolChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ActiveToolChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_InkDrawingAttributesChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_InkDrawingAttributesChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_EraseAllClicked(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_EraseAllClicked(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_IsRulerButtonCheckedChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_IsRulerButtonCheckedChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall GetToolButton(Windows::UI::Xaml::Controls::InkToolbarTool tool, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall GetToggleButton(Windows::UI::Xaml::Controls::InkToolbarToggle tool, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbar2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsStencilButtonChecked(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsStencilButtonChecked(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_ButtonFlyoutPlacement(Windows::UI::Xaml::Controls::InkToolbarButtonFlyoutPlacement* value) noexcept = 0;
    virtual HRESULT __stdcall put_ButtonFlyoutPlacement(Windows::UI::Xaml::Controls::InkToolbarButtonFlyoutPlacement value) noexcept = 0;
    virtual HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation* value) noexcept = 0;
    virtual HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept = 0;
    virtual HRESULT __stdcall add_IsStencilButtonCheckedChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_IsStencilButtonCheckedChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall GetMenuButton(Windows::UI::Xaml::Controls::InkToolbarMenuKind menu, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarCustomPen>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInkDrawingAttributes(void* brush, double strokeWidth, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CustomPen(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_CustomPen(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ConfigurationContent(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ConfigurationContent(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CustomPenProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ConfigurationContentProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInkDrawingAttributesCore(void* brush, double strokeWidth, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ConfigurationContent(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ConfigurationContent(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ConfigurationContentProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarEraserButton>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarEraserButton2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsClearAllVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsClearAllVisible(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarEraserButtonStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsClearAllVisibleProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItem>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Kind(Windows::UI::Xaml::Controls::InkToolbarFlyoutItemKind* value) noexcept = 0;
    virtual HRESULT __stdcall put_Kind(Windows::UI::Xaml::Controls::InkToolbarFlyoutItemKind value) noexcept = 0;
    virtual HRESULT __stdcall get_IsChecked(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsChecked(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_Checked(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Checked(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_Unchecked(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Unchecked(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarFlyoutItemStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_KindProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsCheckedProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarIsStencilButtonCheckedChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_StencilButton(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_StencilKind(Windows::UI::Xaml::Controls::InkToolbarStencilKind* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarMenuButton>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MenuKind(Windows::UI::Xaml::Controls::InkToolbarMenuKind* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsExtensionGlyphShown(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsExtensionGlyphShown(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarMenuButtonFactory>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarMenuButtonStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsExtensionGlyphShownProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarPenButton>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Palette(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Palette(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_MinStrokeWidth(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_MinStrokeWidth(double value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxStrokeWidth(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxStrokeWidth(double value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedBrush(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedBrushIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectedBrushIndex(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedStrokeWidth(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectedStrokeWidth(double value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PaletteProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MinStrokeWidthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxStrokeWidthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedBrushProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedBrushIndexProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedStrokeWidthProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PenButton(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PenButtonProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarPencilButton>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarRulerButton>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Ruler(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_RulerProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_InitialControlsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ChildrenProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ActiveToolProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_InkDrawingAttributesProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsRulerButtonCheckedProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TargetInkCanvasProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsStencilButtonCheckedProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ButtonFlyoutPlacementProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OrientationProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarStencilButton>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Ruler(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Protractor(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedStencil(Windows::UI::Xaml::Controls::InkToolbarStencilKind* value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectedStencil(Windows::UI::Xaml::Controls::InkToolbarStencilKind value) noexcept = 0;
    virtual HRESULT __stdcall get_IsRulerItemVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsRulerItemVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsProtractorItemVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsProtractorItemVisible(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarStencilButtonFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarStencilButtonStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_RulerProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ProtractorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedStencilProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsRulerItemVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsProtractorItemVisibleProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarToggleButton>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ToggleKind(Windows::UI::Xaml::Controls::InkToolbarToggle* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarToolButton>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ToolKind(Windows::UI::Xaml::Controls::InkToolbarTool* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsExtensionGlyphShown(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsExtensionGlyphShown(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsExtensionGlyphShownProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IInsertionPanel>{ struct type : IInspectable
{
    virtual HRESULT __stdcall GetInsertionIndexes(Windows::Foundation::Point position, int32_t* first, int32_t* second) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemClickEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ClickedItem(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemContainerGenerator>{ struct type : IInspectable
{
    virtual HRESULT __stdcall add_ItemsChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ItemsChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall ItemFromContainer(void* container, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall ContainerFromItem(void* item, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall IndexFromContainer(void* container, int32_t* returnValue) noexcept = 0;
    virtual HRESULT __stdcall ContainerFromIndex(int32_t index, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall GetItemContainerGeneratorForPanel(void* panel, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall StartAt(struct struct_Windows_UI_Xaml_Controls_Primitives_GeneratorPosition position, Windows::UI::Xaml::Controls::Primitives::GeneratorDirection direction, bool allowStartAtRealizedItem) noexcept = 0;
    virtual HRESULT __stdcall Stop() noexcept = 0;
    virtual HRESULT __stdcall GenerateNext(bool* isNewlyRealized, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall PrepareItemContainer(void* container) noexcept = 0;
    virtual HRESULT __stdcall RemoveAll() noexcept = 0;
    virtual HRESULT __stdcall Remove(struct struct_Windows_UI_Xaml_Controls_Primitives_GeneratorPosition position, int32_t count) noexcept = 0;
    virtual HRESULT __stdcall GeneratorPositionFromIndex(int32_t itemIndex, struct struct_Windows_UI_Xaml_Controls_Primitives_GeneratorPosition* returnValue) noexcept = 0;
    virtual HRESULT __stdcall IndexFromGeneratorPosition(struct struct_Windows_UI_Xaml_Controls_Primitives_GeneratorPosition position, int32_t* returnValue) noexcept = 0;
    virtual HRESULT __stdcall Recycle(struct struct_Windows_UI_Xaml_Controls_Primitives_GeneratorPosition position, int32_t count) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemContainerMapping>{ struct type : IInspectable
{
    virtual HRESULT __stdcall ItemFromContainer(void* container, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall ContainerFromItem(void* item, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall IndexFromContainer(void* container, int32_t* returnValue) noexcept = 0;
    virtual HRESULT __stdcall ContainerFromIndex(int32_t index, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsControl>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ItemsSource(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemsSource(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Items(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemTemplateSelector(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemTemplateSelector(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemsPanel(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemsPanel(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_DisplayMemberPath(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_DisplayMemberPath(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemContainerStyle(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemContainerStyle(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemContainerStyleSelector(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemContainerStyleSelector(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemContainerGenerator(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemContainerTransitions(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemContainerTransitions(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_GroupStyle(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_GroupStyleSelector(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_GroupStyleSelector(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsGrouping(bool* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsControl2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ItemsPanelRoot(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsControl3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall GroupHeaderContainerFromItemContainer(void* itemContainer, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsControlFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsControlOverrides>{ struct type : IInspectable
{
    virtual HRESULT __stdcall IsItemItsOwnContainerOverride(void* item, bool* returnValue) noexcept = 0;
    virtual HRESULT __stdcall GetContainerForItemOverride(void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall ClearContainerForItemOverride(void* element, void* item) noexcept = 0;
    virtual HRESULT __stdcall PrepareContainerForItemOverride(void* element, void* item) noexcept = 0;
    virtual HRESULT __stdcall OnItemsChanged(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnItemContainerStyleChanged(void* oldItemContainerStyle, void* newItemContainerStyle) noexcept = 0;
    virtual HRESULT __stdcall OnItemContainerStyleSelectorChanged(void* oldItemContainerStyleSelector, void* newItemContainerStyleSelector) noexcept = 0;
    virtual HRESULT __stdcall OnItemTemplateChanged(void* oldItemTemplate, void* newItemTemplate) noexcept = 0;
    virtual HRESULT __stdcall OnItemTemplateSelectorChanged(void* oldItemTemplateSelector, void* newItemTemplateSelector) noexcept = 0;
    virtual HRESULT __stdcall OnGroupStyleSelectorChanged(void* oldGroupStyleSelector, void* newGroupStyleSelector) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsControlStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ItemsSourceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemTemplateSelectorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemsPanelProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DisplayMemberPathProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemContainerStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemContainerStyleSelectorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemContainerTransitionsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_GroupStyleSelectorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsGroupingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetItemsOwner(void* element, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall ItemsControlFromItemContainer(void* container, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsPanelTemplate>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsPickedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_AddedItems(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_RemovedItems(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsPresenter>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTransitions(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTransitions(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsPresenter2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Footer(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Footer(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FooterTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_FooterTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FooterTransitions(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_FooterTransitions(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsPresenterStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTransitionsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaddingProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsPresenterStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_FooterProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FooterTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FooterTransitionsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsStackPanel>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_GroupPadding(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_GroupPadding(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation* value) noexcept = 0;
    virtual HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstCacheIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstVisibleIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_LastVisibleIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_LastCacheIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_ScrollingDirection(Windows::UI::Xaml::Controls::PanelScrollingDirection* value) noexcept = 0;
    virtual HRESULT __stdcall get_GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement* value) noexcept = 0;
    virtual HRESULT __stdcall put_GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemsUpdatingScrollMode(Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemsUpdatingScrollMode(Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode value) noexcept = 0;
    virtual HRESULT __stdcall get_CacheLength(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_CacheLength(double value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsStackPanel2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_AreStickyGroupHeadersEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_AreStickyGroupHeadersEnabled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsStackPanelStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_GroupPaddingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OrientationProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_GroupHeaderPlacementProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CacheLengthProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsStackPanelStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_AreStickyGroupHeadersEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsWrapGrid>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_GroupPadding(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_GroupPadding(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation* value) noexcept = 0;
    virtual HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept = 0;
    virtual HRESULT __stdcall get_MaximumRowsOrColumns(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaximumRowsOrColumns(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemWidth(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemWidth(double value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemHeight(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemHeight(double value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstCacheIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_FirstVisibleIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_LastVisibleIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_LastCacheIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_ScrollingDirection(Windows::UI::Xaml::Controls::PanelScrollingDirection* value) noexcept = 0;
    virtual HRESULT __stdcall get_GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement* value) noexcept = 0;
    virtual HRESULT __stdcall put_GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value) noexcept = 0;
    virtual HRESULT __stdcall get_CacheLength(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_CacheLength(double value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsWrapGrid2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_AreStickyGroupHeadersEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_AreStickyGroupHeadersEnabled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsWrapGridStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_GroupPaddingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OrientationProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaximumRowsOrColumnsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemWidthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemHeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_GroupHeaderPlacementProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CacheLengthProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IItemsWrapGridStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_AreStickyGroupHeadersEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListBox>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectedItems(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionMode(Windows::UI::Xaml::Controls::SelectionMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectionMode(Windows::UI::Xaml::Controls::SelectionMode value) noexcept = 0;
    virtual HRESULT __stdcall ScrollIntoView(void* item) noexcept = 0;
    virtual HRESULT __stdcall SelectAll() noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListBox2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SingleSelectionFollowsFocus(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_SingleSelectionFollowsFocus(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListBoxFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListBoxItem>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListBoxItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListBoxStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectionModeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListBoxStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SingleSelectionFollowsFocusProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListPickerFlyout>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ItemsSource(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemsSource(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_DisplayMemberPath(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_DisplayMemberPath(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionMode(Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectionMode(Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectedIndex(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedItem(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectedItem(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedValue(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectedValue(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedValuePath(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectedValuePath(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedItems(void** value) noexcept = 0;
    virtual HRESULT __stdcall add_ItemsPicked(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ItemsPicked(event_token token) noexcept = 0;
    virtual HRESULT __stdcall ShowAtAsync(void* target, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListPickerFlyoutStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ItemsSourceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DisplayMemberPathProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionModeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedIndexProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedItemProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedValueProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedValuePathProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListView>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewBase>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectedItems(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionMode(Windows::UI::Xaml::Controls::ListViewSelectionMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectionMode(Windows::UI::Xaml::Controls::ListViewSelectionMode value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSwipeEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsSwipeEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_CanDragItems(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_CanDragItems(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_CanReorderItems(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_CanReorderItems(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsItemClickEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsItemClickEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_DataFetchSize(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_DataFetchSize(double value) noexcept = 0;
    virtual HRESULT __stdcall get_IncrementalLoadingThreshold(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_IncrementalLoadingThreshold(double value) noexcept = 0;
    virtual HRESULT __stdcall get_IncrementalLoadingTrigger(Windows::UI::Xaml::Controls::IncrementalLoadingTrigger* value) noexcept = 0;
    virtual HRESULT __stdcall put_IncrementalLoadingTrigger(Windows::UI::Xaml::Controls::IncrementalLoadingTrigger value) noexcept = 0;
    virtual HRESULT __stdcall add_ItemClick(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ItemClick(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_DragItemsStarting(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_DragItemsStarting(event_token token) noexcept = 0;
    virtual HRESULT __stdcall ScrollIntoView(void* item) noexcept = 0;
    virtual HRESULT __stdcall SelectAll() noexcept = 0;
    virtual HRESULT __stdcall LoadMoreItemsAsync(void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall ScrollIntoViewWithAlignment(void* item, Windows::UI::Xaml::Controls::ScrollIntoViewAlignment alignment) noexcept = 0;
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTransitions(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTransitions(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewBase2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ShowsScrollingPlaceholders(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_ShowsScrollingPlaceholders(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_ContainerContentChanging(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ContainerContentChanging(event_token token) noexcept = 0;
    virtual HRESULT __stdcall SetDesiredContainerUpdateDuration(Windows::Foundation::TimeSpan duration) noexcept = 0;
    virtual HRESULT __stdcall get_Footer(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Footer(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FooterTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_FooterTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FooterTransitions(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_FooterTransitions(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewBase3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ReorderMode(Windows::UI::Xaml::Controls::ListViewReorderMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_ReorderMode(Windows::UI::Xaml::Controls::ListViewReorderMode value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewBase4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectedRanges(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsMultiSelectCheckBoxEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsMultiSelectCheckBoxEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_DragItemsCompleted(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_DragItemsCompleted(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_ChoosingItemContainer(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ChoosingItemContainer(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_ChoosingGroupHeaderContainer(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ChoosingGroupHeaderContainer(event_token token) noexcept = 0;
    virtual HRESULT __stdcall SelectRange(void* itemIndexRange) noexcept = 0;
    virtual HRESULT __stdcall DeselectRange(void* itemIndexRange) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewBase5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SingleSelectionFollowsFocus(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_SingleSelectionFollowsFocus(bool value) noexcept = 0;
    virtual HRESULT __stdcall IsDragSource(bool* returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewBase6>{ struct type : IInspectable
{
    virtual HRESULT __stdcall TryStartConnectedAnimationAsync(void* animation, void* item, HSTRING elementName, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall PrepareConnectedAnimation(HSTRING key, void* item, HSTRING elementName, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewBaseFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewBaseHeaderItem>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewBaseStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectionModeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSwipeEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CanDragItemsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CanReorderItemsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsItemClickEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DataFetchSizeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IncrementalLoadingThresholdProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IncrementalLoadingTriggerProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SemanticZoomOwnerProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsActiveViewProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsZoomedInViewProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTransitionsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewBaseStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ShowsScrollingPlaceholdersProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FooterProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FooterTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FooterTransitionsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewBaseStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ReorderModeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewBaseStatics4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsMultiSelectCheckBoxEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewBaseStatics5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SingleSelectionFollowsFocusProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewHeaderItem>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewHeaderItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewItem>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TemplateSettings(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewPersistenceHelper>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall GetRelativeScrollPosition(void* listViewBase, void* itemToKeyHandler, HSTRING* returnValue) noexcept = 0;
    virtual HRESULT __stdcall SetRelativeScrollPositionAsync(void* listViewBase, HSTRING relativeScrollPosition, void* keyToItemHandler, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaElement>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PosterSource(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PosterSource(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Source(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Source(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsMuted(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsMuted(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsAudioOnly(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_AutoPlay(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_AutoPlay(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_Volume(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_Volume(double value) noexcept = 0;
    virtual HRESULT __stdcall get_Balance(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_Balance(double value) noexcept = 0;
    virtual HRESULT __stdcall get_NaturalVideoHeight(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_NaturalVideoWidth(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_NaturalDuration(struct struct_Windows_UI_Xaml_Duration* value) noexcept = 0;
    virtual HRESULT __stdcall get_Position(Windows::Foundation::TimeSpan* value) noexcept = 0;
    virtual HRESULT __stdcall put_Position(Windows::Foundation::TimeSpan value) noexcept = 0;
    virtual HRESULT __stdcall get_DownloadProgress(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_BufferingProgress(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_DownloadProgressOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_CurrentState(Windows::UI::Xaml::Media::MediaElementState* value) noexcept = 0;
    virtual HRESULT __stdcall get_Markers(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CanSeek(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_CanPause(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_AudioStreamCount(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_AudioStreamIndex(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_AudioStreamIndex(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaybackRate(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_PlaybackRate(double value) noexcept = 0;
    virtual HRESULT __stdcall get_IsLooping(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsLooping(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_PlayToSource(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DefaultPlaybackRate(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_DefaultPlaybackRate(double value) noexcept = 0;
    virtual HRESULT __stdcall get_AspectRatioWidth(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_AspectRatioHeight(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_RealTimePlayback(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_RealTimePlayback(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_AudioCategory(Windows::UI::Xaml::Media::AudioCategory* value) noexcept = 0;
    virtual HRESULT __stdcall put_AudioCategory(Windows::UI::Xaml::Media::AudioCategory value) noexcept = 0;
    virtual HRESULT __stdcall get_AudioDeviceType(Windows::UI::Xaml::Media::AudioDeviceType* value) noexcept = 0;
    virtual HRESULT __stdcall put_AudioDeviceType(Windows::UI::Xaml::Media::AudioDeviceType value) noexcept = 0;
    virtual HRESULT __stdcall get_ProtectionManager(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ProtectionManager(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Stereo3DVideoPackingMode(Windows::UI::Xaml::Media::Stereo3DVideoPackingMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_Stereo3DVideoPackingMode(Windows::UI::Xaml::Media::Stereo3DVideoPackingMode value) noexcept = 0;
    virtual HRESULT __stdcall get_Stereo3DVideoRenderMode(Windows::UI::Xaml::Media::Stereo3DVideoRenderMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_Stereo3DVideoRenderMode(Windows::UI::Xaml::Media::Stereo3DVideoRenderMode value) noexcept = 0;
    virtual HRESULT __stdcall get_IsStereo3DVideo(bool* value) noexcept = 0;
    virtual HRESULT __stdcall add_MediaOpened(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_MediaOpened(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_MediaEnded(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_MediaEnded(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_MediaFailed(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_MediaFailed(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_DownloadProgressChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_DownloadProgressChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_BufferingProgressChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_BufferingProgressChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_CurrentStateChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_CurrentStateChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_MarkerReached(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_MarkerReached(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_RateChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_RateChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_VolumeChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_VolumeChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_SeekCompleted(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_SeekCompleted(event_token token) noexcept = 0;
    virtual HRESULT __stdcall Stop() noexcept = 0;
    virtual HRESULT __stdcall Play() noexcept = 0;
    virtual HRESULT __stdcall Pause() noexcept = 0;
    virtual HRESULT __stdcall CanPlayType(HSTRING type, Windows::UI::Xaml::Media::MediaCanPlayResponse* returnValue) noexcept = 0;
    virtual HRESULT __stdcall SetSource(void* stream, HSTRING mimeType) noexcept = 0;
    virtual HRESULT __stdcall GetAudioStreamLanguage(void* index, HSTRING* returnValue) noexcept = 0;
    virtual HRESULT __stdcall AddAudioEffect(HSTRING effectID, bool effectOptional, void* effectConfiguration) noexcept = 0;
    virtual HRESULT __stdcall AddVideoEffect(HSTRING effectID, bool effectOptional, void* effectConfiguration) noexcept = 0;
    virtual HRESULT __stdcall RemoveAllEffects() noexcept = 0;
    virtual HRESULT __stdcall get_ActualStereo3DVideoPackingMode(Windows::UI::Xaml::Media::Stereo3DVideoPackingMode* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaElement2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_AreTransportControlsEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_AreTransportControlsEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch* value) noexcept = 0;
    virtual HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFullWindow(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsFullWindow(bool value) noexcept = 0;
    virtual HRESULT __stdcall SetMediaStreamSource(void* source) noexcept = 0;
    virtual HRESULT __stdcall get_PlayToPreferredSourceUri(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PlayToPreferredSourceUri(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaElement3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TransportControls(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_TransportControls(void* value) noexcept = 0;
    virtual HRESULT __stdcall add_PartialMediaFailureDetected(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PartialMediaFailureDetected(event_token token) noexcept = 0;
    virtual HRESULT __stdcall SetPlaybackSource(void* source) noexcept = 0;
    virtual HRESULT __stdcall GetAsCastingSource(void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaElementStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PosterSourceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SourceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsMutedProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsAudioOnlyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AutoPlayProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VolumeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BalanceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_NaturalVideoHeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_NaturalVideoWidthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_NaturalDurationProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PositionProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DownloadProgressProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BufferingProgressProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DownloadProgressOffsetProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CurrentStateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CanSeekProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CanPauseProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AudioStreamCountProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AudioStreamIndexProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaybackRateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsLoopingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlayToSourceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DefaultPlaybackRateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AspectRatioWidthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AspectRatioHeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_RealTimePlaybackProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AudioCategoryProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AudioDeviceTypeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ProtectionManagerProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Stereo3DVideoPackingModeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Stereo3DVideoRenderModeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsStereo3DVideoProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ActualStereo3DVideoPackingModeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaElementStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_AreTransportControlsEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_StretchProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFullWindowProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlayToPreferredSourceUriProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaPlayerElement>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Source(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Source(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_TransportControls(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_TransportControls(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_AreTransportControlsEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_AreTransportControlsEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_PosterSource(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PosterSource(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch* value) noexcept = 0;
    virtual HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept = 0;
    virtual HRESULT __stdcall get_AutoPlay(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_AutoPlay(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFullWindow(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsFullWindow(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_MediaPlayer(void** value) noexcept = 0;
    virtual HRESULT __stdcall SetMediaPlayer(void* mediaPlayer) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaPlayerElementFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaPlayerElementStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SourceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AreTransportControlsEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PosterSourceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_StretchProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AutoPlayProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFullWindowProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MediaPlayerProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaPlayerPresenter>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MediaPlayer(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_MediaPlayer(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch* value) noexcept = 0;
    virtual HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFullWindow(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsFullWindow(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MediaPlayerProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_StretchProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFullWindowProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaTransportControls>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsFullWindowButtonVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsFullWindowButtonVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFullWindowEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsFullWindowEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsZoomButtonVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsZoomButtonVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsZoomEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsZoomEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFastForwardButtonVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsFastForwardButtonVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFastForwardEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsFastForwardEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFastRewindButtonVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsFastRewindButtonVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFastRewindEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsFastRewindEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsStopButtonVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsStopButtonVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsStopEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsStopEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsVolumeButtonVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsVolumeButtonVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsVolumeEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsVolumeEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsPlaybackRateButtonVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsPlaybackRateButtonVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsPlaybackRateEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsPlaybackRateEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSeekBarVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsSeekBarVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSeekEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsSeekEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsCompact(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsCompact(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaTransportControls2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsSkipForwardButtonVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsSkipForwardButtonVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSkipForwardEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsSkipForwardEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSkipBackwardButtonVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsSkipBackwardButtonVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSkipBackwardEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsSkipBackwardEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsNextTrackButtonVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsNextTrackButtonVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsPreviousTrackButtonVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsPreviousTrackButtonVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_FastPlayFallbackBehaviour(Windows::UI::Xaml::Media::FastPlayFallbackBehaviour* value) noexcept = 0;
    virtual HRESULT __stdcall put_FastPlayFallbackBehaviour(Windows::UI::Xaml::Media::FastPlayFallbackBehaviour value) noexcept = 0;
    virtual HRESULT __stdcall add_ThumbnailRequested(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ThumbnailRequested(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaTransportControls3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ShowAndHideAutomatically(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_ShowAndHideAutomatically(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsRepeatEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsRepeatEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsRepeatButtonVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsRepeatButtonVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall Show() noexcept = 0;
    virtual HRESULT __stdcall Hide() noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaTransportControls4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsCompactOverlayButtonVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsCompactOverlayButtonVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsCompactOverlayEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsCompactOverlayEnabled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaTransportControlsFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaTransportControlsHelper>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DropoutOrderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetDropoutOrder(void* element, void** value) noexcept = 0;
    virtual HRESULT __stdcall SetDropoutOrder(void* element, void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsFullWindowButtonVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFullWindowEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsZoomButtonVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsZoomEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFastForwardButtonVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFastForwardEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFastRewindButtonVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsFastRewindEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsStopButtonVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsStopEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsVolumeButtonVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsVolumeEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsPlaybackRateButtonVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsPlaybackRateEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSeekBarVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSeekEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsCompactProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsSkipForwardButtonVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSkipForwardEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSkipBackwardButtonVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSkipBackwardEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsNextTrackButtonVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsPreviousTrackButtonVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FastPlayFallbackBehaviourProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ShowAndHideAutomaticallyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsRepeatEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsRepeatButtonVisibleProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMediaTransportControlsStatics4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsCompactOverlayButtonVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsCompactOverlayEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyout>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Items(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MenuFlyoutPresenterStyle(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_MenuFlyoutPresenterStyle(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyout2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall ShowAt(void* targetElement, Windows::Foundation::Point point) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutItem>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Text(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_Text(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_Command(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Command(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_CommandParameter(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_CommandParameter(void* value) noexcept = 0;
    virtual HRESULT __stdcall add_Click(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Click(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutItem2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Icon(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Icon(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutItem3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_KeyboardAcceleratorTextOverride(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_KeyboardAcceleratorTextOverride(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_TemplateSettings(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutItemBase>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CommandProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CommandParameterProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IconProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_KeyboardAcceleratorTextOverrideProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutPresenter>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TemplateSettings(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutSeparator>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MenuFlyoutPresenterStyleProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutSubItem>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Items(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Text(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_Text(HSTRING value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutSubItem2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Icon(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Icon(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TextProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IconProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigate>{ struct type : IInspectable
{
    virtual HRESULT __stdcall Navigate(struct struct_Windows_UI_Xaml_Interop_TypeName sourcePageType, bool* returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationView>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsPaneOpen(bool* result) noexcept = 0;
    virtual HRESULT __stdcall put_IsPaneOpen(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_CompactModeThresholdWidth(double* result) noexcept = 0;
    virtual HRESULT __stdcall put_CompactModeThresholdWidth(double value) noexcept = 0;
    virtual HRESULT __stdcall get_ExpandedModeThresholdWidth(double* result) noexcept = 0;
    virtual HRESULT __stdcall put_ExpandedModeThresholdWidth(double value) noexcept = 0;
    virtual HRESULT __stdcall get_PaneFooter(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PaneFooter(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_DisplayMode(Windows::UI::Xaml::Controls::NavigationViewDisplayMode* result) noexcept = 0;
    virtual HRESULT __stdcall get_IsSettingsVisible(bool* result) noexcept = 0;
    virtual HRESULT __stdcall put_IsSettingsVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsPaneToggleButtonVisible(bool* result) noexcept = 0;
    virtual HRESULT __stdcall put_IsPaneToggleButtonVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_AlwaysShowHeader(bool* result) noexcept = 0;
    virtual HRESULT __stdcall put_AlwaysShowHeader(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_CompactPaneLength(double* result) noexcept = 0;
    virtual HRESULT __stdcall put_CompactPaneLength(double value) noexcept = 0;
    virtual HRESULT __stdcall get_OpenPaneLength(double* result) noexcept = 0;
    virtual HRESULT __stdcall put_OpenPaneLength(double value) noexcept = 0;
    virtual HRESULT __stdcall get_PaneToggleButtonStyle(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PaneToggleButtonStyle(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedItem(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectedItem(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_MenuItems(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MenuItemsSource(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_MenuItemsSource(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_SettingsItem(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AutoSuggestBox(void** result) noexcept = 0;
    virtual HRESULT __stdcall put_AutoSuggestBox(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_MenuItemTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_MenuItemTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_MenuItemTemplateSelector(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_MenuItemTemplateSelector(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_MenuItemContainerStyle(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_MenuItemContainerStyle(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_MenuItemContainerStyleSelector(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_MenuItemContainerStyleSelector(void* value) noexcept = 0;
    virtual HRESULT __stdcall MenuItemFromContainer(void* container, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall ContainerFromMenuItem(void* item, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall add_SelectionChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_ItemInvoked(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ItemInvoked(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_DisplayModeChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_DisplayModeChanged(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationView2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsBackButtonVisible(Windows::UI::Xaml::Controls::NavigationViewBackButtonVisible* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsBackButtonVisible(Windows::UI::Xaml::Controls::NavigationViewBackButtonVisible value) noexcept = 0;
    virtual HRESULT __stdcall get_IsBackEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsBackEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_PaneTitle(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_PaneTitle(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall add_BackRequested(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_BackRequested(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_PaneClosed(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PaneClosed(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_PaneClosing(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PaneClosing(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_PaneOpened(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PaneOpened(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_PaneOpening(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PaneOpening(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DisplayMode(Windows::UI::Xaml::Controls::NavigationViewDisplayMode* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewItem>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Icon(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Icon(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_CompactPaneLength(double* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewItemBase>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewItemBaseFactory>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewItemHeader>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewItemHeaderFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_InvokedItem(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSettingsInvoked(bool* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewItemSeparator>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewItemStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IconProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CompactPaneLengthProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewList>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewListFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Cancel(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Cancel(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectedItem(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSettingsSelected(bool* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsPaneOpenProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CompactModeThresholdWidthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ExpandedModeThresholdWidthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaneFooterProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DisplayModeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSettingsVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsPaneToggleButtonVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AlwaysShowHeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CompactPaneLengthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OpenPaneLengthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaneToggleButtonStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MenuItemsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MenuItemsSourceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedItemProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SettingsItemProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AutoSuggestBoxProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MenuItemTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MenuItemTemplateSelectorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MenuItemContainerStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MenuItemContainerStyleSelectorProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INavigationViewStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsBackButtonVisibleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsBackEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaneTitleProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INotifyEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Value(HSTRING* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::INotifyEventArgs2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CallingUri(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPage>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Frame(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_NavigationCacheMode(Windows::UI::Xaml::Navigation::NavigationCacheMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_NavigationCacheMode(Windows::UI::Xaml::Navigation::NavigationCacheMode value) noexcept = 0;
    virtual HRESULT __stdcall get_TopAppBar(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_TopAppBar(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_BottomAppBar(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_BottomAppBar(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPageFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPageOverrides>{ struct type : IInspectable
{
    virtual HRESULT __stdcall OnNavigatedFrom(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnNavigatedTo(void* e) noexcept = 0;
    virtual HRESULT __stdcall OnNavigatingFrom(void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPageStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_FrameProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TopAppBarProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BottomAppBarProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPanel>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Children(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Background(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Background(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsItemsHost(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_ChildrenTransitions(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ChildrenTransitions(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPanelFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPanelStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_BackgroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsItemsHostProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ChildrenTransitionsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IParallaxView>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Child(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Child(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalShift(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalShift(double value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalSourceEndOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalSourceEndOffset(double value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalSourceOffsetKind(Windows::UI::Xaml::Controls::ParallaxSourceOffsetKind* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalSourceOffsetKind(Windows::UI::Xaml::Controls::ParallaxSourceOffsetKind value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalSourceStartOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalSourceStartOffset(double value) noexcept = 0;
    virtual HRESULT __stdcall get_IsHorizontalShiftClamped(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsHorizontalShiftClamped(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsVerticalShiftClamped(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsVerticalShiftClamped(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxHorizontalShiftRatio(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxHorizontalShiftRatio(double value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxVerticalShiftRatio(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxVerticalShiftRatio(double value) noexcept = 0;
    virtual HRESULT __stdcall get_Source(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Source(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalShift(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_VerticalShift(double value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalSourceEndOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_VerticalSourceEndOffset(double value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalSourceOffsetKind(Windows::UI::Xaml::Controls::ParallaxSourceOffsetKind* value) noexcept = 0;
    virtual HRESULT __stdcall put_VerticalSourceOffsetKind(Windows::UI::Xaml::Controls::ParallaxSourceOffsetKind value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalSourceStartOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_VerticalSourceStartOffset(double value) noexcept = 0;
    virtual HRESULT __stdcall RefreshAutomaticHorizontalOffsets() noexcept = 0;
    virtual HRESULT __stdcall RefreshAutomaticVerticalOffsets() noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IParallaxViewFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IParallaxViewStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ChildProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalSourceEndOffsetProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalSourceOffsetKindProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalSourceStartOffsetProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxHorizontalShiftRatioProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalShiftProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsHorizontalShiftClampedProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsVerticalShiftClampedProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SourceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalSourceEndOffsetProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalSourceOffsetKindProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalSourceStartOffsetProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxVerticalShiftRatioProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalShiftProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPasswordBox>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Password(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_Password(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_PasswordChar(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_PasswordChar(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_IsPasswordRevealButtonEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsPasswordRevealButtonEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxLength(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxLength(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall add_PasswordChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PasswordChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_ContextMenuOpening(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ContextMenuOpening(event_token token) noexcept = 0;
    virtual HRESULT __stdcall SelectAll() noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPasswordBox2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_PlaceholderText(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionHighlightColor(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectionHighlightColor(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_Paste(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Paste(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPasswordBox3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PasswordRevealMode(Windows::UI::Xaml::Controls::PasswordRevealMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_PasswordRevealMode(Windows::UI::Xaml::Controls::PasswordRevealMode value) noexcept = 0;
    virtual HRESULT __stdcall get_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) noexcept = 0;
    virtual HRESULT __stdcall get_InputScope(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_InputScope(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPasswordBox4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall add_PasswordChanging(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PasswordChanging(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsContentChanging(bool* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPasswordBoxStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PasswordProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PasswordCharProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsPasswordRevealButtonEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxLengthProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPasswordBoxStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderTextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionHighlightColorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPasswordBoxStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PasswordRevealModeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextReadingOrderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_InputScopeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPathIcon>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Data(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Data(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPathIconFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPathIconSource>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Data(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Data(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPathIconSourceFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPathIconSourceStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DataProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPathIconStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DataProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPersonPicture>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_BadgeNumber(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_BadgeNumber(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_BadgeGlyph(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_BadgeGlyph(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_BadgeImageSource(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_BadgeImageSource(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_BadgeText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_BadgeText(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_IsGroup(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsGroup(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_Contact(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Contact(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_DisplayName(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_DisplayName(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_Initials(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_Initials(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_PreferSmallImage(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_PreferSmallImage(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_ProfilePicture(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ProfilePicture(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPersonPictureFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPersonPictureStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_BadgeNumberProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BadgeGlyphProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BadgeImageSourceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BadgeTextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsGroupProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ContactProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DisplayNameProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_InitialsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PreferSmallImageProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ProfilePictureProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPickerFlyout>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Content(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Content(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ConfirmationButtonsVisible(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_ConfirmationButtonsVisible(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_Confirmed(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Confirmed(event_token token) noexcept = 0;
    virtual HRESULT __stdcall ShowAtAsync(void* target, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPickerFlyoutPresenter>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPickerFlyoutStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ContentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ConfirmationButtonsVisibleProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPivot>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Title(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Title(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_TitleTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_TitleTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectedIndex(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedItem(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectedItem(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsLocked(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsLocked(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_SelectionChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_PivotItemLoading(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PivotItemLoading(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_PivotItemLoaded(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PivotItemLoaded(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_PivotItemUnloading(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PivotItemUnloading(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_PivotItemUnloaded(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PivotItemUnloaded(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPivot2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LeftHeader(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_LeftHeader(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_LeftHeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_LeftHeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_RightHeader(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_RightHeader(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_RightHeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_RightHeaderTemplate(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPivot3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HeaderFocusVisualPlacement(Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement* value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderFocusVisualPlacement(Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement value) noexcept = 0;
    virtual HRESULT __stdcall get_IsHeaderItemsCarouselEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsHeaderItemsCarouselEnabled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPivotFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPivotItem>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPivotItemEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Item(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Item(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPivotItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPivotItemStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPivotStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TitleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TitleTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedIndexProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedItemProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsLockedProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SlideInAnimationGroupProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetSlideInAnimationGroup(void* element, Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup* value) noexcept = 0;
    virtual HRESULT __stdcall SetSlideInAnimationGroup(void* element, Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPivotStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LeftHeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_LeftHeaderTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_RightHeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_RightHeaderTemplateProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IPivotStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HeaderFocusVisualPlacementProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsHeaderItemsCarouselEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IProgressBar>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsIndeterminate(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsIndeterminate(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_ShowError(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_ShowError(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_ShowPaused(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_ShowPaused(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_TemplateSettings(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IProgressBarFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IProgressBarStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsIndeterminateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ShowErrorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ShowPausedProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IProgressRing>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsActive(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsActive(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_TemplateSettings(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IProgressRingStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsActiveProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRadioButton>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_GroupName(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_GroupName(HSTRING value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRadioButtonFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRadioButtonStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_GroupNameProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRatingControl>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Caption(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_Caption(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_InitialSetValue(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_InitialSetValue(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_IsClearEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsClearEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsReadOnly(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsReadOnly(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxRating(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxRating(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderValue(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_PlaceholderValue(double value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemInfo(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemInfo(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Value(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_Value(double value) noexcept = 0;
    virtual HRESULT __stdcall add_ValueChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ValueChanged(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRatingControlFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRatingControlStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CaptionProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_InitialSetValueProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsClearEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsReadOnlyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxRatingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderValueProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemInfoProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ValueProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRatingItemFontInfo>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DisabledGlyph(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_DisabledGlyph(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_Glyph(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_Glyph(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_PointerOverGlyph(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_PointerOverGlyph(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_PointerOverPlaceholderGlyph(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_PointerOverPlaceholderGlyph(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderGlyph(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_PlaceholderGlyph(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_UnsetGlyph(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_UnsetGlyph(HSTRING value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRatingItemFontInfoFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRatingItemFontInfoStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DisabledGlyphProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_GlyphProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderGlyphProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PointerOverGlyphProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PointerOverPlaceholderGlyphProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_UnsetGlyphProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRatingItemImageInfo>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DisabledImage(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_DisabledImage(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Image(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Image(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderImage(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PlaceholderImage(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PointerOverImage(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PointerOverImage(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PointerOverPlaceholderImage(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PointerOverPlaceholderImage(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_UnsetImage(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_UnsetImage(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRatingItemImageInfoFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRatingItemImageInfoStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DisabledImageProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ImageProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderImageProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PointerOverImageProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PointerOverPlaceholderImageProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_UnsetImageProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRatingItemInfo>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRatingItemInfoFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRefreshContainer>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Visualizer(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Visualizer(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PullDirection(Windows::UI::Xaml::Controls::RefreshPullDirection* value) noexcept = 0;
    virtual HRESULT __stdcall put_PullDirection(Windows::UI::Xaml::Controls::RefreshPullDirection value) noexcept = 0;
    virtual HRESULT __stdcall add_RefreshRequested(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_RefreshRequested(event_token token) noexcept = 0;
    virtual HRESULT __stdcall RequestRefresh() noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRefreshContainerFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRefreshContainerStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_VisualizerProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PullDirectionProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_InteractionRatio(double* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRefreshRequestedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall GetDeferral(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRefreshStateChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_OldState(Windows::UI::Xaml::Controls::RefreshVisualizerState* value) noexcept = 0;
    virtual HRESULT __stdcall get_NewState(Windows::UI::Xaml::Controls::RefreshVisualizerState* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRefreshVisualizer>{ struct type : IInspectable
{
    virtual HRESULT __stdcall RequestRefresh() noexcept = 0;
    virtual HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::RefreshVisualizerOrientation* value) noexcept = 0;
    virtual HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::RefreshVisualizerOrientation value) noexcept = 0;
    virtual HRESULT __stdcall get_Content(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Content(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_State(Windows::UI::Xaml::Controls::RefreshVisualizerState* value) noexcept = 0;
    virtual HRESULT __stdcall add_RefreshRequested(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_RefreshRequested(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_RefreshStateChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_RefreshStateChanged(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRefreshVisualizerFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRefreshVisualizerStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_InfoProviderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OrientationProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_StateProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRelativePanel>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_BorderBrush(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_BorderBrush(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderThickness(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_BorderThickness(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius* value) noexcept = 0;
    virtual HRESULT __stdcall put_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius value) noexcept = 0;
    virtual HRESULT __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRelativePanelFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRelativePanelStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LeftOfProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetLeftOf(void* element, void** value) noexcept = 0;
    virtual HRESULT __stdcall SetLeftOf(void* element, void* value) noexcept = 0;
    virtual HRESULT __stdcall get_AboveProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetAbove(void* element, void** value) noexcept = 0;
    virtual HRESULT __stdcall SetAbove(void* element, void* value) noexcept = 0;
    virtual HRESULT __stdcall get_RightOfProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetRightOf(void* element, void** value) noexcept = 0;
    virtual HRESULT __stdcall SetRightOf(void* element, void* value) noexcept = 0;
    virtual HRESULT __stdcall get_BelowProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetBelow(void* element, void** value) noexcept = 0;
    virtual HRESULT __stdcall SetBelow(void* element, void* value) noexcept = 0;
    virtual HRESULT __stdcall get_AlignHorizontalCenterWithProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetAlignHorizontalCenterWith(void* element, void** value) noexcept = 0;
    virtual HRESULT __stdcall SetAlignHorizontalCenterWith(void* element, void* value) noexcept = 0;
    virtual HRESULT __stdcall get_AlignVerticalCenterWithProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetAlignVerticalCenterWith(void* element, void** value) noexcept = 0;
    virtual HRESULT __stdcall SetAlignVerticalCenterWith(void* element, void* value) noexcept = 0;
    virtual HRESULT __stdcall get_AlignLeftWithProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetAlignLeftWith(void* element, void** value) noexcept = 0;
    virtual HRESULT __stdcall SetAlignLeftWith(void* element, void* value) noexcept = 0;
    virtual HRESULT __stdcall get_AlignTopWithProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetAlignTopWith(void* element, void** value) noexcept = 0;
    virtual HRESULT __stdcall SetAlignTopWith(void* element, void* value) noexcept = 0;
    virtual HRESULT __stdcall get_AlignRightWithProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetAlignRightWith(void* element, void** value) noexcept = 0;
    virtual HRESULT __stdcall SetAlignRightWith(void* element, void* value) noexcept = 0;
    virtual HRESULT __stdcall get_AlignBottomWithProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetAlignBottomWith(void* element, void** value) noexcept = 0;
    virtual HRESULT __stdcall SetAlignBottomWith(void* element, void* value) noexcept = 0;
    virtual HRESULT __stdcall get_AlignLeftWithPanelProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetAlignLeftWithPanel(void* element, bool* value) noexcept = 0;
    virtual HRESULT __stdcall SetAlignLeftWithPanel(void* element, bool value) noexcept = 0;
    virtual HRESULT __stdcall get_AlignTopWithPanelProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetAlignTopWithPanel(void* element, bool* value) noexcept = 0;
    virtual HRESULT __stdcall SetAlignTopWithPanel(void* element, bool value) noexcept = 0;
    virtual HRESULT __stdcall get_AlignRightWithPanelProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetAlignRightWithPanel(void* element, bool* value) noexcept = 0;
    virtual HRESULT __stdcall SetAlignRightWithPanel(void* element, bool value) noexcept = 0;
    virtual HRESULT __stdcall get_AlignBottomWithPanelProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetAlignBottomWithPanel(void* element, bool* value) noexcept = 0;
    virtual HRESULT __stdcall SetAlignBottomWithPanel(void* element, bool value) noexcept = 0;
    virtual HRESULT __stdcall get_AlignHorizontalCenterWithPanelProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetAlignHorizontalCenterWithPanel(void* element, bool* value) noexcept = 0;
    virtual HRESULT __stdcall SetAlignHorizontalCenterWithPanel(void* element, bool value) noexcept = 0;
    virtual HRESULT __stdcall get_AlignVerticalCenterWithPanelProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetAlignVerticalCenterWithPanel(void* element, bool* value) noexcept = 0;
    virtual HRESULT __stdcall SetAlignVerticalCenterWithPanel(void* element, bool value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderBrushProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderThicknessProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CornerRadiusProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaddingProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBox>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsReadOnly(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsReadOnly(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_AcceptsReturn(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_AcceptsReturn(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_TextAlignment(Windows::UI::Xaml::TextAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_TextWrapping(Windows::UI::Xaml::TextWrapping* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextWrapping(Windows::UI::Xaml::TextWrapping value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSpellCheckEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsSpellCheckEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTextPredictionEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsTextPredictionEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_Document(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_InputScope(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_InputScope(void* value) noexcept = 0;
    virtual HRESULT __stdcall add_TextChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_TextChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_SelectionChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_ContextMenuOpening(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ContextMenuOpening(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBox2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_PlaceholderText(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionHighlightColor(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectionHighlightColor(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorFontEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsColorFontEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_Paste(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Paste(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBox3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall add_TextCompositionStarted(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_TextCompositionStarted(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_TextCompositionChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_TextCompositionChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_TextCompositionEnded(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_TextCompositionEnded(event_token token) noexcept = 0;
    virtual HRESULT __stdcall get_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) noexcept = 0;
    virtual HRESULT __stdcall get_DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment value) noexcept = 0;
    virtual HRESULT __stdcall add_CandidateWindowBoundsChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_CandidateWindowBoundsChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_TextChanging(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_TextChanging(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBox4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall GetLinguisticAlternativesAsync(void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall get_ClipboardCopyFormat(Windows::UI::Xaml::Controls::RichEditClipboardFormat* value) noexcept = 0;
    virtual HRESULT __stdcall put_ClipboardCopyFormat(Windows::UI::Xaml::Controls::RichEditClipboardFormat value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBox5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectionHighlightColorWhenNotFocused(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectionHighlightColorWhenNotFocused(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxLength(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxLength(int32_t value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBox6>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HorizontalTextAlignment(Windows::UI::Xaml::TextAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalTextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_CharacterCasing(Windows::UI::Xaml::Controls::CharacterCasing* value) noexcept = 0;
    virtual HRESULT __stdcall put_CharacterCasing(Windows::UI::Xaml::Controls::CharacterCasing value) noexcept = 0;
    virtual HRESULT __stdcall get_DisabledFormattingAccelerators(Windows::UI::Xaml::Controls::DisabledFormattingAccelerators* value) noexcept = 0;
    virtual HRESULT __stdcall put_DisabledFormattingAccelerators(Windows::UI::Xaml::Controls::DisabledFormattingAccelerators value) noexcept = 0;
    virtual HRESULT __stdcall add_CopyingToClipboard(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_CopyingToClipboard(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_CuttingToClipboard(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_CuttingToClipboard(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBox7>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ContentLinkForegroundColor(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ContentLinkForegroundColor(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentLinkBackgroundColor(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ContentLinkBackgroundColor(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentLinkProviders(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ContentLinkProviders(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HandwritingView(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HandwritingView(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsHandwritingViewEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsHandwritingViewEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_ContentLinkChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ContentLinkChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_ContentLinkInvoked(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ContentLinkInvoked(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBoxFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBoxStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsReadOnlyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AcceptsReturnProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextWrappingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSpellCheckEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTextPredictionEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_InputScopeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBoxStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderTextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionHighlightColorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorFontEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBoxStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DesiredCandidateWindowAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextReadingOrderProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBoxStatics4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ClipboardCopyFormatProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBoxStatics5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectionHighlightColorWhenNotFocusedProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxLengthProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBoxStatics6>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HorizontalTextAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CharacterCasingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DisabledFormattingAcceleratorsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBoxStatics7>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ContentLinkForegroundColorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentLinkBackgroundColorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentLinkProvidersProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HandwritingViewProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsHandwritingViewEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsContentChanging(bool* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlock>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_FontSize(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontSize(double value) noexcept = 0;
    virtual HRESULT __stdcall get_FontFamily(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_FontFamily(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStretch(Windows::UI::Text::FontStretch* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontStretch(Windows::UI::Text::FontStretch value) noexcept = 0;
    virtual HRESULT __stdcall get_Foreground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Foreground(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_TextWrapping(Windows::UI::Xaml::TextWrapping* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextWrapping(Windows::UI::Xaml::TextWrapping value) noexcept = 0;
    virtual HRESULT __stdcall get_TextTrimming(Windows::UI::Xaml::TextTrimming* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextTrimming(Windows::UI::Xaml::TextTrimming value) noexcept = 0;
    virtual HRESULT __stdcall get_TextAlignment(Windows::UI::Xaml::TextAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_Blocks(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_LineHeight(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_LineHeight(double value) noexcept = 0;
    virtual HRESULT __stdcall get_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy* value) noexcept = 0;
    virtual HRESULT __stdcall put_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) noexcept = 0;
    virtual HRESULT __stdcall get_CharacterSpacing(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_CharacterSpacing(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_OverflowContentTarget(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_OverflowContentTarget(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTextSelectionEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsTextSelectionEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_HasOverflowContent(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentStart(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentEnd(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionStart(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionEnd(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BaselineOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall add_SelectionChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_ContextMenuOpening(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ContextMenuOpening(event_token token) noexcept = 0;
    virtual HRESULT __stdcall SelectAll() noexcept = 0;
    virtual HRESULT __stdcall Select(void* start, void* end) noexcept = 0;
    virtual HRESULT __stdcall GetPositionFromPoint(Windows::Foundation::Point point, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall Focus(Windows::UI::Xaml::FocusState value, bool* returnValue) noexcept = 0;
    virtual HRESULT __stdcall get_TextIndent(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextIndent(double value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlock2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MaxLines(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxLines(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_TextLineBounds(Windows::UI::Xaml::TextLineBounds* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextLineBounds(Windows::UI::Xaml::TextLineBounds value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionHighlightColor(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectionHighlightColor(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorFontEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsColorFontEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlock3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextScaleFactorEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlock4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TextDecorations(Windows::UI::Text::TextDecorations* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextDecorations(Windows::UI::Text::TextDecorations value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlock5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextTrimmed(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalTextAlignment(Windows::UI::Xaml::TextAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalTextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_TextHighlighters(void** value) noexcept = 0;
    virtual HRESULT __stdcall add_IsTextTrimmedChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_IsTextTrimmedChanged(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlockOverflow>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_OverflowContentTarget(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_OverflowContentTarget(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentSource(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HasOverflowContent(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentStart(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentEnd(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BaselineOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall GetPositionFromPoint(Windows::Foundation::Point point, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall Focus(Windows::UI::Xaml::FocusState value, bool* returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlockOverflow2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MaxLines(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxLines(int32_t value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlockOverflow3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextTrimmed(bool* value) noexcept = 0;
    virtual HRESULT __stdcall add_IsTextTrimmedChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_IsTextTrimmedChanged(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_OverflowContentTargetProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaddingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HasOverflowContentProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MaxLinesProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextTrimmedProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlockStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_FontSizeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontFamilyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontWeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStretchProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ForegroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextWrappingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextTrimmingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaddingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_LineHeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_LineStackingStrategyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CharacterSpacingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OverflowContentTargetProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTextSelectionEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HasOverflowContentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedTextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextIndentProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlockStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MaxLinesProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextLineBoundsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionHighlightColorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OpticalMarginAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorFontEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextReadingOrderProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlockStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlockStatics4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TextDecorationsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRichTextBlockStatics5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextTrimmedProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalTextAlignmentProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRowDefinition>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Height(struct struct_Windows_UI_Xaml_GridLength* value) noexcept = 0;
    virtual HRESULT __stdcall put_Height(struct struct_Windows_UI_Xaml_GridLength value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxHeight(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxHeight(double value) noexcept = 0;
    virtual HRESULT __stdcall get_MinHeight(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_MinHeight(double value) noexcept = 0;
    virtual HRESULT __stdcall get_ActualHeight(double* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IRowDefinitionStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxHeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MinHeightProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IScrollContentPresenter>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CanVerticallyScroll(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_CanVerticallyScroll(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_CanHorizontallyScroll(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_CanHorizontallyScroll(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_ExtentWidth(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_ExtentHeight(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_ViewportWidth(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_ViewportHeight(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_ScrollOwner(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ScrollOwner(void* value) noexcept = 0;
    virtual HRESULT __stdcall LineUp() noexcept = 0;
    virtual HRESULT __stdcall LineDown() noexcept = 0;
    virtual HRESULT __stdcall LineLeft() noexcept = 0;
    virtual HRESULT __stdcall LineRight() noexcept = 0;
    virtual HRESULT __stdcall PageUp() noexcept = 0;
    virtual HRESULT __stdcall PageDown() noexcept = 0;
    virtual HRESULT __stdcall PageLeft() noexcept = 0;
    virtual HRESULT __stdcall PageRight() noexcept = 0;
    virtual HRESULT __stdcall MouseWheelUp() noexcept = 0;
    virtual HRESULT __stdcall MouseWheelDown() noexcept = 0;
    virtual HRESULT __stdcall MouseWheelLeft() noexcept = 0;
    virtual HRESULT __stdcall MouseWheelRight() noexcept = 0;
    virtual HRESULT __stdcall SetHorizontalOffset(double offset) noexcept = 0;
    virtual HRESULT __stdcall SetVerticalOffset(double offset) noexcept = 0;
    virtual HRESULT __stdcall MakeVisible(void* visual, Windows::Foundation::Rect rectangle, Windows::Foundation::Rect* returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IScrollViewer>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HorizontalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility* value) noexcept = 0;
    virtual HRESULT __stdcall put_VerticalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility value) noexcept = 0;
    virtual HRESULT __stdcall get_IsHorizontalRailEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsHorizontalRailEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsVerticalRailEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsVerticalRailEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsHorizontalScrollChainingEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsHorizontalScrollChainingEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsVerticalScrollChainingEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsVerticalScrollChainingEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsZoomChainingEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsZoomChainingEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsScrollInertiaEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsScrollInertiaEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsZoomInertiaEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsZoomInertiaEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalScrollMode(Windows::UI::Xaml::Controls::ScrollMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalScrollMode(Windows::UI::Xaml::Controls::ScrollMode value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalScrollMode(Windows::UI::Xaml::Controls::ScrollMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_VerticalScrollMode(Windows::UI::Xaml::Controls::ScrollMode value) noexcept = 0;
    virtual HRESULT __stdcall get_ZoomMode(Windows::UI::Xaml::Controls::ZoomMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_ZoomMode(Windows::UI::Xaml::Controls::ZoomMode value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_VerticalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType* value) noexcept = 0;
    virtual HRESULT __stdcall put_VerticalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) noexcept = 0;
    virtual HRESULT __stdcall get_ZoomSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType* value) noexcept = 0;
    virtual HRESULT __stdcall put_ZoomSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_ViewportWidth(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_ScrollableWidth(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_ComputedHorizontalScrollBarVisibility(Windows::UI::Xaml::Visibility* value) noexcept = 0;
    virtual HRESULT __stdcall get_ExtentWidth(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_ViewportHeight(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_ScrollableHeight(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_ComputedVerticalScrollBarVisibility(Windows::UI::Xaml::Visibility* value) noexcept = 0;
    virtual HRESULT __stdcall get_ExtentHeight(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_MinZoomFactor(float* value) noexcept = 0;
    virtual HRESULT __stdcall put_MinZoomFactor(float value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxZoomFactor(float* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxZoomFactor(float value) noexcept = 0;
    virtual HRESULT __stdcall get_ZoomFactor(float* value) noexcept = 0;
    virtual HRESULT __stdcall get_ZoomSnapPoints(void** value) noexcept = 0;
    virtual HRESULT __stdcall add_ViewChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ViewChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall ScrollToHorizontalOffset(double offset) noexcept = 0;
    virtual HRESULT __stdcall ScrollToVerticalOffset(double offset) noexcept = 0;
    virtual HRESULT __stdcall ZoomToFactor(float factor) noexcept = 0;
    virtual HRESULT __stdcall InvalidateScrollInfo() noexcept = 0;
    virtual HRESULT __stdcall get_IsDeferredScrollingEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsDeferredScrollingEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_BringIntoViewOnFocusChange(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_BringIntoViewOnFocusChange(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IScrollViewer2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TopLeftHeader(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_TopLeftHeader(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_LeftHeader(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_LeftHeader(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_TopHeader(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_TopHeader(void* value) noexcept = 0;
    virtual HRESULT __stdcall add_ViewChanging(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ViewChanging(event_token token) noexcept = 0;
    virtual HRESULT __stdcall ChangeView(void* horizontalOffset, void* verticalOffset, void* zoomFactor, bool* returnValue) noexcept = 0;
    virtual HRESULT __stdcall ChangeViewWithOptionalAnimation(void* horizontalOffset, void* verticalOffset, void* zoomFactor, bool disableAnimation, bool* returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IScrollViewer3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall add_DirectManipulationStarted(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_DirectManipulationStarted(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_DirectManipulationCompleted(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_DirectManipulationCompleted(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IScrollViewerStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HorizontalSnapPointsAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalSnapPointsAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalSnapPointsTypeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalSnapPointsTypeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ZoomSnapPointsTypeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalOffsetProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ViewportWidthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ScrollableWidthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ComputedHorizontalScrollBarVisibilityProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ExtentWidthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalOffsetProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ViewportHeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ScrollableHeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ComputedVerticalScrollBarVisibilityProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ExtentHeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MinZoomFactorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxZoomFactorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ZoomFactorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ZoomSnapPointsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalScrollBarVisibilityProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetHorizontalScrollBarVisibility(void* element, Windows::UI::Xaml::Controls::ScrollBarVisibility* horizontalScrollBarVisibility) noexcept = 0;
    virtual HRESULT __stdcall SetHorizontalScrollBarVisibility(void* element, Windows::UI::Xaml::Controls::ScrollBarVisibility horizontalScrollBarVisibility) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalScrollBarVisibilityProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetVerticalScrollBarVisibility(void* element, Windows::UI::Xaml::Controls::ScrollBarVisibility* verticalScrollBarVisibility) noexcept = 0;
    virtual HRESULT __stdcall SetVerticalScrollBarVisibility(void* element, Windows::UI::Xaml::Controls::ScrollBarVisibility verticalScrollBarVisibility) noexcept = 0;
    virtual HRESULT __stdcall get_IsHorizontalRailEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetIsHorizontalRailEnabled(void* element, bool* isHorizontalRailEnabled) noexcept = 0;
    virtual HRESULT __stdcall SetIsHorizontalRailEnabled(void* element, bool isHorizontalRailEnabled) noexcept = 0;
    virtual HRESULT __stdcall get_IsVerticalRailEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetIsVerticalRailEnabled(void* element, bool* isVerticalRailEnabled) noexcept = 0;
    virtual HRESULT __stdcall SetIsVerticalRailEnabled(void* element, bool isVerticalRailEnabled) noexcept = 0;
    virtual HRESULT __stdcall get_IsHorizontalScrollChainingEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetIsHorizontalScrollChainingEnabled(void* element, bool* isHorizontalScrollChainingEnabled) noexcept = 0;
    virtual HRESULT __stdcall SetIsHorizontalScrollChainingEnabled(void* element, bool isHorizontalScrollChainingEnabled) noexcept = 0;
    virtual HRESULT __stdcall get_IsVerticalScrollChainingEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetIsVerticalScrollChainingEnabled(void* element, bool* isVerticalScrollChainingEnabled) noexcept = 0;
    virtual HRESULT __stdcall SetIsVerticalScrollChainingEnabled(void* element, bool isVerticalScrollChainingEnabled) noexcept = 0;
    virtual HRESULT __stdcall get_IsZoomChainingEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetIsZoomChainingEnabled(void* element, bool* isZoomChainingEnabled) noexcept = 0;
    virtual HRESULT __stdcall SetIsZoomChainingEnabled(void* element, bool isZoomChainingEnabled) noexcept = 0;
    virtual HRESULT __stdcall get_IsScrollInertiaEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetIsScrollInertiaEnabled(void* element, bool* isScrollInertiaEnabled) noexcept = 0;
    virtual HRESULT __stdcall SetIsScrollInertiaEnabled(void* element, bool isScrollInertiaEnabled) noexcept = 0;
    virtual HRESULT __stdcall get_IsZoomInertiaEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetIsZoomInertiaEnabled(void* element, bool* isZoomInertiaEnabled) noexcept = 0;
    virtual HRESULT __stdcall SetIsZoomInertiaEnabled(void* element, bool isZoomInertiaEnabled) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalScrollModeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetHorizontalScrollMode(void* element, Windows::UI::Xaml::Controls::ScrollMode* horizontalScrollMode) noexcept = 0;
    virtual HRESULT __stdcall SetHorizontalScrollMode(void* element, Windows::UI::Xaml::Controls::ScrollMode horizontalScrollMode) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalScrollModeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetVerticalScrollMode(void* element, Windows::UI::Xaml::Controls::ScrollMode* verticalScrollMode) noexcept = 0;
    virtual HRESULT __stdcall SetVerticalScrollMode(void* element, Windows::UI::Xaml::Controls::ScrollMode verticalScrollMode) noexcept = 0;
    virtual HRESULT __stdcall get_ZoomModeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetZoomMode(void* element, Windows::UI::Xaml::Controls::ZoomMode* zoomMode) noexcept = 0;
    virtual HRESULT __stdcall SetZoomMode(void* element, Windows::UI::Xaml::Controls::ZoomMode zoomMode) noexcept = 0;
    virtual HRESULT __stdcall get_IsDeferredScrollingEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetIsDeferredScrollingEnabled(void* element, bool* isDeferredScrollingEnabled) noexcept = 0;
    virtual HRESULT __stdcall SetIsDeferredScrollingEnabled(void* element, bool isDeferredScrollingEnabled) noexcept = 0;
    virtual HRESULT __stdcall get_BringIntoViewOnFocusChangeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetBringIntoViewOnFocusChange(void* element, bool* bringIntoViewOnFocusChange) noexcept = 0;
    virtual HRESULT __stdcall SetBringIntoViewOnFocusChange(void* element, bool bringIntoViewOnFocusChange) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IScrollViewerStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TopLeftHeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_LeftHeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TopHeaderProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IScrollViewerView>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HorizontalOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall get_ZoomFactor(float* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsIntermediate(bool* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_NextView(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FinalView(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsInertial(bool* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISearchBox>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SearchHistoryEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_SearchHistoryEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_SearchHistoryContext(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_SearchHistoryContext(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_PlaceholderText(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_QueryText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_QueryText(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_FocusOnKeyboardInput(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_FocusOnKeyboardInput(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_ChooseSuggestionOnEnter(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_ChooseSuggestionOnEnter(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_QueryChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_QueryChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_SuggestionsRequested(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_SuggestionsRequested(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_QuerySubmitted(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_QuerySubmitted(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_ResultSuggestionChosen(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ResultSuggestionChosen(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_PrepareForFocusOnKeyboardInput(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PrepareForFocusOnKeyboardInput(event_token token) noexcept = 0;
    virtual HRESULT __stdcall SetLocalContentSuggestionSettings(void* settings) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISearchBoxFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_QueryText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall get_Language(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall get_LinguisticDetails(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_QueryText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall get_Language(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall get_LinguisticDetails(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_KeyModifiers(Windows::System::VirtualKeyModifiers* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Tag(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall get_KeyModifiers(Windows::System::VirtualKeyModifiers* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISearchBoxStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SearchHistoryEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SearchHistoryContextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderTextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_QueryTextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FocusOnKeyboardInputProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ChooseSuggestionOnEnterProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_QueryText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall get_Language(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall get_LinguisticDetails(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Request(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_AddedSections(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_RemovedSections(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISelectionChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_AddedItems(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_RemovedItems(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstanceWithRemovedItemsAndAddedItems(void* removedItems, void* addedItems, void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISemanticZoom>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ZoomedInView(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ZoomedInView(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ZoomedOutView(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ZoomedOutView(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsZoomedInViewActive(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsZoomedInViewActive(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_CanChangeViews(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_CanChangeViews(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_ViewChangeStarted(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ViewChangeStarted(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_ViewChangeCompleted(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ViewChangeCompleted(event_token token) noexcept = 0;
    virtual HRESULT __stdcall ToggleActiveView() noexcept = 0;
    virtual HRESULT __stdcall get_IsZoomOutButtonEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsZoomOutButtonEnabled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISemanticZoomInformation>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SemanticZoomOwner(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SemanticZoomOwner(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsActiveView(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsActiveView(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsZoomedInView(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsZoomedInView(bool value) noexcept = 0;
    virtual HRESULT __stdcall InitializeViewChange() noexcept = 0;
    virtual HRESULT __stdcall CompleteViewChange() noexcept = 0;
    virtual HRESULT __stdcall MakeVisible(void* item) noexcept = 0;
    virtual HRESULT __stdcall StartViewChangeFrom(void* source, void* destination) noexcept = 0;
    virtual HRESULT __stdcall StartViewChangeTo(void* source, void* destination) noexcept = 0;
    virtual HRESULT __stdcall CompleteViewChangeFrom(void* source, void* destination) noexcept = 0;
    virtual HRESULT __stdcall CompleteViewChangeTo(void* source, void* destination) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISemanticZoomLocation>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Item(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Item(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Bounds(Windows::Foundation::Rect* value) noexcept = 0;
    virtual HRESULT __stdcall put_Bounds(Windows::Foundation::Rect value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISemanticZoomStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ZoomedInViewProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ZoomedOutViewProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsZoomedInViewActiveProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CanChangeViewsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsZoomOutButtonEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsSourceZoomedInView(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsSourceZoomedInView(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_SourceItem(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SourceItem(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_DestinationItem(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_DestinationItem(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISettingsFlyout>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Title(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_Title(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderBackground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderBackground(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderForeground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderForeground(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IconSource(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_IconSource(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_TemplateSettings(void** value) noexcept = 0;
    virtual HRESULT __stdcall add_BackClick(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_BackClick(event_token token) noexcept = 0;
    virtual HRESULT __stdcall Show() noexcept = 0;
    virtual HRESULT __stdcall ShowIndependent() noexcept = 0;
    virtual HRESULT __stdcall Hide() noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISettingsFlyoutFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISettingsFlyoutStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TitleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderBackgroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderForegroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IconSourceProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISlider>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IntermediateValue(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_IntermediateValue(double value) noexcept = 0;
    virtual HRESULT __stdcall get_StepFrequency(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_StepFrequency(double value) noexcept = 0;
    virtual HRESULT __stdcall get_SnapsTo(Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo* value) noexcept = 0;
    virtual HRESULT __stdcall put_SnapsTo(Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo value) noexcept = 0;
    virtual HRESULT __stdcall get_TickFrequency(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_TickFrequency(double value) noexcept = 0;
    virtual HRESULT __stdcall get_TickPlacement(Windows::UI::Xaml::Controls::Primitives::TickPlacement* value) noexcept = 0;
    virtual HRESULT __stdcall put_TickPlacement(Windows::UI::Xaml::Controls::Primitives::TickPlacement value) noexcept = 0;
    virtual HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation* value) noexcept = 0;
    virtual HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept = 0;
    virtual HRESULT __stdcall get_IsDirectionReversed(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsDirectionReversed(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsThumbToolTipEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsThumbToolTipEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_ThumbToolTipValueConverter(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_ThumbToolTipValueConverter(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISlider2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISliderFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISliderStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IntermediateValueProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_StepFrequencyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SnapsToProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TickFrequencyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TickPlacementProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OrientationProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsDirectionReversedProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsThumbToolTipEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ThumbToolTipValueConverterProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISliderStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISplitView>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Content(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Content(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Pane(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Pane(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsPaneOpen(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsPaneOpen(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_OpenPaneLength(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_OpenPaneLength(double value) noexcept = 0;
    virtual HRESULT __stdcall get_CompactPaneLength(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_CompactPaneLength(double value) noexcept = 0;
    virtual HRESULT __stdcall get_PanePlacement(Windows::UI::Xaml::Controls::SplitViewPanePlacement* value) noexcept = 0;
    virtual HRESULT __stdcall put_PanePlacement(Windows::UI::Xaml::Controls::SplitViewPanePlacement value) noexcept = 0;
    virtual HRESULT __stdcall get_DisplayMode(Windows::UI::Xaml::Controls::SplitViewDisplayMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_DisplayMode(Windows::UI::Xaml::Controls::SplitViewDisplayMode value) noexcept = 0;
    virtual HRESULT __stdcall get_TemplateSettings(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaneBackground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PaneBackground(void* value) noexcept = 0;
    virtual HRESULT __stdcall add_PaneClosing(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PaneClosing(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_PaneClosed(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PaneClosed(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISplitView2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISplitView3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall add_PaneOpening(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PaneOpening(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_PaneOpened(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PaneOpened(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISplitViewFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Cancel(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Cancel(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISplitViewStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ContentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaneProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsPaneOpenProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OpenPaneLengthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CompactPaneLengthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PanePlacementProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DisplayModeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TemplateSettingsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaneBackgroundProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISplitViewStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LightDismissOverlayModeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IStackPanel>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_AreScrollSnapPointsRegular(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_AreScrollSnapPointsRegular(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation* value) noexcept = 0;
    virtual HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IStackPanel2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_BorderBrush(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_BorderBrush(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderThickness(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_BorderThickness(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius* value) noexcept = 0;
    virtual HRESULT __stdcall put_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius value) noexcept = 0;
    virtual HRESULT __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IStackPanel4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Spacing(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_Spacing(double value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IStackPanelFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IStackPanelStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_AreScrollSnapPointsRegularProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OrientationProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IStackPanelStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_BorderBrushProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BorderThicknessProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CornerRadiusProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaddingProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IStackPanelStatics4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SpacingProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IStyleSelector>{ struct type : IInspectable
{
    virtual HRESULT __stdcall SelectStyle(void* item, void* container, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IStyleSelectorFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IStyleSelectorOverrides>{ struct type : IInspectable
{
    virtual HRESULT __stdcall SelectStyleCore(void* item, void* container, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateCoreIndependentInputSource(Windows::UI::Core::CoreInputDeviceTypes deviceTypes, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwapChainPanel>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CompositionScaleX(float* value) noexcept = 0;
    virtual HRESULT __stdcall get_CompositionScaleY(float* value) noexcept = 0;
    virtual HRESULT __stdcall add_CompositionScaleChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_CompositionScaleChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall CreateCoreIndependentInputSource(Windows::UI::Core::CoreInputDeviceTypes deviceTypes, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwapChainPanelFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwapChainPanelStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CompositionScaleXProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CompositionScaleYProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwipeControl>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LeftItems(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_LeftItems(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_RightItems(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_RightItems(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_TopItems(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_TopItems(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_BottomItems(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_BottomItems(void* value) noexcept = 0;
    virtual HRESULT __stdcall Close() noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwipeControlFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwipeControlStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LeftItemsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_RightItemsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TopItemsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BottomItemsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwipeItem>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Text(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_Text(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_IconSource(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_IconSource(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Background(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Background(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Foreground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Foreground(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Command(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Command(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_CommandParameter(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_CommandParameter(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_BehaviorOnInvoked(Windows::UI::Xaml::Controls::SwipeBehaviorOnInvoked* value) noexcept = 0;
    virtual HRESULT __stdcall put_BehaviorOnInvoked(Windows::UI::Xaml::Controls::SwipeBehaviorOnInvoked value) noexcept = 0;
    virtual HRESULT __stdcall add_Invoked(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Invoked(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwipeItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SwipeControl(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwipeItemStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IconSourceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BackgroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ForegroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CommandProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CommandParameterProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BehaviorOnInvokedProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwipeItems>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Mode(Windows::UI::Xaml::Controls::SwipeMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_Mode(Windows::UI::Xaml::Controls::SwipeMode value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwipeItemsFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISwipeItemsStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ModeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISymbolIcon>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Symbol(Windows::UI::Xaml::Controls::Symbol* value) noexcept = 0;
    virtual HRESULT __stdcall put_Symbol(Windows::UI::Xaml::Controls::Symbol value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISymbolIconFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstanceWithSymbol(Windows::UI::Xaml::Controls::Symbol symbol, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISymbolIconSource>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Symbol(Windows::UI::Xaml::Controls::Symbol* value) noexcept = 0;
    virtual HRESULT __stdcall put_Symbol(Windows::UI::Xaml::Controls::Symbol value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISymbolIconSourceFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISymbolIconSourceStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SymbolProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ISymbolIconStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SymbolProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBlock>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_FontSize(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontSize(double value) noexcept = 0;
    virtual HRESULT __stdcall get_FontFamily(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_FontFamily(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStretch(Windows::UI::Text::FontStretch* value) noexcept = 0;
    virtual HRESULT __stdcall put_FontStretch(Windows::UI::Text::FontStretch value) noexcept = 0;
    virtual HRESULT __stdcall get_CharacterSpacing(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_CharacterSpacing(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_Foreground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Foreground(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_TextWrapping(Windows::UI::Xaml::TextWrapping* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextWrapping(Windows::UI::Xaml::TextWrapping value) noexcept = 0;
    virtual HRESULT __stdcall get_TextTrimming(Windows::UI::Xaml::TextTrimming* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextTrimming(Windows::UI::Xaml::TextTrimming value) noexcept = 0;
    virtual HRESULT __stdcall get_TextAlignment(Windows::UI::Xaml::TextAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_Text(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_Text(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_Inlines(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Padding(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall put_Padding(struct struct_Windows_UI_Xaml_Thickness value) noexcept = 0;
    virtual HRESULT __stdcall get_LineHeight(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_LineHeight(double value) noexcept = 0;
    virtual HRESULT __stdcall get_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy* value) noexcept = 0;
    virtual HRESULT __stdcall put_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTextSelectionEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsTextSelectionEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentStart(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ContentEnd(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionStart(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionEnd(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_BaselineOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall add_SelectionChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_ContextMenuOpening(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ContextMenuOpening(event_token token) noexcept = 0;
    virtual HRESULT __stdcall SelectAll() noexcept = 0;
    virtual HRESULT __stdcall Select(void* start, void* end) noexcept = 0;
    virtual HRESULT __stdcall Focus(Windows::UI::Xaml::FocusState value, bool* returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBlock2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectionHighlightColor(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectionHighlightColor(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxLines(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxLines(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_TextLineBounds(Windows::UI::Xaml::TextLineBounds* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextLineBounds(Windows::UI::Xaml::TextLineBounds value) noexcept = 0;
    virtual HRESULT __stdcall get_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorFontEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsColorFontEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBlock3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextScaleFactorEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBlock4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall GetAlphaMask(void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBlock5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TextDecorations(Windows::UI::Text::TextDecorations* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextDecorations(Windows::UI::Text::TextDecorations value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBlock6>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextTrimmed(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalTextAlignment(Windows::UI::Xaml::TextAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalTextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_TextHighlighters(void** value) noexcept = 0;
    virtual HRESULT __stdcall add_IsTextTrimmedChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_IsTextTrimmedChanged(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBlockStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_FontSizeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontFamilyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontWeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStyleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_FontStretchProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CharacterSpacingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ForegroundProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextWrappingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextTrimmingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PaddingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_LineHeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_LineStackingStrategyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTextSelectionEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedTextProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBlockStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectionHighlightColorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxLinesProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextLineBoundsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OpticalMarginAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorFontEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextReadingOrderProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBlockStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBlockStatics5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TextDecorationsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBlockStatics6>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsTextTrimmedProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalTextAlignmentProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBox>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Text(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_Text(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectedText(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionLength(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectionLength(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionStart(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectionStart(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxLength(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaxLength(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_IsReadOnly(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsReadOnly(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_AcceptsReturn(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_AcceptsReturn(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_TextAlignment(Windows::UI::Xaml::TextAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_TextWrapping(Windows::UI::Xaml::TextWrapping* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextWrapping(Windows::UI::Xaml::TextWrapping value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSpellCheckEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsSpellCheckEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTextPredictionEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsTextPredictionEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_InputScope(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_InputScope(void* value) noexcept = 0;
    virtual HRESULT __stdcall add_TextChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_TextChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_SelectionChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_ContextMenuOpening(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ContextMenuOpening(event_token token) noexcept = 0;
    virtual HRESULT __stdcall Select(int32_t start, int32_t length) noexcept = 0;
    virtual HRESULT __stdcall SelectAll() noexcept = 0;
    virtual HRESULT __stdcall GetRectFromCharacterIndex(int32_t charIndex, bool trailingEdge, Windows::Foundation::Rect* returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBox2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_PlaceholderText(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionHighlightColor(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectionHighlightColor(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorFontEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsColorFontEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall add_Paste(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Paste(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBox3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall add_TextCompositionStarted(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_TextCompositionStarted(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_TextCompositionChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_TextCompositionChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_TextCompositionEnded(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_TextCompositionEnded(event_token token) noexcept = 0;
    virtual HRESULT __stdcall get_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder* value) noexcept = 0;
    virtual HRESULT __stdcall put_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) noexcept = 0;
    virtual HRESULT __stdcall get_DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment value) noexcept = 0;
    virtual HRESULT __stdcall add_CandidateWindowBoundsChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_CandidateWindowBoundsChanged(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_TextChanging(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_TextChanging(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBox4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall GetLinguisticAlternativesAsync(void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBox5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectionHighlightColorWhenNotFocused(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectionHighlightColorWhenNotFocused(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBox6>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HorizontalTextAlignment(Windows::UI::Xaml::TextAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalTextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_CharacterCasing(Windows::UI::Xaml::Controls::CharacterCasing* value) noexcept = 0;
    virtual HRESULT __stdcall put_CharacterCasing(Windows::UI::Xaml::Controls::CharacterCasing value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderForeground(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PlaceholderForeground(void* value) noexcept = 0;
    virtual HRESULT __stdcall add_CopyingToClipboard(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_CopyingToClipboard(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_CuttingToClipboard(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_CuttingToClipboard(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_BeforeTextChanging(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_BeforeTextChanging(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBox7>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HandwritingView(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HandwritingView(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_IsHandwritingViewEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsHandwritingViewEnabled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_NewText(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall get_Cancel(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Cancel(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBoxFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBoxStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_TextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaxLengthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsReadOnlyProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AcceptsReturnProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextWrappingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSpellCheckEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsTextPredictionEnabledProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_InputScopeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBoxStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderTextProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionHighlightColorProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsColorFontEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBoxStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DesiredCandidateWindowAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TextReadingOrderProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBoxStatics5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectionHighlightColorWhenNotFocusedProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBoxStatics6>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HorizontalTextAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CharacterCasingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlaceholderForegroundProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBoxStatics7>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HandwritingViewProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsHandwritingViewEnabledProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsContentChanging(bool* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextChangedEventArgs>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_StartIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_Length(int32_t* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_StartIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_Length(int32_t* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_StartIndex(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_Length(int32_t* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Handled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Handled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Handled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Handled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITextControlPasteEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Handled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Handled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITimePickedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_OldTime(Windows::Foundation::TimeSpan* value) noexcept = 0;
    virtual HRESULT __stdcall get_NewTime(Windows::Foundation::TimeSpan* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITimePicker>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ClockIdentifier(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_ClockIdentifier(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_MinuteIncrement(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_MinuteIncrement(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_Time(Windows::Foundation::TimeSpan* value) noexcept = 0;
    virtual HRESULT __stdcall put_Time(Windows::Foundation::TimeSpan value) noexcept = 0;
    virtual HRESULT __stdcall add_TimeChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_TimeChanged(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITimePicker2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITimePickerFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITimePickerFlyout>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ClockIdentifier(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_ClockIdentifier(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_Time(Windows::Foundation::TimeSpan* value) noexcept = 0;
    virtual HRESULT __stdcall put_Time(Windows::Foundation::TimeSpan value) noexcept = 0;
    virtual HRESULT __stdcall get_MinuteIncrement(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_MinuteIncrement(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall add_TimePicked(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_TimePicked(event_token token) noexcept = 0;
    virtual HRESULT __stdcall ShowAtAsync(void* target, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ClockIdentifierProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TimeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MinuteIncrementProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITimePickerStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ClockIdentifierProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MinuteIncrementProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TimeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITimePickerStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_LightDismissOverlayModeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_OldTime(Windows::Foundation::TimeSpan* value) noexcept = 0;
    virtual HRESULT __stdcall get_NewTime(Windows::Foundation::TimeSpan* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsChecked(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsChecked(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsCheckedProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IToggleSwitch>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsOn(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsOn(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_Header(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Header(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_HeaderTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_OnContent(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_OnContent(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_OnContentTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_OnContentTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_OffContent(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_OffContent(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_OffContentTemplate(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_OffContentTemplate(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_TemplateSettings(void** value) noexcept = 0;
    virtual HRESULT __stdcall add_Toggled(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Toggled(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IToggleSwitchOverrides>{ struct type : IInspectable
{
    virtual HRESULT __stdcall OnToggled() noexcept = 0;
    virtual HRESULT __stdcall OnOnContentChanged(void* oldContent, void* newContent) noexcept = 0;
    virtual HRESULT __stdcall OnOffContentChanged(void* oldContent, void* newContent) noexcept = 0;
    virtual HRESULT __stdcall OnHeaderChanged(void* oldContent, void* newContent) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IToggleSwitchStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsOnProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HeaderTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OnContentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OnContentTemplateProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OffContentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OffContentTemplateProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IToolTip>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HorizontalOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalOffset(double value) noexcept = 0;
    virtual HRESULT __stdcall get_IsOpen(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsOpen(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_Placement(Windows::UI::Xaml::Controls::Primitives::PlacementMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_Placement(Windows::UI::Xaml::Controls::Primitives::PlacementMode value) noexcept = 0;
    virtual HRESULT __stdcall get_PlacementTarget(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_PlacementTarget(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalOffset(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_VerticalOffset(double value) noexcept = 0;
    virtual HRESULT __stdcall get_TemplateSettings(void** value) noexcept = 0;
    virtual HRESULT __stdcall add_Closed(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Closed(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_Opened(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Opened(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IToolTipFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IToolTipService>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IToolTipServiceStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PlacementProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetPlacement(void* element, Windows::UI::Xaml::Controls::Primitives::PlacementMode* value) noexcept = 0;
    virtual HRESULT __stdcall SetPlacement(void* element, Windows::UI::Xaml::Controls::Primitives::PlacementMode value) noexcept = 0;
    virtual HRESULT __stdcall get_PlacementTargetProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetPlacementTarget(void* element, void** value) noexcept = 0;
    virtual HRESULT __stdcall SetPlacementTarget(void* element, void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ToolTipProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetToolTip(void* element, void** value) noexcept = 0;
    virtual HRESULT __stdcall SetToolTip(void* element, void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IToolTipStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_HorizontalOffsetProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsOpenProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlacementProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PlacementTargetProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalOffsetProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeView>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_RootNodes(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectionMode(Windows::UI::Xaml::Controls::TreeViewSelectionMode* value) noexcept = 0;
    virtual HRESULT __stdcall put_SelectionMode(Windows::UI::Xaml::Controls::TreeViewSelectionMode value) noexcept = 0;
    virtual HRESULT __stdcall get_SelectedNodes(void** value) noexcept = 0;
    virtual HRESULT __stdcall Expand(void* value) noexcept = 0;
    virtual HRESULT __stdcall Collapse(void* value) noexcept = 0;
    virtual HRESULT __stdcall SelectAll() noexcept = 0;
    virtual HRESULT __stdcall add_ItemInvoked(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ItemInvoked(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_Expanding(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Expanding(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_Collapsed(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_Collapsed(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Node(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewExpandingEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Node(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewItem>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_GlyphOpacity(double* result) noexcept = 0;
    virtual HRESULT __stdcall put_GlyphOpacity(double value) noexcept = 0;
    virtual HRESULT __stdcall get_GlyphBrush(void** result) noexcept = 0;
    virtual HRESULT __stdcall put_GlyphBrush(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_ExpandedGlyph(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_ExpandedGlyph(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_CollapsedGlyph(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_CollapsedGlyph(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall get_GlyphSize(double* result) noexcept = 0;
    virtual HRESULT __stdcall put_GlyphSize(double value) noexcept = 0;
    virtual HRESULT __stdcall get_IsExpanded(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsExpanded(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_TreeViewItemTemplateSettings(void** result) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewItemFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_InvokedItem(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Handled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_Handled(bool* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewItemStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_GlyphOpacityProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_GlyphBrushProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ExpandedGlyphProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CollapsedGlyphProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_GlyphSizeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsExpandedProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_TreeViewItemTemplateSettingsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettings>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ExpandedGlyphVisibility(Windows::UI::Xaml::Visibility* value) noexcept = 0;
    virtual HRESULT __stdcall get_CollapsedGlyphVisibility(Windows::UI::Xaml::Visibility* value) noexcept = 0;
    virtual HRESULT __stdcall get_Indentation(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual HRESULT __stdcall get_DragItemsCount(int32_t* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ExpandedGlyphVisibilityProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CollapsedGlyphVisibilityProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IndentationProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DragItemsCountProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewList>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewListFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewNode>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Content(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Content(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Parent(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsExpanded(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsExpanded(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_HasChildren(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_Depth(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_HasUnrealizedChildren(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_HasUnrealizedChildren(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_Children(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewNodeFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewNodeStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ContentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DepthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsExpandedProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HasChildrenProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ITreeViewStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SelectionModeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IUIElementCollection>{ struct type : IInspectable
{
    virtual HRESULT __stdcall Move(uint32_t oldIndex, uint32_t newIndex) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IUserControl>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Content(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Content(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IUserControlFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(void* outer, void** inner, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IUserControlStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ContentProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ItemHeight(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemHeight(double value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemWidth(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemWidth(double value) noexcept = 0;
    virtual HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation* value) noexcept = 0;
    virtual HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_MaximumRowsOrColumns(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaximumRowsOrColumns(int32_t value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ItemHeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemWidthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OrientationProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalChildrenAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalChildrenAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaximumRowsOrColumnsProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_RowSpanProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetRowSpan(void* element, int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall SetRowSpan(void* element, int32_t value) noexcept = 0;
    virtual HRESULT __stdcall get_ColumnSpanProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetColumnSpan(void* element, int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall SetColumnSpan(void* element, int32_t value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IViewbox>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Child(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Child(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch* value) noexcept = 0;
    virtual HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept = 0;
    virtual HRESULT __stdcall get_StretchDirection(Windows::UI::Xaml::Controls::StretchDirection* value) noexcept = 0;
    virtual HRESULT __stdcall put_StretchDirection(Windows::UI::Xaml::Controls::StretchDirection value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IViewboxStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_StretchProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_StretchDirectionProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IVirtualizingPanel>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ItemContainerGenerator(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IVirtualizingPanelFactory>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides>{ struct type : IInspectable
{
    virtual HRESULT __stdcall OnItemsChanged(void* sender, void* args) noexcept = 0;
    virtual HRESULT __stdcall OnClearChildren() noexcept = 0;
    virtual HRESULT __stdcall BringIndexIntoView(int32_t index) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IVirtualizingPanelProtected>{ struct type : IInspectable
{
    virtual HRESULT __stdcall AddInternalChild(void* child) noexcept = 0;
    virtual HRESULT __stdcall InsertInternalChild(int32_t index, void* child) noexcept = 0;
    virtual HRESULT __stdcall RemoveInternalChildRange(int32_t index, int32_t range) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IVirtualizingStackPanel>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_AreScrollSnapPointsRegular(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_AreScrollSnapPointsRegular(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation* value) noexcept = 0;
    virtual HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept = 0;
    virtual HRESULT __stdcall add_CleanUpVirtualizedItemEvent(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_CleanUpVirtualizedItemEvent(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>{ struct type : IInspectable
{
    virtual HRESULT __stdcall OnCleanUpVirtualizedItem(void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_AreScrollSnapPointsRegularProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OrientationProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VirtualizationModeProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetVirtualizationMode(void* element, Windows::UI::Xaml::Controls::VirtualizationMode* value) noexcept = 0;
    virtual HRESULT __stdcall SetVirtualizationMode(void* element, Windows::UI::Xaml::Controls::VirtualizationMode value) noexcept = 0;
    virtual HRESULT __stdcall get_IsVirtualizingProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall GetIsVirtualizing(void* o, bool* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebView>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Source(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_Source(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_AllowedScriptNotifyUris(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_AllowedScriptNotifyUris(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_DataTransferPackage(void** value) noexcept = 0;
    virtual HRESULT __stdcall add_LoadCompleted(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_LoadCompleted(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_ScriptNotify(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ScriptNotify(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_NavigationFailed(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_NavigationFailed(event_token token) noexcept = 0;
    virtual HRESULT __stdcall InvokeScript(HSTRING scriptName, uint32_t __argumentsSize, HSTRING* arguments, HSTRING* returnValue) noexcept = 0;
    virtual HRESULT __stdcall Navigate(void* source) noexcept = 0;
    virtual HRESULT __stdcall NavigateToString(HSTRING text) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebView2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CanGoBack(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_CanGoForward(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_DocumentTitle(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall add_NavigationStarting(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_NavigationStarting(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_ContentLoading(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ContentLoading(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_DOMContentLoaded(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_DOMContentLoaded(event_token token) noexcept = 0;
    virtual HRESULT __stdcall GoForward() noexcept = 0;
    virtual HRESULT __stdcall GoBack() noexcept = 0;
    virtual HRESULT __stdcall Refresh() noexcept = 0;
    virtual HRESULT __stdcall Stop() noexcept = 0;
    virtual HRESULT __stdcall CapturePreviewToStreamAsync(void* stream, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall InvokeScriptAsync(HSTRING scriptName, void* arguments, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall CaptureSelectedContentToDataPackageAsync(void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall NavigateToLocalStreamUri(void* source, void* streamResolver) noexcept = 0;
    virtual HRESULT __stdcall BuildLocalStreamUri(HSTRING contentIdentifier, HSTRING relativePath, void** returnValue) noexcept = 0;
    virtual HRESULT __stdcall get_DefaultBackgroundColor(struct struct_Windows_UI_Color* value) noexcept = 0;
    virtual HRESULT __stdcall put_DefaultBackgroundColor(struct struct_Windows_UI_Color value) noexcept = 0;
    virtual HRESULT __stdcall add_NavigationCompleted(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_NavigationCompleted(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_FrameNavigationStarting(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_FrameNavigationStarting(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_FrameContentLoading(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_FrameContentLoading(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_FrameDOMContentLoaded(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_FrameDOMContentLoaded(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_FrameNavigationCompleted(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_FrameNavigationCompleted(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_LongRunningScriptDetected(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_LongRunningScriptDetected(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_UnsafeContentWarningDisplaying(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_UnsafeContentWarningDisplaying(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_UnviewableContentIdentified(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_UnviewableContentIdentified(event_token token) noexcept = 0;
    virtual HRESULT __stdcall NavigateWithHttpRequestMessage(void* requestMessage) noexcept = 0;
    virtual HRESULT __stdcall Focus(Windows::UI::Xaml::FocusState value, bool* returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebView3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ContainsFullScreenElement(bool* value) noexcept = 0;
    virtual HRESULT __stdcall add_ContainsFullScreenElementChanged(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_ContainsFullScreenElementChanged(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebView4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ExecutionMode(Windows::UI::Xaml::Controls::WebViewExecutionMode* value) noexcept = 0;
    virtual HRESULT __stdcall get_DeferredPermissionRequests(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Settings(void** value) noexcept = 0;
    virtual HRESULT __stdcall add_UnsupportedUriSchemeIdentified(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_UnsupportedUriSchemeIdentified(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_NewWindowRequested(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_NewWindowRequested(event_token token) noexcept = 0;
    virtual HRESULT __stdcall add_PermissionRequested(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_PermissionRequested(event_token token) noexcept = 0;
    virtual HRESULT __stdcall AddWebAllowedObject(HSTRING name, void* pObject) noexcept = 0;
    virtual HRESULT __stdcall DeferredPermissionRequestById(uint32_t id, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebView5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_XYFocusLeft(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_XYFocusLeft(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_XYFocusRight(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_XYFocusRight(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_XYFocusUp(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_XYFocusUp(void* value) noexcept = 0;
    virtual HRESULT __stdcall get_XYFocusDown(void** value) noexcept = 0;
    virtual HRESULT __stdcall put_XYFocusDown(void* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebView6>{ struct type : IInspectable
{
    virtual HRESULT __stdcall add_SeparateProcessLost(void* value, event_token* token) noexcept = 0;
    virtual HRESULT __stdcall remove_SeparateProcessLost(event_token token) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewBrush>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SourceName(HSTRING* value) noexcept = 0;
    virtual HRESULT __stdcall put_SourceName(HSTRING value) noexcept = 0;
    virtual HRESULT __stdcall Redraw() noexcept = 0;
    virtual HRESULT __stdcall SetSource(void* source) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewBrushStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_SourceNameProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Uri(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Uri(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Uri(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PermissionType(Windows::UI::Xaml::Controls::WebViewPermissionType* value) noexcept = 0;
    virtual HRESULT __stdcall get_Id(uint32_t* value) noexcept = 0;
    virtual HRESULT __stdcall Allow() noexcept = 0;
    virtual HRESULT __stdcall Deny() noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewFactory4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstanceWithExecutionMode(Windows::UI::Xaml::Controls::WebViewExecutionMode executionMode, void** instance) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ExecutionTime(Windows::Foundation::TimeSpan* value) noexcept = 0;
    virtual HRESULT __stdcall get_StopPageScriptExecution(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_StopPageScriptExecution(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Uri(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_IsSuccess(bool* value) noexcept = 0;
    virtual HRESULT __stdcall get_WebErrorStatus(Windows::Web::WebErrorStatus* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Uri(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_WebErrorStatus(Windows::Web::WebErrorStatus* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Uri(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Cancel(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Cancel(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Uri(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Referrer(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Handled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Handled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewPermissionRequest>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Uri(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_PermissionType(Windows::UI::Xaml::Controls::WebViewPermissionType* value) noexcept = 0;
    virtual HRESULT __stdcall get_Id(uint32_t* value) noexcept = 0;
    virtual HRESULT __stdcall get_State(Windows::UI::Xaml::Controls::WebViewPermissionState* value) noexcept = 0;
    virtual HRESULT __stdcall Defer() noexcept = 0;
    virtual HRESULT __stdcall Allow() noexcept = 0;
    virtual HRESULT __stdcall Deny() noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_PermissionRequest(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewSeparateProcessLostEventArgs>{ struct type : IInspectable
{
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewSettings>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_IsJavaScriptEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsJavaScriptEnabled(bool value) noexcept = 0;
    virtual HRESULT __stdcall get_IsIndexedDBEnabled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_IsIndexedDBEnabled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_AnyScriptNotifyUri(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_SourceProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_AllowedScriptNotifyUrisProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DataTransferPackageProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewStatics2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_CanGoBackProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_CanGoForwardProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DocumentTitleProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_DefaultBackgroundColorProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewStatics3>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ContainsFullScreenElementProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewStatics4>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_DefaultExecutionMode(Windows::UI::Xaml::Controls::WebViewExecutionMode* value) noexcept = 0;
    virtual HRESULT __stdcall ClearTemporaryWebDataAsync(void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewStatics5>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_XYFocusLeftProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_XYFocusRightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_XYFocusUpProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_XYFocusDownProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Uri(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Handled(bool* value) noexcept = 0;
    virtual HRESULT __stdcall put_Handled(bool value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Uri(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_Referrer(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MediaType(HSTRING* value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWrapGrid>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ItemWidth(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemWidth(double value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemHeight(double* value) noexcept = 0;
    virtual HRESULT __stdcall put_ItemHeight(double value) noexcept = 0;
    virtual HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation* value) noexcept = 0;
    virtual HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment* value) noexcept = 0;
    virtual HRESULT __stdcall put_VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept = 0;
    virtual HRESULT __stdcall get_MaximumRowsOrColumns(int32_t* value) noexcept = 0;
    virtual HRESULT __stdcall put_MaximumRowsOrColumns(int32_t value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::IWrapGridStatics>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ItemWidthProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_ItemHeightProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_OrientationProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_HorizontalChildrenAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_VerticalChildrenAlignmentProperty(void** value) noexcept = 0;
    virtual HRESULT __stdcall get_MaximumRowsOrColumnsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::BackClickEventHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(void* sender, void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(void* sender, void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(void* sender, void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(void* sender, void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::DragItemsStartingEventHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(void* sender, void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(void* sender, void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ItemClickEventHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(void* sender, void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ListViewItemToKeyHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(void* item, HSTRING* returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::ListViewKeyToItemHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(HSTRING key, void** returnValue) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::NotifyEventHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(void* sender, void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(void* sender, void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::SelectionChangedEventHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(void* sender, void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(void* sender, void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::TextChangedEventHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(void* sender, void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::TextControlPasteEventHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(void* sender, void* e) noexcept = 0;
};};

template <> struct abi<Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler>{ struct type : IUnknown
{
    virtual HRESULT __stdcall Invoke(void* sender, void* e) noexcept = 0;
};};

}
