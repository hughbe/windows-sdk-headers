//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0018
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Windows.Devices.Geolocation.idl";
import "Windows.Services.Maps.idl";
import "Windows.Services.Maps.LocalSearch.idl";
import "Windows.Storage.Streams.idl";
import "Windows.UI.idl";
import "Windows.UI.Xaml.idl";
import "Windows.UI.Xaml.Controls.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Edevices2Egeolocation_h__)")
cpp_quote("#include <Windows.Devices.Geolocation.h>")
cpp_quote("#endif // !defined(__windows2Edevices2Egeolocation_h__)")
cpp_quote("#if !defined(__windows2Eservices2Emaps_h__)")
cpp_quote("#include <Windows.Services.Maps.h>")
cpp_quote("#endif // !defined(__windows2Eservices2Emaps_h__)")
cpp_quote("#if !defined(__windows2Eservices2Emaps2Elocalsearch_h__)")
cpp_quote("#include <Windows.Services.Maps.LocalSearch.h>")
cpp_quote("#endif // !defined(__windows2Eservices2Emaps2Elocalsearch_h__)")
cpp_quote("#if !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#include <Windows.Storage.Streams.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#if !defined(__windows2Eui_h__)")
cpp_quote("#include <Windows.UI.h>")
cpp_quote("#endif // !defined(__windows2Eui_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl_h__)")
cpp_quote("#include <Windows.UI.Xaml.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl2Econtrols_h__)")
cpp_quote("#include <Windows.UI.Xaml.Controls.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl2Econtrols_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Windows
{
    namespace Devices
    {
        namespace Geolocation
        {
            typedef enum AltitudeReferenceSystem AltitudeReferenceSystem;

            runtimeclass GeoboundingBox;

            runtimeclass Geopath;

            runtimeclass Geopoint;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct Point Point;

        apicontract UniversalApiContract;

        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace Services
    {
        namespace Maps
        {
            namespace LocalSearch
            {
                runtimeclass LocalLocation;
            }
        }
    }
}
namespace Windows
{
    namespace Services
    {
        namespace Maps
        {
            apicontract LocalSearchContract;

            runtimeclass MapRoute;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IRandomAccessStreamReference;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            runtimeclass DataTemplate;

            runtimeclass DependencyObject;

            runtimeclass DependencyProperty;

            typedef struct Thickness Thickness;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                namespace Maps
                {
                    typedef enum MapAnimationKind MapAnimationKind;

                    typedef enum MapCameraChangeReason MapCameraChangeReason;

                    typedef enum MapColorScheme MapColorScheme;

                    typedef enum MapElementCollisionBehavior MapElementCollisionBehavior;

                    typedef enum MapInteractionMode MapInteractionMode;

                    typedef enum MapLoadingStatus MapLoadingStatus;

                    typedef enum MapPanInteractionMode MapPanInteractionMode;

                    typedef enum MapProjection MapProjection;

                    typedef enum MapStyle MapStyle;

                    typedef enum MapTileLayer MapTileLayer;

                    typedef enum MapVisibleRegionKind MapVisibleRegionKind;

                    typedef enum MapWatermarkMode MapWatermarkMode;

                    typedef struct MapZoomLevelRange MapZoomLevelRange;

                    interface ICustomMapTileDataSource;

                    interface ICustomMapTileDataSourceFactory;

                    interface IHttpMapTileDataSource;

                    interface IHttpMapTileDataSourceFactory;

                    interface ILocalMapTileDataSource;

                    interface ILocalMapTileDataSourceFactory;

                    interface IMapActualCameraChangedEventArgs;

                    interface IMapActualCameraChangedEventArgs2;

                    interface IMapActualCameraChangingEventArgs;

                    interface IMapActualCameraChangingEventArgs2;

                    interface IMapBillboard;

                    interface IMapBillboardFactory;

                    interface IMapBillboardStatics;

                    interface IMapCamera;

                    interface IMapCameraFactory;

                    interface IMapContextRequestedEventArgs;

                    interface IMapControl;

                    interface IMapControl2;

                    interface IMapControl3;

                    interface IMapControl4;

                    interface IMapControl5;

                    interface IMapControlBusinessLandmarkClickEventArgs;

                    interface IMapControlBusinessLandmarkPointerEnteredEventArgs;

                    interface IMapControlBusinessLandmarkPointerExitedEventArgs;

                    interface IMapControlBusinessLandmarkRightTappedEventArgs;

                    interface IMapControlDataHelper;

                    interface IMapControlDataHelper2;

                    interface IMapControlDataHelperFactory;

                    interface IMapControlStatics;

                    interface IMapControlStatics2;

                    interface IMapControlStatics4;

                    interface IMapControlStatics5;

                    interface IMapControlTransitFeatureClickEventArgs;

                    interface IMapControlTransitFeaturePointerEnteredEventArgs;

                    interface IMapControlTransitFeaturePointerExitedEventArgs;

                    interface IMapControlTransitFeatureRightTappedEventArgs;

                    interface IMapCustomExperience;

                    interface IMapCustomExperienceChangedEventArgs;

                    interface IMapCustomExperienceFactory;

                    interface IMapElement;

                    interface IMapElement2;

                    interface IMapElementClickEventArgs;

                    interface IMapElementFactory;

                    interface IMapElementPointerEnteredEventArgs;

                    interface IMapElementPointerExitedEventArgs;

                    interface IMapElementStatics;

                    interface IMapElementStatics2;

                    interface IMapIcon;

                    interface IMapIcon2;

                    interface IMapIconStatics;

                    interface IMapIconStatics2;

                    interface IMapInputEventArgs;

                    interface IMapItemsControl;

                    interface IMapItemsControlStatics;

                    interface IMapPolygon;

                    interface IMapPolygon2;

                    interface IMapPolygonStatics;

                    interface IMapPolyline;

                    interface IMapPolylineStatics;

                    interface IMapRightTappedEventArgs;

                    interface IMapRouteView;

                    interface IMapRouteViewFactory;

                    interface IMapScene;

                    interface IMapSceneStatics;

                    interface IMapStyleSheet;

                    interface IMapStyleSheetStatics;

                    interface IMapTargetCameraChangedEventArgs;

                    interface IMapTargetCameraChangedEventArgs2;

                    interface IMapTileBitmapRequest;

                    interface IMapTileBitmapRequestDeferral;

                    interface IMapTileBitmapRequestedEventArgs;

                    interface IMapTileDataSource;

                    interface IMapTileDataSourceFactory;

                    interface IMapTileSource;

                    interface IMapTileSourceFactory;

                    interface IMapTileSourceStatics;

                    interface IMapTileUriRequest;

                    interface IMapTileUriRequestDeferral;

                    interface IMapTileUriRequestedEventArgs;

                    interface IStreetsideExperience;

                    interface IStreetsideExperienceFactory;

                    interface IStreetsidePanorama;

                    interface IStreetsidePanoramaStatics;

                    runtimeclass CustomMapTileDataSource;

                    runtimeclass HttpMapTileDataSource;

                    runtimeclass LocalMapTileDataSource;

                    runtimeclass MapActualCameraChangedEventArgs;

                    runtimeclass MapActualCameraChangingEventArgs;

                    runtimeclass MapBillboard;

                    runtimeclass MapCamera;

                    runtimeclass MapContextRequestedEventArgs;

                    runtimeclass MapControl;

                    runtimeclass MapControlBusinessLandmarkClickEventArgs;

                    runtimeclass MapControlBusinessLandmarkPointerEnteredEventArgs;

                    runtimeclass MapControlBusinessLandmarkPointerExitedEventArgs;

                    runtimeclass MapControlBusinessLandmarkRightTappedEventArgs;

                    runtimeclass MapControlDataHelper;

                    runtimeclass MapControlTransitFeatureClickEventArgs;

                    runtimeclass MapControlTransitFeaturePointerEnteredEventArgs;

                    runtimeclass MapControlTransitFeaturePointerExitedEventArgs;

                    runtimeclass MapControlTransitFeatureRightTappedEventArgs;

                    runtimeclass MapCustomExperience;

                    runtimeclass MapCustomExperienceChangedEventArgs;

                    runtimeclass MapElement;

                    runtimeclass MapElementClickEventArgs;

                    runtimeclass MapElementPointerEnteredEventArgs;

                    runtimeclass MapElementPointerExitedEventArgs;

                    runtimeclass MapIcon;

                    runtimeclass MapInputEventArgs;

                    runtimeclass MapItemsControl;

                    runtimeclass MapPolygon;

                    runtimeclass MapPolyline;

                    runtimeclass MapRightTappedEventArgs;

                    runtimeclass MapRouteView;

                    runtimeclass MapScene;

                    runtimeclass MapStyleSheet;

                    runtimeclass MapTargetCameraChangedEventArgs;

                    runtimeclass MapTileBitmapRequest;

                    runtimeclass MapTileBitmapRequestDeferral;

                    runtimeclass MapTileBitmapRequestedEventArgs;

                    runtimeclass MapTileDataSource;

                    runtimeclass MapTileSource;

                    runtimeclass MapTileUriRequest;

                    runtimeclass MapTileUriRequestDeferral;

                    runtimeclass MapTileUriRequestedEventArgs;

                    runtimeclass StreetsideExperience;

                    runtimeclass StreetsidePanorama;
                }
            }
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                namespace Maps
                {
                    declare
                    {
                        interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.Controls.Maps.MapElement*>;

                        interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.Controls.Maps.MapRouteView*>;

                        interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.Controls.Maps.MapStyleSheet*>;

                        interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.Controls.Maps.MapTileSource*>;

                        interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.Controls.Maps.MapElement*>;

                        interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.Controls.Maps.MapRouteView*>;

                        interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.Controls.Maps.MapStyleSheet*>;

                        interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.Controls.Maps.MapTileSource*>;

                        interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.Controls.Maps.MapElement*>;

                        interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.Controls.Maps.MapRouteView*>;

                        interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.Controls.Maps.MapTileSource*>;

                        interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.Controls.Maps.MapElement*>;

                        interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.Controls.Maps.MapRouteView*>;

                        interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.Controls.Maps.MapTileSource*>;

                        interface Windows.Foundation.IAsyncOperation<Windows.UI.Xaml.Controls.Maps.StreetsidePanorama*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource*, Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource*, Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource*, Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, IInspectable*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkClickEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerEnteredEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerExitedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkRightTappedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerEnteredEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerExitedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapInputEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapScene*, Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs*>;
                    }
                }
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                namespace Maps
                {
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    enum MapAnimationKind
                    {
                        Default = 0,
                        None    = 1,
                        Linear  = 2,
                        Bow     = 3
                    };

                    [contract(Windows.Foundation.UniversalApiContract, 2.0)]
                    enum MapCameraChangeReason
                    {
                        System          = 0,
                        UserInteraction = 1,
                        Programmatic    = 2
                    };

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    enum MapColorScheme
                    {
                        Light = 0,
                        Dark  = 1
                    };

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    enum MapElementCollisionBehavior
                    {
                        Hide          = 0,
                        RemainVisible = 1
                    };

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    enum MapInteractionMode
                    {
                        Auto                      = 0,
                        Disabled                  = 1,
                        GestureOnly               = 2,
                        [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                        PointerAndKeyboard        = 2,
                        ControlOnly               = 3,
                        GestureAndControl         = 4,
                        [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                        PointerKeyboardAndControl = 4,
                        [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                        PointerOnly               = 5
                    };

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    enum MapLoadingStatus
                    {
                        Loading         = 0,
                        Loaded          = 1,
                        [contract(Windows.Foundation.UniversalApiContract, 2.0)]
                        DataUnavailable = 2
                    };

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    enum MapPanInteractionMode
                    {
                        Auto     = 0,
                        Disabled = 1
                    };

                    [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                    enum MapProjection
                    {
                        WebMercator = 0,
                        Globe       = 1
                    };

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    enum MapStyle
                    {
                        None              = 0,
                        Road              = 1,
                        Aerial            = 2,
                        AerialWithRoads   = 3,
                        Terrain           = 4,
                        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                        Aerial3D          = 5,
                        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                        Aerial3DWithRoads = 6,
                        [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                        Custom            = 7
                    };

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    enum MapTileLayer
                    {
                        LabelOverlay          = 0,
                        RoadOverlay           = 1,
                        AreaOverlay           = 2,
                        BackgroundOverlay     = 3,
                        BackgroundReplacement = 4
                    };

                    [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                    enum MapVisibleRegionKind
                    {
                        Near = 0,
                        Full = 1
                    };

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    enum MapWatermarkMode
                    {
                        Automatic = 0,
                        On        = 1
                    };

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    struct MapZoomLevelRange
                    {
                        DOUBLE Min;
                        DOUBLE Max;
                    };

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource)]
                    [uuid(65DA384A-2DB1-4BE1-B155-3D0C9ECF4799)]
                    interface ICustomMapTileDataSource : IInspectable
                    {
                        [eventadd] HRESULT BitmapRequested([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource*, Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT BitmapRequested([in] EventRegistrationToken token);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource)]
                    [uuid(C8477947-C955-4F22-9444-A1D8D744AF11)]
                    interface ICustomMapTileDataSourceFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource** instance);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource)]
                    [uuid(9D03CB5C-FD79-4795-87BE-7E54CA0B37D0)]
                    interface IHttpMapTileDataSource : IInspectable
                    {
                        [propget] HRESULT UriFormatString([out] [retval] HSTRING* value);
                        [propput] HRESULT UriFormatString([in] HSTRING value);
                        [propget] HRESULT AdditionalRequestHeaders([out] [retval] Windows.Foundation.Collections.IMap<HSTRING, HSTRING>** value);
                        [propget] HRESULT AllowCaching([out] [retval] boolean* value);
                        [propput] HRESULT AllowCaching([in] boolean value);
                        [eventadd] HRESULT UriRequested([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource*, Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT UriRequested([in] EventRegistrationToken token);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource)]
                    [uuid(53B4B107-84DC-4291-89F8-6D0BB612A055)]
                    interface IHttpMapTileDataSourceFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource** instance);
                        HRESULT CreateInstanceWithUriFormatString([in] HSTRING uriFormatString, [in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource** instance);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource)]
                    [uuid(616257B5-9108-4F12-8BF4-BB3C8F6274E5)]
                    interface ILocalMapTileDataSource : IInspectable
                    {
                        [propget] HRESULT UriFormatString([out] [retval] HSTRING* value);
                        [propput] HRESULT UriFormatString([in] HSTRING value);
                        [eventadd] HRESULT UriRequested([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource*, Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT UriRequested([in] EventRegistrationToken token);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource)]
                    [uuid(C5CFE9FC-72AC-4839-8A0D-011F24693C79)]
                    interface ILocalMapTileDataSourceFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource** instance);
                        HRESULT CreateInstanceWithUriFormatString([in] HSTRING uriFormatString, [in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource** instance);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs)]
                    [uuid(DAA080DA-B7F4-422C-A618-BBAA7C1D814C)]
                    interface IMapActualCameraChangedEventArgs : IInspectable
                    {
                        [propget] HRESULT Camera([out] [retval] Windows.UI.Xaml.Controls.Maps.MapCamera** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 2.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs)]
                    [uuid(7BA4C7E5-10DC-455A-9D04-1D72FB6D9B93)]
                    interface IMapActualCameraChangedEventArgs2 : IInspectable
                    {
                        [propget] HRESULT ChangeReason([out] [retval] Windows.UI.Xaml.Controls.Maps.MapCameraChangeReason* value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs)]
                    [uuid(6B0DBED6-93F7-4682-8DE5-A47A1CC7A945)]
                    interface IMapActualCameraChangingEventArgs : IInspectable
                    {
                        [propget] HRESULT Camera([out] [retval] Windows.UI.Xaml.Controls.Maps.MapCamera** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 2.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs)]
                    [uuid(F2867897-40AC-4E8A-A927-510F3846A47E)]
                    interface IMapActualCameraChangingEventArgs2 : IInspectable
                    {
                        [propget] HRESULT ChangeReason([out] [retval] Windows.UI.Xaml.Controls.Maps.MapCameraChangeReason* value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapBillboard)]
                    [uuid(1694259D-0AE2-4F42-A02E-292CA835D39D)]
                    interface IMapBillboard : IInspectable
                    {
                        [propget] HRESULT Location([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                        [propput] HRESULT Location([in] Windows.Devices.Geolocation.Geopoint* value);
                        [propget] HRESULT NormalizedAnchorPoint([out] [retval] Windows.Foundation.Point* value);
                        [propput] HRESULT NormalizedAnchorPoint([in] Windows.Foundation.Point value);
                        [propget] HRESULT Image([out] [retval] Windows.Storage.Streams.IRandomAccessStreamReference** value);
                        [propput] HRESULT Image([in] Windows.Storage.Streams.IRandomAccessStreamReference* value);
                        [propget] HRESULT CollisionBehaviorDesired([out] [retval] Windows.UI.Xaml.Controls.Maps.MapElementCollisionBehavior* value);
                        [propput] HRESULT CollisionBehaviorDesired([in] Windows.UI.Xaml.Controls.Maps.MapElementCollisionBehavior value);
                        [propget] HRESULT ReferenceCamera([out] [retval] Windows.UI.Xaml.Controls.Maps.MapCamera** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapBillboard)]
                    [uuid(BE45A4C5-8F09-4B86-AE28-783740EB8B31)]
                    interface IMapBillboardFactory : IInspectable
                    {
                        HRESULT CreateInstanceFromCamera([in] Windows.UI.Xaml.Controls.Maps.MapCamera* camera, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapBillboard** instance);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapBillboard)]
                    [uuid(FDF839FE-E1F7-4FB0-8887-7DA68C647333)]
                    interface IMapBillboardStatics : IInspectable
                    {
                        [propget] HRESULT LocationProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT NormalizedAnchorPointProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT CollisionBehaviorDesiredProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapCamera)]
                    [uuid(53A6B623-C0F8-4D8B-AD1E-A59598EA840B)]
                    interface IMapCamera : IInspectable
                    {
                        [propget] HRESULT Location([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                        [propput] HRESULT Location([in] Windows.Devices.Geolocation.Geopoint* value);
                        [propget] HRESULT Heading([out] [retval] DOUBLE* value);
                        [propput] HRESULT Heading([in] DOUBLE value);
                        [propget] HRESULT Pitch([out] [retval] DOUBLE* value);
                        [propput] HRESULT Pitch([in] DOUBLE value);
                        [propget] HRESULT Roll([out] [retval] DOUBLE* value);
                        [propput] HRESULT Roll([in] DOUBLE value);
                        [propget] HRESULT FieldOfView([out] [retval] DOUBLE* value);
                        [propput] HRESULT FieldOfView([in] DOUBLE value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapCamera)]
                    [uuid(EA3B0F16-83AF-4ACE-8E71-10AD9F1E9E7F)]
                    interface IMapCameraFactory : IInspectable
                    {
                        HRESULT CreateInstanceWithLocation([in] Windows.Devices.Geolocation.Geopoint* location, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapCamera** instance);
                        HRESULT CreateInstanceWithLocationAndHeading([in] Windows.Devices.Geolocation.Geopoint* location, [in] DOUBLE headingInDegrees, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapCamera** instance);
                        HRESULT CreateInstanceWithLocationHeadingAndPitch([in] Windows.Devices.Geolocation.Geopoint* location, [in] DOUBLE headingInDegrees, [in] DOUBLE pitchInDegrees, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapCamera** instance);
                        HRESULT CreateInstanceWithLocationHeadingPitchRollAndFieldOfView([in] Windows.Devices.Geolocation.Geopoint* location, [in] DOUBLE headingInDegrees, [in] DOUBLE pitchInDegrees, [in] DOUBLE rollInDegrees, [in] DOUBLE fieldOfViewInDegrees, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapCamera** instance);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs)]
                    [uuid(FDD1B423-C961-4DF2-BB57-82EE0F0BB591)]
                    interface IMapContextRequestedEventArgs : IInspectable
                    {
                        [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                        [propget] HRESULT Location([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                        [propget] HRESULT MapElements([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.Controls.Maps.MapElement*>** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControl)]
                    [uuid(42D0B851-5256-4747-9E6C-0D11E966141E)]
                    interface IMapControl : IInspectable
                    {
                        [propget] HRESULT Center([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                        [propput] HRESULT Center([in] Windows.Devices.Geolocation.Geopoint* value);
                        [propget] HRESULT Children([out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Xaml.DependencyObject*>** value);
                        [propget] HRESULT ColorScheme([out] [retval] Windows.UI.Xaml.Controls.Maps.MapColorScheme* value);
                        [propput] HRESULT ColorScheme([in] Windows.UI.Xaml.Controls.Maps.MapColorScheme value);
                        [propget] HRESULT DesiredPitch([out] [retval] DOUBLE* value);
                        [propput] HRESULT DesiredPitch([in] DOUBLE value);
                        [propget] HRESULT Heading([out] [retval] DOUBLE* value);
                        [propput] HRESULT Heading([in] DOUBLE value);
                        [propget] HRESULT LandmarksVisible([out] [retval] boolean* value);
                        [propput] HRESULT LandmarksVisible([in] boolean value);
                        [propget] HRESULT LoadingStatus([out] [retval] Windows.UI.Xaml.Controls.Maps.MapLoadingStatus* value);
                        [propget] HRESULT MapServiceToken([out] [retval] HSTRING* value);
                        [propput] HRESULT MapServiceToken([in] HSTRING value);
                        [propget] HRESULT MaxZoomLevel([out] [retval] DOUBLE* value);
                        [propget] HRESULT MinZoomLevel([out] [retval] DOUBLE* value);
                        [propget] HRESULT PedestrianFeaturesVisible([out] [retval] boolean* value);
                        [propput] HRESULT PedestrianFeaturesVisible([in] boolean value);
                        [propget] HRESULT Pitch([out] [retval] DOUBLE* value);
                        [propget] HRESULT Style([out] [retval] Windows.UI.Xaml.Controls.Maps.MapStyle* value);
                        [propput] HRESULT Style([in] Windows.UI.Xaml.Controls.Maps.MapStyle value);
                        [propget] HRESULT TrafficFlowVisible([out] [retval] boolean* value);
                        [propput] HRESULT TrafficFlowVisible([in] boolean value);
                        [propget] HRESULT TransformOrigin([out] [retval] Windows.Foundation.Point* value);
                        [propput] HRESULT TransformOrigin([in] Windows.Foundation.Point value);
                        [propget] HRESULT WatermarkMode([out] [retval] Windows.UI.Xaml.Controls.Maps.MapWatermarkMode* value);
                        [propput] HRESULT WatermarkMode([in] Windows.UI.Xaml.Controls.Maps.MapWatermarkMode value);
                        [propget] HRESULT ZoomLevel([out] [retval] DOUBLE* value);
                        [propput] HRESULT ZoomLevel([in] DOUBLE value);
                        [propget] HRESULT MapElements([out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Xaml.Controls.Maps.MapElement*>** value);
                        [propget] HRESULT Routes([out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Xaml.Controls.Maps.MapRouteView*>** value);
                        [propget] HRESULT TileSources([out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Xaml.Controls.Maps.MapTileSource*>** value);
                        [eventadd] HRESULT CenterChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, IInspectable*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT CenterChanged([in] EventRegistrationToken token);
                        [eventadd] HRESULT HeadingChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, IInspectable*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT HeadingChanged([in] EventRegistrationToken token);
                        [eventadd] HRESULT LoadingStatusChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, IInspectable*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT LoadingStatusChanged([in] EventRegistrationToken token);
                        [eventadd] HRESULT MapDoubleTapped([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapInputEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT MapDoubleTapped([in] EventRegistrationToken token);
                        [eventadd] HRESULT MapHolding([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapInputEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT MapHolding([in] EventRegistrationToken token);
                        [eventadd] HRESULT MapTapped([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapInputEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT MapTapped([in] EventRegistrationToken token);
                        [eventadd] HRESULT PitchChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, IInspectable*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT PitchChanged([in] EventRegistrationToken token);
                        [eventadd] HRESULT TransformOriginChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, IInspectable*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT TransformOriginChanged([in] EventRegistrationToken token);
                        [eventadd] HRESULT ZoomLevelChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, IInspectable*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ZoomLevelChanged([in] EventRegistrationToken token);
                        [overload("FindMapElementsAtOffset")] HRESULT FindMapElementsAtOffset([in] Windows.Foundation.Point offset, [out] [retval] Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.Controls.Maps.MapElement*>** returnValue);
                        [overload("GetLocationFromOffset")] HRESULT GetLocationFromOffset([in] Windows.Foundation.Point offset, [out] Windows.Devices.Geolocation.Geopoint** location);
                        HRESULT GetOffsetFromLocation([in] Windows.Devices.Geolocation.Geopoint* location, [out] Windows.Foundation.Point* offset);
                        HRESULT IsLocationInView([in] Windows.Devices.Geolocation.Geopoint* location, [out] boolean* isInView);
                        HRESULT TrySetViewBoundsAsync([in] Windows.Devices.Geolocation.GeoboundingBox* bounds, [in] Windows.Foundation.IReference<Windows.UI.Xaml.Thickness>* margin, [in] Windows.UI.Xaml.Controls.Maps.MapAnimationKind animation, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                        [overload("TrySetViewAsync")] HRESULT TrySetViewWithCenterAsync([in] Windows.Devices.Geolocation.Geopoint* center, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                        [overload("TrySetViewAsync")] HRESULT TrySetViewWithCenterAndZoomAsync([in] Windows.Devices.Geolocation.Geopoint* center, [in] Windows.Foundation.IReference<DOUBLE>* zoomLevel, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                        [overload("TrySetViewAsync")] HRESULT TrySetViewWithCenterZoomHeadingAndPitchAsync([in] Windows.Devices.Geolocation.Geopoint* center, [in] Windows.Foundation.IReference<DOUBLE>* zoomLevel, [in] Windows.Foundation.IReference<DOUBLE>* heading, [in] Windows.Foundation.IReference<DOUBLE>* desiredPitch, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                        [overload("TrySetViewAsync")] HRESULT TrySetViewWithCenterZoomHeadingPitchAndAnimationAsync([in] Windows.Devices.Geolocation.Geopoint* center, [in] Windows.Foundation.IReference<DOUBLE>* zoomLevel, [in] Windows.Foundation.IReference<DOUBLE>* heading, [in] Windows.Foundation.IReference<DOUBLE>* desiredPitch, [in] Windows.UI.Xaml.Controls.Maps.MapAnimationKind animation, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControl)]
                    [uuid(E1FD644D-96EC-4065-B0F0-75281DA3654D)]
                    interface IMapControl2 : IInspectable
                    {
                        [propget] HRESULT BusinessLandmarksVisible([out] [retval] boolean* value);
                        [propput] HRESULT BusinessLandmarksVisible([in] boolean value);
                        [propget] HRESULT TransitFeaturesVisible([out] [retval] boolean* value);
                        [propput] HRESULT TransitFeaturesVisible([in] boolean value);
                        [propget] HRESULT PanInteractionMode([out] [retval] Windows.UI.Xaml.Controls.Maps.MapPanInteractionMode* value);
                        [propput] HRESULT PanInteractionMode([in] Windows.UI.Xaml.Controls.Maps.MapPanInteractionMode value);
                        [propget] HRESULT RotateInteractionMode([out] [retval] Windows.UI.Xaml.Controls.Maps.MapInteractionMode* value);
                        [propput] HRESULT RotateInteractionMode([in] Windows.UI.Xaml.Controls.Maps.MapInteractionMode value);
                        [propget] HRESULT TiltInteractionMode([out] [retval] Windows.UI.Xaml.Controls.Maps.MapInteractionMode* value);
                        [propput] HRESULT TiltInteractionMode([in] Windows.UI.Xaml.Controls.Maps.MapInteractionMode value);
                        [propget] HRESULT ZoomInteractionMode([out] [retval] Windows.UI.Xaml.Controls.Maps.MapInteractionMode* value);
                        [propput] HRESULT ZoomInteractionMode([in] Windows.UI.Xaml.Controls.Maps.MapInteractionMode value);
                        [propget] HRESULT Is3DSupported([out] [retval] boolean* value);
                        [propget] HRESULT IsStreetsideSupported([out] [retval] boolean* value);
                        [propget] HRESULT Scene([out] [retval] Windows.UI.Xaml.Controls.Maps.MapScene** value);
                        [propput] HRESULT Scene([in] Windows.UI.Xaml.Controls.Maps.MapScene* value);
                        [propget] HRESULT ActualCamera([out] [retval] Windows.UI.Xaml.Controls.Maps.MapCamera** value);
                        [propget] HRESULT TargetCamera([out] [retval] Windows.UI.Xaml.Controls.Maps.MapCamera** value);
                        [propget] HRESULT CustomExperience([out] [retval] Windows.UI.Xaml.Controls.Maps.MapCustomExperience** value);
                        [propput] HRESULT CustomExperience([in] Windows.UI.Xaml.Controls.Maps.MapCustomExperience* value);
                        [eventadd] HRESULT MapElementClick([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT MapElementClick([in] EventRegistrationToken token);
                        [eventadd] HRESULT MapElementPointerEntered([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT MapElementPointerEntered([in] EventRegistrationToken token);
                        [eventadd] HRESULT MapElementPointerExited([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT MapElementPointerExited([in] EventRegistrationToken token);
                        [eventadd] HRESULT ActualCameraChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ActualCameraChanged([in] EventRegistrationToken token);
                        [eventadd] HRESULT ActualCameraChanging([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ActualCameraChanging([in] EventRegistrationToken token);
                        [eventadd] HRESULT TargetCameraChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT TargetCameraChanged([in] EventRegistrationToken token);
                        [eventadd] HRESULT CustomExperienceChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT CustomExperienceChanged([in] EventRegistrationToken token);
                        HRESULT StartContinuousRotate([in] DOUBLE rateInDegreesPerSecond);
                        HRESULT StopContinuousRotate();
                        HRESULT StartContinuousTilt([in] DOUBLE rateInDegreesPerSecond);
                        HRESULT StopContinuousTilt();
                        HRESULT StartContinuousZoom([in] DOUBLE rateOfChangePerSecond);
                        HRESULT StopContinuousZoom();
                        HRESULT TryRotateAsync([in] DOUBLE degrees, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                        HRESULT TryRotateToAsync([in] DOUBLE angleInDegrees, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                        HRESULT TryTiltAsync([in] DOUBLE degrees, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                        HRESULT TryTiltToAsync([in] DOUBLE angleInDegrees, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                        HRESULT TryZoomInAsync([out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                        HRESULT TryZoomOutAsync([out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                        HRESULT TryZoomToAsync([in] DOUBLE zoomLevel, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                        [overload("TrySetSceneAsync")] HRESULT TrySetSceneAsync([in] Windows.UI.Xaml.Controls.Maps.MapScene* scene, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                        [overload("TrySetSceneAsync")] HRESULT TrySetSceneWithAnimationAsync([in] Windows.UI.Xaml.Controls.Maps.MapScene* scene, [in] Windows.UI.Xaml.Controls.Maps.MapAnimationKind animationKind, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 2.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControl)]
                    [uuid(586328F8-8CDD-40AE-9338-AF2A7BE845E5)]
                    interface IMapControl3 : IInspectable
                    {
                        [eventadd] HRESULT MapRightTapped([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT MapRightTapped([in] EventRegistrationToken token);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControl)]
                    [uuid(068F132A-1817-466D-B7CE-419B3F8E248B)]
                    interface IMapControl4 : IInspectable
                    {
                        [propget] HRESULT BusinessLandmarksEnabled([out] [retval] boolean* value);
                        [propput] HRESULT BusinessLandmarksEnabled([in] boolean value);
                        [propget] HRESULT TransitFeaturesEnabled([out] [retval] boolean* value);
                        [propput] HRESULT TransitFeaturesEnabled([in] boolean value);
                        HRESULT GetVisibleRegion([in] Windows.UI.Xaml.Controls.Maps.MapVisibleRegionKind region, [out] [retval] Windows.Devices.Geolocation.Geopath** returnValue);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControl)]
                    [uuid(DD9B0FFD-7823-46A2-82C9-65DDAC4F365F)]
                    interface IMapControl5 : IInspectable
                    {
                        [propget] HRESULT MapProjection([out] [retval] Windows.UI.Xaml.Controls.Maps.MapProjection* value);
                        [propput] HRESULT MapProjection([in] Windows.UI.Xaml.Controls.Maps.MapProjection value);
                        [propget] HRESULT StyleSheet([out] [retval] Windows.UI.Xaml.Controls.Maps.MapStyleSheet** value);
                        [propput] HRESULT StyleSheet([in] Windows.UI.Xaml.Controls.Maps.MapStyleSheet* value);
                        [propget] HRESULT ViewPadding([out] [retval] Windows.UI.Xaml.Thickness* value);
                        [propput] HRESULT ViewPadding([in] Windows.UI.Xaml.Thickness value);
                        [eventadd] HRESULT MapContextRequested([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT MapContextRequested([in] EventRegistrationToken token);
                        [overload("FindMapElementsAtOffset")] HRESULT FindMapElementsAtOffsetWithRadius([in] Windows.Foundation.Point offset, [in] DOUBLE radius, [out] [retval] Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.Controls.Maps.MapElement*>** returnValue);
                        [overload("GetLocationFromOffset")] HRESULT GetLocationFromOffsetWithReferenceSystem([in] Windows.Foundation.Point offset, [in] Windows.Devices.Geolocation.AltitudeReferenceSystem desiredReferenceSystem, [out] Windows.Devices.Geolocation.Geopoint** location);
                        HRESULT StartContinuousPan([in] DOUBLE horizontalPixelsPerSecond, [in] DOUBLE verticalPixelsPerSecond);
                        HRESULT StopContinuousPan();
                        HRESULT TryPanAsync([in] DOUBLE horizontalPixels, [in] DOUBLE verticalPixels, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                        HRESULT TryPanToAsync([in] Windows.Devices.Geolocation.Geopoint* location, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** returnValue);
                    }

                    [contract(Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkClickEventArgs)]
                    [uuid(5E464922-4A1A-4797-BEB7-5CF7754CB867)]
                    interface IMapControlBusinessLandmarkClickEventArgs : IInspectable
                    {
                        [propget] HRESULT LocalLocations([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Services.Maps.LocalSearch.LocalLocation*>** value);
                    }

                    [contract(Windows.Services.Maps.LocalSearchContract, 3.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerEnteredEventArgs)]
                    [uuid(5E4081A6-EA98-4F95-8CAF-5B42696FF504)]
                    interface IMapControlBusinessLandmarkPointerEnteredEventArgs : IInspectable
                    {
                        [propget] HRESULT LocalLocations([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Services.Maps.LocalSearch.LocalLocation*>** value);
                    }

                    [contract(Windows.Services.Maps.LocalSearchContract, 3.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerExitedEventArgs)]
                    [uuid(2BB52CAF-F24A-46D0-B463-65F719731057)]
                    interface IMapControlBusinessLandmarkPointerExitedEventArgs : IInspectable
                    {
                        [propget] HRESULT LocalLocations([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Services.Maps.LocalSearch.LocalLocation*>** value);
                    }

                    [contract(Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkRightTappedEventArgs)]
                    [uuid(59AB8AE7-F184-4AB1-B0B0-35C8BF0654B2)]
                    interface IMapControlBusinessLandmarkRightTappedEventArgs : IInspectable
                    {
                        [propget] HRESULT LocalLocations([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Services.Maps.LocalSearch.LocalLocation*>** value);
                    }

                    [contract(Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControlDataHelper)]
                    [uuid(8BB0F09C-14AB-486C-9DE5-5A5DEF0205A2)]
                    interface IMapControlDataHelper : IInspectable
                    {
                        [eventadd] HRESULT BusinessLandmarkClick([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkClickEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT BusinessLandmarkClick([in] EventRegistrationToken token);
                        [eventadd] HRESULT TransitFeatureClick([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT TransitFeatureClick([in] EventRegistrationToken token);
                        [eventadd] HRESULT BusinessLandmarkRightTapped([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkRightTappedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT BusinessLandmarkRightTapped([in] EventRegistrationToken token);
                        [eventadd] HRESULT TransitFeatureRightTapped([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT TransitFeatureRightTapped([in] EventRegistrationToken token);
                    }

                    [contract(Windows.Services.Maps.LocalSearchContract, 3.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControlDataHelper)]
                    [uuid(59CE429E-562F-4C21-A674-0F11DECF0FB3)]
                    interface IMapControlDataHelper2 : IInspectable
                    {
                        [eventadd] HRESULT BusinessLandmarkPointerEntered([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerEnteredEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT BusinessLandmarkPointerEntered([in] EventRegistrationToken token);
                        [eventadd] HRESULT TransitFeaturePointerEntered([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerEnteredEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT TransitFeaturePointerEntered([in] EventRegistrationToken token);
                        [eventadd] HRESULT BusinessLandmarkPointerExited([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerExitedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT BusinessLandmarkPointerExited([in] EventRegistrationToken token);
                        [eventadd] HRESULT TransitFeaturePointerExited([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapControl*, Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerExitedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT TransitFeaturePointerExited([in] EventRegistrationToken token);
                    }

                    [contract(Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControlDataHelper)]
                    [uuid(3B70AA8E-02EF-469C-BBAF-DC2158D4289B)]
                    interface IMapControlDataHelperFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] Windows.UI.Xaml.Controls.Maps.MapControl* map, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapControlDataHelper** instance);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControl)]
                    [uuid(C2C61795-2147-4F0A-942A-5493A85DE807)]
                    interface IMapControlStatics : IInspectable
                    {
                        [propget] HRESULT CenterProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ChildrenProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ColorSchemeProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DesiredPitchProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT HeadingProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT LandmarksVisibleProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT LoadingStatusProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT MapServiceTokenProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PedestrianFeaturesVisibleProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PitchProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT StyleProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT TrafficFlowVisibleProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT TransformOriginProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT WatermarkModeProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ZoomLevelProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT MapElementsProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT RoutesProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT TileSourcesProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT LocationProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        HRESULT GetLocation([in] Windows.UI.Xaml.DependencyObject* element, [out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                        HRESULT SetLocation([in] Windows.UI.Xaml.DependencyObject* element, [in] Windows.Devices.Geolocation.Geopoint* value);
                        [propget] HRESULT NormalizedAnchorPointProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        HRESULT GetNormalizedAnchorPoint([in] Windows.UI.Xaml.DependencyObject* element, [out] [retval] Windows.Foundation.Point* value);
                        HRESULT SetNormalizedAnchorPoint([in] Windows.UI.Xaml.DependencyObject* element, [in] Windows.Foundation.Point value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControl)]
                    [uuid(04852B93-B446-4D31-9752-1EC69A5996AE)]
                    interface IMapControlStatics2 : IInspectable
                    {
                        [propget] HRESULT BusinessLandmarksVisibleProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT TransitFeaturesVisibleProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PanInteractionModeProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT RotateInteractionModeProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT TiltInteractionModeProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ZoomInteractionModeProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT Is3DSupportedProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IsStreetsideSupportedProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SceneProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControl)]
                    [uuid(FE785D97-5D13-4FA1-BF1D-84061768C183)]
                    interface IMapControlStatics4 : IInspectable
                    {
                        [propget] HRESULT BusinessLandmarksEnabledProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT TransitFeaturesEnabledProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControl)]
                    [uuid(09626F00-B7DD-4189-A7F7-830C412DEEA3)]
                    interface IMapControlStatics5 : IInspectable
                    {
                        [propget] HRESULT MapProjectionProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT StyleSheetProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ViewPaddingProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs)]
                    [uuid(76179969-B765-4622-B08A-3072745A4541)]
                    interface IMapControlTransitFeatureClickEventArgs : IInspectable
                    {
                        [propget] HRESULT DisplayName([out] [retval] HSTRING* value);
                        [propget] HRESULT Location([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                        [propget] HRESULT TransitProperties([out] [retval] Windows.Foundation.Collections.IMapView<HSTRING, IInspectable*>** value);
                    }

                    [contract(Windows.Services.Maps.LocalSearchContract, 3.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerEnteredEventArgs)]
                    [uuid(73911A4E-EC4F-479E-94A1-36E081D0D897)]
                    interface IMapControlTransitFeaturePointerEnteredEventArgs : IInspectable
                    {
                        [propget] HRESULT DisplayName([out] [retval] HSTRING* value);
                        [propget] HRESULT Location([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                        [propget] HRESULT TransitProperties([out] [retval] Windows.Foundation.Collections.IMapView<HSTRING, IInspectable*>** value);
                    }

                    [contract(Windows.Services.Maps.LocalSearchContract, 3.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerExitedEventArgs)]
                    [uuid(6A11258D-448D-44E7-BC69-D13D497154E9)]
                    interface IMapControlTransitFeaturePointerExitedEventArgs : IInspectable
                    {
                        [propget] HRESULT DisplayName([out] [retval] HSTRING* value);
                        [propget] HRESULT Location([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                        [propget] HRESULT TransitProperties([out] [retval] Windows.Foundation.Collections.IMapView<HSTRING, IInspectable*>** value);
                    }

                    [contract(Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs)]
                    [uuid(AEA1CC49-A729-4EAE-A59A-3EC9A125A028)]
                    interface IMapControlTransitFeatureRightTappedEventArgs : IInspectable
                    {
                        [propget] HRESULT DisplayName([out] [retval] HSTRING* value);
                        [propget] HRESULT Location([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                        [propget] HRESULT TransitProperties([out] [retval] Windows.Foundation.Collections.IMapView<HSTRING, IInspectable*>** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapCustomExperience)]
                    [uuid(64592866-14A3-4E5F-8883-8E9C500EEEDE)]
                    interface IMapCustomExperience : IInspectable
                    {
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs)]
                    [uuid(B9E6FB9B-8FC1-4042-AC34-A61B38BB7514)]
                    interface IMapCustomExperienceChangedEventArgs : IInspectable
                    {
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapCustomExperience)]
                    [uuid(7A403FB5-A1B1-4E7F-921E-3E6B8D8EBED6)]
                    interface IMapCustomExperienceFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapCustomExperience** instance);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapElement)]
                    [uuid(D61FC4DF-B245-47F2-9AC2-43C058B1C903)]
                    interface IMapElement : IInspectable
                    {
                        [propget] HRESULT ZIndex([out] [retval] INT32* value);
                        [propput] HRESULT ZIndex([in] INT32 value);
                        [propget] HRESULT Visible([out] [retval] boolean* value);
                        [propput] HRESULT Visible([in] boolean value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapElement)]
                    [uuid(6619F261-FBA6-4964-A7FF-F1AF63AB9CB0)]
                    interface IMapElement2 : IInspectable
                    {
                        [propget] HRESULT MapTabIndex([out] [retval] INT32* value);
                        [propput] HRESULT MapTabIndex([in] INT32 value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs)]
                    [uuid(40168A11-D080-4519-99A1-3149FB8999D0)]
                    interface IMapElementClickEventArgs : IInspectable
                    {
                        [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                        [propget] HRESULT Location([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                        [propget] HRESULT MapElements([out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Xaml.Controls.Maps.MapElement*>** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapElement)]
                    [uuid(4A30D007-0BD6-47A5-860B-7E7CF5F0C573)]
                    interface IMapElementFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapElement** instance);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs)]
                    [uuid(AB85DD4E-91D7-4B31-8F0A-D390C7D3A2EF)]
                    interface IMapElementPointerEnteredEventArgs : IInspectable
                    {
                        [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                        [propget] HRESULT Location([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                        [propget] HRESULT MapElement([out] [retval] Windows.UI.Xaml.Controls.Maps.MapElement** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs)]
                    [uuid(C1A45AF9-60C9-4679-9119-20ABC75D931F)]
                    interface IMapElementPointerExitedEventArgs : IInspectable
                    {
                        [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                        [propget] HRESULT Location([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                        [propget] HRESULT MapElement([out] [retval] Windows.UI.Xaml.Controls.Maps.MapElement** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapElement)]
                    [uuid(E8C71CF2-BFEF-4B49-8E99-41B5E3789FD2)]
                    interface IMapElementStatics : IInspectable
                    {
                        [propget] HRESULT ZIndexProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT VisibleProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapElement)]
                    [uuid(9BF72F30-80FE-4F30-BCC1-FA894050F676)]
                    interface IMapElementStatics2 : IInspectable
                    {
                        [propget] HRESULT MapTabIndexProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapIcon)]
                    [uuid(D2096872-23D9-4A2B-8BE0-69F3A85482AB)]
                    interface IMapIcon : IInspectable
                    {
                        [propget] HRESULT Location([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                        [propput] HRESULT Location([in] Windows.Devices.Geolocation.Geopoint* value);
                        [propget] HRESULT Title([out] [retval] HSTRING* value);
                        [propput] HRESULT Title([in] HSTRING value);
                        [propget] HRESULT NormalizedAnchorPoint([out] [retval] Windows.Foundation.Point* value);
                        [propput] HRESULT NormalizedAnchorPoint([in] Windows.Foundation.Point value);
                        [propget] HRESULT Image([out] [retval] Windows.Storage.Streams.IRandomAccessStreamReference** value);
                        [propput] HRESULT Image([in] Windows.Storage.Streams.IRandomAccessStreamReference* value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapIcon)]
                    [uuid(611254B9-D8AA-4BBD-A316-BADF06911D63)]
                    interface IMapIcon2 : IInspectable
                    {
                        [propget] HRESULT CollisionBehaviorDesired([out] [retval] Windows.UI.Xaml.Controls.Maps.MapElementCollisionBehavior* value);
                        [propput] HRESULT CollisionBehaviorDesired([in] Windows.UI.Xaml.Controls.Maps.MapElementCollisionBehavior value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapIcon)]
                    [uuid(DCBC9E56-1190-4B5D-9E56-E5B6724AA328)]
                    interface IMapIconStatics : IInspectable
                    {
                        [propget] HRESULT LocationProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT TitleProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT NormalizedAnchorPointProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapIcon)]
                    [uuid(FF4C306A-CF76-46AB-A12F-B603B986C696)]
                    interface IMapIconStatics2 : IInspectable
                    {
                        [propget] HRESULT CollisionBehaviorDesiredProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapInputEventArgs)]
                    [uuid(9FC503A0-A8A2-4394-92E9-2247764F2F49)]
                    interface IMapInputEventArgs : IInspectable
                    {
                        [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                        [propget] HRESULT Location([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapItemsControl)]
                    [uuid(94C2C4D3-B335-42C5-B660-E6A07EC3BDDC)]
                    interface IMapItemsControl : IInspectable
                    {
                        [propget] HRESULT ItemsSource([out] [retval] IInspectable** value);
                        [propput] HRESULT ItemsSource([in] IInspectable* value);
                        [propget] HRESULT Items([out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Xaml.DependencyObject*>** value);
                        [propget] HRESULT ItemTemplate([out] [retval] Windows.UI.Xaml.DataTemplate** value);
                        [propput] HRESULT ItemTemplate([in] Windows.UI.Xaml.DataTemplate* value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapItemsControl)]
                    [uuid(33A859C7-789B-425C-8A0A-32385896CB4A)]
                    interface IMapItemsControlStatics : IInspectable
                    {
                        [propget] HRESULT ItemsSourceProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ItemsProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ItemTemplateProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapPolygon)]
                    [uuid(ABDA2285-4926-4C3A-A5F9-19DF7F69DB3D)]
                    interface IMapPolygon : IInspectable
                    {
                        [propget] HRESULT Path([out] [retval] Windows.Devices.Geolocation.Geopath** value);
                        [propput] HRESULT Path([in] Windows.Devices.Geolocation.Geopath* value);
                        [propget] HRESULT StrokeColor([out] [retval] Windows.UI.Color* value);
                        [propput] HRESULT StrokeColor([in] Windows.UI.Color value);
                        [propget] HRESULT StrokeThickness([out] [retval] DOUBLE* value);
                        [propput] HRESULT StrokeThickness([in] DOUBLE value);
                        [propget] HRESULT StrokeDashed([out] [retval] boolean* value);
                        [propput] HRESULT StrokeDashed([in] boolean value);
                        [propget] HRESULT FillColor([out] [retval] Windows.UI.Color* value);
                        [propput] HRESULT FillColor([in] Windows.UI.Color value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 2.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapPolygon)]
                    [uuid(96C8A11E-636B-4018-9C2E-ACC9122A01B2)]
                    interface IMapPolygon2 : IInspectable
                    {
                        [propget] HRESULT Paths([out] [retval] Windows.Foundation.Collections.IVector<Windows.Devices.Geolocation.Geopath*>** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapPolygon)]
                    [uuid(37F573BE-097B-424C-87CC-2EE042FDA6D2)]
                    interface IMapPolygonStatics : IInspectable
                    {
                        [propget] HRESULT PathProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT StrokeThicknessProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT StrokeDashedProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapPolyline)]
                    [uuid(FBAD24A2-24DF-4A86-8FFA-0F8F4D9EC17D)]
                    interface IMapPolyline : IInspectable
                    {
                        [propget] HRESULT Path([out] [retval] Windows.Devices.Geolocation.Geopath** value);
                        [propput] HRESULT Path([in] Windows.Devices.Geolocation.Geopath* value);
                        [propget] HRESULT StrokeColor([out] [retval] Windows.UI.Color* value);
                        [propput] HRESULT StrokeColor([in] Windows.UI.Color value);
                        [propget] HRESULT StrokeThickness([out] [retval] DOUBLE* value);
                        [propput] HRESULT StrokeThickness([in] DOUBLE value);
                        [propget] HRESULT StrokeDashed([out] [retval] boolean* value);
                        [propput] HRESULT StrokeDashed([in] boolean value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapPolyline)]
                    [uuid(61FDE44B-1DDF-4303-B809-EC87F58AD065)]
                    interface IMapPolylineStatics : IInspectable
                    {
                        [propget] HRESULT PathProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT StrokeDashedProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 2.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs)]
                    [uuid(20943171-6FE8-40A6-AD0E-297379B575A7)]
                    interface IMapRightTappedEventArgs : IInspectable
                    {
                        [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                        [propget] HRESULT Location([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapRouteView)]
                    [uuid(740EAEC5-BACC-41E1-A67E-DD6513832049)]
                    interface IMapRouteView : IInspectable
                    {
                        [propget] HRESULT RouteColor([out] [retval] Windows.UI.Color* value);
                        [propput] HRESULT RouteColor([in] Windows.UI.Color value);
                        [propget] HRESULT OutlineColor([out] [retval] Windows.UI.Color* value);
                        [propput] HRESULT OutlineColor([in] Windows.UI.Color value);
                        [propget] HRESULT Route([out] [retval] Windows.Services.Maps.MapRoute** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapRouteView)]
                    [uuid(F083ADDF-0066-4628-82FE-EA78C23CEC1E)]
                    interface IMapRouteViewFactory : IInspectable
                    {
                        HRESULT CreateInstanceWithMapRoute([in] Windows.Services.Maps.MapRoute* route, [in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapRouteView** instance);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapScene)]
                    [uuid(8BBA10A9-50E7-482C-9789-C688B178AC24)]
                    interface IMapScene : IInspectable
                    {
                        [propget] HRESULT TargetCamera([out] [retval] Windows.UI.Xaml.Controls.Maps.MapCamera** value);
                        [eventadd] HRESULT TargetCameraChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Controls.Maps.MapScene*, Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs*>* value, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT TargetCameraChanged([in] EventRegistrationToken token);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapScene)]
                    [uuid(03E4AD6C-86EC-44D9-9597-FB75B7DEBA0A)]
                    interface IMapSceneStatics : IInspectable
                    {
                        [overload("CreateFromBoundingBox")] HRESULT CreateFromBoundingBox([in] Windows.Devices.Geolocation.GeoboundingBox* bounds, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapScene** returnValue);
                        [overload("CreateFromBoundingBox")] HRESULT CreateFromBoundingBoxWithHeadingAndPitch([in] Windows.Devices.Geolocation.GeoboundingBox* bounds, [in] DOUBLE headingInDegrees, [in] DOUBLE pitchInDegrees, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapScene** returnValue);
                        HRESULT CreateFromCamera([in] Windows.UI.Xaml.Controls.Maps.MapCamera* camera, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapScene** returnValue);
                        [overload("CreateFromLocation")] HRESULT CreateFromLocation([in] Windows.Devices.Geolocation.Geopoint* location, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapScene** returnValue);
                        [overload("CreateFromLocation")] HRESULT CreateFromLocationWithHeadingAndPitch([in] Windows.Devices.Geolocation.Geopoint* location, [in] DOUBLE headingInDegrees, [in] DOUBLE pitchInDegrees, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapScene** returnValue);
                        [overload("CreateFromLocationAndRadius")] HRESULT CreateFromLocationAndRadius([in] Windows.Devices.Geolocation.Geopoint* location, [in] DOUBLE radiusInMeters, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapScene** returnValue);
                        [overload("CreateFromLocationAndRadius")] HRESULT CreateFromLocationAndRadiusWithHeadingAndPitch([in] Windows.Devices.Geolocation.Geopoint* location, [in] DOUBLE radiusInMeters, [in] DOUBLE headingInDegrees, [in] DOUBLE pitchInDegrees, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapScene** returnValue);
                        [overload("CreateFromLocations")] HRESULT CreateFromLocations([in] Windows.Foundation.Collections.IIterable<Windows.Devices.Geolocation.Geopoint*>* locations, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapScene** returnValue);
                        [overload("CreateFromLocations")] HRESULT CreateFromLocationsWithHeadingAndPitch([in] Windows.Foundation.Collections.IIterable<Windows.Devices.Geolocation.Geopoint*>* locations, [in] DOUBLE headingInDegrees, [in] DOUBLE pitchInDegrees, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapScene** returnValue);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapStyleSheet)]
                    [uuid(AE54B2BF-8991-42ED-8D58-20473DEEDE1D)]
                    interface IMapStyleSheet : IInspectable
                    {
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapStyleSheet)]
                    [uuid(ABBD00AD-0A1C-4335-82F4-61D936AA197D)]
                    interface IMapStyleSheetStatics : IInspectable
                    {
                        HRESULT Aerial([out] [retval] Windows.UI.Xaml.Controls.Maps.MapStyleSheet** returnValue);
                        HRESULT AerialWithOverlay([out] [retval] Windows.UI.Xaml.Controls.Maps.MapStyleSheet** returnValue);
                        HRESULT RoadLight([out] [retval] Windows.UI.Xaml.Controls.Maps.MapStyleSheet** returnValue);
                        HRESULT RoadDark([out] [retval] Windows.UI.Xaml.Controls.Maps.MapStyleSheet** returnValue);
                        HRESULT RoadHighContrastLight([out] [retval] Windows.UI.Xaml.Controls.Maps.MapStyleSheet** returnValue);
                        HRESULT RoadHighContrastDark([out] [retval] Windows.UI.Xaml.Controls.Maps.MapStyleSheet** returnValue);
                        HRESULT Combine([in] Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.Controls.Maps.MapStyleSheet*>* styleSheets, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapStyleSheet** returnValue);
                        HRESULT ParseFromJson([in] HSTRING styleAsJson, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapStyleSheet** returnValue);
                        HRESULT TryParseFromJson([in] HSTRING styleAsJson, [out] Windows.UI.Xaml.Controls.Maps.MapStyleSheet** styleSheet, [out] [retval] boolean* returnValue);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs)]
                    [uuid(DBF00472-E953-4FA8-97D0-EA86359057CF)]
                    interface IMapTargetCameraChangedEventArgs : IInspectable
                    {
                        [propget] HRESULT Camera([out] [retval] Windows.UI.Xaml.Controls.Maps.MapCamera** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 2.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs)]
                    [uuid(97C0B332-F2B6-460B-8D91-AC020A2383DD)]
                    interface IMapTargetCameraChangedEventArgs2 : IInspectable
                    {
                        [propget] HRESULT ChangeReason([out] [retval] Windows.UI.Xaml.Controls.Maps.MapCameraChangeReason* value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequest)]
                    [uuid(46733FBC-D89D-472B-B5F6-D7066B0584F4)]
                    interface IMapTileBitmapRequest : IInspectable
                    {
                        [propget] HRESULT PixelData([out] [retval] Windows.Storage.Streams.IRandomAccessStreamReference** value);
                        [propput] HRESULT PixelData([in] Windows.Storage.Streams.IRandomAccessStreamReference* value);
                        HRESULT GetDeferral([out] [retval] Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestDeferral** returnValue);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestDeferral)]
                    [uuid(FE370542-A4AC-4EFA-9665-0490B0CAFDD2)]
                    interface IMapTileBitmapRequestDeferral : IInspectable
                    {
                        HRESULT Complete();
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs)]
                    [uuid(337F691D-9B02-4AA2-8B1E-CC4D91719BF3)]
                    interface IMapTileBitmapRequestedEventArgs : IInspectable
                    {
                        [propget] HRESULT X([out] [retval] INT32* value);
                        [propget] HRESULT Y([out] [retval] INT32* value);
                        [propget] HRESULT ZoomLevel([out] [retval] INT32* value);
                        [propget] HRESULT Request([out] [retval] Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequest** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapTileDataSource)]
                    [uuid(C03D9F5E-BE1F-4C69-9969-79467A513C38)]
                    interface IMapTileDataSource : IInspectable
                    {
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapTileDataSource)]
                    [uuid(A3920FBD-E446-4648-A74D-FD2C5D557C06)]
                    interface IMapTileDataSourceFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapTileDataSource** instance);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapTileSource)]
                    [uuid(88A76E4E-2FDF-4567-9255-1100519C8D62)]
                    interface IMapTileSource : IInspectable
                    {
                        [propget] HRESULT DataSource([out] [retval] Windows.UI.Xaml.Controls.Maps.MapTileDataSource** value);
                        [propput] HRESULT DataSource([in] Windows.UI.Xaml.Controls.Maps.MapTileDataSource* value);
                        [propget] HRESULT Layer([out] [retval] Windows.UI.Xaml.Controls.Maps.MapTileLayer* value);
                        [propput] HRESULT Layer([in] Windows.UI.Xaml.Controls.Maps.MapTileLayer value);
                        [propget] HRESULT ZoomLevelRange([out] [retval] Windows.UI.Xaml.Controls.Maps.MapZoomLevelRange* value);
                        [propput] HRESULT ZoomLevelRange([in] Windows.UI.Xaml.Controls.Maps.MapZoomLevelRange value);
                        [propget] HRESULT Bounds([out] [retval] Windows.Devices.Geolocation.GeoboundingBox** value);
                        [propput] HRESULT Bounds([in] Windows.Devices.Geolocation.GeoboundingBox* value);
                        [propget] HRESULT AllowOverstretch([out] [retval] boolean* value);
                        [propput] HRESULT AllowOverstretch([in] boolean value);
                        [propget] HRESULT IsFadingEnabled([out] [retval] boolean* value);
                        [propput] HRESULT IsFadingEnabled([in] boolean value);
                        [propget] HRESULT IsTransparencyEnabled([out] [retval] boolean* value);
                        [propput] HRESULT IsTransparencyEnabled([in] boolean value);
                        [propget] HRESULT IsRetryEnabled([out] [retval] boolean* value);
                        [propput] HRESULT IsRetryEnabled([in] boolean value);
                        [propget] HRESULT ZIndex([out] [retval] INT32* value);
                        [propput] HRESULT ZIndex([in] INT32 value);
                        [propget] HRESULT TilePixelSize([out] [retval] INT32* value);
                        [propput] HRESULT TilePixelSize([in] INT32 value);
                        [propget] HRESULT Visible([out] [retval] boolean* value);
                        [propput] HRESULT Visible([in] boolean value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapTileSource)]
                    [uuid(CD7F811F-77FA-482B-9D34-71D31D465C48)]
                    interface IMapTileSourceFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapTileSource** instance);
                        HRESULT CreateInstanceWithDataSource([in] Windows.UI.Xaml.Controls.Maps.MapTileDataSource* dataSource, [in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapTileSource** instance);
                        HRESULT CreateInstanceWithDataSourceAndZoomRange([in] Windows.UI.Xaml.Controls.Maps.MapTileDataSource* dataSource, [in] Windows.UI.Xaml.Controls.Maps.MapZoomLevelRange zoomLevelRange, [in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapTileSource** instance);
                        HRESULT CreateInstanceWithDataSourceZoomRangeAndBounds([in] Windows.UI.Xaml.Controls.Maps.MapTileDataSource* dataSource, [in] Windows.UI.Xaml.Controls.Maps.MapZoomLevelRange zoomLevelRange, [in] Windows.Devices.Geolocation.GeoboundingBox* bounds, [in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapTileSource** instance);
                        HRESULT CreateInstanceWithDataSourceZoomRangeBoundsAndTileSize([in] Windows.UI.Xaml.Controls.Maps.MapTileDataSource* dataSource, [in] Windows.UI.Xaml.Controls.Maps.MapZoomLevelRange zoomLevelRange, [in] Windows.Devices.Geolocation.GeoboundingBox* bounds, [in] INT32 tileSizeInPixels, [in] IInspectable* outer, [out] IInspectable** inner, [out] [retval] Windows.UI.Xaml.Controls.Maps.MapTileSource** instance);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapTileSource)]
                    [uuid(93FCC93C-7035-4603-99B1-E659921B6093)]
                    interface IMapTileSourceStatics : IInspectable
                    {
                        [propget] HRESULT DataSourceProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT LayerProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ZoomLevelRangeProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT BoundsProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT AllowOverstretchProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IsFadingEnabledProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IsTransparencyEnabledProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IsRetryEnabledProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ZIndexProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT TilePixelSizeProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT VisibleProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapTileUriRequest)]
                    [uuid(17402335-3127-45B8-87A7-99F87D4E2745)]
                    interface IMapTileUriRequest : IInspectable
                    {
                        [propget] HRESULT Uri([out] [retval] Windows.Foundation.Uri** value);
                        [propput] HRESULT Uri([in] Windows.Foundation.Uri* value);
                        HRESULT GetDeferral([out] [retval] Windows.UI.Xaml.Controls.Maps.MapTileUriRequestDeferral** returnValue);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapTileUriRequestDeferral)]
                    [uuid(C117ADE0-BF3E-4C51-8FAA-4B593CF68EB2)]
                    interface IMapTileUriRequestDeferral : IInspectable
                    {
                        HRESULT Complete();
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs)]
                    [uuid(D2147B43-1BBF-4B98-8DD3-B7834E407E0D)]
                    interface IMapTileUriRequestedEventArgs : IInspectable
                    {
                        [propget] HRESULT X([out] [retval] INT32* value);
                        [propget] HRESULT Y([out] [retval] INT32* value);
                        [propget] HRESULT ZoomLevel([out] [retval] INT32* value);
                        [propget] HRESULT Request([out] [retval] Windows.UI.Xaml.Controls.Maps.MapTileUriRequest** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.StreetsideExperience)]
                    [uuid(A558AEC9-E30C-46C8-8116-484691675558)]
                    interface IStreetsideExperience : IInspectable
                    {
                        [propget] HRESULT AddressTextVisible([out] [retval] boolean* value);
                        [propput] HRESULT AddressTextVisible([in] boolean value);
                        [propget] HRESULT CursorVisible([out] [retval] boolean* value);
                        [propput] HRESULT CursorVisible([in] boolean value);
                        [propget] HRESULT OverviewMapVisible([out] [retval] boolean* value);
                        [propput] HRESULT OverviewMapVisible([in] boolean value);
                        [propget] HRESULT StreetLabelsVisible([out] [retval] boolean* value);
                        [propput] HRESULT StreetLabelsVisible([in] boolean value);
                        [propget] HRESULT ExitButtonVisible([out] [retval] boolean* value);
                        [propput] HRESULT ExitButtonVisible([in] boolean value);
                        [propget] HRESULT ZoomButtonsVisible([out] [retval] boolean* value);
                        [propput] HRESULT ZoomButtonsVisible([in] boolean value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.StreetsideExperience)]
                    [uuid(7A5BCF3C-649E-4342-9995-68A6CF5961A7)]
                    interface IStreetsideExperienceFactory : IInspectable
                    {
                        HRESULT CreateInstanceWithPanorama([in] Windows.UI.Xaml.Controls.Maps.StreetsidePanorama* panorama, [out] [retval] Windows.UI.Xaml.Controls.Maps.StreetsideExperience** instance);
                        HRESULT CreateInstanceWithPanoramaHeadingPitchAndFieldOfView([in] Windows.UI.Xaml.Controls.Maps.StreetsidePanorama* panorama, [in] DOUBLE headingInDegrees, [in] DOUBLE pitchInDegrees, [in] DOUBLE fieldOfViewInDegrees, [out] [retval] Windows.UI.Xaml.Controls.Maps.StreetsideExperience** instance);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.StreetsidePanorama)]
                    [uuid(6FE00FD8-AD60-4664-B539-B1069F16C5AF)]
                    interface IStreetsidePanorama : IInspectable
                    {
                        [propget] HRESULT Location([out] [retval] Windows.Devices.Geolocation.Geopoint** value);
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [exclusiveto(Windows.UI.Xaml.Controls.Maps.StreetsidePanorama)]
                    [uuid(D3B47F69-54B3-4EC5-B2A0-4F8204576507)]
                    interface IStreetsidePanoramaStatics : IInspectable
                    {
                        [overload("FindNearbyAsync")] HRESULT FindNearbyWithLocationAsync([in] Windows.Devices.Geolocation.Geopoint* location, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.UI.Xaml.Controls.Maps.StreetsidePanorama*>** returnValue);
                        [overload("FindNearbyAsync")] HRESULT FindNearbyWithLocationAndRadiusAsync([in] Windows.Devices.Geolocation.Geopoint* location, [in] DOUBLE radiusInMeters, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.UI.Xaml.Controls.Maps.StreetsidePanorama*>** returnValue);
                    }

                    [composable(Windows.UI.Xaml.Controls.Maps.ICustomMapTileDataSourceFactory, public, Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass CustomMapTileDataSource : Windows.UI.Xaml.Controls.Maps.MapTileDataSource
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.ICustomMapTileDataSource;
                    }

                    [composable(Windows.UI.Xaml.Controls.Maps.IHttpMapTileDataSourceFactory, public, Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass HttpMapTileDataSource : Windows.UI.Xaml.Controls.Maps.MapTileDataSource
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IHttpMapTileDataSource;
                    }

                    [composable(Windows.UI.Xaml.Controls.Maps.ILocalMapTileDataSourceFactory, public, Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass LocalMapTileDataSource : Windows.UI.Xaml.Controls.Maps.MapTileDataSource
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.ILocalMapTileDataSource;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapActualCameraChangedEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs;
                        [contract(Windows.Foundation.UniversalApiContract, 2.0)] interface Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs2;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapActualCameraChangingEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs;
                        [contract(Windows.Foundation.UniversalApiContract, 2.0)] interface Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs2;
                    }

                    [activatable(Windows.UI.Xaml.Controls.Maps.IMapBillboardFactory, Windows.Foundation.UniversalApiContract, 4.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                    [marshaling_behavior(agile)]
                    [static(Windows.UI.Xaml.Controls.Maps.IMapBillboardStatics, Windows.Foundation.UniversalApiContract, 4.0)]
                    [threading(both)]
                    runtimeclass MapBillboard : Windows.UI.Xaml.Controls.Maps.MapElement
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapBillboard;
                    }

                    [activatable(Windows.UI.Xaml.Controls.Maps.IMapCameraFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapCamera : Windows.UI.Xaml.DependencyObject
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapCamera;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 4.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapContextRequestedEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapContextRequestedEventArgs;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Windows.UI.Xaml.Controls.Maps.IMapControlStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                    [static(Windows.UI.Xaml.Controls.Maps.IMapControlStatics2, Windows.Foundation.UniversalApiContract, 1.0)]
                    [static(Windows.UI.Xaml.Controls.Maps.IMapControlStatics4, Windows.Foundation.UniversalApiContract, 3.0)]
                    [static(Windows.UI.Xaml.Controls.Maps.IMapControlStatics5, Windows.Foundation.UniversalApiContract, 4.0)]
                    [threading(both)]
                    runtimeclass MapControl : Windows.UI.Xaml.Controls.Control
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapControl;
                        [contract(Windows.Foundation.UniversalApiContract, 1.0)] interface Windows.UI.Xaml.Controls.Maps.IMapControl2;
                        [contract(Windows.Foundation.UniversalApiContract, 2.0)] interface Windows.UI.Xaml.Controls.Maps.IMapControl3;
                        [contract(Windows.Foundation.UniversalApiContract, 3.0)] interface Windows.UI.Xaml.Controls.Maps.IMapControl4;
                        [contract(Windows.Foundation.UniversalApiContract, 4.0)] interface Windows.UI.Xaml.Controls.Maps.IMapControl5;
                    }

                    [activatable(Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [contract(Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapControlBusinessLandmarkClickEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkClickEventArgs;
                    }

                    [activatable(Windows.Services.Maps.LocalSearchContract, 3.0)]
                    [contract(Windows.Services.Maps.LocalSearchContract, 3.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapControlBusinessLandmarkPointerEnteredEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkPointerEnteredEventArgs;
                    }

                    [activatable(Windows.Services.Maps.LocalSearchContract, 3.0)]
                    [contract(Windows.Services.Maps.LocalSearchContract, 3.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapControlBusinessLandmarkPointerExitedEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkPointerExitedEventArgs;
                    }

                    [activatable(Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [contract(Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapControlBusinessLandmarkRightTappedEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkRightTappedEventArgs;
                    }

                    [activatable(Windows.UI.Xaml.Controls.Maps.IMapControlDataHelperFactory, Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [contract(Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapControlDataHelper : Windows.UI.Xaml.DependencyObject
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapControlDataHelper;
                        [contract(Windows.Services.Maps.LocalSearchContract, 3.0)] interface Windows.UI.Xaml.Controls.Maps.IMapControlDataHelper2;
                    }

                    [activatable(Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [contract(Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapControlTransitFeatureClickEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureClickEventArgs;
                    }

                    [activatable(Windows.Services.Maps.LocalSearchContract, 3.0)]
                    [contract(Windows.Services.Maps.LocalSearchContract, 3.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapControlTransitFeaturePointerEnteredEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeaturePointerEnteredEventArgs;
                    }

                    [activatable(Windows.Services.Maps.LocalSearchContract, 3.0)]
                    [contract(Windows.Services.Maps.LocalSearchContract, 3.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapControlTransitFeaturePointerExitedEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeaturePointerExitedEventArgs;
                    }

                    [activatable(Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [contract(Windows.Services.Maps.LocalSearchContract, 2.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapControlTransitFeatureRightTappedEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureRightTappedEventArgs;
                    }

                    [composable(Windows.UI.Xaml.Controls.Maps.IMapCustomExperienceFactory, public, Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapCustomExperience : Windows.UI.Xaml.DependencyObject
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapCustomExperience;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapCustomExperienceChangedEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapCustomExperienceChangedEventArgs;
                    }

                    [composable(Windows.UI.Xaml.Controls.Maps.IMapElementFactory, public, Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Windows.UI.Xaml.Controls.Maps.IMapElementStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                    [static(Windows.UI.Xaml.Controls.Maps.IMapElementStatics2, Windows.Foundation.UniversalApiContract, 1.0)]
                    [threading(both)]
                    runtimeclass MapElement : Windows.UI.Xaml.DependencyObject
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapElement;
                        [contract(Windows.Foundation.UniversalApiContract, 1.0)] interface Windows.UI.Xaml.Controls.Maps.IMapElement2;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapElementClickEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapElementClickEventArgs;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapElementPointerEnteredEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapElementPointerEnteredEventArgs;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapElementPointerExitedEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapElementPointerExitedEventArgs;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Windows.UI.Xaml.Controls.Maps.IMapIconStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                    [static(Windows.UI.Xaml.Controls.Maps.IMapIconStatics2, Windows.Foundation.UniversalApiContract, 1.0)]
                    [threading(both)]
                    runtimeclass MapIcon : Windows.UI.Xaml.Controls.Maps.MapElement
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapIcon;
                        [contract(Windows.Foundation.UniversalApiContract, 1.0)] interface Windows.UI.Xaml.Controls.Maps.IMapIcon2;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapInputEventArgs : Windows.UI.Xaml.DependencyObject
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapInputEventArgs;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Windows.UI.Xaml.Controls.Maps.IMapItemsControlStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                    [threading(both)]
                    runtimeclass MapItemsControl : Windows.UI.Xaml.DependencyObject
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapItemsControl;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Windows.UI.Xaml.Controls.Maps.IMapPolygonStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                    [threading(both)]
                    runtimeclass MapPolygon : Windows.UI.Xaml.Controls.Maps.MapElement
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapPolygon;
                        [contract(Windows.Foundation.UniversalApiContract, 2.0)] interface Windows.UI.Xaml.Controls.Maps.IMapPolygon2;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Windows.UI.Xaml.Controls.Maps.IMapPolylineStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                    [threading(both)]
                    runtimeclass MapPolyline : Windows.UI.Xaml.Controls.Maps.MapElement
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapPolyline;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 2.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 2.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapRightTappedEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapRightTappedEventArgs;
                    }

                    [composable(Windows.UI.Xaml.Controls.Maps.IMapRouteViewFactory, public, Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapRouteView : Windows.UI.Xaml.DependencyObject
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapRouteView;
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Windows.UI.Xaml.Controls.Maps.IMapSceneStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                    [threading(both)]
                    runtimeclass MapScene : Windows.UI.Xaml.DependencyObject
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapScene;
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                    [marshaling_behavior(agile)]
                    [static(Windows.UI.Xaml.Controls.Maps.IMapStyleSheetStatics, Windows.Foundation.UniversalApiContract, 4.0)]
                    [threading(both)]
                    runtimeclass MapStyleSheet : Windows.UI.Xaml.DependencyObject
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapStyleSheet;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapTargetCameraChangedEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs;
                        [contract(Windows.Foundation.UniversalApiContract, 2.0)] interface Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs2;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapTileBitmapRequest
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequest;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapTileBitmapRequestDeferral
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestDeferral;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapTileBitmapRequestedEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestedEventArgs;
                    }

                    [composable(Windows.UI.Xaml.Controls.Maps.IMapTileDataSourceFactory, public, Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapTileDataSource : Windows.UI.Xaml.DependencyObject
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapTileDataSource;
                    }

                    [composable(Windows.UI.Xaml.Controls.Maps.IMapTileSourceFactory, public, Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                    [threading(both)]
                    runtimeclass MapTileSource : Windows.UI.Xaml.DependencyObject
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapTileSource;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapTileUriRequest
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapTileUriRequest;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapTileUriRequestDeferral
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestDeferral;
                    }

                    [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MapTileUriRequestedEventArgs
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestedEventArgs;
                    }

                    [activatable(Windows.UI.Xaml.Controls.Maps.IStreetsideExperienceFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass StreetsideExperience : Windows.UI.Xaml.Controls.Maps.MapCustomExperience
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IStreetsideExperience;
                    }

                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Windows.UI.Xaml.Controls.Maps.IStreetsidePanoramaStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                    [threading(both)]
                    runtimeclass StreetsidePanorama : Windows.UI.Xaml.DependencyObject
                    {
                        [default] interface Windows.UI.Xaml.Controls.Maps.IStreetsidePanorama;
                    }
                }
            }
        }
    }
}
