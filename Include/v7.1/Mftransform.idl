//------------------------------------------------------------------------------
// File: MFTransform.idl
//
// Desc: Define the interfaces for Media Foundation Transforms.  This file will be
//       processed by the MIDL tool to produce MFTransform.h and proxy-stub code.
//
// Copyright (c) 1999 - 2003, Microsoft Corporation.  All rights reserved.
//------------------------------------------------------------------------------

import "mfobjects.idl";

// Per-buffer flags that apply to input buffers
enum _MFT_INPUT_DATA_BUFFER_FLAGS {
    //
    // Not carried over from DMO (IMediaObject), but should be
    // reserved so no new MFT flag clashes with them:
    //
    // DMO_INPUT_DATA_BUFFER_SYNCPOINT       = 0x00000001,
    // DMO_INPUT_DATA_BUFFER_TIME            = 0x00000002,
    // DMO_INPUT_DATA_BUFFER_TIMELENGTH      = 0x00000004

    MFT_INPUT_DATA_BUFFER_PLACEHOLDER        = 0xFFFFFFFF // right now there are no flags defined
};

// Per-buffer flags that apply to output buffers.
enum _MFT_OUTPUT_DATA_BUFFER_FLAGS {
    //
    // Not carried over from DMO (IMediaObject), but should be
    // reserved so no new MFT flag clashes with them:
    //
    // DMO_OUTPUT_DATA_BUFFER_SYNCPOINT        = 0x00000001,
    // DMO_OUTPUT_DATA_BUFFER_TIME             = 0x00000002,
    // DMO_OUTPUT_DATA_BUFFER_TIMELENGTH       = 0x00000004,

    //
    // This flag means the object can produce more samples without any more input.
    //
    MFT_OUTPUT_DATA_BUFFER_INCOMPLETE       = 0x01000000,

    //
    // New for MFT
    //
    MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE    = 0x00000100,
    MFT_OUTPUT_DATA_BUFFER_STREAM_END       = 0x00000200,
    MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE        = 0x00000300
    
};

// Flags returned by GetInputStatusFlags()
enum _MFT_INPUT_STATUS_FLAGS {
    //
    // Carried over from DMO (IMediaObject)
    //

    //
    // ACCEPT_DATA indicates that the input stream is ready to accept
    // new data via ProcessInput().
    //
    MFT_INPUT_STATUS_ACCEPT_DATA   = 0x00000001
};

// Flags returned by GetOutputStatusFlags()
enum _MFT_OUTPUT_STATUS_FLAGS {
    //
    // New for MFT
    //

    //
    // SAMPLE_READY indicates that a sample is available on at least one
    // of the output streams, and a call to ProcessOutput will
    // retrieve it.
    //
    MFT_OUTPUT_STATUS_SAMPLE_READY   = 0x00000001
};

// Flags returned by GetInputStreamInfo()
enum _MFT_INPUT_STREAM_INFO_FLAGS {
    //
    // Carried over from DMO (IMediaObject)
    //
    MFT_INPUT_STREAM_WHOLE_SAMPLES              = 0x00000001,
    MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER   = 0x00000002,
    MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE          = 0x00000004,
    MFT_INPUT_STREAM_HOLDS_BUFFERS              = 0x00000008,

    //
    // New for MFT
    //
    MFT_INPUT_STREAM_DOES_NOT_ADDREF            = 0x00000100,
    MFT_INPUT_STREAM_REMOVABLE                  = 0x00000200,
    MFT_INPUT_STREAM_OPTIONAL                   = 0x00000400,
    MFT_INPUT_STREAM_PROCESSES_IN_PLACE         = 0x00000800
};

// Flags returned by GetOutputStreamInfo()
enum _MFT_OUTPUT_STREAM_INFO_FLAGS {
    //
    // Carried over from DMO (IMediaObject)
    //
    MFT_OUTPUT_STREAM_WHOLE_SAMPLES             = 0x00000001,
    MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER  = 0x00000002,
    MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE         = 0x00000004,
    MFT_OUTPUT_STREAM_DISCARDABLE               = 0x00000008,
    MFT_OUTPUT_STREAM_OPTIONAL                  = 0x00000010,

    //
    // New for MFT
    //
    MFT_OUTPUT_STREAM_PROVIDES_SAMPLES          = 0x00000100,
    MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES       = 0x00000200,
    MFT_OUTPUT_STREAM_LAZY_READ                 = 0x00000400,
    MFT_OUTPUT_STREAM_REMOVABLE                 = 0x00000800
};

//  SetType flags
enum _MFT_SET_TYPE_FLAGS {
    //
    // Carried over from DMO (IMediaObject)
    //
    MFT_SET_TYPE_TEST_ONLY   = 0x00000001,// check but don't set

    //
    // not carried over from DMO - use NULL type to unset.
    //
    //MFT_SET_TYPE_CLEAR       = 0x00000002 // unset
};

//
//  ProcessOutput() dwFlags (signals from caller to MFT)
//
enum _MFT_PROCESS_OUTPUT_FLAGS {
    //
    // Carried over from DMO (IMediaObject)
    //
    MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER   = 0x00000001 // discard this sample if pSample ptr is NULL.
};

//
// ProcessOutput() pdwStatus (output from MFT to caller)
//
enum _MFT_PROCESS_OUTPUT_STATUS {
    //
    // new for MFT
    //
    MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS               = 0x00000100 // Output flag
};

enum _MFT_DRAIN_TYPE {
    MFT_DRAIN_PRODUCE_TAILS     = 0x00000000,
    MFT_DRAIN_NO_TAILS          = 0x00000001
};

//
// used by GetStreamLimits - the transform returns it in *pdwInputMaximum or *pdwOutputMaximum
// to mean that the MFT has no theoretical stream limit.
//
cpp_quote( "#define MFT_STREAMS_UNLIMITED       0xFFFFFFFF" )

//
// Used by SetOutputBounds when the lower or upper limit are unbounded.
//
cpp_quote( "#define MFT_OUTPUT_BOUND_LOWER_UNBOUNDED MINLONGLONG" )
cpp_quote( "#define MFT_OUTPUT_BOUND_UPPER_UNBOUNDED MAXLONGLONG" )

typedef enum _MFT_MESSAGE_TYPE {
    //
    // commands - must be acted on
    //
    MFT_MESSAGE_COMMAND_FLUSH           = 0x00000000,
    MFT_MESSAGE_COMMAND_DRAIN           = 0x00000001,
    MFT_MESSAGE_SET_D3D_MANAGER         = 0x00000002,
#if (WINVER >= _WIN32_WINNT_WIN7)
    MFT_MESSAGE_DROP_SAMPLES            = 0x00000003,
#endif // (WINVER >= _WIN32_WINNT_WIN7)
    
    //
    // notifications - no action required; effect is transform-dependent
    //
    MFT_MESSAGE_NOTIFY_BEGIN_STREAMING  = 0x10000000,
    MFT_MESSAGE_NOTIFY_END_STREAMING    = 0x10000001,
    MFT_MESSAGE_NOTIFY_END_OF_STREAM    = 0x10000002,

    //
    // send by pipeline before processing the first sample
    //
    MFT_MESSAGE_NOTIFY_START_OF_STREAM    = 0x10000003,

#if (WINVER >= _WIN32_WINNT_WIN7)
    //
    // commands (applicable to async MFTs only) - must be acted on
    //
    MFT_MESSAGE_COMMAND_MARKER          = 0x20000000
#endif // (WINVER >= _WIN32_WINNT_WIN7)

} MFT_MESSAGE_TYPE;

typedef struct _MFT_INPUT_STREAM_INFO {
    LONGLONG    hnsMaxLatency;      // maximum time latency in 100ns increments
    DWORD       dwFlags;            // MFT_INPUT_STREAM_INFO_FLAGS
    DWORD       cbSize;             // size of each sample's buffer
    DWORD       cbMaxLookahead;     // max total bytes held
    DWORD       cbAlignment;        // buffer alignment requirement
} MFT_INPUT_STREAM_INFO;

typedef struct _MFT_OUTPUT_STREAM_INFO {
    DWORD       dwFlags;            // MFT_INPUT_STREAM_INFO_FLAGS
    DWORD       cbSize;             // size of each sample's buffer
    DWORD       cbAlignment;        // buffer alignment requirement
} MFT_OUTPUT_STREAM_INFO;

//
// Output buffer info structure: one of these must be passed in for each
// output stream with every ProcessOutput() call
// All [out] fields should be
// assumed undefined if ProcessOutput() failed
//
typedef struct _MFT_OUTPUT_DATA_BUFFER {
    DWORD       dwStreamID; // [in] which stream is this for
    IMFSample * pSample;    // [in/out] can be NULL
    DWORD       dwStatus;   // [out] MFT_OUTPUT_DATA_BUFFER_FLAGS (INCOMPLETE, etc.)
    IMFCollection * pEvents; // [out] Can be NULL.  Zero or more events produced by the MFT
} MFT_OUTPUT_DATA_BUFFER, *PMFT_OUTPUT_DATA_BUFFER;

cpp_quote( "//" )
cpp_quote( "// redefine all the method names to have MFT at the beginning so they don't class with DMO methods." )
cpp_quote( "//" )
cpp_quote( "#ifdef MFT_UNIQUE_METHOD_NAMES" )
cpp_quote( "#define GetStreamLimits         MFTGetStreamLimits" )
cpp_quote( "#define GetStreamCount          MFTGetStreamCount" )
cpp_quote( "#define GetStreamIDs            MFTGetStreamIDs" )
cpp_quote( "#define GetInputStreamInfo      MFTGetInputStreamInfo" )
cpp_quote( "#define GetOutputStreamInfo     MFTGetOutputStreamInfo" )
cpp_quote( "#define DeleteInputStream       MFTDeleteInputStream" )
cpp_quote( "#define AddInputStreams         MFTAddInputStreams" )
cpp_quote( "#define GetInputAvailableType   MFTGetInputAvailableType" )
cpp_quote( "#define GetOutputAvailableType  MFTGetOutputAvailableType" )
cpp_quote( "#define SetInputType            MFTSetInputType" )
cpp_quote( "#define SetOutputType           MFTSetOutputType" )
cpp_quote( "#define GetInputCurrentType     MFTGetInputCurrentType" )
cpp_quote( "#define GetOutputCurrentType    MFTGetOutputCurrentType" )
cpp_quote( "#define GetInputStatus          MFTGetInputStatus" )
cpp_quote( "#define GetOutputStatus         MFTGetOutputStatus" )
cpp_quote( "#define SetOutputBounds         MFTSetOutputBounds" )
cpp_quote( "#define ProcessEvent            MFTProcessEvent" )
cpp_quote( "#define ProcessMessage          MFTProcessMessage" )
cpp_quote( "#define ProcessInput            MFTProcessInput" )
cpp_quote( "#define ProcessOutput           MFTProcessOutput" )
cpp_quote( "#endif" )

//  Interface supported by media objects
[
    object,
    uuid(bf94c121-5b05-4e6f-8000-ba598961414d)
]
interface IMFTransform : IUnknown
{

//
// Stream enumeration
//
    HRESULT
    GetStreamLimits( 
        [out] DWORD *pdwInputMinimum,
        [out] DWORD *pdwInputMaximum,
        [out] DWORD *pdwOutputMinimum,
        [out] DWORD *pdwOutputMaximum
    );
    
    HRESULT 
    GetStreamCount(
        [out] DWORD *pcInputStreams,
        [out] DWORD *pcOutputStreams
    );

    HRESULT
    GetStreamIDs(
        DWORD dwInputIDArraySize,
        [out,size_is(dwInputIDArraySize)] DWORD *pdwInputIDs,
        DWORD dwOutputIDArraySize,
        [out,size_is(dwOutputIDArraySize)] DWORD *pdwOutputIDs
    );
    
    HRESULT 
    GetInputStreamInfo(
        DWORD                     dwInputStreamID,
        [out] MFT_INPUT_STREAM_INFO *   pStreamInfo
    );
    
    HRESULT 
    GetOutputStreamInfo(
        DWORD                     dwOutputStreamID, 
        [out] MFT_OUTPUT_STREAM_INFO *  pStreamInfo      
    );

    HRESULT
    GetAttributes(
        [out] IMFAttributes** pAttributes
    );

    HRESULT
    GetInputStreamAttributes(
        DWORD           dwInputStreamID,
        [out] IMFAttributes** pAttributes
    );

    HRESULT
    GetOutputStreamAttributes(
        DWORD           dwOutputStreamID,
        [out] IMFAttributes** pAttributes
    );

    HRESULT
    DeleteInputStream( 
        DWORD dwStreamID
    );

    HRESULT
    AddInputStreams( 
        DWORD   cStreams,
        [in]  DWORD * adwStreamIDs
    );


//
// Mediatypes
//
    //
    // GetxxxAvailableType - iterate through media types supported by a stream.
    //
    HRESULT 
    GetInputAvailableType(
        DWORD             dwInputStreamID,
        DWORD             dwTypeIndex, // 0-based
        [out] IMFMediaType **   ppType
    );
    HRESULT 
    GetOutputAvailableType(
        DWORD             dwOutputStreamID,
        DWORD             dwTypeIndex, // 0-based
        [out] IMFMediaType **   ppType
    );

    //
    // SetxxxType - tell the object the type of data it will work with.
    //
    HRESULT 
    SetInputType(
        DWORD               dwInputStreamID,
        [in]  IMFMediaType *pType,
        DWORD               dwFlags 
    );
    HRESULT 
    SetOutputType(
        DWORD               dwOutputStreamID,
        [in]  IMFMediaType *pType,
        DWORD               dwFlags 
    );

    //
    // GetxxxCurrentType - get the current type set for the given stream index.
    //
    HRESULT 
    GetInputCurrentType(
        DWORD                   dwInputStreamID,
        [out] IMFMediaType **   ppType
    );
    HRESULT 
    GetOutputCurrentType(
        DWORD                   dwOutputStreamID,
        [out] IMFMediaType **   ppType
    );

//
// Streaming / state methods
//
    // GetInputStatus - the only flag defined right now is MFT_INPUT_STATUS_ACCEPT_DATA.
    HRESULT 
    GetInputStatus(
        DWORD           dwInputStreamID,
        [out] DWORD *   pdwFlags // MFT_INPUT_STATUS_ACCEPT_DATA
    );

    // GetOutputStatus - the only flag defined right now is MFT_OUTPUT_STATUS_SAMPLE_READY.
    HRESULT 
    GetOutputStatus(
        [out] DWORD *pdwFlags 
    );

    //
    // SetOutputBounds - optional interface to tell transform the desired
    // range of output times desired. Implementation is optional.
    //
    HRESULT
    SetOutputBounds(
        LONGLONG hnsLowerBound,
        LONGLONG hnsUpperBound
    );

    HRESULT
    ProcessEvent(
        DWORD                   dwInputStreamID,
        [in] IMFMediaEvent *    pEvent 
    );

    //
    // ProcessMessage - used to send a notification or command to a transform
    //
    HRESULT
    ProcessMessage(
        MFT_MESSAGE_TYPE eMessage,
        ULONG_PTR        ulParam
    );
        
    //
    // Pass one new buffer to an input stream
    //
    [local] HRESULT 
    ProcessInput(
        DWORD       dwInputStreamID,
        IMFSample * pSample, 
        DWORD       dwFlags 
    );

    //
    // ProcessOutput() - generate output for current input buffers
    //
    // Output stream specific status information is returned in the
    // dwStatus member of each buffer wrapper structure.
    //
    [local] HRESULT 
    ProcessOutput(
        DWORD                       dwFlags, // MFT_PROCESS_OUTPUT_FLAGS
        DWORD                       cOutputBufferCount, // # returned by GetStreamCount()
        [in,out,size_is(cOutputBufferCount)]
            MFT_OUTPUT_DATA_BUFFER *pOutputSamples, // one per stream
        [out] DWORD *               pdwStatus  // MFT_PROCESS_OUTPUT_XXX
    );

};

cpp_quote("#if (WINVER >= _WIN32_WINNT_WIN7) ")
typedef struct _STREAM_MEDIUM
{
    GUID gidMedium;
    UINT32 unMediumInstance;
} STREAM_MEDIUM, *PSTREAM_MEDIUM;
cpp_quote("#endif // (WINVER >= _WIN32_WINNT_WIN7) ")

cpp_quote( "//" )
cpp_quote( "// Define the MFT methods back so we don't accidentally hose the IMediaObject interface." )
cpp_quote( "//" )
cpp_quote( "#ifdef MFT_UNIQUE_METHOD_NAMES" )
cpp_quote( "#undef GetStreamLimits        " )
cpp_quote( "#undef GetStreamCount         " )
cpp_quote( "#undef GetStreamIDs           " )
cpp_quote( "#undef GetInputStreamInfo     " )
cpp_quote( "#undef GetOutputStreamInfo    " )
cpp_quote( "#undef DeleteInputStream      " )
cpp_quote( "#undef AddInputStreams        " )
cpp_quote( "#undef GetInputAvailableType  " )
cpp_quote( "#undef GetOutputAvailableType " )
cpp_quote( "#undef SetInputType           " )
cpp_quote( "#undef SetOutputType          " )
cpp_quote( "#undef GetInputCurrentType    " )
cpp_quote( "#undef GetOutputCurrentType   " )
cpp_quote( "#undef GetInputStatus         " )
cpp_quote( "#undef GetOutputStatus        " )
cpp_quote( "#undef SetOutputBounds        " )
cpp_quote( "#undef ProcessMessage         " )
cpp_quote( "#undef ProcessInput           " )
cpp_quote( "#undef ProcessOutput          " )
cpp_quote( "#endif" )


//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
// GENERIC DMO PROPERTY KEYS
//

// All MFTs
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY PROPERTYKEY MFPKEY_CLSID = { { 0xc57a84c0, 0x1a80, 0x40a3, {0x97, 0xb5, 0x92, 0x72, 0xa4, 0x3, 0xc8, 0xae} }, 0x01 }; ")
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY PROPERTYKEY MFPKEY_CATEGORY = { { 0xc57a84c0, 0x1a80, 0x40a3, {0x97, 0xb5, 0x92, 0x72, 0xa4, 0x3, 0xc8, 0xae} }, 0x02 }; ")

// ExAttribute-supported MFTs
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY PROPERTYKEY MFPKEY_EXATTRIBUTE_SUPPORTED = { { 0x456fe843, 0x3c87, 0x40c0, {0x94, 0x9d, 0x14, 0x9, 0xc9, 0x7d, 0xab, 0x2c} }, 0x01 }; ")

// Audio Multichannel
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY PROPERTYKEY MFPKEY_MULTICHANNEL_CHANNEL_MASK  = { { 0x58bdaf8c, 0x3224, 0x4692, { 0x86, 0xd0, 0x44, 0xd6, 0x5c, 0x5b, 0xf8, 0x2b } }, 0x01 }; ")

///////////////////////////////////////////////////////////////////////////////
// GENERIC MFT ATTRIBUTES

// MF_SA_D3D_AWARE
// Data type: UINT32
// If present and set to a nonzero value, indicates that this transform is 
// D3D-aware and can accept a D3D manager via the MFT_MESSAGE_SET_D3D_MANAGER
// message.
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MF_SA_D3D_AWARE = { 0xeaa35c29,  0x775e, 0x488e, { 0x9b, 0x61, 0xb3, 0x28, 0x3e, 0x49, 0x58, 0x3b } }; ")

// MF_SA_REQUIRED_SAMPLE_COUNT
// Data type: UINT32
// If present, indicates the number of samples that an MFT requires to be 
// allocated.  This value is used if the next node downstream has an 
// IMFVideoSampleAllocator.
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MF_SA_REQUIRED_SAMPLE_COUNT = { 0x18802c61, 0x324b, 0x4952, { 0xab, 0xd0, 0x17, 0x6f, 0xf5, 0xc6, 0x96, 0xff } };" )

cpp_quote("#if (WINVER >= _WIN32_WINNT_WIN7) ")
// MF_TRANSFORM_ASYNC
// Data type: UINT32
// If present and set to a nonzero value, indicates that this MFT functions
// as an asynchronous MFT.  Only callers that understand how to call
// an asynchronous MFT can use this MFT; those callers need to set the
// MF_TRANSFORM_ASYNC_UNLOCK before making any IMFTransform calls.
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MF_TRANSFORM_ASYNC = { 0xf81a699a, 0x649a, 0x497d, { 0x8c, 0x73, 0x29, 0xf8, 0xfe, 0xd6, 0xad, 0x7a } };" )

// MF_TRANSFORM_ASYNC_UNLOCK
// Data type: UINT32
// This attribute is set by the caller (not the MFT) on the MFT's attributes
// store.  This is relevant only if the MFT has set the MF_TRANSFORM_ASYNC
// attribute to a nonzero value.  Callers that plan to use such an MFT must
// first set this attribute to 1; otherwise all IMFTransform calls will fail
// with MF_E_TRANSFORM_ASYNC_LOCKED.
// The Media Foundation pipeline will set this attribute if appropriate; 
// applications using this transform in a topology using the MF pipeline should
// not set it directly.
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MF_TRANSFORM_ASYNC_UNLOCK = { 0xe5666d6b, 0x3422, 0x4eb6, { 0xa4, 0x21, 0xda, 0x7d, 0xb1, 0xf8, 0xe2, 0x7 } };" )


// MF_TRANSFORM_FLAGS_Attribute
// Data type: UINT32
// This attribute is set on the attribute store of IMFActivate object 
// that MFTEnumEx creates for every enumerated MFT.  
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MF_TRANSFORM_FLAGS_Attribute = { 0x9359bb7e, 0x6275, 0x46c4, { 0xa0, 0x25, 0x1c, 0x1, 0xe4, 0x5f, 0x1a, 0x86 } };" )

// MF_TRANSFORM_CATEGORY_Attribute
// Data type: GUID
// MFTEnumEx stores this on the attribute store of IMFActivate object
// that MFTEnumEx creates for every enumerated MFT.
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MF_TRANSFORM_CATEGORY_Attribute = { 0xceabba49, 0x506d, 0x4757, { 0xa6, 0xff, 0x66, 0xc1, 0x84, 0x98, 0x7e, 0x4e } };" )

// MFT_TRANSFORM_CLSID_Attribute
// Data type: GUID
// MFTEnumEx stores this in the attribute store of IMFActivate object
// that MFTEnumEx creates for every enumerated MFT. CMFTransformActivate's 
// ActivateObject function creates an instance of the CoClass with this 
// CLSID that implements the MFT.
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MFT_TRANSFORM_CLSID_Attribute = { 0x6821c42b, 0x65a4, 0x4e82, { 0x99, 0xbc, 0x9a, 0x88, 0x20, 0x5e, 0xcd, 0xc } };" )

// MFT_INPUT_TYPES_Attributes
// Data type: BLOB
// MFTEnumEx stores this in the attribute store of IMFActivate object
// that MFTEnumEx creates for every enumerated MFT. This is a blob that contains
// Major and Subtype GUID paris for each type supported by the input pins of 
// the MFT.
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MFT_INPUT_TYPES_Attributes = { 0x4276c9b1, 0x759d, 0x4bf3, { 0x9c, 0xd0, 0xd, 0x72, 0x3d, 0x13, 0x8f, 0x96 } };" )

// MFT_OUTPUT_TYPES_Attributes
// Data type: BLOB
// MFTEnumEx stores this in the attribute store of IMFActivate object
// that MFTEnumEx creates for every enumerated MFT. This is a blob that contains
// Major and Subtype GUID paris for each type supported by the output pins of 
// the MFT.
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MFT_OUTPUT_TYPES_Attributes = { 0x8eae8cf3, 0xa44f, 0x4306, { 0xba, 0x5c, 0xbf, 0x5d, 0xda, 0x24, 0x28, 0x18 } };" )

// MFT_ENUM_HARDWARE_URL_Attribute
// Data type: WSTR
// MFTEnumEx stores this on the attribute store of IMFActivate object
// that MFTEnumEx creates for every enumerated MFT. Applications pass
// this attribute to source resolver to create media source that
// wraps a hardware. 
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MFT_ENUM_HARDWARE_URL_Attribute = { 0x2fb866ac, 0xb078, 0x4942, { 0xab, 0x6c, 0x0, 0x3d, 0x5, 0xcd, 0xa6, 0x74 } };" )

// MFT_FRIENDLY_NAME_Attribute
// Data type: WSTR
// MFTEnumEx stores this on the attribute store of IMFActivate object
// that MFTEnumEx creates for every enumerated MFT. Applications 
// use this attribute to display a readable name for the device
// represented by the HW MFT.
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MFT_FRIENDLY_NAME_Attribute = { 0x314ffbae, 0x5b41, 0x4c95, { 0x9c, 0x19, 0x4e, 0x7d, 0x58, 0x6f, 0xac, 0xe3 } };" )

// MFT_CONNECTED_STREAM_ATTRIBUTE
// Data type: IUnknown
// For hardware MFTs, this attribute on the output stream holds
// the IMFAttributes from the input stream.  The MFT can query
// this object for information it needs to perform medium negotiation
// or other functions dependant on information from the downstream MFT
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MFT_CONNECTED_STREAM_ATTRIBUTE  = { 0x71eeb820, 0xa59f, 0x4de2, {0xbc, 0xec, 0x38, 0xdb, 0x1d, 0xd6, 0x11, 0xa4} };" )
// MFT_CONNECTED_TO_HW_STREAM
// Data type: UINT32
// When two hardware MFT streams get connected, this attribute would be set to TRUE.
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MFT_CONNECTED_TO_HW_STREAM = { 0x34e6e728, 0x6d6, 0x4491, { 0xa5, 0x53, 0x47, 0x95, 0x65, 0xd, 0xb9, 0x12 } };" )

// MFT_PREFERRED_OUTPUTTYPE_Attribute
// Data type: IUnknown, which should be IMFMediaType
// Application uses this attribute to store 
// the HW encoder MFT preferred output media type 
// on the IMFActivate object that MFTEnumEx creates. 
// When HW encoder is created, the media type will be 
// set as its current output media type. 
// {7E700499-396A-49ee-B1B4-F628021E8C9D}
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MFT_PREFERRED_OUTPUTTYPE_Attribute = { 0x7e700499, 0x396a, 0x49ee, { 0xb1, 0xb4, 0xf6, 0x28, 0x2, 0x1e, 0x8c, 0x9d } };" )

// MFT_PROCESS_LOCAL_Attribute
// Data type: UINT32, which should be a BOOL
// This attribute is stored with a value of TRUE in the IActivate object for in-process registered MFTs
// {543186E4-4649-4e65-B588-4AA352AFF379}
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MFT_PROCESS_LOCAL_Attribute = { 0x543186e4, 0x4649, 0x4e65, { 0xb5, 0x88, 0x4a, 0xa3, 0x52, 0xaf, 0xf3, 0x79 } };" )

// MFT_PREFERRED_ENCODER_PROFILE
// Data type: IUnknown
// The IUnknown is a pointer to IMFAttributes interface.
// This attribute store stores preferred encoder profile
// settings.
// {53004909-1EF5-46d7-A18E-5A75F8B5905F}
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MFT_PREFERRED_ENCODER_PROFILE = { 0x53004909, 0x1ef5, 0x46d7, { 0xa1, 0x8e, 0x5a, 0x75, 0xf8, 0xb5, 0x90, 0x5f } };" )

// MFT_HW_TIMESTAMP_WITH_QPC_Attribute
// Data type: BOOLEAN
// When this attribute is TRUE, it indicates to a hardware MFT to timestamp outgoing samples with system time (QueryPerformanceCounter value)
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MFT_HW_TIMESTAMP_WITH_QPC_Attribute = { 0x8d030fb8, 0xcc43, 0x4258, { 0xa2, 0x2e, 0x92, 0x10, 0xbe, 0xf8, 0x9b, 0xe4 } };" )

// MFT_FIELDOFUSE_UNLOCK_Attribute
// Data type: IUnknown
// This attribute stores the interface to unlock the field-of-use MFTs.
// {8EC2E9FD-9148-410d-831E-702439461A8E}
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MFT_FIELDOFUSE_UNLOCK_Attribute = { 0x8ec2e9fd, 0x9148, 0x410d, { 0x83, 0x1e, 0x70, 0x24, 0x39, 0x46, 0x1a, 0x8e } };" )

// MFT_CODEC_MERIT_Attribute
// Data type: UINT32
// This attribute is attached to the MFT activator object and stores the merit if the MFT if it has one.
// {88a7cb15-7b07-4a34-9128-e64c6703c4d3}
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MFT_CODEC_MERIT_Attribute = { 0x88a7cb15, 0x7b07, 0x4a34, { 0x91, 0x28, 0xe6, 0x4c, 0x67, 0x3, 0xc4, 0xd3 } };" )

// MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE
// Data type: UINT32
// This attribute is attached to the MFT activator object and specifies if the MFT could be used in a transcode topology. If set to 1 then it 
// should be used only in a transcode topology. If set to 0 then it could be used in transcode or playback topology. Currently this is used
// only by devproxy based HW MFTs.
// {111EA8CD-B62A-4bdb-89F6-67FFCDC2458B}
cpp_quote( "EXTERN_C const DECLSPEC_SELECTANY GUID MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE = { 0x111ea8cd, 0xb62a, 0x4bdb, { 0x89, 0xf6, 0x67, 0xff, 0xcd, 0xc2, 0x45, 0x8b } };" )

///////////////////////////////////////////////////////////////////////////////
//
// Media Foundation MFT Activate creation functions
//
///////////////////////////////////////////////////////////////////////////////
cpp_quote( "STDAPI" )
cpp_quote( "MFCreateTransformActivate(" )
cpp_quote( "    __out IMFActivate** ppActivate" )
cpp_quote( "    );" )
cpp_quote("#endif // (WINVER >= _WIN32_WINNT_WIN7) ")

